/************************************************************************
Lab 9 Nios Software

Dong Kai Wang, Fall 2017
Christine Chen, Fall 2013

For use with ECE 385 Experiment 9
University of Illinois ECE Department
************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include "aes.h"

// Pointer to base address of AES module, make sure it matches Qsys
volatile unsigned int * AES_PTR = (unsigned int *) 0x00000100;

// Execution mode: 0 for testing, 1 for benchmarking
int run_mode = 0;


/*-------------------- Sub-functions goes here --------------------*/


/*	AddRoundKey
 *  Input: state[4*Nb], w[4*Nb*(Nr+1)], start (start index in w), Nb
 *  Output: state[4*Nb]
 */
void AddRoundKey(unsigned char * state, unsigned char * w, unsigned int start, unsigned int Nb)
{
	for (int i = 0; i < 4 * Nb; i ++) {
		state[i] = state[i] ^ w[start + i];
	}
}


/*	SubBytes
 *  Input: state[4*Nb], Nb
 *  Output: state[4*Nb]
 */
void SubBytes(unsigned char * state, unsigned int Nb)
{
	unsigned char row, col;

	for (int i = 0; i < 4 * Nb; i ++) {
		row = (state[i] & 0xf0) >> 4;		// Higher four bits for row
		col = state[i] & 0x0f;				// Lower four bits for column
		state[i] = aes_sbox[16 * row + col];
	}
}


/*	ShiftRows
 *  Input: state[4*Nb], Nb
 *  Output: state[4*Nb]
 */
void ShiftRows(unsigned char * state, unsigned int Nb)
{
	unsigned char state_copy[4*Nb];

	// Copy original state
	for (int i = 0; i < 4 * Nb; i ++) {
		state_copy[i] = state[i];
	}

	// Update the state
	for (int row = 0; row < 4; row++) {
		for (int col = 0; col < Nb; col++) {
			state[4 * ((col + Nb - row) % Nb) + row] = state_copy[4 * col + row];
		}
	}
}


/*-------------------- Helper functions --------------------*/

void RotWord(unsigned char * word)
{
	unsigned char temp = word[0];

	word[0] = word[1];
	word[1] = word[2];
	word[2] = word[3];
	word[3] = temp;
}

/*----------------------------------------------------------*/


/*	KeyExpansion
 *  Input: key[4*Nb], Nb, Nr
 *  Output: w[4*Nb*(Nr+1)]
 */
void KeyExpansion(unsigned char * key, unsigned char * w, unsigned int Nb, unsigned int Nr)
{
	unsigned char temp[4];

	// Fill first 4 words (4*4 byte) of schedule with original key
	for (int i = 0; i < 4 * Nb; i++) {
		w[i] = key[i];
	}

	// Fill remaining words of schedule
	// The unit of outer loop is word
	for (int i = Nb; i < Nb * (Nr+1); i++) {

		temp[0] = w[(i-1) * 4];
		temp[1] = w[(i-1) * 4 + 1];
		temp[2] = w[(i-1) * 4 + 2];
		temp[3] = w[(i-1) * 4 + 3];

		if (i % Nb == 0) {
			RotWord(temp);
			SubBytes(temp, 1);
			temp[0] = temp[0] ^ (Rcon[i / Nb] >> 24);
			temp[1] = temp[1] ^ (Rcon[i / Nb] >> 16);
			temp[2] = temp[2] ^ (Rcon[i / Nb] >> 8);
			temp[3] = temp[3] ^ Rcon[i / Nb];
		}

		w[i*4] = w[(i-Nb)*4] ^ temp[0];
		w[i*4 + 1] = w[(i-Nb)*4 + 1] ^ temp[1];
		w[i*4 + 2] = w[(i-Nb)*4 + 2] ^ temp[2];
		w[i*4 + 3] = w[(i-Nb)*4 + 3] ^ temp[3];
	}
}


/*	MixColumns
 *  Input: state[4*Nb], Nb
 *  Output: state[4*Nb]
 */
void MixColumns(unsigned char * state, unsigned int Nb)
{
	unsigned char a0, a1, a2, a3;

	for (int col = 0; col < Nb; col++) {

		a0 = state[4*col];
		a1 = state[4*col + 1];
		a2 = state[4*col + 2];
		a3 = state[4*col + 3];

		state[4*col] = gf_mul[a0][0] ^ gf_mul[a1][1] ^ a2 ^ a3;
		state[4*col + 1] = a0 ^ gf_mul[a1][0] ^ gf_mul[a2][1] ^ a3;
		state[4*col + 2] = a0 ^ a1 ^ gf_mul[a2][0] ^ gf_mul[a3][1];
		state[4*col + 3] = gf_mul[a0][1] ^ a1 ^ a2 ^ gf_mul[a3][0];
	}
}

/*----------------------------------------------------------*/

/** charToHex
 *  Convert a single character to the 4-bit value it represents.
 *  
 *  Input: a character c (e.g. 'A')
 *  Output: converted 4-bit value (e.g. 0xA) [Note: can be directly used as int]
 */
char charToHex(char c)
{
	char hex = c;

	if (hex >= '0' && hex <= '9')
		hex -= '0';
	else if (hex >= 'A' && hex <= 'F')
	{
		hex -= 'A';
		hex += 10;
	}
	else if (hex >= 'a' && hex <= 'f')
	{
		hex -= 'a';
		hex += 10;
	}
	return hex;
}


/** charsToHex
 *  Convert two characters to byte value it represents.
 *  Inputs must be 0-9, A-F, or a-f.
 *  
 *  Input: two characters c1 and c2 (e.g. 'A' and '7')
 *  Output: converted byte value (e.g. 0xA7)
 */
char charsToHex(char c1, char c2)
{
	char hex1 = charToHex(c1);
	char hex2 = charToHex(c2);
	return (hex1 << 4) + hex2;
}


// test function
// void test_point(unsigned char * a, unsigned int len,  int n)
// {
// 	printf("Test point %d: ", n);
// 	for (int i = 0; i < len; i++) {
// 		printf("%x", (a[i] & 0xf0) >> 4);
// 		printf("%x", (a[i] & 0x0f));
// 	}
// 	printf("\n");
// }

/** encrypt
 *  Perform AES encryption in software.
 *
 *  Input: msg_ascii - Pointer to 32x 8-bit char array that contains the input message in ASCII format
 *         key_ascii - Pointer to 32x 8-bit char array that contains the input key in ASCII format
 *  Output:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *               key - Pointer to 4x 32-bit int array that contains the input key
 */
void encrypt(unsigned char * msg_ascii, unsigned char * key_ascii, unsigned int * msg_enc, unsigned int * key)
{
	// Variable declaration [Note: the length of char is 1 byte]
	unsigned int Nk = 4;	// Number of 32-bit words in Chipher Key
	unsigned int Nb = 4;	// Number of columns in the State (i.e. msg)
	unsigned int Nr = 10; 	// Number of looping rounds for the 128-bit AES algorithm

	unsigned char state[4*Nb];		// Also the in (Plaintext)
	unsigned char key_0[4*Nb];		// Unsigned version of key
	unsigned char w[4*Nb*(Nr+1)];	// Cipher Key Schedule [Note: 1 word = 4 bytes]

	int n = 0;

	// First convert msg and key from ASCII format to unsigned char
	for (int i = 0; i < 16; i ++) {
		state[i] = charsToHex(msg_ascii[2 * i], msg_ascii[2 * i + 1]);
		key_0[i] = charsToHex(key_ascii[2 * i], key_ascii[2 * i + 1]);
	}

	// Main procedure
	KeyExpansion(key_0, w, Nb, Nr);
	AddRoundKey(state, w, 0, Nb);

	for (int round = 1; round < Nr; round++) {
		SubBytes(state, Nb);
		ShiftRows(state, Nb);
		MixColumns(state, Nb);
		AddRoundKey(state, w, 4 * round * Nb, Nb);
	}

	SubBytes(state, Nb);
	ShiftRows(state, Nb);
	AddRoundKey(state, w, 4 * Nr * Nb, Nb);

	// Write data to output variable
	for (int i = 0; i < Nb; i++) {
		msg_enc[i] = (state[4*i] << 24) + (state[4*i + 1] << 16) + (state[4*i + 2] << 8) + (state[4*i + 3]);
		key[i] = (key_0[4*i] << 24) + (key_0[4*i + 1] << 16) + (key_0[4*i + 2] << 8) + (key_0[4*i + 3]);
	}

}

/** decrypt
 *  Perform AES decryption in hardware.
 *
 *  Input:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *              key - Pointer to 4x 32-bit int array that contains the input key
 *  Output: msg_dec - Pointer to 4x 32-bit int array that contains the decrypted message
 */
void decrypt(unsigned int * msg_enc, unsigned int * msg_dec, unsigned int * key)
{
	// Implement this function
}

/** main
 *  Allows the user to enter the message, key, and select execution mode
 *
 */
int main()
{
	// Input Message and Key as 32x 8-bit ASCII Characters ([33] is for NULL terminator)
	unsigned char msg_ascii[33];
	unsigned char key_ascii[33];
	// Key, Encrypted Message, and Decrypted Message in 4x 32-bit Format to facilitate Read/Write to Hardware
	unsigned int key[4];
	unsigned int msg_enc[4];
	unsigned int msg_dec[4];

	// Access data from AES_slave
	volatile unsigned int * AES_PTR = (unsigned int *) 0x00000100;


	// Test code for AES_slave
	AES_PTR[10] = 0xDEADBEEF;
	if (AES_PTR[10] != 0xDEADBEEF)
		printf("Error !");

	printf("Select execution mode: 0 for testing, 1 for benchmarking: ");
	scanf("%d", &run_mode);

	if (run_mode == 0) {
		// Continuously Perform Encryption and Decryption
		while (1) {
			int i = 0;
			printf("\nEnter Message:\n");
			scanf("%s", msg_ascii);
			printf("\n");
			printf("\nEnter Key:\n");
			scanf("%s", key_ascii);
			printf("\n");
			encrypt(msg_ascii, key_ascii, msg_enc, key);
			printf("\nEncrpted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_enc[i]);
			}
			printf("\n");
			decrypt(msg_enc, msg_dec, key);
			printf("\nDecrypted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_dec[i]);
			}
			printf("\n");
		}
	}
	else {
		// Run the Benchmark
		int i = 0;
		int size_KB = 2;
		// Choose a random Plaintext and Key
		for (i = 0; i < 32; i++) {
			msg_ascii[i] = 'a';
			key_ascii[i] = 'b';
		}
		// Run Encryption
		clock_t begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			encrypt(msg_ascii, key_ascii, msg_enc, key);
		clock_t end = clock();
		double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		double speed = size_KB / time_spent;
		printf("Software Encryption Speed: %f KB/s \n", speed);
		// Run Decryption
		begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			decrypt(msg_enc, msg_dec, key);
		end = clock();
		time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		speed = size_KB / time_spent;
		printf("Hardware Encryption Speed: %f KB/s \n", speed);
	}

	// Send the 128-bit Key (Split into 4x 32-bit)
	AES_PTR[0] = key[0];
	AES_PTR[1] = key[1];
	AES_PTR[2] = key[2];
	AES_PTR[3] = key[3];

	return 0;
}





