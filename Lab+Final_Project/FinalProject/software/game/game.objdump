
game.elf:     file format elf32-littlenios2
game.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00018a60 memsz 0x00018a60 flags r-x
    LOAD off    0x00019a80 vaddr 0x10018a80 paddr 0x1001a690 align 2**12
         filesz 0x00001c10 memsz 0x00001c10 flags rw-
    LOAD off    0x0001c2a0 vaddr 0x1001c2a0 paddr 0x1001c2a0 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017208  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001648  10017438  10017438  00018438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c10  10018a80  1001a690  00019a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  1001c2a0  1001c2a0  0001c2a0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001b690  2**0
                  CONTENTS
  7 .sdram        00000000  1001c404  1001c404  0001b690  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001b690  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fd8  00000000  00000000  0001b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025df3  00000000  00000000  0001c690  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000978a  00000000  00000000  00042483  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c2e7  00000000  00000000  0004bc0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002718  00000000  00000000  00057ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003e62  00000000  00000000  0005a60c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000179dc  00000000  00000000  0005e46e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00075e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001930  00000000  00000000  00075e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007b5ea  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007b5ed  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007b5f9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007b5fa  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007b5fb  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007b5ff  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007b603  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007b607  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0007b612  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0007b61d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0007b628  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000036  00000000  00000000  0007b630  2**0
                  CONTENTS, READONLY
 30 .jdi          00005256  00000000  00000000  0007b666  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00077415  00000000  00000000  000808bc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10017438 l    d  .rodata	00000000 .rodata
10018a80 l    d  .rwdata	00000000 .rwdata
1001c2a0 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1001c404 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../game_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 boss.c
00000000 l    df *ABS*	00000000 character.c
00000000 l    df *ABS*	00000000 data.c
00000000 l    df *ABS*	00000000 helper.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
1001c2a0 l     O .bss	00000002 ctl_reg.3789
1001c2a2 l     O .bss	00000002 no_device.3790
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100187c6 l     O .rodata	00000010 zeroes.4404
1000a3a0 l     F .text	000000bc __sbprintf
100187d6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1000a5b0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000c108 l     F .text	00000008 __fp_unlock
1000c11c l     F .text	0000019c __sinit.part.1
1000c2b8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10018a80 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10018ec4 l     O .rwdata	00000020 lc_ctype_charset
10018ea4 l     O .rwdata	00000020 lc_message_charset
10018ee4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
10018808 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000f664 l     F .text	000000fc __sprint_r.part.0
1001892c l     O .rodata	00000010 zeroes.4349
10010ca0 l     F .text	000000bc __sbprintf
1001893c l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10014c18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10014d2c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10014d58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10014e4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10014f34 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10015020 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
100151fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
1001a680 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
100154a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
100155dc l     F .text	00000034 alt_dev_reg
100194cc l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
100158b8 l     F .text	0000020c altera_avalon_jtag_uart_irq
10015ac4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100163a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10016800 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10016960 l     F .text	0000003c alt_get_errno
1001699c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1001c2d8 g     O .bss	00000004 alt_instruction_exception_handler
100032f0 g     F .text	00000d14 change_event
1000eca8 g     F .text	00000074 _mprec_log10
1001a5ec g     O .rwdata	00000004 N_keycodes
1000ed94 g     F .text	0000008c __any_on
10011254 g     F .text	00000054 _isatty_r
10018814 g     O .rodata	00000028 __mprec_tinytens
10015138 g     F .text	0000007c alt_main
10007ec0 g     F .text	000000c0 _puts_r
1001c304 g     O .bss	00000100 alt_irq
100112a8 g     F .text	00000060 _lseek_r
1001a690 g       *ABS*	00000000 __flash_rwdata_start
100135f0 g     F .text	00000088 .hidden __eqdf2
1001c404 g       *ABS*	00000000 __alt_heap_start
10007e84 g     F .text	0000003c printf
100114c0 g     F .text	0000009c _wcrtomb_r
1000f524 g     F .text	0000005c __sseek
1000c468 g     F .text	00000010 __sinit
10011368 g     F .text	00000140 __swbuf_r
1001a5d0 g     O .rwdata	00000004 f_spell
1000cf3c g     F .text	0000007c _setlocale_r
1000c2c0 g     F .text	00000078 __sfmoreglue
100151d8 g     F .text	00000024 __malloc_unlock
1001a60c g     O .rwdata	00000004 N_prohibit_c
10007a50 g     F .text	00000080 UsbGetRetryCnt
1000dc0c g     F .text	0000015c memmove
10004cac g     F .text	00000088 IO_init
1000c450 g     F .text	00000018 _cleanup
1000dd68 g     F .text	000000a8 _Balloc
10017498 g     O .rodata	00000120 event_c_walk
1001a5b0 g     O .rwdata	00000004 c_attack
10013678 g     F .text	000000dc .hidden __gtdf2
10016d88 g     F .text	00000024 altera_nios2_gen2_irq_init
1001a5c0 g     O .rwdata	00000004 c_hitb
10000000 g     F .entry	0000000c __reset
1001a5b4 g     O .rwdata	00000004 c_dash
10000020 g       *ABS*	00000000 __flash_exceptions_start
1001a614 g     O .rwdata	00000004 N_cooling_c
100111f8 g     F .text	0000005c _fstat_r
1001a628 g     O .rwdata	00000004 v_run
1001a52c g     O .rwdata	00000004 GameControl_PTR
1001c2bc g     O .bss	00000004 errno
1000f4a0 g     F .text	00000008 __seofread
1001c2c4 g     O .bss	00000004 alt_argv
1002252c g       *ABS*	00000000 _gp
10015470 g     F .text	00000030 usleep
10017f18 g     O .rodata	00000180 event_s_spine
1001a530 g     O .rwdata	00000004 up
1001a604 g     O .rwdata	00000004 N1_event_b
10004780 g     F .text	00000178 set_state
1001934c g     O .rwdata	00000180 alt_fd_list
10016dac g     F .text	00000090 alt_find_dev
1000dac4 g     F .text	00000148 memcpy
1000c110 g     F .text	0000000c _cleanup_r
10014a30 g     F .text	000000dc .hidden __floatsidf
100168e4 g     F .text	0000007c alt_io_redirect
10013754 g     F .text	000000f4 .hidden __ltdf2
1001a5f8 g     O .rwdata	00000004 N_state_b
10017438 g       *ABS*	00000000 __DTOR_END__
10007f80 g     F .text	00000014 puts
10017008 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1001a5e0 g     O .rwdata	00000004 Bound_right
1001a634 g     O .rwdata	00000004 g
10017a38 g     O .rodata	00000180 event_b_dash
1000f384 g     F .text	00000074 __fpclassifyd
1000ec04 g     F .text	000000a4 __ratio
10010c84 g     F .text	0000001c __vfiprintf_internal
1001a598 g     O .rwdata	00000004 p_fall
10015cbc g     F .text	0000021c altera_avalon_jtag_uart_read
10004a04 g     F .text	00000088 free_prohibition
10007e54 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10007c48 g     F .text	00000064 .hidden __udivsi3
10014e88 g     F .text	000000ac isatty
1001a5c4 g     O .rwdata	00000004 f_inair
10018864 g     O .rodata	000000c8 __mprec_tens
1001a600 g     O .rwdata	00000004 N2_event_c
1000cfb8 g     F .text	0000000c __locale_charset
1001c2b8 g     O .bss	00000004 __malloc_top_pad
100070f8 g     F .text	00000268 UsbGetConfigDesc2
10017bb8 g     O .rodata	00000210 event_b_spine
1001a658 g     O .rwdata	00000004 __mb_cur_max
1000cfe8 g     F .text	0000000c _localeconv_r
1000e19c g     F .text	0000003c __i2b
1000c8ec g     F .text	000004c8 __sfvwrite_r
1001a53c g     O .rwdata	00000004 right
1000f3f8 g     F .text	00000054 _sbrk_r
10011308 g     F .text	00000060 _read_r
1001a540 g     O .rwdata	00000004 attack
1001a678 g     O .rwdata	00000004 alt_max_fd
10010eec g     F .text	000000f0 _fclose_r
1000c0d8 g     F .text	00000030 fflush
1001c2b4 g     O .bss	00000004 __malloc_max_sbrked_mem
1001a5f4 g     O .rwdata	00000004 N_state_c
1001a57c g     O .rwdata	00000004 skill
10004a8c g     F .text	00000154 set_event
10012374 g     F .text	000008ac .hidden __adddf3
1000e9ac g     F .text	0000010c __b2d
10011db0 g     F .text	000005c4 .hidden __umoddi3
1001505c g     F .text	000000dc lseek
10000a08 g     F .text	00000fd8 update_event_b
1001a650 g     O .rwdata	00000004 _global_impure_ptr
1000ee20 g     F .text	00000564 _realloc_r
1001c404 g       *ABS*	00000000 __bss_end
10016710 g     F .text	000000f0 alt_iic_isr_register
10016c80 g     F .text	00000108 alt_tick
10004e0c g     F .text	000002e8 read_keycode
100117b4 g     F .text	000005fc .hidden __udivdi3
10011154 g     F .text	00000024 _fputwc_r
1001883c g     O .rodata	00000028 __mprec_bigtens
1000df80 g     F .text	00000104 __s2b
1001a638 g     O .rwdata	00000004 fcount
10014b0c g     F .text	000000a8 .hidden __floatunsidf
1000e6ec g     F .text	00000060 __mcmp
10006b48 g     F .text	00000100 UsbSetAddress
1001a61c g     O .rwdata	00000004 N_system_flage
1000c488 g     F .text	00000018 __fp_lock_all
100166c4 g     F .text	0000004c alt_ic_irq_enabled
10016be4 g     F .text	0000009c alt_alarm_stop
1001a59c g     O .rwdata	00000004 p_dash
1001c2cc g     O .bss	00000004 alt_irq_active
1001a538 g     O .rwdata	00000004 left
1001a644 g     O .rwdata	00000004 id
100000fc g     F .exceptions	000000d4 alt_irq_handler
10019324 g     O .rwdata	00000028 alt_dev_null
10016380 g     F .text	00000020 alt_dcache_flush_all
1000e084 g     F .text	00000068 __hi0bits
10004da4 g     F .text	00000068 IO_read
1001a5d8 g     O .rwdata	00000004 f_jump_press
100149b0 g     F .text	00000080 .hidden __fixdfsi
1001a584 g     O .rwdata	00000004 p_stand
1001a624 g     O .rwdata	00000004 stage
1001a690 g       *ABS*	00000000 __ram_rwdata_end
1001a670 g     O .rwdata	00000008 alt_dev_list
100154dc g     F .text	00000100 write
10018a80 g       *ABS*	00000000 __ram_rodata_end
10014d94 g     F .text	000000b8 fstat
10013754 g     F .text	000000f4 .hidden __ledf2
10007ad0 g     F .text	00000080 UsbPrintMem
1000e464 g     F .text	00000140 __pow5mult
1000f778 g     F .text	0000150c ___vfiprintf_internal_r
1001c2ac g     O .bss	00000004 __nlocale_changed
10017708 g     O .rodata	000000c0 event_c_attack
10007cac g     F .text	00000058 .hidden __umodsi3
1001a5cc g     O .rwdata	00000004 f_spark_ori
1001c404 g       *ABS*	00000000 end
1001a58c g     O .rwdata	00000004 p_jump
100157f8 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
1001a55c g     O .rwdata	00000004 Ori
10017438 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10014bb4 g     F .text	00000064 .hidden __clzsi2
10015ed8 g     F .text	00000224 altera_avalon_jtag_uart_write
1000c478 g     F .text	00000004 __sfp_lock_acquire
1000d9e0 g     F .text	000000e4 memchr
100080a8 g     F .text	000022dc ___vfprintf_internal_r
1001a56c g     O .rwdata	00000004 Offy
10007460 g     F .text	00000100 UsbClassRequest
1000c5dc g     F .text	00000310 _free_r
1001a5bc g     O .rwdata	00000004 c_hitc
1000cfc4 g     F .text	00000010 __locale_mb_cur_max
10017284 g     F .text	00000180 __call_exitprocs
1001c2a8 g     O .bss	00000004 __mlocale_changed
1001a65c g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
1001a534 g     O .rwdata	00000004 down
1001c2d0 g     O .bss	00000004 _alt_tick_rate
10007fac g     F .text	00000064 rand
1001a594 g     O .rwdata	00000004 p_attack
1000e5a4 g     F .text	00000148 __lshift
1001c2d4 g     O .bss	00000004 _alt_nticks
10015238 g     F .text	00000104 read
10015648 g     F .text	0000004c alt_sys_init
1001716c g     F .text	00000118 __register_exitproc
1001a548 g     O .rwdata	00000004 jump
1001a580 g     O .rwdata	00000004 SparkF
1000e1d8 g     F .text	0000028c __multiply
10015b64 g     F .text	00000068 altera_avalon_jtag_uart_close
10007d04 g     F .text	00000028 .hidden __mulsi3
10018a80 g       *ABS*	00000000 __ram_rwdata_start
10017438 g       *ABS*	00000000 __ram_rodata_start
1001c2dc g     O .bss	00000028 __malloc_current_mallinfo
1000eab8 g     F .text	0000014c __d2b
1001a608 g     O .rwdata	00000004 N2_event_b
100046a4 g     F .text	000000dc write_spirit
10006c48 g     F .text	00000148 UsbGetDeviceDesc1
10015694 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10016f44 g     F .text	000000c4 alt_get_fd
10016228 g     F .text	00000158 alt_busy_sleep
10010dbc g     F .text	00000054 _close_r
1001a5a0 g     O .rwdata	00000004 p_spark
1001a554 g     O .rwdata	00000004 Vx
100170f0 g     F .text	0000007c memcmp
10015754 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1001c404 g       *ABS*	00000000 __alt_stack_base
100157a4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000a45c g     F .text	00000154 __swsetup_r
10012c20 g     F .text	000009d0 .hidden __divdf3
1000c338 g     F .text	00000118 __sfp
1001a574 g     O .rwdata	00000004 CenOffy
1000ed1c g     F .text	00000078 __copybits
1001a5dc g     O .rwdata	00000004 Bound_left
10018f1c g     O .rwdata	00000408 __malloc_av_
1000c484 g     F .text	00000004 __sinit_lock_release
1001a5e8 g     O .rwdata	00000004 Bound_down
10013848 g     F .text	0000086c .hidden __muldf3
1001a620 g     O .rwdata	00000004 N_boss_flage
1000f44c g     F .text	00000054 __sread
100079e8 g     F .text	00000068 UsbWaitTDListDone
10016e3c g     F .text	00000108 alt_find_file
100163dc g     F .text	000000a4 alt_dev_llist_insert
100151b4 g     F .text	00000024 __malloc_lock
100153c0 g     F .text	000000b0 sbrk
1000c07c g     F .text	0000005c _fflush_r
10010e10 g     F .text	000000dc _calloc_r
1001a618 g     O .rwdata	00000004 N_cooling_b
1001c2a0 g       *ABS*	00000000 __bss_start
1001a5ac g     O .rwdata	00000004 p_health
10007d2c g     F .text	00000128 memset
10005f38 g     F .text	00000ac0 main
1001c2c8 g     O .bss	00000004 alt_envp
1001c2b0 g     O .bss	00000004 __malloc_max_total_mem
100156f4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10007360 g     F .text	00000100 UsbSetConfig
100114a8 g     F .text	00000018 __swbuf
10007f94 g     F .text	00000018 srand
100048f8 g     F .text	00000080 set_address
1000f580 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10010fdc g     F .text	00000014 fclose
1000a7d8 g     F .text	00001688 _dtoa_r
1000d1d4 g     F .text	0000080c _malloc_r
1001161c g     F .text	00000030 __ascii_wctomb
1001a67c g     O .rwdata	00000004 alt_errno
1000cdb4 g     F .text	000000c4 _fwalk
10007b50 g     F .text	00000084 .hidden __divsi3
1000c4b8 g     F .text	00000124 _malloc_trim_r
10007560 g     F .text	00000148 UsbGetHidDesc
10017438 g       *ABS*	00000000 __CTOR_END__
1000f588 g     F .text	000000dc strcmp
10017438 g       *ABS*	00000000 __flash_rodata_start
1001a630 g     O .rwdata	00000004 v_fall
10017438 g       *ABS*	00000000 __DTOR_LIST__
10002288 g     F .text	00000950 movement
1001a5d4 g     O .rwdata	00000004 f_jump2
1001a544 g     O .rwdata	00000004 dash
100019e0 g     F .text	000008a8 change_event_b
100135f0 g     F .text	00000088 .hidden __nedf2
10006a50 g     F .text	00000044 UsbRead
10015610 g     F .text	00000038 alt_irq_init
1001533c g     F .text	00000084 alt_release_fd
1001894c g     O .rodata	00000100 .hidden __clz_tab
10017828 g     O .rodata	000000c0 event_c_jump2
1001c2a4 g     O .bss	00000004 _PathLocale
10002bd8 g     F .text	00000718 update_event
100170a4 g     F .text	00000014 atexit
1001a5e4 g     O .rwdata	00000004 Bound_up
10010d5c g     F .text	00000060 _write_r
1000cff4 g     F .text	00000018 setlocale
1001a654 g     O .rwdata	00000004 _impure_ptr
1001a570 g     O .rwdata	00000004 CenOffx
1001c2c0 g     O .bss	00000004 alt_argc
1000be60 g     F .text	0000021c __sflush_r
100164e0 g     F .text	00000060 _do_dtors
1000cfe0 g     F .text	00000008 __locale_cjk_lang
10017dc8 g     O .rodata	00000150 event_b_spark
10000020 g       .exceptions	00000000 alt_irq_entry
1000026c g     F .text	0000079c movement_b
10004978 g     F .text	0000008c set_prohibition
1000e948 g     F .text	00000064 __ulp
1000c4a0 g     F .text	00000018 __fp_unlock_all
1001a668 g     O .rwdata	00000008 alt_fs_list
1001a5fc g     O .rwdata	00000004 N1_event_c
100050f4 g     F .text	00000e44 game_main
100076a8 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000d00c g     F .text	0000000c localeconv
1001a64c g     O .rwdata	00000004 condition_2
1001a568 g     O .rwdata	00000004 Offx
1001a588 g     O .rwdata	00000004 p_walk
10016560 g     F .text	00000050 alt_ic_isr_register
1001a690 g       *ABS*	00000000 _edata
1001c404 g       *ABS*	00000000 _end
1001a640 g     O .rwdata	00000004 pvector
100069f8 g     F .text	00000058 UsbWrite
10010ff0 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10015bcc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1001a578 g     O .rwdata	00000004 Health
10016638 g     F .text	0000008c alt_ic_irq_disable
1000f4a8 g     F .text	0000007c __swrite
1001a660 g     O .rwdata	00000004 __malloc_trim_threshold
1000cfd4 g     F .text	0000000c __locale_msgcharset
100170b8 g     F .text	00000038 exit
1000ce78 g     F .text	000000c4 _fwalk_reent
1000e74c g     F .text	000001fc __mdiff
10017678 g     O .rodata	00000090 event_c_fall
10007bd4 g     F .text	00000074 .hidden __modsi3
1001a63c g     O .rwdata	00000004 fnum
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000c47c g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1001a550 g     O .rwdata	00000004 Cy
1001a610 g     O .rwdata	00000004 N_prohibit_b
1001a558 g     O .rwdata	00000004 Vy
10004d34 g     F .text	00000070 IO_write
10004004 g     F .text	000006a0 initial
10004be0 g     F .text	000000cc clean_event
10017404 g     F .text	00000034 _exit
100160fc g     F .text	0000012c alt_alarm_start
1001a5c8 g     O .rwdata	00000004 f_dash
1001a5b8 g     O .rwdata	00000004 c_stiff
100116a8 g     F .text	0000010c .hidden __muldi3
1000d018 g     F .text	000001bc __smakebuf_r
10017438 g     O .rodata	00000060 event_c_stand
1001a590 g     O .rwdata	00000004 p_jump2
10008010 g     F .text	00000098 strlen
10016a88 g     F .text	0000015c open
1001a648 g     O .rwdata	00000004 condition_1
100177c8 g     O .rodata	00000060 event_c_dash
10013678 g     F .text	000000dc .hidden __gedf2
1001a54c g     O .rwdata	00000004 Cx
1001a564 g     O .rwdata	00000004 Ceny
1001a664 g     O .rwdata	00000004 __wctomb
100178e8 g     O .rodata	00000150 event_b_stand
1000f760 g     F .text	00000018 __sprint_r
10016540 g     F .text	00000020 alt_icache_flush_all
1001a5f0 g     O .rwdata	00000004 N_spirit
1001a684 g     O .rwdata	00000004 alt_priority_mask
1001a5a8 g     O .rwdata	00000004 p_explosion
100165b0 g     F .text	00000088 alt_ic_irq_enable
1000a384 g     F .text	0000001c __vfprintf_internal
100175b8 g     O .rodata	000000c0 event_c_jump
1001164c g     F .text	0000005c _wctomb_r
100140b4 g     F .text	000008fc .hidden __subdf3
1001a62c g     O .rwdata	00000004 v_dash
1000e0ec g     F .text	000000b0 __lo0bits
10006f68 g     F .text	00000190 UsbGetConfigDesc1
1001a688 g     O .rwdata	00000008 alt_alarm_list
10016480 g     F .text	00000060 _do_ctors
10006a94 g     F .text	000000b4 UsbSoftReset
1001a560 g     O .rwdata	00000004 Cenx
1001155c g     F .text	000000c0 wcrtomb
10014c54 g     F .text	000000d8 close
10006d90 g     F .text	000001d8 UsbGetDeviceDesc2
1001a5a4 g     O .rwdata	00000004 p_spine
10014f9c g     F .text	00000084 alt_load
10011178 g     F .text	00000080 fputwc
1000c480 g     F .text	00000004 __sinit_lock_acquire
1000de38 g     F .text	00000148 __multadd
1000de10 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	008400b4 	movhi	r2,4098
10000140:	10b0c104 	addi	r2,r2,-15612
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	008400b4 	movhi	r2,4098
10000158:	10b0c104 	addi	r2,r2,-15612
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a76b17 	ldw	r2,-25172(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a76b17 	ldw	r2,-25172(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	068400b4 	movhi	gp,4098
    ori gp, gp, %lo(_gp)
1000023c:	d6894b14 	ori	gp,gp,9516
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	10b0a814 	ori	r2,r2,49824

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18f10114 	ori	r3,r3,50180

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	0014f9c0 	call	10014f9c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	00151380 	call	10015138 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <movement_b>:
    long long unsigned int event_b[N1_event_b][N2_event_b],
    int prohibit_b[N_prohibit_b],
    int clock,
    int system_flage[N_system_flage]
)
{
1000026c:	defffa04 	addi	sp,sp,-24
10000270:	df000515 	stw	fp,20(sp)
10000274:	df000504 	addi	fp,sp,20
10000278:	e13ffc15 	stw	r4,-16(fp)
1000027c:	e17ffd15 	stw	r5,-12(fp)
10000280:	e1bffe15 	stw	r6,-8(fp)
10000284:	e1ffff15 	stw	r7,-4(fp)


// Manage the movement of character
void movement_b(
    int state_b[N_state_b],
    long long unsigned int event_b[N1_event_b][N2_event_b],
10000288:	d1203717 	ldw	r4,-32548(gp)
1000028c:	213fffc4 	addi	r4,r4,-1
#include "boss.h"
#include "helper.h"


// Manage the movement of character
void movement_b(
10000290:	e13ffb15 	stw	r4,-20(fp)
10000294:	d1203717 	ldw	r4,-32548(gp)
10000298:	2011883a 	mov	r8,r4
1000029c:	0013883a 	mov	r9,zero
100002a0:	4008d6ba 	srli	r4,r8,26
100002a4:	480691ba 	slli	r3,r9,6
100002a8:	20c6b03a 	or	r3,r4,r3
100002ac:	400491ba 	slli	r2,r8,6
    // if (prohibit_b[Vx] == 0) {
    //     state_b[Vx] = 0;
    // }

    // Update Vy
    if (state_b[Vy] <= v_fall && prohibit_b[Vy] == 0) {
100002b0:	d0a00b17 	ldw	r2,-32724(gp)
100002b4:	1085883a 	add	r2,r2,r2
100002b8:	1085883a 	add	r2,r2,r2
100002bc:	1007883a 	mov	r3,r2
100002c0:	e0bffc17 	ldw	r2,-16(fp)
100002c4:	10c5883a 	add	r2,r2,r3
100002c8:	10800017 	ldw	r2,0(r2)
100002cc:	d0e04117 	ldw	r3,-32508(gp)
100002d0:	18801816 	blt	r3,r2,10000334 <movement_b+0xc8>
100002d4:	d0a00b17 	ldw	r2,-32724(gp)
100002d8:	1085883a 	add	r2,r2,r2
100002dc:	1085883a 	add	r2,r2,r2
100002e0:	1007883a 	mov	r3,r2
100002e4:	e0bffe17 	ldw	r2,-8(fp)
100002e8:	10c5883a 	add	r2,r2,r3
100002ec:	10800017 	ldw	r2,0(r2)
100002f0:	1000101e 	bne	r2,zero,10000334 <movement_b+0xc8>
        state_b[Vy] += g;
100002f4:	d0a00b17 	ldw	r2,-32724(gp)
100002f8:	1085883a 	add	r2,r2,r2
100002fc:	1085883a 	add	r2,r2,r2
10000300:	1007883a 	mov	r3,r2
10000304:	e0bffc17 	ldw	r2,-16(fp)
10000308:	10c7883a 	add	r3,r2,r3
1000030c:	d0a00b17 	ldw	r2,-32724(gp)
10000310:	1085883a 	add	r2,r2,r2
10000314:	1085883a 	add	r2,r2,r2
10000318:	1009883a 	mov	r4,r2
1000031c:	e0bffc17 	ldw	r2,-16(fp)
10000320:	1105883a 	add	r2,r2,r4
10000324:	11000017 	ldw	r4,0(r2)
10000328:	d0a04217 	ldw	r2,-32504(gp)
1000032c:	2085883a 	add	r2,r4,r2
10000330:	18800015 	stw	r2,0(r3)
    }
    if (state_b[Vy] >= v_fall && prohibit_b[Vy] == 0) {
10000334:	d0a00b17 	ldw	r2,-32724(gp)
10000338:	1085883a 	add	r2,r2,r2
1000033c:	1085883a 	add	r2,r2,r2
10000340:	1007883a 	mov	r3,r2
10000344:	e0bffc17 	ldw	r2,-16(fp)
10000348:	10c5883a 	add	r2,r2,r3
1000034c:	10c00017 	ldw	r3,0(r2)
10000350:	d0a04117 	ldw	r2,-32508(gp)
10000354:	18801016 	blt	r3,r2,10000398 <movement_b+0x12c>
10000358:	d0a00b17 	ldw	r2,-32724(gp)
1000035c:	1085883a 	add	r2,r2,r2
10000360:	1085883a 	add	r2,r2,r2
10000364:	1007883a 	mov	r3,r2
10000368:	e0bffe17 	ldw	r2,-8(fp)
1000036c:	10c5883a 	add	r2,r2,r3
10000370:	10800017 	ldw	r2,0(r2)
10000374:	1000081e 	bne	r2,zero,10000398 <movement_b+0x12c>
        state_b[Vy] = v_fall;
10000378:	d0a00b17 	ldw	r2,-32724(gp)
1000037c:	1085883a 	add	r2,r2,r2
10000380:	1085883a 	add	r2,r2,r2
10000384:	1007883a 	mov	r3,r2
10000388:	e0bffc17 	ldw	r2,-16(fp)
1000038c:	10c5883a 	add	r2,r2,r3
10000390:	d0e04117 	ldw	r3,-32508(gp)
10000394:	10c00015 	stw	r3,0(r2)
    }

    // Correct Cx, Cy
    if (state_b[Ori] == 0) {
10000398:	d0a00c17 	ldw	r2,-32720(gp)
1000039c:	1085883a 	add	r2,r2,r2
100003a0:	1085883a 	add	r2,r2,r2
100003a4:	1007883a 	mov	r3,r2
100003a8:	e0bffc17 	ldw	r2,-16(fp)
100003ac:	10c5883a 	add	r2,r2,r3
100003b0:	10800017 	ldw	r2,0(r2)
100003b4:	10002d1e 	bne	r2,zero,1000046c <movement_b+0x200>
        state_b[Cx] = state_b[Cenx] - state_b[CenOffx];
100003b8:	d0a00817 	ldw	r2,-32736(gp)
100003bc:	1085883a 	add	r2,r2,r2
100003c0:	1085883a 	add	r2,r2,r2
100003c4:	1007883a 	mov	r3,r2
100003c8:	e0bffc17 	ldw	r2,-16(fp)
100003cc:	10c7883a 	add	r3,r2,r3
100003d0:	d0a00d17 	ldw	r2,-32716(gp)
100003d4:	1085883a 	add	r2,r2,r2
100003d8:	1085883a 	add	r2,r2,r2
100003dc:	1009883a 	mov	r4,r2
100003e0:	e0bffc17 	ldw	r2,-16(fp)
100003e4:	1105883a 	add	r2,r2,r4
100003e8:	11000017 	ldw	r4,0(r2)
100003ec:	d0a01117 	ldw	r2,-32700(gp)
100003f0:	1085883a 	add	r2,r2,r2
100003f4:	1085883a 	add	r2,r2,r2
100003f8:	100b883a 	mov	r5,r2
100003fc:	e0bffc17 	ldw	r2,-16(fp)
10000400:	1145883a 	add	r2,r2,r5
10000404:	10800017 	ldw	r2,0(r2)
10000408:	2085c83a 	sub	r2,r4,r2
1000040c:	18800015 	stw	r2,0(r3)
        state_b[Cy] = state_b[Ceny] - state_b[CenOffy];
10000410:	d0a00917 	ldw	r2,-32732(gp)
10000414:	1085883a 	add	r2,r2,r2
10000418:	1085883a 	add	r2,r2,r2
1000041c:	1007883a 	mov	r3,r2
10000420:	e0bffc17 	ldw	r2,-16(fp)
10000424:	10c7883a 	add	r3,r2,r3
10000428:	d0a00e17 	ldw	r2,-32712(gp)
1000042c:	1085883a 	add	r2,r2,r2
10000430:	1085883a 	add	r2,r2,r2
10000434:	1009883a 	mov	r4,r2
10000438:	e0bffc17 	ldw	r2,-16(fp)
1000043c:	1105883a 	add	r2,r2,r4
10000440:	11000017 	ldw	r4,0(r2)
10000444:	d0a01217 	ldw	r2,-32696(gp)
10000448:	1085883a 	add	r2,r2,r2
1000044c:	1085883a 	add	r2,r2,r2
10000450:	100b883a 	mov	r5,r2
10000454:	e0bffc17 	ldw	r2,-16(fp)
10000458:	1145883a 	add	r2,r2,r5
1000045c:	10800017 	ldw	r2,0(r2)
10000460:	2085c83a 	sub	r2,r4,r2
10000464:	18800015 	stw	r2,0(r3)
10000468:	00003406 	br	1000053c <movement_b+0x2d0>
    } else {
        state_b[Cx] = state_b[Cenx] - state_b[Offx] + state_b[CenOffx];
1000046c:	d0a00817 	ldw	r2,-32736(gp)
10000470:	1085883a 	add	r2,r2,r2
10000474:	1085883a 	add	r2,r2,r2
10000478:	1007883a 	mov	r3,r2
1000047c:	e0bffc17 	ldw	r2,-16(fp)
10000480:	10c7883a 	add	r3,r2,r3
10000484:	d0a00d17 	ldw	r2,-32716(gp)
10000488:	1085883a 	add	r2,r2,r2
1000048c:	1085883a 	add	r2,r2,r2
10000490:	1009883a 	mov	r4,r2
10000494:	e0bffc17 	ldw	r2,-16(fp)
10000498:	1105883a 	add	r2,r2,r4
1000049c:	11000017 	ldw	r4,0(r2)
100004a0:	d0a00f17 	ldw	r2,-32708(gp)
100004a4:	1085883a 	add	r2,r2,r2
100004a8:	1085883a 	add	r2,r2,r2
100004ac:	100b883a 	mov	r5,r2
100004b0:	e0bffc17 	ldw	r2,-16(fp)
100004b4:	1145883a 	add	r2,r2,r5
100004b8:	10800017 	ldw	r2,0(r2)
100004bc:	2089c83a 	sub	r4,r4,r2
100004c0:	d0a01117 	ldw	r2,-32700(gp)
100004c4:	1085883a 	add	r2,r2,r2
100004c8:	1085883a 	add	r2,r2,r2
100004cc:	100b883a 	mov	r5,r2
100004d0:	e0bffc17 	ldw	r2,-16(fp)
100004d4:	1145883a 	add	r2,r2,r5
100004d8:	10800017 	ldw	r2,0(r2)
100004dc:	2085883a 	add	r2,r4,r2
100004e0:	18800015 	stw	r2,0(r3)
        state_b[Cy] = state_b[Ceny] - state_b[CenOffy];
100004e4:	d0a00917 	ldw	r2,-32732(gp)
100004e8:	1085883a 	add	r2,r2,r2
100004ec:	1085883a 	add	r2,r2,r2
100004f0:	1007883a 	mov	r3,r2
100004f4:	e0bffc17 	ldw	r2,-16(fp)
100004f8:	10c7883a 	add	r3,r2,r3
100004fc:	d0a00e17 	ldw	r2,-32712(gp)
10000500:	1085883a 	add	r2,r2,r2
10000504:	1085883a 	add	r2,r2,r2
10000508:	1009883a 	mov	r4,r2
1000050c:	e0bffc17 	ldw	r2,-16(fp)
10000510:	1105883a 	add	r2,r2,r4
10000514:	11000017 	ldw	r4,0(r2)
10000518:	d0a01217 	ldw	r2,-32696(gp)
1000051c:	1085883a 	add	r2,r2,r2
10000520:	1085883a 	add	r2,r2,r2
10000524:	100b883a 	mov	r5,r2
10000528:	e0bffc17 	ldw	r2,-16(fp)
1000052c:	1145883a 	add	r2,r2,r5
10000530:	10800017 	ldw	r2,0(r2)
10000534:	2085c83a 	sub	r2,r4,r2
10000538:	18800015 	stw	r2,0(r3)
    }
            
    // Update x coordinate
    state_b[Cx] += state_b[Vx];
1000053c:	d0a00817 	ldw	r2,-32736(gp)
10000540:	1085883a 	add	r2,r2,r2
10000544:	1085883a 	add	r2,r2,r2
10000548:	1007883a 	mov	r3,r2
1000054c:	e0bffc17 	ldw	r2,-16(fp)
10000550:	10c7883a 	add	r3,r2,r3
10000554:	d0a00817 	ldw	r2,-32736(gp)
10000558:	1085883a 	add	r2,r2,r2
1000055c:	1085883a 	add	r2,r2,r2
10000560:	1009883a 	mov	r4,r2
10000564:	e0bffc17 	ldw	r2,-16(fp)
10000568:	1105883a 	add	r2,r2,r4
1000056c:	11000017 	ldw	r4,0(r2)
10000570:	d0a00a17 	ldw	r2,-32728(gp)
10000574:	1085883a 	add	r2,r2,r2
10000578:	1085883a 	add	r2,r2,r2
1000057c:	100b883a 	mov	r5,r2
10000580:	e0bffc17 	ldw	r2,-16(fp)
10000584:	1145883a 	add	r2,r2,r5
10000588:	10800017 	ldw	r2,0(r2)
1000058c:	2085883a 	add	r2,r4,r2
10000590:	18800015 	stw	r2,0(r3)
    if (state_b[Cx] <= Bound_left) {
10000594:	d0a00817 	ldw	r2,-32736(gp)
10000598:	1085883a 	add	r2,r2,r2
1000059c:	1085883a 	add	r2,r2,r2
100005a0:	1007883a 	mov	r3,r2
100005a4:	e0bffc17 	ldw	r2,-16(fp)
100005a8:	10c5883a 	add	r2,r2,r3
100005ac:	10800017 	ldw	r2,0(r2)
100005b0:	d0e02c17 	ldw	r3,-32592(gp)
100005b4:	18801716 	blt	r3,r2,10000614 <movement_b+0x3a8>
        state_b[Cx] = Bound_left;
100005b8:	d0a00817 	ldw	r2,-32736(gp)
100005bc:	1085883a 	add	r2,r2,r2
100005c0:	1085883a 	add	r2,r2,r2
100005c4:	1007883a 	mov	r3,r2
100005c8:	e0bffc17 	ldw	r2,-16(fp)
100005cc:	10c5883a 	add	r2,r2,r3
100005d0:	d0e02c17 	ldw	r3,-32592(gp)
100005d4:	10c00015 	stw	r3,0(r2)
        if (state_b[Vx] < 0) {
100005d8:	d0a00a17 	ldw	r2,-32728(gp)
100005dc:	1085883a 	add	r2,r2,r2
100005e0:	1085883a 	add	r2,r2,r2
100005e4:	1007883a 	mov	r3,r2
100005e8:	e0bffc17 	ldw	r2,-16(fp)
100005ec:	10c5883a 	add	r2,r2,r3
100005f0:	10800017 	ldw	r2,0(r2)
100005f4:	1000070e 	bge	r2,zero,10000614 <movement_b+0x3a8>
        	state_b[Vx] = 0;
100005f8:	d0a00a17 	ldw	r2,-32728(gp)
100005fc:	1085883a 	add	r2,r2,r2
10000600:	1085883a 	add	r2,r2,r2
10000604:	1007883a 	mov	r3,r2
10000608:	e0bffc17 	ldw	r2,-16(fp)
1000060c:	10c5883a 	add	r2,r2,r3
10000610:	10000015 	stw	zero,0(r2)
        }
    }
    if (state_b[Cx] + state_b[Offx] >= Bound_right) {
10000614:	d0a00817 	ldw	r2,-32736(gp)
10000618:	1085883a 	add	r2,r2,r2
1000061c:	1085883a 	add	r2,r2,r2
10000620:	1007883a 	mov	r3,r2
10000624:	e0bffc17 	ldw	r2,-16(fp)
10000628:	10c5883a 	add	r2,r2,r3
1000062c:	10c00017 	ldw	r3,0(r2)
10000630:	d0a00f17 	ldw	r2,-32708(gp)
10000634:	1085883a 	add	r2,r2,r2
10000638:	1085883a 	add	r2,r2,r2
1000063c:	1009883a 	mov	r4,r2
10000640:	e0bffc17 	ldw	r2,-16(fp)
10000644:	1105883a 	add	r2,r2,r4
10000648:	10800017 	ldw	r2,0(r2)
1000064c:	1887883a 	add	r3,r3,r2
10000650:	d0a02d17 	ldw	r2,-32588(gp)
10000654:	18802016 	blt	r3,r2,100006d8 <movement_b+0x46c>
        state_b[Cx] = Bound_right - state_b[Offx] - 1;
10000658:	d0a00817 	ldw	r2,-32736(gp)
1000065c:	1085883a 	add	r2,r2,r2
10000660:	1085883a 	add	r2,r2,r2
10000664:	1007883a 	mov	r3,r2
10000668:	e0bffc17 	ldw	r2,-16(fp)
1000066c:	10c7883a 	add	r3,r2,r3
10000670:	d1202d17 	ldw	r4,-32588(gp)
10000674:	d0a00f17 	ldw	r2,-32708(gp)
10000678:	1085883a 	add	r2,r2,r2
1000067c:	1085883a 	add	r2,r2,r2
10000680:	100b883a 	mov	r5,r2
10000684:	e0bffc17 	ldw	r2,-16(fp)
10000688:	1145883a 	add	r2,r2,r5
1000068c:	10800017 	ldw	r2,0(r2)
10000690:	2085c83a 	sub	r2,r4,r2
10000694:	10bfffc4 	addi	r2,r2,-1
10000698:	18800015 	stw	r2,0(r3)
        if (state_b[Vx] > 0) {
1000069c:	d0a00a17 	ldw	r2,-32728(gp)
100006a0:	1085883a 	add	r2,r2,r2
100006a4:	1085883a 	add	r2,r2,r2
100006a8:	1007883a 	mov	r3,r2
100006ac:	e0bffc17 	ldw	r2,-16(fp)
100006b0:	10c5883a 	add	r2,r2,r3
100006b4:	10800017 	ldw	r2,0(r2)
100006b8:	0080070e 	bge	zero,r2,100006d8 <movement_b+0x46c>
        	state_b[Vx] = 0;
100006bc:	d0a00a17 	ldw	r2,-32728(gp)
100006c0:	1085883a 	add	r2,r2,r2
100006c4:	1085883a 	add	r2,r2,r2
100006c8:	1007883a 	mov	r3,r2
100006cc:	e0bffc17 	ldw	r2,-16(fp)
100006d0:	10c5883a 	add	r2,r2,r3
100006d4:	10000015 	stw	zero,0(r2)
        }
    }

    // Update y coordinate
    state_b[Cy] += state_b[Vy];
100006d8:	d0a00917 	ldw	r2,-32732(gp)
100006dc:	1085883a 	add	r2,r2,r2
100006e0:	1085883a 	add	r2,r2,r2
100006e4:	1007883a 	mov	r3,r2
100006e8:	e0bffc17 	ldw	r2,-16(fp)
100006ec:	10c7883a 	add	r3,r2,r3
100006f0:	d0a00917 	ldw	r2,-32732(gp)
100006f4:	1085883a 	add	r2,r2,r2
100006f8:	1085883a 	add	r2,r2,r2
100006fc:	1009883a 	mov	r4,r2
10000700:	e0bffc17 	ldw	r2,-16(fp)
10000704:	1105883a 	add	r2,r2,r4
10000708:	11000017 	ldw	r4,0(r2)
1000070c:	d0a00b17 	ldw	r2,-32724(gp)
10000710:	1085883a 	add	r2,r2,r2
10000714:	1085883a 	add	r2,r2,r2
10000718:	100b883a 	mov	r5,r2
1000071c:	e0bffc17 	ldw	r2,-16(fp)
10000720:	1145883a 	add	r2,r2,r5
10000724:	10800017 	ldw	r2,0(r2)
10000728:	2085883a 	add	r2,r4,r2
1000072c:	18800015 	stw	r2,0(r3)
    if (state_b[Cy] <= Bound_up) {
10000730:	d0a00917 	ldw	r2,-32732(gp)
10000734:	1085883a 	add	r2,r2,r2
10000738:	1085883a 	add	r2,r2,r2
1000073c:	1007883a 	mov	r3,r2
10000740:	e0bffc17 	ldw	r2,-16(fp)
10000744:	10c5883a 	add	r2,r2,r3
10000748:	10800017 	ldw	r2,0(r2)
1000074c:	d0e02e17 	ldw	r3,-32584(gp)
10000750:	18801716 	blt	r3,r2,100007b0 <movement_b+0x544>
//    	printf("%d\n", state_b[Cy]);
//    	printf("1");
        state_b[Cy] = Bound_down - state_b[Offy];
10000754:	d0a00917 	ldw	r2,-32732(gp)
10000758:	1085883a 	add	r2,r2,r2
1000075c:	1085883a 	add	r2,r2,r2
10000760:	1007883a 	mov	r3,r2
10000764:	e0bffc17 	ldw	r2,-16(fp)
10000768:	10c7883a 	add	r3,r2,r3
1000076c:	d1202f17 	ldw	r4,-32580(gp)
10000770:	d0a01017 	ldw	r2,-32704(gp)
10000774:	1085883a 	add	r2,r2,r2
10000778:	1085883a 	add	r2,r2,r2
1000077c:	100b883a 	mov	r5,r2
10000780:	e0bffc17 	ldw	r2,-16(fp)
10000784:	1145883a 	add	r2,r2,r5
10000788:	10800017 	ldw	r2,0(r2)
1000078c:	2085c83a 	sub	r2,r4,r2
10000790:	18800015 	stw	r2,0(r3)
//    	state_b[Cy] = Bound_up;
        state_b[Vy] = 0;
10000794:	d0a00b17 	ldw	r2,-32724(gp)
10000798:	1085883a 	add	r2,r2,r2
1000079c:	1085883a 	add	r2,r2,r2
100007a0:	1007883a 	mov	r3,r2
100007a4:	e0bffc17 	ldw	r2,-16(fp)
100007a8:	10c5883a 	add	r2,r2,r3
100007ac:	10000015 	stw	zero,0(r2)
    }
    if (state_b[Cy] + state_b[Offy] >= Bound_down) {
100007b0:	d0a00917 	ldw	r2,-32732(gp)
100007b4:	1085883a 	add	r2,r2,r2
100007b8:	1085883a 	add	r2,r2,r2
100007bc:	1007883a 	mov	r3,r2
100007c0:	e0bffc17 	ldw	r2,-16(fp)
100007c4:	10c5883a 	add	r2,r2,r3
100007c8:	10c00017 	ldw	r3,0(r2)
100007cc:	d0a01017 	ldw	r2,-32704(gp)
100007d0:	1085883a 	add	r2,r2,r2
100007d4:	1085883a 	add	r2,r2,r2
100007d8:	1009883a 	mov	r4,r2
100007dc:	e0bffc17 	ldw	r2,-16(fp)
100007e0:	1105883a 	add	r2,r2,r4
100007e4:	10800017 	ldw	r2,0(r2)
100007e8:	1887883a 	add	r3,r3,r2
100007ec:	d0a02f17 	ldw	r2,-32580(gp)
100007f0:	18801716 	blt	r3,r2,10000850 <movement_b+0x5e4>
        state_b[Cy] = Bound_down - state_b[Offy];
100007f4:	d0a00917 	ldw	r2,-32732(gp)
100007f8:	1085883a 	add	r2,r2,r2
100007fc:	1085883a 	add	r2,r2,r2
10000800:	1007883a 	mov	r3,r2
10000804:	e0bffc17 	ldw	r2,-16(fp)
10000808:	10c7883a 	add	r3,r2,r3
1000080c:	d1202f17 	ldw	r4,-32580(gp)
10000810:	d0a01017 	ldw	r2,-32704(gp)
10000814:	1085883a 	add	r2,r2,r2
10000818:	1085883a 	add	r2,r2,r2
1000081c:	100b883a 	mov	r5,r2
10000820:	e0bffc17 	ldw	r2,-16(fp)
10000824:	1145883a 	add	r2,r2,r5
10000828:	10800017 	ldw	r2,0(r2)
1000082c:	2085c83a 	sub	r2,r4,r2
10000830:	18800015 	stw	r2,0(r3)
        state_b[Vy] = 0;
10000834:	d0a00b17 	ldw	r2,-32724(gp)
10000838:	1085883a 	add	r2,r2,r2
1000083c:	1085883a 	add	r2,r2,r2
10000840:	1007883a 	mov	r3,r2
10000844:	e0bffc17 	ldw	r2,-16(fp)
10000848:	10c5883a 	add	r2,r2,r3
1000084c:	10000015 	stw	zero,0(r2)
    }

    // Update center coordinate
    if (state_b[Ori] == 0) {
10000850:	d0a00c17 	ldw	r2,-32720(gp)
10000854:	1085883a 	add	r2,r2,r2
10000858:	1085883a 	add	r2,r2,r2
1000085c:	1007883a 	mov	r3,r2
10000860:	e0bffc17 	ldw	r2,-16(fp)
10000864:	10c5883a 	add	r2,r2,r3
10000868:	10800017 	ldw	r2,0(r2)
1000086c:	10002d1e 	bne	r2,zero,10000924 <movement_b+0x6b8>
        state_b[Cenx] = state_b[Cx] + state_b[CenOffx];
10000870:	d0a00d17 	ldw	r2,-32716(gp)
10000874:	1085883a 	add	r2,r2,r2
10000878:	1085883a 	add	r2,r2,r2
1000087c:	1007883a 	mov	r3,r2
10000880:	e0bffc17 	ldw	r2,-16(fp)
10000884:	10c7883a 	add	r3,r2,r3
10000888:	d0a00817 	ldw	r2,-32736(gp)
1000088c:	1085883a 	add	r2,r2,r2
10000890:	1085883a 	add	r2,r2,r2
10000894:	1009883a 	mov	r4,r2
10000898:	e0bffc17 	ldw	r2,-16(fp)
1000089c:	1105883a 	add	r2,r2,r4
100008a0:	11000017 	ldw	r4,0(r2)
100008a4:	d0a01117 	ldw	r2,-32700(gp)
100008a8:	1085883a 	add	r2,r2,r2
100008ac:	1085883a 	add	r2,r2,r2
100008b0:	100b883a 	mov	r5,r2
100008b4:	e0bffc17 	ldw	r2,-16(fp)
100008b8:	1145883a 	add	r2,r2,r5
100008bc:	10800017 	ldw	r2,0(r2)
100008c0:	2085883a 	add	r2,r4,r2
100008c4:	18800015 	stw	r2,0(r3)
        state_b[Ceny] = state_b[Cy] + state_b[CenOffy];
100008c8:	d0a00e17 	ldw	r2,-32712(gp)
100008cc:	1085883a 	add	r2,r2,r2
100008d0:	1085883a 	add	r2,r2,r2
100008d4:	1007883a 	mov	r3,r2
100008d8:	e0bffc17 	ldw	r2,-16(fp)
100008dc:	10c7883a 	add	r3,r2,r3
100008e0:	d0a00917 	ldw	r2,-32732(gp)
100008e4:	1085883a 	add	r2,r2,r2
100008e8:	1085883a 	add	r2,r2,r2
100008ec:	1009883a 	mov	r4,r2
100008f0:	e0bffc17 	ldw	r2,-16(fp)
100008f4:	1105883a 	add	r2,r2,r4
100008f8:	11000017 	ldw	r4,0(r2)
100008fc:	d0a01217 	ldw	r2,-32696(gp)
10000900:	1085883a 	add	r2,r2,r2
10000904:	1085883a 	add	r2,r2,r2
10000908:	100b883a 	mov	r5,r2
1000090c:	e0bffc17 	ldw	r2,-16(fp)
10000910:	1145883a 	add	r2,r2,r5
10000914:	10800017 	ldw	r2,0(r2)
10000918:	2085883a 	add	r2,r4,r2
1000091c:	18800015 	stw	r2,0(r3)
    } else {
        state_b[Cenx] = state_b[Cx] + state_b[Offx] - state_b[CenOffx];
        state_b[Ceny] = state_b[Cy] + state_b[CenOffy];
    }

}
10000920:	00003406 	br	100009f4 <movement_b+0x788>
    // Update center coordinate
    if (state_b[Ori] == 0) {
        state_b[Cenx] = state_b[Cx] + state_b[CenOffx];
        state_b[Ceny] = state_b[Cy] + state_b[CenOffy];
    } else {
        state_b[Cenx] = state_b[Cx] + state_b[Offx] - state_b[CenOffx];
10000924:	d0a00d17 	ldw	r2,-32716(gp)
10000928:	1085883a 	add	r2,r2,r2
1000092c:	1085883a 	add	r2,r2,r2
10000930:	1007883a 	mov	r3,r2
10000934:	e0bffc17 	ldw	r2,-16(fp)
10000938:	10c7883a 	add	r3,r2,r3
1000093c:	d0a00817 	ldw	r2,-32736(gp)
10000940:	1085883a 	add	r2,r2,r2
10000944:	1085883a 	add	r2,r2,r2
10000948:	1009883a 	mov	r4,r2
1000094c:	e0bffc17 	ldw	r2,-16(fp)
10000950:	1105883a 	add	r2,r2,r4
10000954:	11000017 	ldw	r4,0(r2)
10000958:	d0a00f17 	ldw	r2,-32708(gp)
1000095c:	1085883a 	add	r2,r2,r2
10000960:	1085883a 	add	r2,r2,r2
10000964:	100b883a 	mov	r5,r2
10000968:	e0bffc17 	ldw	r2,-16(fp)
1000096c:	1145883a 	add	r2,r2,r5
10000970:	10800017 	ldw	r2,0(r2)
10000974:	2089883a 	add	r4,r4,r2
10000978:	d0a01117 	ldw	r2,-32700(gp)
1000097c:	1085883a 	add	r2,r2,r2
10000980:	1085883a 	add	r2,r2,r2
10000984:	100b883a 	mov	r5,r2
10000988:	e0bffc17 	ldw	r2,-16(fp)
1000098c:	1145883a 	add	r2,r2,r5
10000990:	10800017 	ldw	r2,0(r2)
10000994:	2085c83a 	sub	r2,r4,r2
10000998:	18800015 	stw	r2,0(r3)
        state_b[Ceny] = state_b[Cy] + state_b[CenOffy];
1000099c:	d0a00e17 	ldw	r2,-32712(gp)
100009a0:	1085883a 	add	r2,r2,r2
100009a4:	1085883a 	add	r2,r2,r2
100009a8:	1007883a 	mov	r3,r2
100009ac:	e0bffc17 	ldw	r2,-16(fp)
100009b0:	10c7883a 	add	r3,r2,r3
100009b4:	d0a00917 	ldw	r2,-32732(gp)
100009b8:	1085883a 	add	r2,r2,r2
100009bc:	1085883a 	add	r2,r2,r2
100009c0:	1009883a 	mov	r4,r2
100009c4:	e0bffc17 	ldw	r2,-16(fp)
100009c8:	1105883a 	add	r2,r2,r4
100009cc:	11000017 	ldw	r4,0(r2)
100009d0:	d0a01217 	ldw	r2,-32696(gp)
100009d4:	1085883a 	add	r2,r2,r2
100009d8:	1085883a 	add	r2,r2,r2
100009dc:	100b883a 	mov	r5,r2
100009e0:	e0bffc17 	ldw	r2,-16(fp)
100009e4:	1145883a 	add	r2,r2,r5
100009e8:	10800017 	ldw	r2,0(r2)
100009ec:	2085883a 	add	r2,r4,r2
100009f0:	18800015 	stw	r2,0(r3)
    }

}
100009f4:	0001883a 	nop
100009f8:	e037883a 	mov	sp,fp
100009fc:	df000017 	ldw	fp,0(sp)
10000a00:	dec00104 	addi	sp,sp,4
10000a04:	f800283a 	ret

10000a08 <update_event_b>:
    int prohibit_b[N_prohibit_b],
    int clock,
    int system_flage[N_system_flage],
    int cooling_c[N_cooling_c]
)
{
10000a08:	defff204 	addi	sp,sp,-56
10000a0c:	dfc00d15 	stw	ra,52(sp)
10000a10:	df000c15 	stw	fp,48(sp)
10000a14:	dd400b15 	stw	r21,44(sp)
10000a18:	dd000a15 	stw	r20,40(sp)
10000a1c:	dcc00915 	stw	r19,36(sp)
10000a20:	dc800815 	stw	r18,32(sp)
10000a24:	dc400715 	stw	r17,28(sp)
10000a28:	dc000615 	stw	r16,24(sp)
10000a2c:	df000c04 	addi	fp,sp,48
10000a30:	e13ff615 	stw	r4,-40(fp)
10000a34:	e17ff715 	stw	r5,-36(fp)
10000a38:	e1bff815 	stw	r6,-32(fp)
10000a3c:	e1fff915 	stw	r7,-28(fp)
 * 3. Subtract the counter of current frame by 1
 */
void update_event_b(
    int state_b[N_state_b],
    int state_c[N_state_c],
    long long unsigned int event_b[N1_event_b][N2_event_b],
10000a40:	d1203717 	ldw	r4,-32548(gp)
10000a44:	213fffc4 	addi	r4,r4,-1
/* Update current event list, do following things:
 * 1. If frame counter is larger than number of frames, free prohibition list and reset event list, return
 * 2. If counter of current frame is zero, increment the frame counter by 1, update state accordingly, return
 * 3. Subtract the counter of current frame by 1
 */
void update_event_b(
10000a48:	e13ff415 	stw	r4,-48(fp)
10000a4c:	d1203717 	ldw	r4,-32548(gp)
10000a50:	2011883a 	mov	r8,r4
10000a54:	0013883a 	mov	r9,zero
10000a58:	4008d6ba 	srli	r4,r8,26
10000a5c:	480691ba 	slli	r3,r9,6
10000a60:	20c6b03a 	or	r3,r4,r3
10000a64:	400491ba 	slli	r2,r8,6
    int clock,
    int system_flage[N_system_flage],
    int cooling_c[N_cooling_c]
)
{
    int index = event_b[0][fcount];
10000a68:	d0a04317 	ldw	r2,-32500(gp)
10000a6c:	e0fff817 	ldw	r3,-32(fp)
10000a70:	100490fa 	slli	r2,r2,3
10000a74:	1889883a 	add	r4,r3,r2
10000a78:	20800017 	ldw	r2,0(r4)
10000a7c:	20c00117 	ldw	r3,4(r4)
10000a80:	e0bff515 	stw	r2,-44(fp)

    // If counter of current frame is zero
    if (event_b[index][0] == 0){
10000a84:	d0a03717 	ldw	r2,-32548(gp)
10000a88:	1007883a 	mov	r3,r2
10000a8c:	e0bff517 	ldw	r2,-44(fp)
10000a90:	100b883a 	mov	r5,r2
10000a94:	1809883a 	mov	r4,r3
10000a98:	0007d040 	call	10007d04 <__mulsi3>
10000a9c:	100490fa 	slli	r2,r2,3
10000aa0:	e0fff817 	ldw	r3,-32(fp)
10000aa4:	1889883a 	add	r4,r3,r2
10000aa8:	20800017 	ldw	r2,0(r4)
10000aac:	20c00117 	ldw	r3,4(r4)
10000ab0:	1009883a 	mov	r4,r2
10000ab4:	20c8b03a 	or	r4,r4,r3
10000ab8:	20035f1e 	bne	r4,zero,10001838 <update_event_b+0xe30>
        // If frame counter is larger than or equal to number of frames
        if (index >= event_b[0][fnum]) {
10000abc:	e0bff517 	ldw	r2,-44(fp)
10000ac0:	1021883a 	mov	r16,r2
10000ac4:	1005d7fa 	srai	r2,r2,31
10000ac8:	1023883a 	mov	r17,r2
10000acc:	d0a04417 	ldw	r2,-32496(gp)
10000ad0:	e0fff817 	ldw	r3,-32(fp)
10000ad4:	100490fa 	slli	r2,r2,3
10000ad8:	1889883a 	add	r4,r3,r2
10000adc:	20800017 	ldw	r2,0(r4)
10000ae0:	20c00117 	ldw	r3,4(r4)
10000ae4:	88c06536 	bltu	r17,r3,10000c7c <update_event_b+0x274>
10000ae8:	1c40011e 	bne	r3,r17,10000af0 <update_event_b+0xe8>
10000aec:	80806336 	bltu	r16,r2,10000c7c <update_event_b+0x274>
            // Special end
            if (event_b[0][id] == 11) {     // Spark
10000af0:	d0a04617 	ldw	r2,-32488(gp)
10000af4:	e0fff817 	ldw	r3,-32(fp)
10000af8:	100490fa 	slli	r2,r2,3
10000afc:	1889883a 	add	r4,r3,r2
10000b00:	20800017 	ldw	r2,0(r4)
10000b04:	20c00117 	ldw	r3,4(r4)
10000b08:	110002d8 	cmpnei	r4,r2,11
10000b0c:	2000131e 	bne	r4,zero,10000b5c <update_event_b+0x154>
10000b10:	1800121e 	bne	r3,zero,10000b5c <update_event_b+0x154>
                cooling_c[c_stiff] = 5;
10000b14:	d0a02317 	ldw	r2,-32628(gp)
10000b18:	1085883a 	add	r2,r2,r2
10000b1c:	1085883a 	add	r2,r2,r2
10000b20:	1007883a 	mov	r3,r2
10000b24:	e0800417 	ldw	r2,16(fp)
10000b28:	10c5883a 	add	r2,r2,r3
10000b2c:	00c00144 	movi	r3,5
10000b30:	10c00015 	stw	r3,0(r2)
                free_prohibition(prohibit_b, event_b[0][pvector]);
10000b34:	d0a04517 	ldw	r2,-32492(gp)
10000b38:	e0fff817 	ldw	r3,-32(fp)
10000b3c:	100490fa 	slli	r2,r2,3
10000b40:	1889883a 	add	r4,r3,r2
10000b44:	20800017 	ldw	r2,0(r4)
10000b48:	20c00117 	ldw	r3,4(r4)
10000b4c:	100b883a 	mov	r5,r2
10000b50:	e13ff917 	ldw	r4,-28(fp)
10000b54:	0004a040 	call	10004a04 <free_prohibition>
                system_flage[f_spell] = 1;
                free_prohibition(prohibit_b, event_b[0][pvector]);
            } else {
                free_prohibition(prohibit_b, event_b[0][pvector]);
            }
            return;
10000b58:	00039606 	br	100019b4 <update_event_b+0xfac>
        if (index >= event_b[0][fnum]) {
            // Special end
            if (event_b[0][id] == 11) {     // Spark
                cooling_c[c_stiff] = 5;
                free_prohibition(prohibit_b, event_b[0][pvector]);
            } else if (event_b[0][id] == 8) {
10000b5c:	d0a04617 	ldw	r2,-32488(gp)
10000b60:	e0fff817 	ldw	r3,-32(fp)
10000b64:	100490fa 	slli	r2,r2,3
10000b68:	1889883a 	add	r4,r3,r2
10000b6c:	20800017 	ldw	r2,0(r4)
10000b70:	20c00117 	ldw	r3,4(r4)
10000b74:	11000218 	cmpnei	r4,r2,8
10000b78:	2000131e 	bne	r4,zero,10000bc8 <update_event_b+0x1c0>
10000b7c:	1800121e 	bne	r3,zero,10000bc8 <update_event_b+0x1c0>
                cooling_c[c_stiff] = 60;
10000b80:	d0a02317 	ldw	r2,-32628(gp)
10000b84:	1085883a 	add	r2,r2,r2
10000b88:	1085883a 	add	r2,r2,r2
10000b8c:	1007883a 	mov	r3,r2
10000b90:	e0800417 	ldw	r2,16(fp)
10000b94:	10c5883a 	add	r2,r2,r3
10000b98:	00c00f04 	movi	r3,60
10000b9c:	10c00015 	stw	r3,0(r2)
                free_prohibition(prohibit_b, event_b[0][pvector]);
10000ba0:	d0a04517 	ldw	r2,-32492(gp)
10000ba4:	e0fff817 	ldw	r3,-32(fp)
10000ba8:	100490fa 	slli	r2,r2,3
10000bac:	1889883a 	add	r4,r3,r2
10000bb0:	20800017 	ldw	r2,0(r4)
10000bb4:	20c00117 	ldw	r3,4(r4)
10000bb8:	100b883a 	mov	r5,r2
10000bbc:	e13ff917 	ldw	r4,-28(fp)
10000bc0:	0004a040 	call	10004a04 <free_prohibition>
                system_flage[f_spell] = 1;
                free_prohibition(prohibit_b, event_b[0][pvector]);
            } else {
                free_prohibition(prohibit_b, event_b[0][pvector]);
            }
            return;
10000bc4:	00037b06 	br	100019b4 <update_event_b+0xfac>
                cooling_c[c_stiff] = 5;
                free_prohibition(prohibit_b, event_b[0][pvector]);
            } else if (event_b[0][id] == 8) {
                cooling_c[c_stiff] = 60;
                free_prohibition(prohibit_b, event_b[0][pvector]);
            } else if (event_b[0][id] == 9) {
10000bc8:	d0a04617 	ldw	r2,-32488(gp)
10000bcc:	e0fff817 	ldw	r3,-32(fp)
10000bd0:	100490fa 	slli	r2,r2,3
10000bd4:	1889883a 	add	r4,r3,r2
10000bd8:	20800017 	ldw	r2,0(r4)
10000bdc:	20c00117 	ldw	r3,4(r4)
10000be0:	11000258 	cmpnei	r4,r2,9
10000be4:	20001b1e 	bne	r4,zero,10000c54 <update_event_b+0x24c>
10000be8:	18001a1e 	bne	r3,zero,10000c54 <update_event_b+0x24c>
                cooling_c[c_stiff] = 140;
10000bec:	d0a02317 	ldw	r2,-32628(gp)
10000bf0:	1085883a 	add	r2,r2,r2
10000bf4:	1085883a 	add	r2,r2,r2
10000bf8:	1007883a 	mov	r3,r2
10000bfc:	e0800417 	ldw	r2,16(fp)
10000c00:	10c5883a 	add	r2,r2,r3
10000c04:	00c02304 	movi	r3,140
10000c08:	10c00015 	stw	r3,0(r2)
                system_flage[f_spell] = 1;
10000c0c:	d0a02917 	ldw	r2,-32604(gp)
10000c10:	1085883a 	add	r2,r2,r2
10000c14:	1085883a 	add	r2,r2,r2
10000c18:	1007883a 	mov	r3,r2
10000c1c:	e0800317 	ldw	r2,12(fp)
10000c20:	10c5883a 	add	r2,r2,r3
10000c24:	00c00044 	movi	r3,1
10000c28:	10c00015 	stw	r3,0(r2)
                free_prohibition(prohibit_b, event_b[0][pvector]);
10000c2c:	d0a04517 	ldw	r2,-32492(gp)
10000c30:	e0fff817 	ldw	r3,-32(fp)
10000c34:	100490fa 	slli	r2,r2,3
10000c38:	1889883a 	add	r4,r3,r2
10000c3c:	20800017 	ldw	r2,0(r4)
10000c40:	20c00117 	ldw	r3,4(r4)
10000c44:	100b883a 	mov	r5,r2
10000c48:	e13ff917 	ldw	r4,-28(fp)
10000c4c:	0004a040 	call	10004a04 <free_prohibition>
            } else {
                free_prohibition(prohibit_b, event_b[0][pvector]);
            }
            return;
10000c50:	00035806 	br	100019b4 <update_event_b+0xfac>
            } else if (event_b[0][id] == 9) {
                cooling_c[c_stiff] = 140;
                system_flage[f_spell] = 1;
                free_prohibition(prohibit_b, event_b[0][pvector]);
            } else {
                free_prohibition(prohibit_b, event_b[0][pvector]);
10000c54:	d0a04517 	ldw	r2,-32492(gp)
10000c58:	e0fff817 	ldw	r3,-32(fp)
10000c5c:	100490fa 	slli	r2,r2,3
10000c60:	1889883a 	add	r4,r3,r2
10000c64:	20800017 	ldw	r2,0(r4)
10000c68:	20c00117 	ldw	r3,4(r4)
10000c6c:	100b883a 	mov	r5,r2
10000c70:	e13ff917 	ldw	r4,-28(fp)
10000c74:	0004a040 	call	10004a04 <free_prohibition>
            }
            return;
10000c78:	00034e06 	br	100019b4 <update_event_b+0xfac>
        } else {
            // Special case
            if (event_b[0][id] == 11) {     // Spark
10000c7c:	d0a04617 	ldw	r2,-32488(gp)
10000c80:	e0fff817 	ldw	r3,-32(fp)
10000c84:	100490fa 	slli	r2,r2,3
10000c88:	1889883a 	add	r4,r3,r2
10000c8c:	20800017 	ldw	r2,0(r4)
10000c90:	20c00117 	ldw	r3,4(r4)
10000c94:	110002d8 	cmpnei	r4,r2,11
10000c98:	2000b01e 	bne	r4,zero,10000f5c <update_event_b+0x554>
10000c9c:	1800af1e 	bne	r3,zero,10000f5c <update_event_b+0x554>
                if (event_b[0][fcount] == 4) {
10000ca0:	d0a04317 	ldw	r2,-32500(gp)
10000ca4:	e0fff817 	ldw	r3,-32(fp)
10000ca8:	100490fa 	slli	r2,r2,3
10000cac:	1889883a 	add	r4,r3,r2
10000cb0:	20800017 	ldw	r2,0(r4)
10000cb4:	20c00117 	ldw	r3,4(r4)
10000cb8:	11000118 	cmpnei	r4,r2,4
10000cbc:	20027d1e 	bne	r4,zero,100016b4 <update_event_b+0xcac>
10000cc0:	18027c1e 	bne	r3,zero,100016b4 <update_event_b+0xcac>
                    // Set the orientation and position
                    if (system_flage[f_spark_ori] == 0) {
10000cc4:	d0a02817 	ldw	r2,-32608(gp)
10000cc8:	1085883a 	add	r2,r2,r2
10000ccc:	1085883a 	add	r2,r2,r2
10000cd0:	1007883a 	mov	r3,r2
10000cd4:	e0800317 	ldw	r2,12(fp)
10000cd8:	10c5883a 	add	r2,r2,r3
10000cdc:	10800017 	ldw	r2,0(r2)
10000ce0:	1000561e 	bne	r2,zero,10000e3c <update_event_b+0x434>
                        state_b[Ori] = 1;
10000ce4:	d0a00c17 	ldw	r2,-32720(gp)
10000ce8:	1085883a 	add	r2,r2,r2
10000cec:	1085883a 	add	r2,r2,r2
10000cf0:	1007883a 	mov	r3,r2
10000cf4:	e0bff617 	ldw	r2,-40(fp)
10000cf8:	10c5883a 	add	r2,r2,r3
10000cfc:	00c00044 	movi	r3,1
10000d00:	10c00015 	stw	r3,0(r2)
                        state_b[Cx] = 100;
10000d04:	d0a00817 	ldw	r2,-32736(gp)
10000d08:	1085883a 	add	r2,r2,r2
10000d0c:	1085883a 	add	r2,r2,r2
10000d10:	1007883a 	mov	r3,r2
10000d14:	e0bff617 	ldw	r2,-40(fp)
10000d18:	10c5883a 	add	r2,r2,r3
10000d1c:	00c01904 	movi	r3,100
10000d20:	10c00015 	stw	r3,0(r2)
                        state_b[Cenx] = state_b[Cx] + event_b[index+1][2] - event_b[index+1][4];
10000d24:	d0a00d17 	ldw	r2,-32716(gp)
10000d28:	1085883a 	add	r2,r2,r2
10000d2c:	1085883a 	add	r2,r2,r2
10000d30:	1007883a 	mov	r3,r2
10000d34:	e0bff617 	ldw	r2,-40(fp)
10000d38:	10e1883a 	add	r16,r2,r3
10000d3c:	d0a00817 	ldw	r2,-32736(gp)
10000d40:	1085883a 	add	r2,r2,r2
10000d44:	1085883a 	add	r2,r2,r2
10000d48:	1007883a 	mov	r3,r2
10000d4c:	e0bff617 	ldw	r2,-40(fp)
10000d50:	10c5883a 	add	r2,r2,r3
10000d54:	10800017 	ldw	r2,0(r2)
10000d58:	1023883a 	mov	r17,r2
10000d5c:	e0bff517 	ldw	r2,-44(fp)
10000d60:	10800044 	addi	r2,r2,1
10000d64:	1007883a 	mov	r3,r2
10000d68:	d0a03717 	ldw	r2,-32548(gp)
10000d6c:	100b883a 	mov	r5,r2
10000d70:	1809883a 	mov	r4,r3
10000d74:	0007d040 	call	10007d04 <__mulsi3>
10000d78:	100490fa 	slli	r2,r2,3
10000d7c:	e0fff817 	ldw	r3,-32(fp)
10000d80:	1889883a 	add	r4,r3,r2
10000d84:	20800417 	ldw	r2,16(r4)
10000d88:	20c00517 	ldw	r3,20(r4)
10000d8c:	88a3883a 	add	r17,r17,r2
10000d90:	e0bff517 	ldw	r2,-44(fp)
10000d94:	10800044 	addi	r2,r2,1
10000d98:	1007883a 	mov	r3,r2
10000d9c:	d0a03717 	ldw	r2,-32548(gp)
10000da0:	100b883a 	mov	r5,r2
10000da4:	1809883a 	mov	r4,r3
10000da8:	0007d040 	call	10007d04 <__mulsi3>
10000dac:	100490fa 	slli	r2,r2,3
10000db0:	e0fff817 	ldw	r3,-32(fp)
10000db4:	1889883a 	add	r4,r3,r2
10000db8:	20800817 	ldw	r2,32(r4)
10000dbc:	20c00917 	ldw	r3,36(r4)
10000dc0:	8885c83a 	sub	r2,r17,r2
10000dc4:	80800015 	stw	r2,0(r16)
                        state_b[Ceny] = state_b[Cy] + event_b[index+1][5];
10000dc8:	d0a00e17 	ldw	r2,-32712(gp)
10000dcc:	1085883a 	add	r2,r2,r2
10000dd0:	1085883a 	add	r2,r2,r2
10000dd4:	1007883a 	mov	r3,r2
10000dd8:	e0bff617 	ldw	r2,-40(fp)
10000ddc:	10e1883a 	add	r16,r2,r3
10000de0:	d0a00917 	ldw	r2,-32732(gp)
10000de4:	1085883a 	add	r2,r2,r2
10000de8:	1085883a 	add	r2,r2,r2
10000dec:	1007883a 	mov	r3,r2
10000df0:	e0bff617 	ldw	r2,-40(fp)
10000df4:	10c5883a 	add	r2,r2,r3
10000df8:	10800017 	ldw	r2,0(r2)
10000dfc:	1023883a 	mov	r17,r2
10000e00:	e0bff517 	ldw	r2,-44(fp)
10000e04:	10800044 	addi	r2,r2,1
10000e08:	1007883a 	mov	r3,r2
10000e0c:	d0a03717 	ldw	r2,-32548(gp)
10000e10:	100b883a 	mov	r5,r2
10000e14:	1809883a 	mov	r4,r3
10000e18:	0007d040 	call	10007d04 <__mulsi3>
10000e1c:	100490fa 	slli	r2,r2,3
10000e20:	e0fff817 	ldw	r3,-32(fp)
10000e24:	1889883a 	add	r4,r3,r2
10000e28:	20800a17 	ldw	r2,40(r4)
10000e2c:	20c00b17 	ldw	r3,44(r4)
10000e30:	8885883a 	add	r2,r17,r2
10000e34:	80800015 	stw	r2,0(r16)
10000e38:	00021e06 	br	100016b4 <update_event_b+0xcac>
                    } else {
                        state_b[Ori] = 0;
10000e3c:	d0a00c17 	ldw	r2,-32720(gp)
10000e40:	1085883a 	add	r2,r2,r2
10000e44:	1085883a 	add	r2,r2,r2
10000e48:	1007883a 	mov	r3,r2
10000e4c:	e0bff617 	ldw	r2,-40(fp)
10000e50:	10c5883a 	add	r2,r2,r3
10000e54:	10000015 	stw	zero,0(r2)
                        state_b[Cx] = 350;
10000e58:	d0a00817 	ldw	r2,-32736(gp)
10000e5c:	1085883a 	add	r2,r2,r2
10000e60:	1085883a 	add	r2,r2,r2
10000e64:	1007883a 	mov	r3,r2
10000e68:	e0bff617 	ldw	r2,-40(fp)
10000e6c:	10c5883a 	add	r2,r2,r3
10000e70:	00c05784 	movi	r3,350
10000e74:	10c00015 	stw	r3,0(r2)
                        state_b[Cenx] = state_b[Cx] + event_b[index+1][4];
10000e78:	d0a00d17 	ldw	r2,-32716(gp)
10000e7c:	1085883a 	add	r2,r2,r2
10000e80:	1085883a 	add	r2,r2,r2
10000e84:	1007883a 	mov	r3,r2
10000e88:	e0bff617 	ldw	r2,-40(fp)
10000e8c:	10e1883a 	add	r16,r2,r3
10000e90:	d0a00817 	ldw	r2,-32736(gp)
10000e94:	1085883a 	add	r2,r2,r2
10000e98:	1085883a 	add	r2,r2,r2
10000e9c:	1007883a 	mov	r3,r2
10000ea0:	e0bff617 	ldw	r2,-40(fp)
10000ea4:	10c5883a 	add	r2,r2,r3
10000ea8:	10800017 	ldw	r2,0(r2)
10000eac:	1023883a 	mov	r17,r2
10000eb0:	e0bff517 	ldw	r2,-44(fp)
10000eb4:	10800044 	addi	r2,r2,1
10000eb8:	1007883a 	mov	r3,r2
10000ebc:	d0a03717 	ldw	r2,-32548(gp)
10000ec0:	100b883a 	mov	r5,r2
10000ec4:	1809883a 	mov	r4,r3
10000ec8:	0007d040 	call	10007d04 <__mulsi3>
10000ecc:	100490fa 	slli	r2,r2,3
10000ed0:	e0fff817 	ldw	r3,-32(fp)
10000ed4:	1889883a 	add	r4,r3,r2
10000ed8:	20800817 	ldw	r2,32(r4)
10000edc:	20c00917 	ldw	r3,36(r4)
10000ee0:	8885883a 	add	r2,r17,r2
10000ee4:	80800015 	stw	r2,0(r16)
                        state_b[Ceny] = state_b[Cy] + event_b[index+1][5];
10000ee8:	d0a00e17 	ldw	r2,-32712(gp)
10000eec:	1085883a 	add	r2,r2,r2
10000ef0:	1085883a 	add	r2,r2,r2
10000ef4:	1007883a 	mov	r3,r2
10000ef8:	e0bff617 	ldw	r2,-40(fp)
10000efc:	10e1883a 	add	r16,r2,r3
10000f00:	d0a00917 	ldw	r2,-32732(gp)
10000f04:	1085883a 	add	r2,r2,r2
10000f08:	1085883a 	add	r2,r2,r2
10000f0c:	1007883a 	mov	r3,r2
10000f10:	e0bff617 	ldw	r2,-40(fp)
10000f14:	10c5883a 	add	r2,r2,r3
10000f18:	10800017 	ldw	r2,0(r2)
10000f1c:	1023883a 	mov	r17,r2
10000f20:	e0bff517 	ldw	r2,-44(fp)
10000f24:	10800044 	addi	r2,r2,1
10000f28:	1007883a 	mov	r3,r2
10000f2c:	d0a03717 	ldw	r2,-32548(gp)
10000f30:	100b883a 	mov	r5,r2
10000f34:	1809883a 	mov	r4,r3
10000f38:	0007d040 	call	10007d04 <__mulsi3>
10000f3c:	100490fa 	slli	r2,r2,3
10000f40:	e0fff817 	ldw	r3,-32(fp)
10000f44:	1889883a 	add	r4,r3,r2
10000f48:	20800a17 	ldw	r2,40(r4)
10000f4c:	20c00b17 	ldw	r3,44(r4)
10000f50:	8885883a 	add	r2,r17,r2
10000f54:	80800015 	stw	r2,0(r16)
10000f58:	0001d606 	br	100016b4 <update_event_b+0xcac>
                    }
                }
            } else if (event_b[0][id] == 8) {   // Dash
10000f5c:	d0a04617 	ldw	r2,-32488(gp)
10000f60:	e0fff817 	ldw	r3,-32(fp)
10000f64:	100490fa 	slli	r2,r2,3
10000f68:	1889883a 	add	r4,r3,r2
10000f6c:	20800017 	ldw	r2,0(r4)
10000f70:	20c00117 	ldw	r3,4(r4)
10000f74:	11000218 	cmpnei	r4,r2,8
10000f78:	2001121e 	bne	r4,zero,100013c4 <update_event_b+0x9bc>
10000f7c:	1801111e 	bne	r3,zero,100013c4 <update_event_b+0x9bc>
                // Transform
                if (event_b[0][fcount] == 2 || event_b[0][fcount] == 5) {
10000f80:	d0a04317 	ldw	r2,-32500(gp)
10000f84:	e0fff817 	ldw	r3,-32(fp)
10000f88:	100490fa 	slli	r2,r2,3
10000f8c:	1889883a 	add	r4,r3,r2
10000f90:	20800017 	ldw	r2,0(r4)
10000f94:	20c00117 	ldw	r3,4(r4)
10000f98:	11000098 	cmpnei	r4,r2,2
10000f9c:	2000011e 	bne	r4,zero,10000fa4 <update_event_b+0x59c>
10000fa0:	18000926 	beq	r3,zero,10000fc8 <update_event_b+0x5c0>
10000fa4:	d0a04317 	ldw	r2,-32500(gp)
10000fa8:	e0fff817 	ldw	r3,-32(fp)
10000fac:	100490fa 	slli	r2,r2,3
10000fb0:	1889883a 	add	r4,r3,r2
10000fb4:	20800017 	ldw	r2,0(r4)
10000fb8:	20c00117 	ldw	r3,4(r4)
10000fbc:	11000158 	cmpnei	r4,r2,5
10000fc0:	2000881e 	bne	r4,zero,100011e4 <update_event_b+0x7dc>
10000fc4:	1800871e 	bne	r3,zero,100011e4 <update_event_b+0x7dc>
                    if (state_b[Ori] == 0) {
10000fc8:	d0a00c17 	ldw	r2,-32720(gp)
10000fcc:	1085883a 	add	r2,r2,r2
10000fd0:	1085883a 	add	r2,r2,r2
10000fd4:	1007883a 	mov	r3,r2
10000fd8:	e0bff617 	ldw	r2,-40(fp)
10000fdc:	10c5883a 	add	r2,r2,r3
10000fe0:	10800017 	ldw	r2,0(r2)
10000fe4:	1000391e 	bne	r2,zero,100010cc <update_event_b+0x6c4>
                        state_b[Cenx] = state_b[Cx] + event_b[index+1][4];
10000fe8:	d0a00d17 	ldw	r2,-32716(gp)
10000fec:	1085883a 	add	r2,r2,r2
10000ff0:	1085883a 	add	r2,r2,r2
10000ff4:	1007883a 	mov	r3,r2
10000ff8:	e0bff617 	ldw	r2,-40(fp)
10000ffc:	10e1883a 	add	r16,r2,r3
10001000:	d0a00817 	ldw	r2,-32736(gp)
10001004:	1085883a 	add	r2,r2,r2
10001008:	1085883a 	add	r2,r2,r2
1000100c:	1007883a 	mov	r3,r2
10001010:	e0bff617 	ldw	r2,-40(fp)
10001014:	10c5883a 	add	r2,r2,r3
10001018:	10800017 	ldw	r2,0(r2)
1000101c:	1023883a 	mov	r17,r2
10001020:	e0bff517 	ldw	r2,-44(fp)
10001024:	10800044 	addi	r2,r2,1
10001028:	1007883a 	mov	r3,r2
1000102c:	d0a03717 	ldw	r2,-32548(gp)
10001030:	100b883a 	mov	r5,r2
10001034:	1809883a 	mov	r4,r3
10001038:	0007d040 	call	10007d04 <__mulsi3>
1000103c:	100490fa 	slli	r2,r2,3
10001040:	e0fff817 	ldw	r3,-32(fp)
10001044:	1889883a 	add	r4,r3,r2
10001048:	20800817 	ldw	r2,32(r4)
1000104c:	20c00917 	ldw	r3,36(r4)
10001050:	8885883a 	add	r2,r17,r2
10001054:	80800015 	stw	r2,0(r16)
                        state_b[Ceny] = state_b[Cy] + event_b[index+1][5];
10001058:	d0a00e17 	ldw	r2,-32712(gp)
1000105c:	1085883a 	add	r2,r2,r2
10001060:	1085883a 	add	r2,r2,r2
10001064:	1007883a 	mov	r3,r2
10001068:	e0bff617 	ldw	r2,-40(fp)
1000106c:	10e1883a 	add	r16,r2,r3
10001070:	d0a00917 	ldw	r2,-32732(gp)
10001074:	1085883a 	add	r2,r2,r2
10001078:	1085883a 	add	r2,r2,r2
1000107c:	1007883a 	mov	r3,r2
10001080:	e0bff617 	ldw	r2,-40(fp)
10001084:	10c5883a 	add	r2,r2,r3
10001088:	10800017 	ldw	r2,0(r2)
1000108c:	1023883a 	mov	r17,r2
10001090:	e0bff517 	ldw	r2,-44(fp)
10001094:	10800044 	addi	r2,r2,1
10001098:	1007883a 	mov	r3,r2
1000109c:	d0a03717 	ldw	r2,-32548(gp)
100010a0:	100b883a 	mov	r5,r2
100010a4:	1809883a 	mov	r4,r3
100010a8:	0007d040 	call	10007d04 <__mulsi3>
100010ac:	100490fa 	slli	r2,r2,3
100010b0:	e0fff817 	ldw	r3,-32(fp)
100010b4:	1889883a 	add	r4,r3,r2
100010b8:	20800a17 	ldw	r2,40(r4)
100010bc:	20c00b17 	ldw	r3,44(r4)
100010c0:	8885883a 	add	r2,r17,r2
100010c4:	80800015 	stw	r2,0(r16)
                    }
                }
            } else if (event_b[0][id] == 8) {   // Dash
                // Transform
                if (event_b[0][fcount] == 2 || event_b[0][fcount] == 5) {
                    if (state_b[Ori] == 0) {
100010c8:	00017a06 	br	100016b4 <update_event_b+0xcac>
                        state_b[Cenx] = state_b[Cx] + event_b[index+1][4];
                        state_b[Ceny] = state_b[Cy] + event_b[index+1][5];
                    } else {
                        state_b[Cenx] = state_b[Cx] + event_b[index+1][2] - event_b[index+1][4];
100010cc:	d0a00d17 	ldw	r2,-32716(gp)
100010d0:	1085883a 	add	r2,r2,r2
100010d4:	1085883a 	add	r2,r2,r2
100010d8:	1007883a 	mov	r3,r2
100010dc:	e0bff617 	ldw	r2,-40(fp)
100010e0:	10e1883a 	add	r16,r2,r3
100010e4:	d0a00817 	ldw	r2,-32736(gp)
100010e8:	1085883a 	add	r2,r2,r2
100010ec:	1085883a 	add	r2,r2,r2
100010f0:	1007883a 	mov	r3,r2
100010f4:	e0bff617 	ldw	r2,-40(fp)
100010f8:	10c5883a 	add	r2,r2,r3
100010fc:	10800017 	ldw	r2,0(r2)
10001100:	1023883a 	mov	r17,r2
10001104:	e0bff517 	ldw	r2,-44(fp)
10001108:	10800044 	addi	r2,r2,1
1000110c:	1007883a 	mov	r3,r2
10001110:	d0a03717 	ldw	r2,-32548(gp)
10001114:	100b883a 	mov	r5,r2
10001118:	1809883a 	mov	r4,r3
1000111c:	0007d040 	call	10007d04 <__mulsi3>
10001120:	100490fa 	slli	r2,r2,3
10001124:	e0fff817 	ldw	r3,-32(fp)
10001128:	1889883a 	add	r4,r3,r2
1000112c:	20800417 	ldw	r2,16(r4)
10001130:	20c00517 	ldw	r3,20(r4)
10001134:	88a3883a 	add	r17,r17,r2
10001138:	e0bff517 	ldw	r2,-44(fp)
1000113c:	10800044 	addi	r2,r2,1
10001140:	1007883a 	mov	r3,r2
10001144:	d0a03717 	ldw	r2,-32548(gp)
10001148:	100b883a 	mov	r5,r2
1000114c:	1809883a 	mov	r4,r3
10001150:	0007d040 	call	10007d04 <__mulsi3>
10001154:	100490fa 	slli	r2,r2,3
10001158:	e0fff817 	ldw	r3,-32(fp)
1000115c:	1889883a 	add	r4,r3,r2
10001160:	20800817 	ldw	r2,32(r4)
10001164:	20c00917 	ldw	r3,36(r4)
10001168:	8885c83a 	sub	r2,r17,r2
1000116c:	80800015 	stw	r2,0(r16)
                        state_b[Ceny] = state_b[Cy] + event_b[index+1][5];
10001170:	d0a00e17 	ldw	r2,-32712(gp)
10001174:	1085883a 	add	r2,r2,r2
10001178:	1085883a 	add	r2,r2,r2
1000117c:	1007883a 	mov	r3,r2
10001180:	e0bff617 	ldw	r2,-40(fp)
10001184:	10e1883a 	add	r16,r2,r3
10001188:	d0a00917 	ldw	r2,-32732(gp)
1000118c:	1085883a 	add	r2,r2,r2
10001190:	1085883a 	add	r2,r2,r2
10001194:	1007883a 	mov	r3,r2
10001198:	e0bff617 	ldw	r2,-40(fp)
1000119c:	10c5883a 	add	r2,r2,r3
100011a0:	10800017 	ldw	r2,0(r2)
100011a4:	1023883a 	mov	r17,r2
100011a8:	e0bff517 	ldw	r2,-44(fp)
100011ac:	10800044 	addi	r2,r2,1
100011b0:	1007883a 	mov	r3,r2
100011b4:	d0a03717 	ldw	r2,-32548(gp)
100011b8:	100b883a 	mov	r5,r2
100011bc:	1809883a 	mov	r4,r3
100011c0:	0007d040 	call	10007d04 <__mulsi3>
100011c4:	100490fa 	slli	r2,r2,3
100011c8:	e0fff817 	ldw	r3,-32(fp)
100011cc:	1889883a 	add	r4,r3,r2
100011d0:	20800a17 	ldw	r2,40(r4)
100011d4:	20c00b17 	ldw	r3,44(r4)
100011d8:	8885883a 	add	r2,r17,r2
100011dc:	80800015 	stw	r2,0(r16)
                    }
                }
            } else if (event_b[0][id] == 8) {   // Dash
                // Transform
                if (event_b[0][fcount] == 2 || event_b[0][fcount] == 5) {
                    if (state_b[Ori] == 0) {
100011e0:	00013406 	br	100016b4 <update_event_b+0xcac>
                        state_b[Ceny] = state_b[Cy] + event_b[index+1][5];
                    } else {
                        state_b[Cenx] = state_b[Cx] + event_b[index+1][2] - event_b[index+1][4];
                        state_b[Ceny] = state_b[Cy] + event_b[index+1][5];
                    }
                } else if (event_b[0][fcount] == 3) {
100011e4:	d0a04317 	ldw	r2,-32500(gp)
100011e8:	e0fff817 	ldw	r3,-32(fp)
100011ec:	100490fa 	slli	r2,r2,3
100011f0:	1889883a 	add	r4,r3,r2
100011f4:	20800017 	ldw	r2,0(r4)
100011f8:	20c00117 	ldw	r3,4(r4)
100011fc:	110000d8 	cmpnei	r4,r2,3
10001200:	2000491e 	bne	r4,zero,10001328 <update_event_b+0x920>
10001204:	1800481e 	bne	r3,zero,10001328 <update_event_b+0x920>
                    if (state_b[Ori] == 0) {
10001208:	d0a00c17 	ldw	r2,-32720(gp)
1000120c:	1085883a 	add	r2,r2,r2
10001210:	1085883a 	add	r2,r2,r2
10001214:	1007883a 	mov	r3,r2
10001218:	e0bff617 	ldw	r2,-40(fp)
1000121c:	10c5883a 	add	r2,r2,r3
10001220:	10800017 	ldw	r2,0(r2)
10001224:	1000201e 	bne	r2,zero,100012a8 <update_event_b+0x8a0>
                        state_b[Vx] = -30;
10001228:	d0a00a17 	ldw	r2,-32728(gp)
1000122c:	1085883a 	add	r2,r2,r2
10001230:	1085883a 	add	r2,r2,r2
10001234:	1007883a 	mov	r3,r2
10001238:	e0bff617 	ldw	r2,-40(fp)
1000123c:	10c5883a 	add	r2,r2,r3
10001240:	00fff884 	movi	r3,-30
10001244:	10c00015 	stw	r3,0(r2)
                        prohibit_b[Vy] = 1;
10001248:	d0a00b17 	ldw	r2,-32724(gp)
1000124c:	1085883a 	add	r2,r2,r2
10001250:	1085883a 	add	r2,r2,r2
10001254:	1007883a 	mov	r3,r2
10001258:	e0bff917 	ldw	r2,-28(fp)
1000125c:	10c5883a 	add	r2,r2,r3
10001260:	00c00044 	movi	r3,1
10001264:	10c00015 	stw	r3,0(r2)
                        state_b[Ceny] += 10;
10001268:	d0a00e17 	ldw	r2,-32712(gp)
1000126c:	1085883a 	add	r2,r2,r2
10001270:	1085883a 	add	r2,r2,r2
10001274:	1007883a 	mov	r3,r2
10001278:	e0bff617 	ldw	r2,-40(fp)
1000127c:	10c7883a 	add	r3,r2,r3
10001280:	d0a00e17 	ldw	r2,-32712(gp)
10001284:	1085883a 	add	r2,r2,r2
10001288:	1085883a 	add	r2,r2,r2
1000128c:	1009883a 	mov	r4,r2
10001290:	e0bff617 	ldw	r2,-40(fp)
10001294:	1105883a 	add	r2,r2,r4
10001298:	10800017 	ldw	r2,0(r2)
1000129c:	10800284 	addi	r2,r2,10
100012a0:	18800015 	stw	r2,0(r3)
100012a4:	00010306 	br	100016b4 <update_event_b+0xcac>
                    } else {
                        state_b[Vx] = 30;
100012a8:	d0a00a17 	ldw	r2,-32728(gp)
100012ac:	1085883a 	add	r2,r2,r2
100012b0:	1085883a 	add	r2,r2,r2
100012b4:	1007883a 	mov	r3,r2
100012b8:	e0bff617 	ldw	r2,-40(fp)
100012bc:	10c5883a 	add	r2,r2,r3
100012c0:	00c00784 	movi	r3,30
100012c4:	10c00015 	stw	r3,0(r2)
                        prohibit_b[Vy] = 1;
100012c8:	d0a00b17 	ldw	r2,-32724(gp)
100012cc:	1085883a 	add	r2,r2,r2
100012d0:	1085883a 	add	r2,r2,r2
100012d4:	1007883a 	mov	r3,r2
100012d8:	e0bff917 	ldw	r2,-28(fp)
100012dc:	10c5883a 	add	r2,r2,r3
100012e0:	00c00044 	movi	r3,1
100012e4:	10c00015 	stw	r3,0(r2)
                        state_b[Ceny] += 10;
100012e8:	d0a00e17 	ldw	r2,-32712(gp)
100012ec:	1085883a 	add	r2,r2,r2
100012f0:	1085883a 	add	r2,r2,r2
100012f4:	1007883a 	mov	r3,r2
100012f8:	e0bff617 	ldw	r2,-40(fp)
100012fc:	10c7883a 	add	r3,r2,r3
10001300:	d0a00e17 	ldw	r2,-32712(gp)
10001304:	1085883a 	add	r2,r2,r2
10001308:	1085883a 	add	r2,r2,r2
1000130c:	1009883a 	mov	r4,r2
10001310:	e0bff617 	ldw	r2,-40(fp)
10001314:	1105883a 	add	r2,r2,r4
10001318:	10800017 	ldw	r2,0(r2)
1000131c:	10800284 	addi	r2,r2,10
10001320:	18800015 	stw	r2,0(r3)
10001324:	0000e306 	br	100016b4 <update_event_b+0xcac>
                    }
                } else if (event_b[0][fcount] == 4) {
10001328:	d0a04317 	ldw	r2,-32500(gp)
1000132c:	e0fff817 	ldw	r3,-32(fp)
10001330:	100490fa 	slli	r2,r2,3
10001334:	1889883a 	add	r4,r3,r2
10001338:	20800017 	ldw	r2,0(r4)
1000133c:	20c00117 	ldw	r3,4(r4)
10001340:	11000118 	cmpnei	r4,r2,4
10001344:	2000db1e 	bne	r4,zero,100016b4 <update_event_b+0xcac>
10001348:	1800da1e 	bne	r3,zero,100016b4 <update_event_b+0xcac>
                    state_b[Vx] = 0;
1000134c:	d0a00a17 	ldw	r2,-32728(gp)
10001350:	1085883a 	add	r2,r2,r2
10001354:	1085883a 	add	r2,r2,r2
10001358:	1007883a 	mov	r3,r2
1000135c:	e0bff617 	ldw	r2,-40(fp)
10001360:	10c5883a 	add	r2,r2,r3
10001364:	10000015 	stw	zero,0(r2)
                    prohibit_b[Vy] = 0;
10001368:	d0a00b17 	ldw	r2,-32724(gp)
1000136c:	1085883a 	add	r2,r2,r2
10001370:	1085883a 	add	r2,r2,r2
10001374:	1007883a 	mov	r3,r2
10001378:	e0bff917 	ldw	r2,-28(fp)
1000137c:	10c5883a 	add	r2,r2,r3
10001380:	10000015 	stw	zero,0(r2)
                    state_b[Ceny] -= 10;
10001384:	d0a00e17 	ldw	r2,-32712(gp)
10001388:	1085883a 	add	r2,r2,r2
1000138c:	1085883a 	add	r2,r2,r2
10001390:	1007883a 	mov	r3,r2
10001394:	e0bff617 	ldw	r2,-40(fp)
10001398:	10c7883a 	add	r3,r2,r3
1000139c:	d0a00e17 	ldw	r2,-32712(gp)
100013a0:	1085883a 	add	r2,r2,r2
100013a4:	1085883a 	add	r2,r2,r2
100013a8:	1009883a 	mov	r4,r2
100013ac:	e0bff617 	ldw	r2,-40(fp)
100013b0:	1105883a 	add	r2,r2,r4
100013b4:	10800017 	ldw	r2,0(r2)
100013b8:	10bffd84 	addi	r2,r2,-10
100013bc:	18800015 	stw	r2,0(r3)
100013c0:	0000bc06 	br	100016b4 <update_event_b+0xcac>
                } else {}
            } else if (event_b[0][id] == 9) {   // Spine
100013c4:	d0a04617 	ldw	r2,-32488(gp)
100013c8:	e0fff817 	ldw	r3,-32(fp)
100013cc:	100490fa 	slli	r2,r2,3
100013d0:	1889883a 	add	r4,r3,r2
100013d4:	20800017 	ldw	r2,0(r4)
100013d8:	20c00117 	ldw	r3,4(r4)
100013dc:	11000258 	cmpnei	r4,r2,9
100013e0:	2000b41e 	bne	r4,zero,100016b4 <update_event_b+0xcac>
100013e4:	1800b31e 	bne	r3,zero,100016b4 <update_event_b+0xcac>
                if (event_b[0][fcount] == 4) {      // Spark to the position above character
100013e8:	d0a04317 	ldw	r2,-32500(gp)
100013ec:	e0fff817 	ldw	r3,-32(fp)
100013f0:	100490fa 	slli	r2,r2,3
100013f4:	1889883a 	add	r4,r3,r2
100013f8:	20800017 	ldw	r2,0(r4)
100013fc:	20c00117 	ldw	r3,4(r4)
10001400:	11000118 	cmpnei	r4,r2,4
10001404:	2000571e 	bne	r4,zero,10001564 <update_event_b+0xb5c>
10001408:	1800561e 	bne	r3,zero,10001564 <update_event_b+0xb5c>
                    state_b[Ori] = 0;
1000140c:	d0a00c17 	ldw	r2,-32720(gp)
10001410:	1085883a 	add	r2,r2,r2
10001414:	1085883a 	add	r2,r2,r2
10001418:	1007883a 	mov	r3,r2
1000141c:	e0bff617 	ldw	r2,-40(fp)
10001420:	10c5883a 	add	r2,r2,r3
10001424:	10000015 	stw	zero,0(r2)
                    state_b[Cx] = state_c[Cx];
10001428:	d0a00817 	ldw	r2,-32736(gp)
1000142c:	1085883a 	add	r2,r2,r2
10001430:	1085883a 	add	r2,r2,r2
10001434:	1007883a 	mov	r3,r2
10001438:	e0bff617 	ldw	r2,-40(fp)
1000143c:	10c7883a 	add	r3,r2,r3
10001440:	d0a00817 	ldw	r2,-32736(gp)
10001444:	1085883a 	add	r2,r2,r2
10001448:	1085883a 	add	r2,r2,r2
1000144c:	1009883a 	mov	r4,r2
10001450:	e0bff717 	ldw	r2,-36(fp)
10001454:	1105883a 	add	r2,r2,r4
10001458:	10800017 	ldw	r2,0(r2)
1000145c:	18800015 	stw	r2,0(r3)
                    state_b[Cy] = 10;
10001460:	d0a00917 	ldw	r2,-32732(gp)
10001464:	1085883a 	add	r2,r2,r2
10001468:	1085883a 	add	r2,r2,r2
1000146c:	1007883a 	mov	r3,r2
10001470:	e0bff617 	ldw	r2,-40(fp)
10001474:	10c5883a 	add	r2,r2,r3
10001478:	00c00284 	movi	r3,10
1000147c:	10c00015 	stw	r3,0(r2)
                    state_b[Cenx] = state_b[Cx] + event_b[index+1][4];
10001480:	d0a00d17 	ldw	r2,-32716(gp)
10001484:	1085883a 	add	r2,r2,r2
10001488:	1085883a 	add	r2,r2,r2
1000148c:	1007883a 	mov	r3,r2
10001490:	e0bff617 	ldw	r2,-40(fp)
10001494:	10e1883a 	add	r16,r2,r3
10001498:	d0a00817 	ldw	r2,-32736(gp)
1000149c:	1085883a 	add	r2,r2,r2
100014a0:	1085883a 	add	r2,r2,r2
100014a4:	1007883a 	mov	r3,r2
100014a8:	e0bff617 	ldw	r2,-40(fp)
100014ac:	10c5883a 	add	r2,r2,r3
100014b0:	10800017 	ldw	r2,0(r2)
100014b4:	1023883a 	mov	r17,r2
100014b8:	e0bff517 	ldw	r2,-44(fp)
100014bc:	10800044 	addi	r2,r2,1
100014c0:	1007883a 	mov	r3,r2
100014c4:	d0a03717 	ldw	r2,-32548(gp)
100014c8:	100b883a 	mov	r5,r2
100014cc:	1809883a 	mov	r4,r3
100014d0:	0007d040 	call	10007d04 <__mulsi3>
100014d4:	100490fa 	slli	r2,r2,3
100014d8:	e0fff817 	ldw	r3,-32(fp)
100014dc:	1889883a 	add	r4,r3,r2
100014e0:	20800817 	ldw	r2,32(r4)
100014e4:	20c00917 	ldw	r3,36(r4)
100014e8:	8885883a 	add	r2,r17,r2
100014ec:	80800015 	stw	r2,0(r16)
                    state_b[Ceny] = state_b[Cy] + event_b[index+1][5];
100014f0:	d0a00e17 	ldw	r2,-32712(gp)
100014f4:	1085883a 	add	r2,r2,r2
100014f8:	1085883a 	add	r2,r2,r2
100014fc:	1007883a 	mov	r3,r2
10001500:	e0bff617 	ldw	r2,-40(fp)
10001504:	10e1883a 	add	r16,r2,r3
10001508:	d0a00917 	ldw	r2,-32732(gp)
1000150c:	1085883a 	add	r2,r2,r2
10001510:	1085883a 	add	r2,r2,r2
10001514:	1007883a 	mov	r3,r2
10001518:	e0bff617 	ldw	r2,-40(fp)
1000151c:	10c5883a 	add	r2,r2,r3
10001520:	10800017 	ldw	r2,0(r2)
10001524:	1023883a 	mov	r17,r2
10001528:	e0bff517 	ldw	r2,-44(fp)
1000152c:	10800044 	addi	r2,r2,1
10001530:	1007883a 	mov	r3,r2
10001534:	d0a03717 	ldw	r2,-32548(gp)
10001538:	100b883a 	mov	r5,r2
1000153c:	1809883a 	mov	r4,r3
10001540:	0007d040 	call	10007d04 <__mulsi3>
10001544:	100490fa 	slli	r2,r2,3
10001548:	e0fff817 	ldw	r3,-32(fp)
1000154c:	1889883a 	add	r4,r3,r2
10001550:	20800a17 	ldw	r2,40(r4)
10001554:	20c00b17 	ldw	r3,44(r4)
10001558:	8885883a 	add	r2,r17,r2
1000155c:	80800015 	stw	r2,0(r16)
10001560:	00005406 	br	100016b4 <update_event_b+0xcac>
                } else if (event_b[0][fcount] == 8) {
10001564:	d0a04317 	ldw	r2,-32500(gp)
10001568:	e0fff817 	ldw	r3,-32(fp)
1000156c:	100490fa 	slli	r2,r2,3
10001570:	1889883a 	add	r4,r3,r2
10001574:	20800017 	ldw	r2,0(r4)
10001578:	20c00117 	ldw	r3,4(r4)
1000157c:	11000218 	cmpnei	r4,r2,8
10001580:	20000a1e 	bne	r4,zero,100015ac <update_event_b+0xba4>
10001584:	1800091e 	bne	r3,zero,100015ac <update_event_b+0xba4>
                    state_b[Vy] = 30;
10001588:	d0a00b17 	ldw	r2,-32724(gp)
1000158c:	1085883a 	add	r2,r2,r2
10001590:	1085883a 	add	r2,r2,r2
10001594:	1007883a 	mov	r3,r2
10001598:	e0bff617 	ldw	r2,-40(fp)
1000159c:	10c5883a 	add	r2,r2,r3
100015a0:	00c00784 	movi	r3,30
100015a4:	10c00015 	stw	r3,0(r2)
100015a8:	00004206 	br	100016b4 <update_event_b+0xcac>
                } else if (event_b[0][fcount] == 9) {
100015ac:	d0a04317 	ldw	r2,-32500(gp)
100015b0:	e0fff817 	ldw	r3,-32(fp)
100015b4:	100490fa 	slli	r2,r2,3
100015b8:	1889883a 	add	r4,r3,r2
100015bc:	20800017 	ldw	r2,0(r4)
100015c0:	20c00117 	ldw	r3,4(r4)
100015c4:	11000258 	cmpnei	r4,r2,9
100015c8:	20003a1e 	bne	r4,zero,100016b4 <update_event_b+0xcac>
100015cc:	1800391e 	bne	r3,zero,100016b4 <update_event_b+0xcac>
                    state_b[Cenx] = state_b[Cx] + event_b[index+1][4];
100015d0:	d0a00d17 	ldw	r2,-32716(gp)
100015d4:	1085883a 	add	r2,r2,r2
100015d8:	1085883a 	add	r2,r2,r2
100015dc:	1007883a 	mov	r3,r2
100015e0:	e0bff617 	ldw	r2,-40(fp)
100015e4:	10e1883a 	add	r16,r2,r3
100015e8:	d0a00817 	ldw	r2,-32736(gp)
100015ec:	1085883a 	add	r2,r2,r2
100015f0:	1085883a 	add	r2,r2,r2
100015f4:	1007883a 	mov	r3,r2
100015f8:	e0bff617 	ldw	r2,-40(fp)
100015fc:	10c5883a 	add	r2,r2,r3
10001600:	10800017 	ldw	r2,0(r2)
10001604:	1023883a 	mov	r17,r2
10001608:	e0bff517 	ldw	r2,-44(fp)
1000160c:	10800044 	addi	r2,r2,1
10001610:	1007883a 	mov	r3,r2
10001614:	d0a03717 	ldw	r2,-32548(gp)
10001618:	100b883a 	mov	r5,r2
1000161c:	1809883a 	mov	r4,r3
10001620:	0007d040 	call	10007d04 <__mulsi3>
10001624:	100490fa 	slli	r2,r2,3
10001628:	e0fff817 	ldw	r3,-32(fp)
1000162c:	1889883a 	add	r4,r3,r2
10001630:	20800817 	ldw	r2,32(r4)
10001634:	20c00917 	ldw	r3,36(r4)
10001638:	8885883a 	add	r2,r17,r2
1000163c:	80800015 	stw	r2,0(r16)
                    state_b[Ceny] = state_b[Cy] + event_b[index+1][5] + 20;
10001640:	d0a00e17 	ldw	r2,-32712(gp)
10001644:	1085883a 	add	r2,r2,r2
10001648:	1085883a 	add	r2,r2,r2
1000164c:	1007883a 	mov	r3,r2
10001650:	e0bff617 	ldw	r2,-40(fp)
10001654:	10e1883a 	add	r16,r2,r3
10001658:	d0a00917 	ldw	r2,-32732(gp)
1000165c:	1085883a 	add	r2,r2,r2
10001660:	1085883a 	add	r2,r2,r2
10001664:	1007883a 	mov	r3,r2
10001668:	e0bff617 	ldw	r2,-40(fp)
1000166c:	10c5883a 	add	r2,r2,r3
10001670:	10800017 	ldw	r2,0(r2)
10001674:	1023883a 	mov	r17,r2
10001678:	e0bff517 	ldw	r2,-44(fp)
1000167c:	10800044 	addi	r2,r2,1
10001680:	1007883a 	mov	r3,r2
10001684:	d0a03717 	ldw	r2,-32548(gp)
10001688:	100b883a 	mov	r5,r2
1000168c:	1809883a 	mov	r4,r3
10001690:	0007d040 	call	10007d04 <__mulsi3>
10001694:	100490fa 	slli	r2,r2,3
10001698:	e0fff817 	ldw	r3,-32(fp)
1000169c:	1889883a 	add	r4,r3,r2
100016a0:	20800a17 	ldw	r2,40(r4)
100016a4:	20c00b17 	ldw	r3,44(r4)
100016a8:	8885883a 	add	r2,r17,r2
100016ac:	10800504 	addi	r2,r2,20
100016b0:	80800015 	stw	r2,0(r16)
                } else {}
            } else {}
            
            // Current frame ended
            event_b[0][fcount] += 1;
100016b4:	d2204317 	ldw	r8,-32500(gp)
100016b8:	d0a04317 	ldw	r2,-32500(gp)
100016bc:	e0fff817 	ldw	r3,-32(fp)
100016c0:	100490fa 	slli	r2,r2,3
100016c4:	1885883a 	add	r2,r3,r2
100016c8:	11000017 	ldw	r4,0(r2)
100016cc:	11400117 	ldw	r5,4(r2)
100016d0:	01800044 	movi	r6,1
100016d4:	000f883a 	mov	r7,zero
100016d8:	2185883a 	add	r2,r4,r6
100016dc:	1113803a 	cmpltu	r9,r2,r4
100016e0:	29c7883a 	add	r3,r5,r7
100016e4:	48c9883a 	add	r4,r9,r3
100016e8:	2007883a 	mov	r3,r4
100016ec:	1009883a 	mov	r4,r2
100016f0:	180b883a 	mov	r5,r3
100016f4:	e0fff817 	ldw	r3,-32(fp)
100016f8:	400490fa 	slli	r2,r8,3
100016fc:	1885883a 	add	r2,r3,r2
10001700:	11000015 	stw	r4,0(r2)
10001704:	11400115 	stw	r5,4(r2)
            state_b[Offx] = event_b[index+1][2];
10001708:	d0a00f17 	ldw	r2,-32708(gp)
1000170c:	1085883a 	add	r2,r2,r2
10001710:	1085883a 	add	r2,r2,r2
10001714:	1007883a 	mov	r3,r2
10001718:	e0bff617 	ldw	r2,-40(fp)
1000171c:	10e1883a 	add	r16,r2,r3
10001720:	e0bff517 	ldw	r2,-44(fp)
10001724:	10800044 	addi	r2,r2,1
10001728:	1007883a 	mov	r3,r2
1000172c:	d0a03717 	ldw	r2,-32548(gp)
10001730:	100b883a 	mov	r5,r2
10001734:	1809883a 	mov	r4,r3
10001738:	0007d040 	call	10007d04 <__mulsi3>
1000173c:	100490fa 	slli	r2,r2,3
10001740:	e0fff817 	ldw	r3,-32(fp)
10001744:	1889883a 	add	r4,r3,r2
10001748:	20800417 	ldw	r2,16(r4)
1000174c:	20c00517 	ldw	r3,20(r4)
10001750:	80800015 	stw	r2,0(r16)
            state_b[Offy] = event_b[index+1][3];
10001754:	d0a01017 	ldw	r2,-32704(gp)
10001758:	1085883a 	add	r2,r2,r2
1000175c:	1085883a 	add	r2,r2,r2
10001760:	1007883a 	mov	r3,r2
10001764:	e0bff617 	ldw	r2,-40(fp)
10001768:	10e1883a 	add	r16,r2,r3
1000176c:	e0bff517 	ldw	r2,-44(fp)
10001770:	10800044 	addi	r2,r2,1
10001774:	1007883a 	mov	r3,r2
10001778:	d0a03717 	ldw	r2,-32548(gp)
1000177c:	100b883a 	mov	r5,r2
10001780:	1809883a 	mov	r4,r3
10001784:	0007d040 	call	10007d04 <__mulsi3>
10001788:	100490fa 	slli	r2,r2,3
1000178c:	e0fff817 	ldw	r3,-32(fp)
10001790:	1889883a 	add	r4,r3,r2
10001794:	20800617 	ldw	r2,24(r4)
10001798:	20c00717 	ldw	r3,28(r4)
1000179c:	80800015 	stw	r2,0(r16)
            state_b[CenOffx] = event_b[index+1][4];
100017a0:	d0a01117 	ldw	r2,-32700(gp)
100017a4:	1085883a 	add	r2,r2,r2
100017a8:	1085883a 	add	r2,r2,r2
100017ac:	1007883a 	mov	r3,r2
100017b0:	e0bff617 	ldw	r2,-40(fp)
100017b4:	10e1883a 	add	r16,r2,r3
100017b8:	e0bff517 	ldw	r2,-44(fp)
100017bc:	10800044 	addi	r2,r2,1
100017c0:	1007883a 	mov	r3,r2
100017c4:	d0a03717 	ldw	r2,-32548(gp)
100017c8:	100b883a 	mov	r5,r2
100017cc:	1809883a 	mov	r4,r3
100017d0:	0007d040 	call	10007d04 <__mulsi3>
100017d4:	100490fa 	slli	r2,r2,3
100017d8:	e0fff817 	ldw	r3,-32(fp)
100017dc:	1889883a 	add	r4,r3,r2
100017e0:	20800817 	ldw	r2,32(r4)
100017e4:	20c00917 	ldw	r3,36(r4)
100017e8:	80800015 	stw	r2,0(r16)
            state_b[CenOffy] = event_b[index+1][5];
100017ec:	d0a01217 	ldw	r2,-32696(gp)
100017f0:	1085883a 	add	r2,r2,r2
100017f4:	1085883a 	add	r2,r2,r2
100017f8:	1007883a 	mov	r3,r2
100017fc:	e0bff617 	ldw	r2,-40(fp)
10001800:	10e1883a 	add	r16,r2,r3
10001804:	e0bff517 	ldw	r2,-44(fp)
10001808:	10800044 	addi	r2,r2,1
1000180c:	1007883a 	mov	r3,r2
10001810:	d0a03717 	ldw	r2,-32548(gp)
10001814:	100b883a 	mov	r5,r2
10001818:	1809883a 	mov	r4,r3
1000181c:	0007d040 	call	10007d04 <__mulsi3>
10001820:	100490fa 	slli	r2,r2,3
10001824:	e0fff817 	ldw	r3,-32(fp)
10001828:	1889883a 	add	r4,r3,r2
1000182c:	20800a17 	ldw	r2,40(r4)
10001830:	20c00b17 	ldw	r3,44(r4)
10001834:	80800015 	stw	r2,0(r16)
        }
    } 

    // Subtract the counter of current frame by 1
    if ((index != event_b[0][condition_1]) && (index != event_b[0][condition_2])){
10001838:	e0bff517 	ldw	r2,-44(fp)
1000183c:	1029883a 	mov	r20,r2
10001840:	1005d7fa 	srai	r2,r2,31
10001844:	102b883a 	mov	r21,r2
10001848:	d0a04717 	ldw	r2,-32484(gp)
1000184c:	e0fff817 	ldw	r3,-32(fp)
10001850:	100490fa 	slli	r2,r2,3
10001854:	1889883a 	add	r4,r3,r2
10001858:	20800017 	ldw	r2,0(r4)
1000185c:	20c00117 	ldw	r3,4(r4)
10001860:	a080011e 	bne	r20,r2,10001868 <update_event_b+0xe60>
10001864:	a8c02c26 	beq	r21,r3,10001918 <update_event_b+0xf10>
10001868:	e0bff517 	ldw	r2,-44(fp)
1000186c:	1025883a 	mov	r18,r2
10001870:	1005d7fa 	srai	r2,r2,31
10001874:	1027883a 	mov	r19,r2
10001878:	d0a04817 	ldw	r2,-32480(gp)
1000187c:	e0fff817 	ldw	r3,-32(fp)
10001880:	100490fa 	slli	r2,r2,3
10001884:	1889883a 	add	r4,r3,r2
10001888:	20800017 	ldw	r2,0(r4)
1000188c:	20c00117 	ldw	r3,4(r4)
10001890:	9080011e 	bne	r18,r2,10001898 <update_event_b+0xe90>
10001894:	98c02026 	beq	r19,r3,10001918 <update_event_b+0xf10>
        event_b[index][0] -= 1;
10001898:	d0a03717 	ldw	r2,-32548(gp)
1000189c:	1007883a 	mov	r3,r2
100018a0:	e0bff517 	ldw	r2,-44(fp)
100018a4:	100b883a 	mov	r5,r2
100018a8:	1809883a 	mov	r4,r3
100018ac:	0007d040 	call	10007d04 <__mulsi3>
100018b0:	100490fa 	slli	r2,r2,3
100018b4:	e0fff817 	ldw	r3,-32(fp)
100018b8:	18a1883a 	add	r16,r3,r2
100018bc:	d0a03717 	ldw	r2,-32548(gp)
100018c0:	1007883a 	mov	r3,r2
100018c4:	e0bff517 	ldw	r2,-44(fp)
100018c8:	100b883a 	mov	r5,r2
100018cc:	1809883a 	mov	r4,r3
100018d0:	0007d040 	call	10007d04 <__mulsi3>
100018d4:	100490fa 	slli	r2,r2,3
100018d8:	e0fff817 	ldw	r3,-32(fp)
100018dc:	1885883a 	add	r2,r3,r2
100018e0:	11000017 	ldw	r4,0(r2)
100018e4:	11400117 	ldw	r5,4(r2)
100018e8:	01bfffc4 	movi	r6,-1
100018ec:	01ffffc4 	movi	r7,-1
100018f0:	2185883a 	add	r2,r4,r6
100018f4:	1111803a 	cmpltu	r8,r2,r4
100018f8:	29c7883a 	add	r3,r5,r7
100018fc:	40c9883a 	add	r4,r8,r3
10001900:	2007883a 	mov	r3,r4
10001904:	1009883a 	mov	r4,r2
10001908:	180b883a 	mov	r5,r3
1000190c:	81000015 	stw	r4,0(r16)
10001910:	81400115 	stw	r5,4(r16)
10001914:	00002706 	br	100019b4 <update_event_b+0xfac>
    } else {
        if (state_b[Vy] == 0) {
10001918:	d0a00b17 	ldw	r2,-32724(gp)
1000191c:	1085883a 	add	r2,r2,r2
10001920:	1085883a 	add	r2,r2,r2
10001924:	1007883a 	mov	r3,r2
10001928:	e0bff617 	ldw	r2,-40(fp)
1000192c:	10c5883a 	add	r2,r2,r3
10001930:	10800017 	ldw	r2,0(r2)
10001934:	10001f1e 	bne	r2,zero,100019b4 <update_event_b+0xfac>
            event_b[index][0] -= 1;
10001938:	d0a03717 	ldw	r2,-32548(gp)
1000193c:	1007883a 	mov	r3,r2
10001940:	e0bff517 	ldw	r2,-44(fp)
10001944:	100b883a 	mov	r5,r2
10001948:	1809883a 	mov	r4,r3
1000194c:	0007d040 	call	10007d04 <__mulsi3>
10001950:	100490fa 	slli	r2,r2,3
10001954:	e0fff817 	ldw	r3,-32(fp)
10001958:	18a1883a 	add	r16,r3,r2
1000195c:	d0a03717 	ldw	r2,-32548(gp)
10001960:	1007883a 	mov	r3,r2
10001964:	e0bff517 	ldw	r2,-44(fp)
10001968:	100b883a 	mov	r5,r2
1000196c:	1809883a 	mov	r4,r3
10001970:	0007d040 	call	10007d04 <__mulsi3>
10001974:	100490fa 	slli	r2,r2,3
10001978:	e0fff817 	ldw	r3,-32(fp)
1000197c:	1885883a 	add	r2,r3,r2
10001980:	11000017 	ldw	r4,0(r2)
10001984:	11400117 	ldw	r5,4(r2)
10001988:	01bfffc4 	movi	r6,-1
1000198c:	01ffffc4 	movi	r7,-1
10001990:	2185883a 	add	r2,r4,r6
10001994:	1111803a 	cmpltu	r8,r2,r4
10001998:	29c7883a 	add	r3,r5,r7
1000199c:	40c9883a 	add	r4,r8,r3
100019a0:	2007883a 	mov	r3,r4
100019a4:	1009883a 	mov	r4,r2
100019a8:	180b883a 	mov	r5,r3
100019ac:	81000015 	stw	r4,0(r16)
100019b0:	81400115 	stw	r5,4(r16)
        }
    }
}
100019b4:	e6fffa04 	addi	sp,fp,-24
100019b8:	dfc00717 	ldw	ra,28(sp)
100019bc:	df000617 	ldw	fp,24(sp)
100019c0:	dd400517 	ldw	r21,20(sp)
100019c4:	dd000417 	ldw	r20,16(sp)
100019c8:	dcc00317 	ldw	r19,12(sp)
100019cc:	dc800217 	ldw	r18,8(sp)
100019d0:	dc400117 	ldw	r17,4(sp)
100019d4:	dc000017 	ldw	r16,0(sp)
100019d8:	dec00804 	addi	sp,sp,32
100019dc:	f800283a 	ret

100019e0 <change_event_b>:
    int prohibit_b[N_prohibit_b],
    int clock,
    int system_flage[N_system_flage],
    int cooling_c[N_cooling_c]
)
{
100019e0:	defff604 	addi	sp,sp,-40
100019e4:	dfc00915 	stw	ra,36(sp)
100019e8:	df000815 	stw	fp,32(sp)
100019ec:	df000804 	addi	fp,sp,32
100019f0:	e13ffc15 	stw	r4,-16(fp)
100019f4:	e17ffd15 	stw	r5,-12(fp)
100019f8:	e1bffe15 	stw	r6,-8(fp)
100019fc:	e1ffff15 	stw	r7,-4(fp)

// Change the current event
void change_event_b(
    int state_b[N_state_b],
    int state_c[N_state_c],
    long long unsigned int event_b[N1_event_b][N2_event_b],
10001a00:	d1203717 	ldw	r4,-32548(gp)
10001a04:	213fffc4 	addi	r4,r4,-1
    }
}


// Change the current event
void change_event_b(
10001a08:	e13ff915 	stw	r4,-28(fp)
10001a0c:	d1203717 	ldw	r4,-32548(gp)
10001a10:	2011883a 	mov	r8,r4
10001a14:	0013883a 	mov	r9,zero
10001a18:	4008d6ba 	srli	r4,r8,26
10001a1c:	480691ba 	slli	r3,r9,6
10001a20:	20c6b03a 	or	r3,r4,r3
10001a24:	400491ba 	slli	r2,r8,6
    int clock,
    int system_flage[N_system_flage],
    int cooling_c[N_cooling_c]
)
{
    int spark_enable = 0;
10001a28:	e03ff815 	stw	zero,-32(fp)
    int left = state_b[Cx] - 80;
10001a2c:	d0a00817 	ldw	r2,-32736(gp)
10001a30:	1085883a 	add	r2,r2,r2
10001a34:	1085883a 	add	r2,r2,r2
10001a38:	1007883a 	mov	r3,r2
10001a3c:	e0bffc17 	ldw	r2,-16(fp)
10001a40:	10c5883a 	add	r2,r2,r3
10001a44:	10800017 	ldw	r2,0(r2)
10001a48:	10bfec04 	addi	r2,r2,-80
10001a4c:	e0bffa15 	stw	r2,-24(fp)
    int right = state_b[Cx] + state_b[Offx] + 80;
10001a50:	d0a00817 	ldw	r2,-32736(gp)
10001a54:	1085883a 	add	r2,r2,r2
10001a58:	1085883a 	add	r2,r2,r2
10001a5c:	1007883a 	mov	r3,r2
10001a60:	e0bffc17 	ldw	r2,-16(fp)
10001a64:	10c5883a 	add	r2,r2,r3
10001a68:	10c00017 	ldw	r3,0(r2)
10001a6c:	d0a00f17 	ldw	r2,-32708(gp)
10001a70:	1085883a 	add	r2,r2,r2
10001a74:	1085883a 	add	r2,r2,r2
10001a78:	1009883a 	mov	r4,r2
10001a7c:	e0bffc17 	ldw	r2,-16(fp)
10001a80:	1105883a 	add	r2,r2,r4
10001a84:	10800017 	ldw	r2,0(r2)
10001a88:	1885883a 	add	r2,r3,r2
10001a8c:	10801404 	addi	r2,r2,80
10001a90:	e0bffb15 	stw	r2,-20(fp)

	// Determine whether a spark is needed
	if ((state_c[Cenx] >= left && state_c[Cenx] <= right)) {
10001a94:	d0a00d17 	ldw	r2,-32716(gp)
10001a98:	1085883a 	add	r2,r2,r2
10001a9c:	1085883a 	add	r2,r2,r2
10001aa0:	1007883a 	mov	r3,r2
10001aa4:	e0bffd17 	ldw	r2,-12(fp)
10001aa8:	10c5883a 	add	r2,r2,r3
10001aac:	10c00017 	ldw	r3,0(r2)
10001ab0:	e0bffa17 	ldw	r2,-24(fp)
10001ab4:	18802c16 	blt	r3,r2,10001b68 <change_event_b+0x188>
10001ab8:	d0a00d17 	ldw	r2,-32716(gp)
10001abc:	1085883a 	add	r2,r2,r2
10001ac0:	1085883a 	add	r2,r2,r2
10001ac4:	1007883a 	mov	r3,r2
10001ac8:	e0bffd17 	ldw	r2,-12(fp)
10001acc:	10c5883a 	add	r2,r2,r3
10001ad0:	10800017 	ldw	r2,0(r2)
10001ad4:	e0fffb17 	ldw	r3,-20(fp)
10001ad8:	18802316 	blt	r3,r2,10001b68 <change_event_b+0x188>
		if (state_b[SparkF] == 0) {
10001adc:	d0a01517 	ldw	r2,-32684(gp)
10001ae0:	1085883a 	add	r2,r2,r2
10001ae4:	1085883a 	add	r2,r2,r2
10001ae8:	1007883a 	mov	r3,r2
10001aec:	e0bffc17 	ldw	r2,-16(fp)
10001af0:	10c5883a 	add	r2,r2,r3
10001af4:	10800017 	ldw	r2,0(r2)
10001af8:	10001b1e 	bne	r2,zero,10001b68 <change_event_b+0x188>
			spark_enable = 1;
10001afc:	00800044 	movi	r2,1
10001b00:	e0bff815 	stw	r2,-32(fp)
			if (state_c[Cenx] >= 320) {
10001b04:	d0a00d17 	ldw	r2,-32716(gp)
10001b08:	1085883a 	add	r2,r2,r2
10001b0c:	1085883a 	add	r2,r2,r2
10001b10:	1007883a 	mov	r3,r2
10001b14:	e0bffd17 	ldw	r2,-12(fp)
10001b18:	10c5883a 	add	r2,r2,r3
10001b1c:	10800017 	ldw	r2,0(r2)
10001b20:	10805010 	cmplti	r2,r2,320
10001b24:	1000081e 	bne	r2,zero,10001b48 <change_event_b+0x168>
				system_flage[f_spark_ori] = 0;
10001b28:	d0a02817 	ldw	r2,-32608(gp)
10001b2c:	1085883a 	add	r2,r2,r2
10001b30:	1085883a 	add	r2,r2,r2
10001b34:	1007883a 	mov	r3,r2
10001b38:	e0800317 	ldw	r2,12(fp)
10001b3c:	10c5883a 	add	r2,r2,r3
10001b40:	10000015 	stw	zero,0(r2)
10001b44:	00000806 	br	10001b68 <change_event_b+0x188>
			} else {
				system_flage[f_spark_ori] = 1;
10001b48:	d0a02817 	ldw	r2,-32608(gp)
10001b4c:	1085883a 	add	r2,r2,r2
10001b50:	1085883a 	add	r2,r2,r2
10001b54:	1007883a 	mov	r3,r2
10001b58:	e0800317 	ldw	r2,12(fp)
10001b5c:	10c5883a 	add	r2,r2,r3
10001b60:	00c00044 	movi	r3,1
10001b64:	10c00015 	stw	r3,0(r2)
			}
		}
	}

    // Spark
    if ((cooling_c[c_stiff] == 0) && (spark_enable == 1) && (state_b[skill] <= 3) && (prohibit_b[p_spark] == 0)) {
10001b68:	d0a02317 	ldw	r2,-32628(gp)
10001b6c:	1085883a 	add	r2,r2,r2
10001b70:	1085883a 	add	r2,r2,r2
10001b74:	1007883a 	mov	r3,r2
10001b78:	e0800417 	ldw	r2,16(fp)
10001b7c:	10c5883a 	add	r2,r2,r3
10001b80:	10800017 	ldw	r2,0(r2)
10001b84:	1000621e 	bne	r2,zero,10001d10 <change_event_b+0x330>
10001b88:	e0bff817 	ldw	r2,-32(fp)
10001b8c:	10800058 	cmpnei	r2,r2,1
10001b90:	10005f1e 	bne	r2,zero,10001d10 <change_event_b+0x330>
10001b94:	d0a01417 	ldw	r2,-32688(gp)
10001b98:	1085883a 	add	r2,r2,r2
10001b9c:	1085883a 	add	r2,r2,r2
10001ba0:	1007883a 	mov	r3,r2
10001ba4:	e0bffc17 	ldw	r2,-16(fp)
10001ba8:	10c5883a 	add	r2,r2,r3
10001bac:	10800017 	ldw	r2,0(r2)
10001bb0:	10800108 	cmpgei	r2,r2,4
10001bb4:	1000561e 	bne	r2,zero,10001d10 <change_event_b+0x330>
10001bb8:	d0a01d17 	ldw	r2,-32652(gp)
10001bbc:	1085883a 	add	r2,r2,r2
10001bc0:	1085883a 	add	r2,r2,r2
10001bc4:	1007883a 	mov	r3,r2
10001bc8:	e0bfff17 	ldw	r2,-4(fp)
10001bcc:	10c5883a 	add	r2,r2,r3
10001bd0:	10800017 	ldw	r2,0(r2)
10001bd4:	10004e1e 	bne	r2,zero,10001d10 <change_event_b+0x330>
        // Set flag
        state_b[SparkF] = 1;
10001bd8:	d0a01517 	ldw	r2,-32684(gp)
10001bdc:	1085883a 	add	r2,r2,r2
10001be0:	1085883a 	add	r2,r2,r2
10001be4:	1007883a 	mov	r3,r2
10001be8:	e0bffc17 	ldw	r2,-16(fp)
10001bec:	10c5883a 	add	r2,r2,r3
10001bf0:	00c00044 	movi	r3,1
10001bf4:	10c00015 	stw	r3,0(r2)
        // Update event
        clean_event(event_b);
10001bf8:	e13ffe17 	ldw	r4,-8(fp)
10001bfc:	0004be00 	call	10004be0 <clean_event>
        free_prohibition(prohibit_b, 0xffff);
10001c00:	017fffd4 	movui	r5,65535
10001c04:	e13fff17 	ldw	r4,-4(fp)
10001c08:	0004a040 	call	10004a04 <free_prohibition>
        set_event(event_b, event_b_spark);
10001c0c:	01440074 	movhi	r5,4097
10001c10:	295f7204 	addi	r5,r5,32200
10001c14:	e13ffe17 	ldw	r4,-8(fp)
10001c18:	0004a8c0 	call	10004a8c <set_event>
        set_prohibition(prohibit_b, event_b[0][pvector]);
10001c1c:	d0a04517 	ldw	r2,-32492(gp)
10001c20:	e0fffe17 	ldw	r3,-8(fp)
10001c24:	100490fa 	slli	r2,r2,3
10001c28:	1889883a 	add	r4,r3,r2
10001c2c:	20800017 	ldw	r2,0(r4)
10001c30:	20c00117 	ldw	r3,4(r4)
10001c34:	100b883a 	mov	r5,r2
10001c38:	e13fff17 	ldw	r4,-4(fp)
10001c3c:	00049780 	call	10004978 <set_prohibition>
        // Update other state values
        state_b[Offx] = event_b[1][2];
10001c40:	d0a00f17 	ldw	r2,-32708(gp)
10001c44:	1085883a 	add	r2,r2,r2
10001c48:	1085883a 	add	r2,r2,r2
10001c4c:	1007883a 	mov	r3,r2
10001c50:	e0bffc17 	ldw	r2,-16(fp)
10001c54:	10cb883a 	add	r5,r2,r3
10001c58:	d0a03717 	ldw	r2,-32548(gp)
10001c5c:	100490fa 	slli	r2,r2,3
10001c60:	e0fffe17 	ldw	r3,-8(fp)
10001c64:	1889883a 	add	r4,r3,r2
10001c68:	20800417 	ldw	r2,16(r4)
10001c6c:	20c00517 	ldw	r3,20(r4)
10001c70:	28800015 	stw	r2,0(r5)
        state_b[Offy] = event_b[1][3];
10001c74:	d0a01017 	ldw	r2,-32704(gp)
10001c78:	1085883a 	add	r2,r2,r2
10001c7c:	1085883a 	add	r2,r2,r2
10001c80:	1007883a 	mov	r3,r2
10001c84:	e0bffc17 	ldw	r2,-16(fp)
10001c88:	10cb883a 	add	r5,r2,r3
10001c8c:	d0a03717 	ldw	r2,-32548(gp)
10001c90:	100490fa 	slli	r2,r2,3
10001c94:	e0fffe17 	ldw	r3,-8(fp)
10001c98:	1889883a 	add	r4,r3,r2
10001c9c:	20800617 	ldw	r2,24(r4)
10001ca0:	20c00717 	ldw	r3,28(r4)
10001ca4:	28800015 	stw	r2,0(r5)
        state_b[CenOffx] = event_b[1][4];
10001ca8:	d0a01117 	ldw	r2,-32700(gp)
10001cac:	1085883a 	add	r2,r2,r2
10001cb0:	1085883a 	add	r2,r2,r2
10001cb4:	1007883a 	mov	r3,r2
10001cb8:	e0bffc17 	ldw	r2,-16(fp)
10001cbc:	10cb883a 	add	r5,r2,r3
10001cc0:	d0a03717 	ldw	r2,-32548(gp)
10001cc4:	100490fa 	slli	r2,r2,3
10001cc8:	e0fffe17 	ldw	r3,-8(fp)
10001ccc:	1889883a 	add	r4,r3,r2
10001cd0:	20800817 	ldw	r2,32(r4)
10001cd4:	20c00917 	ldw	r3,36(r4)
10001cd8:	28800015 	stw	r2,0(r5)
        state_b[CenOffy] = event_b[1][5];
10001cdc:	d0a01217 	ldw	r2,-32696(gp)
10001ce0:	1085883a 	add	r2,r2,r2
10001ce4:	1085883a 	add	r2,r2,r2
10001ce8:	1007883a 	mov	r3,r2
10001cec:	e0bffc17 	ldw	r2,-16(fp)
10001cf0:	10cb883a 	add	r5,r2,r3
10001cf4:	d0a03717 	ldw	r2,-32548(gp)
10001cf8:	100490fa 	slli	r2,r2,3
10001cfc:	e0fffe17 	ldw	r3,-8(fp)
10001d00:	1889883a 	add	r4,r3,r2
10001d04:	20800a17 	ldw	r2,40(r4)
10001d08:	20c00b17 	ldw	r3,44(r4)
10001d0c:	28800015 	stw	r2,0(r5)
    }

    // Dash
    if ((cooling_c[c_stiff] == 0) && (state_b[skill] <=3) && (prohibit_b[p_dash] == 0)) {
10001d10:	d0a02317 	ldw	r2,-32628(gp)
10001d14:	1085883a 	add	r2,r2,r2
10001d18:	1085883a 	add	r2,r2,r2
10001d1c:	1007883a 	mov	r3,r2
10001d20:	e0800417 	ldw	r2,16(fp)
10001d24:	10c5883a 	add	r2,r2,r3
10001d28:	10800017 	ldw	r2,0(r2)
10001d2c:	10007c1e 	bne	r2,zero,10001f20 <change_event_b+0x540>
10001d30:	d0a01417 	ldw	r2,-32688(gp)
10001d34:	1085883a 	add	r2,r2,r2
10001d38:	1085883a 	add	r2,r2,r2
10001d3c:	1007883a 	mov	r3,r2
10001d40:	e0bffc17 	ldw	r2,-16(fp)
10001d44:	10c5883a 	add	r2,r2,r3
10001d48:	10800017 	ldw	r2,0(r2)
10001d4c:	10800108 	cmpgei	r2,r2,4
10001d50:	1000731e 	bne	r2,zero,10001f20 <change_event_b+0x540>
10001d54:	d0a01c17 	ldw	r2,-32656(gp)
10001d58:	1085883a 	add	r2,r2,r2
10001d5c:	1085883a 	add	r2,r2,r2
10001d60:	1007883a 	mov	r3,r2
10001d64:	e0bfff17 	ldw	r2,-4(fp)
10001d68:	10c5883a 	add	r2,r2,r3
10001d6c:	10800017 	ldw	r2,0(r2)
10001d70:	10006b1e 	bne	r2,zero,10001f20 <change_event_b+0x540>
        // Set flag
        state_b[SparkF] = 0;
10001d74:	d0a01517 	ldw	r2,-32684(gp)
10001d78:	1085883a 	add	r2,r2,r2
10001d7c:	1085883a 	add	r2,r2,r2
10001d80:	1007883a 	mov	r3,r2
10001d84:	e0bffc17 	ldw	r2,-16(fp)
10001d88:	10c5883a 	add	r2,r2,r3
10001d8c:	10000015 	stw	zero,0(r2)
        if ((rand()%20) < 9) {
10001d90:	0007fac0 	call	10007fac <rand>
10001d94:	01400504 	movi	r5,20
10001d98:	1009883a 	mov	r4,r2
10001d9c:	0007bd40 	call	10007bd4 <__modsi3>
10001da0:	10800248 	cmpgei	r2,r2,9
10001da4:	1000091e 	bne	r2,zero,10001dcc <change_event_b+0x3ec>
			state_b[skill] = 4;
10001da8:	d0a01417 	ldw	r2,-32688(gp)
10001dac:	1085883a 	add	r2,r2,r2
10001db0:	1085883a 	add	r2,r2,r2
10001db4:	1007883a 	mov	r3,r2
10001db8:	e0bffc17 	ldw	r2,-16(fp)
10001dbc:	10c5883a 	add	r2,r2,r3
10001dc0:	00c00104 	movi	r3,4
10001dc4:	10c00015 	stw	r3,0(r2)
10001dc8:	00000f06 	br	10001e08 <change_event_b+0x428>
		} else {
			state_b[skill] += 1;
10001dcc:	d0a01417 	ldw	r2,-32688(gp)
10001dd0:	1085883a 	add	r2,r2,r2
10001dd4:	1085883a 	add	r2,r2,r2
10001dd8:	1007883a 	mov	r3,r2
10001ddc:	e0bffc17 	ldw	r2,-16(fp)
10001de0:	10c7883a 	add	r3,r2,r3
10001de4:	d0a01417 	ldw	r2,-32688(gp)
10001de8:	1085883a 	add	r2,r2,r2
10001dec:	1085883a 	add	r2,r2,r2
10001df0:	1009883a 	mov	r4,r2
10001df4:	e0bffc17 	ldw	r2,-16(fp)
10001df8:	1105883a 	add	r2,r2,r4
10001dfc:	10800017 	ldw	r2,0(r2)
10001e00:	10800044 	addi	r2,r2,1
10001e04:	18800015 	stw	r2,0(r3)
		}
        // Update event
        clean_event(event_b);
10001e08:	e13ffe17 	ldw	r4,-8(fp)
10001e0c:	0004be00 	call	10004be0 <clean_event>
        free_prohibition(prohibit_b, 0xffff);
10001e10:	017fffd4 	movui	r5,65535
10001e14:	e13fff17 	ldw	r4,-4(fp)
10001e18:	0004a040 	call	10004a04 <free_prohibition>
        set_event(event_b, event_b_dash);
10001e1c:	01440074 	movhi	r5,4097
10001e20:	295e8e04 	addi	r5,r5,31288
10001e24:	e13ffe17 	ldw	r4,-8(fp)
10001e28:	0004a8c0 	call	10004a8c <set_event>
        set_prohibition(prohibit_b, event_b[0][pvector]);
10001e2c:	d0a04517 	ldw	r2,-32492(gp)
10001e30:	e0fffe17 	ldw	r3,-8(fp)
10001e34:	100490fa 	slli	r2,r2,3
10001e38:	1889883a 	add	r4,r3,r2
10001e3c:	20800017 	ldw	r2,0(r4)
10001e40:	20c00117 	ldw	r3,4(r4)
10001e44:	100b883a 	mov	r5,r2
10001e48:	e13fff17 	ldw	r4,-4(fp)
10001e4c:	00049780 	call	10004978 <set_prohibition>
        // Update other state values
        state_b[Offx] = event_b[1][2];
10001e50:	d0a00f17 	ldw	r2,-32708(gp)
10001e54:	1085883a 	add	r2,r2,r2
10001e58:	1085883a 	add	r2,r2,r2
10001e5c:	1007883a 	mov	r3,r2
10001e60:	e0bffc17 	ldw	r2,-16(fp)
10001e64:	10cb883a 	add	r5,r2,r3
10001e68:	d0a03717 	ldw	r2,-32548(gp)
10001e6c:	100490fa 	slli	r2,r2,3
10001e70:	e0fffe17 	ldw	r3,-8(fp)
10001e74:	1889883a 	add	r4,r3,r2
10001e78:	20800417 	ldw	r2,16(r4)
10001e7c:	20c00517 	ldw	r3,20(r4)
10001e80:	28800015 	stw	r2,0(r5)
        state_b[Offy] = event_b[1][3];
10001e84:	d0a01017 	ldw	r2,-32704(gp)
10001e88:	1085883a 	add	r2,r2,r2
10001e8c:	1085883a 	add	r2,r2,r2
10001e90:	1007883a 	mov	r3,r2
10001e94:	e0bffc17 	ldw	r2,-16(fp)
10001e98:	10cb883a 	add	r5,r2,r3
10001e9c:	d0a03717 	ldw	r2,-32548(gp)
10001ea0:	100490fa 	slli	r2,r2,3
10001ea4:	e0fffe17 	ldw	r3,-8(fp)
10001ea8:	1889883a 	add	r4,r3,r2
10001eac:	20800617 	ldw	r2,24(r4)
10001eb0:	20c00717 	ldw	r3,28(r4)
10001eb4:	28800015 	stw	r2,0(r5)
        state_b[CenOffx] = event_b[1][4];
10001eb8:	d0a01117 	ldw	r2,-32700(gp)
10001ebc:	1085883a 	add	r2,r2,r2
10001ec0:	1085883a 	add	r2,r2,r2
10001ec4:	1007883a 	mov	r3,r2
10001ec8:	e0bffc17 	ldw	r2,-16(fp)
10001ecc:	10cb883a 	add	r5,r2,r3
10001ed0:	d0a03717 	ldw	r2,-32548(gp)
10001ed4:	100490fa 	slli	r2,r2,3
10001ed8:	e0fffe17 	ldw	r3,-8(fp)
10001edc:	1889883a 	add	r4,r3,r2
10001ee0:	20800817 	ldw	r2,32(r4)
10001ee4:	20c00917 	ldw	r3,36(r4)
10001ee8:	28800015 	stw	r2,0(r5)
        state_b[CenOffy] = event_b[1][5];
10001eec:	d0a01217 	ldw	r2,-32696(gp)
10001ef0:	1085883a 	add	r2,r2,r2
10001ef4:	1085883a 	add	r2,r2,r2
10001ef8:	1007883a 	mov	r3,r2
10001efc:	e0bffc17 	ldw	r2,-16(fp)
10001f00:	10cb883a 	add	r5,r2,r3
10001f04:	d0a03717 	ldw	r2,-32548(gp)
10001f08:	100490fa 	slli	r2,r2,3
10001f0c:	e0fffe17 	ldw	r3,-8(fp)
10001f10:	1889883a 	add	r4,r3,r2
10001f14:	20800a17 	ldw	r2,40(r4)
10001f18:	20c00b17 	ldw	r3,44(r4)
10001f1c:	28800015 	stw	r2,0(r5)
    }

    // Spine
    if ((cooling_c[c_stiff] == 0) && (state_b[skill] == 4) && (prohibit_b[p_spine] == 0)) {
10001f20:	d0a02317 	ldw	r2,-32628(gp)
10001f24:	1085883a 	add	r2,r2,r2
10001f28:	1085883a 	add	r2,r2,r2
10001f2c:	1007883a 	mov	r3,r2
10001f30:	e0800417 	ldw	r2,16(fp)
10001f34:	10c5883a 	add	r2,r2,r3
10001f38:	10800017 	ldw	r2,0(r2)
10001f3c:	10005f1e 	bne	r2,zero,100020bc <change_event_b+0x6dc>
10001f40:	d0a01417 	ldw	r2,-32688(gp)
10001f44:	1085883a 	add	r2,r2,r2
10001f48:	1085883a 	add	r2,r2,r2
10001f4c:	1007883a 	mov	r3,r2
10001f50:	e0bffc17 	ldw	r2,-16(fp)
10001f54:	10c5883a 	add	r2,r2,r3
10001f58:	10800017 	ldw	r2,0(r2)
10001f5c:	10800118 	cmpnei	r2,r2,4
10001f60:	1000561e 	bne	r2,zero,100020bc <change_event_b+0x6dc>
10001f64:	d0a01e17 	ldw	r2,-32648(gp)
10001f68:	1085883a 	add	r2,r2,r2
10001f6c:	1085883a 	add	r2,r2,r2
10001f70:	1007883a 	mov	r3,r2
10001f74:	e0bfff17 	ldw	r2,-4(fp)
10001f78:	10c5883a 	add	r2,r2,r3
10001f7c:	10800017 	ldw	r2,0(r2)
10001f80:	10004e1e 	bne	r2,zero,100020bc <change_event_b+0x6dc>
        // Set flag
        state_b[skill] = 1;
10001f84:	d0a01417 	ldw	r2,-32688(gp)
10001f88:	1085883a 	add	r2,r2,r2
10001f8c:	1085883a 	add	r2,r2,r2
10001f90:	1007883a 	mov	r3,r2
10001f94:	e0bffc17 	ldw	r2,-16(fp)
10001f98:	10c5883a 	add	r2,r2,r3
10001f9c:	00c00044 	movi	r3,1
10001fa0:	10c00015 	stw	r3,0(r2)
        // Update event
        clean_event(event_b);
10001fa4:	e13ffe17 	ldw	r4,-8(fp)
10001fa8:	0004be00 	call	10004be0 <clean_event>
        free_prohibition(prohibit_b, 0xffff);
10001fac:	017fffd4 	movui	r5,65535
10001fb0:	e13fff17 	ldw	r4,-4(fp)
10001fb4:	0004a040 	call	10004a04 <free_prohibition>
        set_event(event_b, event_b_spine);
10001fb8:	01440074 	movhi	r5,4097
10001fbc:	295eee04 	addi	r5,r5,31672
10001fc0:	e13ffe17 	ldw	r4,-8(fp)
10001fc4:	0004a8c0 	call	10004a8c <set_event>
        set_prohibition(prohibit_b, event_b[0][pvector]);
10001fc8:	d0a04517 	ldw	r2,-32492(gp)
10001fcc:	e0fffe17 	ldw	r3,-8(fp)
10001fd0:	100490fa 	slli	r2,r2,3
10001fd4:	1889883a 	add	r4,r3,r2
10001fd8:	20800017 	ldw	r2,0(r4)
10001fdc:	20c00117 	ldw	r3,4(r4)
10001fe0:	100b883a 	mov	r5,r2
10001fe4:	e13fff17 	ldw	r4,-4(fp)
10001fe8:	00049780 	call	10004978 <set_prohibition>
        // Update other state values
        state_b[Offx] = event_b[1][2];
10001fec:	d0a00f17 	ldw	r2,-32708(gp)
10001ff0:	1085883a 	add	r2,r2,r2
10001ff4:	1085883a 	add	r2,r2,r2
10001ff8:	1007883a 	mov	r3,r2
10001ffc:	e0bffc17 	ldw	r2,-16(fp)
10002000:	10cb883a 	add	r5,r2,r3
10002004:	d0a03717 	ldw	r2,-32548(gp)
10002008:	100490fa 	slli	r2,r2,3
1000200c:	e0fffe17 	ldw	r3,-8(fp)
10002010:	1889883a 	add	r4,r3,r2
10002014:	20800417 	ldw	r2,16(r4)
10002018:	20c00517 	ldw	r3,20(r4)
1000201c:	28800015 	stw	r2,0(r5)
        state_b[Offy] = event_b[1][3];
10002020:	d0a01017 	ldw	r2,-32704(gp)
10002024:	1085883a 	add	r2,r2,r2
10002028:	1085883a 	add	r2,r2,r2
1000202c:	1007883a 	mov	r3,r2
10002030:	e0bffc17 	ldw	r2,-16(fp)
10002034:	10cb883a 	add	r5,r2,r3
10002038:	d0a03717 	ldw	r2,-32548(gp)
1000203c:	100490fa 	slli	r2,r2,3
10002040:	e0fffe17 	ldw	r3,-8(fp)
10002044:	1889883a 	add	r4,r3,r2
10002048:	20800617 	ldw	r2,24(r4)
1000204c:	20c00717 	ldw	r3,28(r4)
10002050:	28800015 	stw	r2,0(r5)
        state_b[CenOffx] = event_b[1][4];
10002054:	d0a01117 	ldw	r2,-32700(gp)
10002058:	1085883a 	add	r2,r2,r2
1000205c:	1085883a 	add	r2,r2,r2
10002060:	1007883a 	mov	r3,r2
10002064:	e0bffc17 	ldw	r2,-16(fp)
10002068:	10cb883a 	add	r5,r2,r3
1000206c:	d0a03717 	ldw	r2,-32548(gp)
10002070:	100490fa 	slli	r2,r2,3
10002074:	e0fffe17 	ldw	r3,-8(fp)
10002078:	1889883a 	add	r4,r3,r2
1000207c:	20800817 	ldw	r2,32(r4)
10002080:	20c00917 	ldw	r3,36(r4)
10002084:	28800015 	stw	r2,0(r5)
        state_b[CenOffy] = event_b[1][5];
10002088:	d0a01217 	ldw	r2,-32696(gp)
1000208c:	1085883a 	add	r2,r2,r2
10002090:	1085883a 	add	r2,r2,r2
10002094:	1007883a 	mov	r3,r2
10002098:	e0bffc17 	ldw	r2,-16(fp)
1000209c:	10cb883a 	add	r5,r2,r3
100020a0:	d0a03717 	ldw	r2,-32548(gp)
100020a4:	100490fa 	slli	r2,r2,3
100020a8:	e0fffe17 	ldw	r3,-8(fp)
100020ac:	1889883a 	add	r4,r3,r2
100020b0:	20800a17 	ldw	r2,40(r4)
100020b4:	20c00b17 	ldw	r3,44(r4)
100020b8:	28800015 	stw	r2,0(r5)
    }
    
    // Defualt: stand
    if (prohibit_b[p_stand] == 0) {
100020bc:	d0a01617 	ldw	r2,-32680(gp)
100020c0:	1085883a 	add	r2,r2,r2
100020c4:	1085883a 	add	r2,r2,r2
100020c8:	1007883a 	mov	r3,r2
100020cc:	e0bfff17 	ldw	r2,-4(fp)
100020d0:	10c5883a 	add	r2,r2,r3
100020d4:	10800017 	ldw	r2,0(r2)
100020d8:	1000651e 	bne	r2,zero,10002270 <change_event_b+0x890>
        clean_event(event_b);
100020dc:	e13ffe17 	ldw	r4,-8(fp)
100020e0:	0004be00 	call	10004be0 <clean_event>
        free_prohibition(prohibit_b, 0xffff);
100020e4:	017fffd4 	movui	r5,65535
100020e8:	e13fff17 	ldw	r4,-4(fp)
100020ec:	0004a040 	call	10004a04 <free_prohibition>
        set_event(event_b, event_b_stand);
100020f0:	01440074 	movhi	r5,4097
100020f4:	295e3a04 	addi	r5,r5,30952
100020f8:	e13ffe17 	ldw	r4,-8(fp)
100020fc:	0004a8c0 	call	10004a8c <set_event>
        set_prohibition(prohibit_b, event_b[0][pvector]);
10002100:	d0a04517 	ldw	r2,-32492(gp)
10002104:	e0fffe17 	ldw	r3,-8(fp)
10002108:	100490fa 	slli	r2,r2,3
1000210c:	1889883a 	add	r4,r3,r2
10002110:	20800017 	ldw	r2,0(r4)
10002114:	20c00117 	ldw	r3,4(r4)
10002118:	100b883a 	mov	r5,r2
1000211c:	e13fff17 	ldw	r4,-4(fp)
10002120:	00049780 	call	10004978 <set_prohibition>
        // Set the orientation to character's direction
        if (state_c[Cx] < state_b[Cx]) {
10002124:	d0a00817 	ldw	r2,-32736(gp)
10002128:	1085883a 	add	r2,r2,r2
1000212c:	1085883a 	add	r2,r2,r2
10002130:	1007883a 	mov	r3,r2
10002134:	e0bffd17 	ldw	r2,-12(fp)
10002138:	10c5883a 	add	r2,r2,r3
1000213c:	10c00017 	ldw	r3,0(r2)
10002140:	d0a00817 	ldw	r2,-32736(gp)
10002144:	1085883a 	add	r2,r2,r2
10002148:	1085883a 	add	r2,r2,r2
1000214c:	1009883a 	mov	r4,r2
10002150:	e0bffc17 	ldw	r2,-16(fp)
10002154:	1105883a 	add	r2,r2,r4
10002158:	10800017 	ldw	r2,0(r2)
1000215c:	1880080e 	bge	r3,r2,10002180 <change_event_b+0x7a0>
            state_b[Ori] = 0;
10002160:	d0a00c17 	ldw	r2,-32720(gp)
10002164:	1085883a 	add	r2,r2,r2
10002168:	1085883a 	add	r2,r2,r2
1000216c:	1007883a 	mov	r3,r2
10002170:	e0bffc17 	ldw	r2,-16(fp)
10002174:	10c5883a 	add	r2,r2,r3
10002178:	10000015 	stw	zero,0(r2)
1000217c:	00000806 	br	100021a0 <change_event_b+0x7c0>
        } else {
            state_b[Ori] = 1;
10002180:	d0a00c17 	ldw	r2,-32720(gp)
10002184:	1085883a 	add	r2,r2,r2
10002188:	1085883a 	add	r2,r2,r2
1000218c:	1007883a 	mov	r3,r2
10002190:	e0bffc17 	ldw	r2,-16(fp)
10002194:	10c5883a 	add	r2,r2,r3
10002198:	00c00044 	movi	r3,1
1000219c:	10c00015 	stw	r3,0(r2)
        }
        // Update other state values
        state_b[Offx] = event_b[1][2];
100021a0:	d0a00f17 	ldw	r2,-32708(gp)
100021a4:	1085883a 	add	r2,r2,r2
100021a8:	1085883a 	add	r2,r2,r2
100021ac:	1007883a 	mov	r3,r2
100021b0:	e0bffc17 	ldw	r2,-16(fp)
100021b4:	10cb883a 	add	r5,r2,r3
100021b8:	d0a03717 	ldw	r2,-32548(gp)
100021bc:	100490fa 	slli	r2,r2,3
100021c0:	e0fffe17 	ldw	r3,-8(fp)
100021c4:	1889883a 	add	r4,r3,r2
100021c8:	20800417 	ldw	r2,16(r4)
100021cc:	20c00517 	ldw	r3,20(r4)
100021d0:	28800015 	stw	r2,0(r5)
        state_b[Offy] = event_b[1][3];
100021d4:	d0a01017 	ldw	r2,-32704(gp)
100021d8:	1085883a 	add	r2,r2,r2
100021dc:	1085883a 	add	r2,r2,r2
100021e0:	1007883a 	mov	r3,r2
100021e4:	e0bffc17 	ldw	r2,-16(fp)
100021e8:	10cb883a 	add	r5,r2,r3
100021ec:	d0a03717 	ldw	r2,-32548(gp)
100021f0:	100490fa 	slli	r2,r2,3
100021f4:	e0fffe17 	ldw	r3,-8(fp)
100021f8:	1889883a 	add	r4,r3,r2
100021fc:	20800617 	ldw	r2,24(r4)
10002200:	20c00717 	ldw	r3,28(r4)
10002204:	28800015 	stw	r2,0(r5)
        state_b[CenOffx] = event_b[1][4];
10002208:	d0a01117 	ldw	r2,-32700(gp)
1000220c:	1085883a 	add	r2,r2,r2
10002210:	1085883a 	add	r2,r2,r2
10002214:	1007883a 	mov	r3,r2
10002218:	e0bffc17 	ldw	r2,-16(fp)
1000221c:	10cb883a 	add	r5,r2,r3
10002220:	d0a03717 	ldw	r2,-32548(gp)
10002224:	100490fa 	slli	r2,r2,3
10002228:	e0fffe17 	ldw	r3,-8(fp)
1000222c:	1889883a 	add	r4,r3,r2
10002230:	20800817 	ldw	r2,32(r4)
10002234:	20c00917 	ldw	r3,36(r4)
10002238:	28800015 	stw	r2,0(r5)
        state_b[CenOffy] = event_b[1][5];
1000223c:	d0a01217 	ldw	r2,-32696(gp)
10002240:	1085883a 	add	r2,r2,r2
10002244:	1085883a 	add	r2,r2,r2
10002248:	1007883a 	mov	r3,r2
1000224c:	e0bffc17 	ldw	r2,-16(fp)
10002250:	10cb883a 	add	r5,r2,r3
10002254:	d0a03717 	ldw	r2,-32548(gp)
10002258:	100490fa 	slli	r2,r2,3
1000225c:	e0fffe17 	ldw	r3,-8(fp)
10002260:	1889883a 	add	r4,r3,r2
10002264:	20800a17 	ldw	r2,40(r4)
10002268:	20c00b17 	ldw	r3,44(r4)
1000226c:	28800015 	stw	r2,0(r5)
    }
}
10002270:	0001883a 	nop
10002274:	e037883a 	mov	sp,fp
10002278:	dfc00117 	ldw	ra,4(sp)
1000227c:	df000017 	ldw	fp,0(sp)
10002280:	dec00204 	addi	sp,sp,8
10002284:	f800283a 	ret

10002288 <movement>:
    int cooling_c[N_cooling_c],
    char keycodes[N_keycodes],
    int clock,
    int system_flage[N_system_flage]
)
{
10002288:	defff804 	addi	sp,sp,-32
1000228c:	df000715 	stw	fp,28(sp)
10002290:	df000704 	addi	fp,sp,28
10002294:	e13ffc15 	stw	r4,-16(fp)
10002298:	e17ffd15 	stw	r5,-12(fp)
1000229c:	e1bffe15 	stw	r6,-8(fp)
100022a0:	e1ffff15 	stw	r7,-4(fp)
#include "helper.h"

// Manage the movement of character
void movement(
    int state_c[N_state_c],
    long long unsigned int event_c[N1_event_c][N2_event_c],
100022a4:	d1203517 	ldw	r4,-32556(gp)
100022a8:	213fffc4 	addi	r4,r4,-1

#include "character.h"
#include "helper.h"

// Manage the movement of character
void movement(
100022ac:	e13ffb15 	stw	r4,-20(fp)
100022b0:	d1203517 	ldw	r4,-32556(gp)
100022b4:	2011883a 	mov	r8,r4
100022b8:	0013883a 	mov	r9,zero
100022bc:	4008d6ba 	srli	r4,r8,26
100022c0:	480691ba 	slli	r3,r9,6
100022c4:	20c6b03a 	or	r3,r4,r3
100022c8:	400491ba 	slli	r2,r8,6
    char keycodes[N_keycodes],
    int clock,
    int system_flage[N_system_flage]
)
{
    int flag = 0;   // 1 means left, 2 means right, 0 means no A-press and D-press
100022cc:	e03ff915 	stw	zero,-28(fp)

    // Find most current A-press or D-press
    for (int i = 0; i < 4; i++) {
100022d0:	e03ffa15 	stw	zero,-24(fp)
100022d4:	00001b06 	br	10002344 <movement+0xbc>
        if (keycodes[i] == left) {
100022d8:	e0bffa17 	ldw	r2,-24(fp)
100022dc:	e0c00117 	ldw	r3,4(fp)
100022e0:	1885883a 	add	r2,r3,r2
100022e4:	10800003 	ldbu	r2,0(r2)
100022e8:	10c03fcc 	andi	r3,r2,255
100022ec:	18c0201c 	xori	r3,r3,128
100022f0:	18ffe004 	addi	r3,r3,-128
100022f4:	d0a00317 	ldw	r2,-32756(gp)
100022f8:	1880031e 	bne	r3,r2,10002308 <movement+0x80>
            flag = 1;
100022fc:	00800044 	movi	r2,1
10002300:	e0bff915 	stw	r2,-28(fp)
            break;
10002304:	00001206 	br	10002350 <movement+0xc8>
        }
        if (keycodes[i] == right) {
10002308:	e0bffa17 	ldw	r2,-24(fp)
1000230c:	e0c00117 	ldw	r3,4(fp)
10002310:	1885883a 	add	r2,r3,r2
10002314:	10800003 	ldbu	r2,0(r2)
10002318:	10c03fcc 	andi	r3,r2,255
1000231c:	18c0201c 	xori	r3,r3,128
10002320:	18ffe004 	addi	r3,r3,-128
10002324:	d0a00417 	ldw	r2,-32752(gp)
10002328:	1880031e 	bne	r3,r2,10002338 <movement+0xb0>
            flag = 2;
1000232c:	00800084 	movi	r2,2
10002330:	e0bff915 	stw	r2,-28(fp)
            break;
10002334:	00000606 	br	10002350 <movement+0xc8>
)
{
    int flag = 0;   // 1 means left, 2 means right, 0 means no A-press and D-press

    // Find most current A-press or D-press
    for (int i = 0; i < 4; i++) {
10002338:	e0bffa17 	ldw	r2,-24(fp)
1000233c:	10800044 	addi	r2,r2,1
10002340:	e0bffa15 	stw	r2,-24(fp)
10002344:	e0bffa17 	ldw	r2,-24(fp)
10002348:	10800110 	cmplti	r2,r2,4
1000234c:	103fe21e 	bne	r2,zero,100022d8 <__alt_data_end+0xf80022d8>
            break;
        }
    }

    // Update Vx
    if (flag == 1 && prohibit_c[Vx] == 0) {
10002350:	e0bff917 	ldw	r2,-28(fp)
10002354:	10800058 	cmpnei	r2,r2,1
10002358:	1000191e 	bne	r2,zero,100023c0 <movement+0x138>
1000235c:	d0a00a17 	ldw	r2,-32728(gp)
10002360:	1085883a 	add	r2,r2,r2
10002364:	1085883a 	add	r2,r2,r2
10002368:	1007883a 	mov	r3,r2
1000236c:	e0bffe17 	ldw	r2,-8(fp)
10002370:	10c5883a 	add	r2,r2,r3
10002374:	10800017 	ldw	r2,0(r2)
10002378:	1000111e 	bne	r2,zero,100023c0 <movement+0x138>
        state_c[Vx] = - v_run;
1000237c:	d0a00a17 	ldw	r2,-32728(gp)
10002380:	1085883a 	add	r2,r2,r2
10002384:	1085883a 	add	r2,r2,r2
10002388:	1007883a 	mov	r3,r2
1000238c:	e0bffc17 	ldw	r2,-16(fp)
10002390:	10c5883a 	add	r2,r2,r3
10002394:	d0e03f17 	ldw	r3,-32516(gp)
10002398:	00c7c83a 	sub	r3,zero,r3
1000239c:	10c00015 	stw	r3,0(r2)
        state_c[Ori] = 0;
100023a0:	d0a00c17 	ldw	r2,-32720(gp)
100023a4:	1085883a 	add	r2,r2,r2
100023a8:	1085883a 	add	r2,r2,r2
100023ac:	1007883a 	mov	r3,r2
100023b0:	e0bffc17 	ldw	r2,-16(fp)
100023b4:	10c5883a 	add	r2,r2,r3
100023b8:	10000015 	stw	zero,0(r2)
100023bc:	00002b06 	br	1000246c <movement+0x1e4>
    } else if (flag == 2 && prohibit_c[Vx] == 0) {
100023c0:	e0bff917 	ldw	r2,-28(fp)
100023c4:	10800098 	cmpnei	r2,r2,2
100023c8:	1000191e 	bne	r2,zero,10002430 <movement+0x1a8>
100023cc:	d0a00a17 	ldw	r2,-32728(gp)
100023d0:	1085883a 	add	r2,r2,r2
100023d4:	1085883a 	add	r2,r2,r2
100023d8:	1007883a 	mov	r3,r2
100023dc:	e0bffe17 	ldw	r2,-8(fp)
100023e0:	10c5883a 	add	r2,r2,r3
100023e4:	10800017 	ldw	r2,0(r2)
100023e8:	1000111e 	bne	r2,zero,10002430 <movement+0x1a8>
        state_c[Vx] = v_run;
100023ec:	d0a00a17 	ldw	r2,-32728(gp)
100023f0:	1085883a 	add	r2,r2,r2
100023f4:	1085883a 	add	r2,r2,r2
100023f8:	1007883a 	mov	r3,r2
100023fc:	e0bffc17 	ldw	r2,-16(fp)
10002400:	10c5883a 	add	r2,r2,r3
10002404:	d0e03f17 	ldw	r3,-32516(gp)
10002408:	10c00015 	stw	r3,0(r2)
        state_c[Ori] = 1;
1000240c:	d0a00c17 	ldw	r2,-32720(gp)
10002410:	1085883a 	add	r2,r2,r2
10002414:	1085883a 	add	r2,r2,r2
10002418:	1007883a 	mov	r3,r2
1000241c:	e0bffc17 	ldw	r2,-16(fp)
10002420:	10c5883a 	add	r2,r2,r3
10002424:	00c00044 	movi	r3,1
10002428:	10c00015 	stw	r3,0(r2)
1000242c:	00000f06 	br	1000246c <movement+0x1e4>
    } else {
        if (prohibit_c[Vx] == 0) {
10002430:	d0a00a17 	ldw	r2,-32728(gp)
10002434:	1085883a 	add	r2,r2,r2
10002438:	1085883a 	add	r2,r2,r2
1000243c:	1007883a 	mov	r3,r2
10002440:	e0bffe17 	ldw	r2,-8(fp)
10002444:	10c5883a 	add	r2,r2,r3
10002448:	10800017 	ldw	r2,0(r2)
1000244c:	1000071e 	bne	r2,zero,1000246c <movement+0x1e4>
            state_c[Vx] = 0;
10002450:	d0a00a17 	ldw	r2,-32728(gp)
10002454:	1085883a 	add	r2,r2,r2
10002458:	1085883a 	add	r2,r2,r2
1000245c:	1007883a 	mov	r3,r2
10002460:	e0bffc17 	ldw	r2,-16(fp)
10002464:	10c5883a 	add	r2,r2,r3
10002468:	10000015 	stw	zero,0(r2)
        }
    }

    // Update Vy
    if (state_c[Vy] <= v_fall && prohibit_c[Vy] == 0) {
1000246c:	d0a00b17 	ldw	r2,-32724(gp)
10002470:	1085883a 	add	r2,r2,r2
10002474:	1085883a 	add	r2,r2,r2
10002478:	1007883a 	mov	r3,r2
1000247c:	e0bffc17 	ldw	r2,-16(fp)
10002480:	10c5883a 	add	r2,r2,r3
10002484:	10800017 	ldw	r2,0(r2)
10002488:	d0e04117 	ldw	r3,-32508(gp)
1000248c:	18801816 	blt	r3,r2,100024f0 <movement+0x268>
10002490:	d0a00b17 	ldw	r2,-32724(gp)
10002494:	1085883a 	add	r2,r2,r2
10002498:	1085883a 	add	r2,r2,r2
1000249c:	1007883a 	mov	r3,r2
100024a0:	e0bffe17 	ldw	r2,-8(fp)
100024a4:	10c5883a 	add	r2,r2,r3
100024a8:	10800017 	ldw	r2,0(r2)
100024ac:	1000101e 	bne	r2,zero,100024f0 <movement+0x268>
        state_c[Vy] += g;
100024b0:	d0a00b17 	ldw	r2,-32724(gp)
100024b4:	1085883a 	add	r2,r2,r2
100024b8:	1085883a 	add	r2,r2,r2
100024bc:	1007883a 	mov	r3,r2
100024c0:	e0bffc17 	ldw	r2,-16(fp)
100024c4:	10c7883a 	add	r3,r2,r3
100024c8:	d0a00b17 	ldw	r2,-32724(gp)
100024cc:	1085883a 	add	r2,r2,r2
100024d0:	1085883a 	add	r2,r2,r2
100024d4:	1009883a 	mov	r4,r2
100024d8:	e0bffc17 	ldw	r2,-16(fp)
100024dc:	1105883a 	add	r2,r2,r4
100024e0:	11000017 	ldw	r4,0(r2)
100024e4:	d0a04217 	ldw	r2,-32504(gp)
100024e8:	2085883a 	add	r2,r4,r2
100024ec:	18800015 	stw	r2,0(r3)
    }
    if (state_c[Vy] >= v_fall && prohibit_c[Vy] == 0) {
100024f0:	d0a00b17 	ldw	r2,-32724(gp)
100024f4:	1085883a 	add	r2,r2,r2
100024f8:	1085883a 	add	r2,r2,r2
100024fc:	1007883a 	mov	r3,r2
10002500:	e0bffc17 	ldw	r2,-16(fp)
10002504:	10c5883a 	add	r2,r2,r3
10002508:	10c00017 	ldw	r3,0(r2)
1000250c:	d0a04117 	ldw	r2,-32508(gp)
10002510:	18801016 	blt	r3,r2,10002554 <movement+0x2cc>
10002514:	d0a00b17 	ldw	r2,-32724(gp)
10002518:	1085883a 	add	r2,r2,r2
1000251c:	1085883a 	add	r2,r2,r2
10002520:	1007883a 	mov	r3,r2
10002524:	e0bffe17 	ldw	r2,-8(fp)
10002528:	10c5883a 	add	r2,r2,r3
1000252c:	10800017 	ldw	r2,0(r2)
10002530:	1000081e 	bne	r2,zero,10002554 <movement+0x2cc>
        state_c[Vy] = v_fall;
10002534:	d0a00b17 	ldw	r2,-32724(gp)
10002538:	1085883a 	add	r2,r2,r2
1000253c:	1085883a 	add	r2,r2,r2
10002540:	1007883a 	mov	r3,r2
10002544:	e0bffc17 	ldw	r2,-16(fp)
10002548:	10c5883a 	add	r2,r2,r3
1000254c:	d0e04117 	ldw	r3,-32508(gp)
10002550:	10c00015 	stw	r3,0(r2)
    }

    // Correct Cx, Cy
    if (state_c[Ori] == 0) {
10002554:	d0a00c17 	ldw	r2,-32720(gp)
10002558:	1085883a 	add	r2,r2,r2
1000255c:	1085883a 	add	r2,r2,r2
10002560:	1007883a 	mov	r3,r2
10002564:	e0bffc17 	ldw	r2,-16(fp)
10002568:	10c5883a 	add	r2,r2,r3
1000256c:	10800017 	ldw	r2,0(r2)
10002570:	10002d1e 	bne	r2,zero,10002628 <movement+0x3a0>
        state_c[Cx] = state_c[Cenx] - state_c[CenOffx];
10002574:	d0a00817 	ldw	r2,-32736(gp)
10002578:	1085883a 	add	r2,r2,r2
1000257c:	1085883a 	add	r2,r2,r2
10002580:	1007883a 	mov	r3,r2
10002584:	e0bffc17 	ldw	r2,-16(fp)
10002588:	10c7883a 	add	r3,r2,r3
1000258c:	d0a00d17 	ldw	r2,-32716(gp)
10002590:	1085883a 	add	r2,r2,r2
10002594:	1085883a 	add	r2,r2,r2
10002598:	1009883a 	mov	r4,r2
1000259c:	e0bffc17 	ldw	r2,-16(fp)
100025a0:	1105883a 	add	r2,r2,r4
100025a4:	11000017 	ldw	r4,0(r2)
100025a8:	d0a01117 	ldw	r2,-32700(gp)
100025ac:	1085883a 	add	r2,r2,r2
100025b0:	1085883a 	add	r2,r2,r2
100025b4:	100b883a 	mov	r5,r2
100025b8:	e0bffc17 	ldw	r2,-16(fp)
100025bc:	1145883a 	add	r2,r2,r5
100025c0:	10800017 	ldw	r2,0(r2)
100025c4:	2085c83a 	sub	r2,r4,r2
100025c8:	18800015 	stw	r2,0(r3)
        state_c[Cy] = state_c[Ceny] - state_c[CenOffy];
100025cc:	d0a00917 	ldw	r2,-32732(gp)
100025d0:	1085883a 	add	r2,r2,r2
100025d4:	1085883a 	add	r2,r2,r2
100025d8:	1007883a 	mov	r3,r2
100025dc:	e0bffc17 	ldw	r2,-16(fp)
100025e0:	10c7883a 	add	r3,r2,r3
100025e4:	d0a00e17 	ldw	r2,-32712(gp)
100025e8:	1085883a 	add	r2,r2,r2
100025ec:	1085883a 	add	r2,r2,r2
100025f0:	1009883a 	mov	r4,r2
100025f4:	e0bffc17 	ldw	r2,-16(fp)
100025f8:	1105883a 	add	r2,r2,r4
100025fc:	11000017 	ldw	r4,0(r2)
10002600:	d0a01217 	ldw	r2,-32696(gp)
10002604:	1085883a 	add	r2,r2,r2
10002608:	1085883a 	add	r2,r2,r2
1000260c:	100b883a 	mov	r5,r2
10002610:	e0bffc17 	ldw	r2,-16(fp)
10002614:	1145883a 	add	r2,r2,r5
10002618:	10800017 	ldw	r2,0(r2)
1000261c:	2085c83a 	sub	r2,r4,r2
10002620:	18800015 	stw	r2,0(r3)
10002624:	00003406 	br	100026f8 <movement+0x470>
    } else {
        state_c[Cx] = state_c[Cenx] - state_c[Offx] + state_c[CenOffx];
10002628:	d0a00817 	ldw	r2,-32736(gp)
1000262c:	1085883a 	add	r2,r2,r2
10002630:	1085883a 	add	r2,r2,r2
10002634:	1007883a 	mov	r3,r2
10002638:	e0bffc17 	ldw	r2,-16(fp)
1000263c:	10c7883a 	add	r3,r2,r3
10002640:	d0a00d17 	ldw	r2,-32716(gp)
10002644:	1085883a 	add	r2,r2,r2
10002648:	1085883a 	add	r2,r2,r2
1000264c:	1009883a 	mov	r4,r2
10002650:	e0bffc17 	ldw	r2,-16(fp)
10002654:	1105883a 	add	r2,r2,r4
10002658:	11000017 	ldw	r4,0(r2)
1000265c:	d0a00f17 	ldw	r2,-32708(gp)
10002660:	1085883a 	add	r2,r2,r2
10002664:	1085883a 	add	r2,r2,r2
10002668:	100b883a 	mov	r5,r2
1000266c:	e0bffc17 	ldw	r2,-16(fp)
10002670:	1145883a 	add	r2,r2,r5
10002674:	10800017 	ldw	r2,0(r2)
10002678:	2089c83a 	sub	r4,r4,r2
1000267c:	d0a01117 	ldw	r2,-32700(gp)
10002680:	1085883a 	add	r2,r2,r2
10002684:	1085883a 	add	r2,r2,r2
10002688:	100b883a 	mov	r5,r2
1000268c:	e0bffc17 	ldw	r2,-16(fp)
10002690:	1145883a 	add	r2,r2,r5
10002694:	10800017 	ldw	r2,0(r2)
10002698:	2085883a 	add	r2,r4,r2
1000269c:	18800015 	stw	r2,0(r3)
        state_c[Cy] = state_c[Ceny] - state_c[CenOffy];
100026a0:	d0a00917 	ldw	r2,-32732(gp)
100026a4:	1085883a 	add	r2,r2,r2
100026a8:	1085883a 	add	r2,r2,r2
100026ac:	1007883a 	mov	r3,r2
100026b0:	e0bffc17 	ldw	r2,-16(fp)
100026b4:	10c7883a 	add	r3,r2,r3
100026b8:	d0a00e17 	ldw	r2,-32712(gp)
100026bc:	1085883a 	add	r2,r2,r2
100026c0:	1085883a 	add	r2,r2,r2
100026c4:	1009883a 	mov	r4,r2
100026c8:	e0bffc17 	ldw	r2,-16(fp)
100026cc:	1105883a 	add	r2,r2,r4
100026d0:	11000017 	ldw	r4,0(r2)
100026d4:	d0a01217 	ldw	r2,-32696(gp)
100026d8:	1085883a 	add	r2,r2,r2
100026dc:	1085883a 	add	r2,r2,r2
100026e0:	100b883a 	mov	r5,r2
100026e4:	e0bffc17 	ldw	r2,-16(fp)
100026e8:	1145883a 	add	r2,r2,r5
100026ec:	10800017 	ldw	r2,0(r2)
100026f0:	2085c83a 	sub	r2,r4,r2
100026f4:	18800015 	stw	r2,0(r3)
    }
            
    // Update x coordinate
    state_c[Cx] += state_c[Vx];
100026f8:	d0a00817 	ldw	r2,-32736(gp)
100026fc:	1085883a 	add	r2,r2,r2
10002700:	1085883a 	add	r2,r2,r2
10002704:	1007883a 	mov	r3,r2
10002708:	e0bffc17 	ldw	r2,-16(fp)
1000270c:	10c7883a 	add	r3,r2,r3
10002710:	d0a00817 	ldw	r2,-32736(gp)
10002714:	1085883a 	add	r2,r2,r2
10002718:	1085883a 	add	r2,r2,r2
1000271c:	1009883a 	mov	r4,r2
10002720:	e0bffc17 	ldw	r2,-16(fp)
10002724:	1105883a 	add	r2,r2,r4
10002728:	11000017 	ldw	r4,0(r2)
1000272c:	d0a00a17 	ldw	r2,-32728(gp)
10002730:	1085883a 	add	r2,r2,r2
10002734:	1085883a 	add	r2,r2,r2
10002738:	100b883a 	mov	r5,r2
1000273c:	e0bffc17 	ldw	r2,-16(fp)
10002740:	1145883a 	add	r2,r2,r5
10002744:	10800017 	ldw	r2,0(r2)
10002748:	2085883a 	add	r2,r4,r2
1000274c:	18800015 	stw	r2,0(r3)
    if (state_c[Cx] <= Bound_left) {
10002750:	d0a00817 	ldw	r2,-32736(gp)
10002754:	1085883a 	add	r2,r2,r2
10002758:	1085883a 	add	r2,r2,r2
1000275c:	1007883a 	mov	r3,r2
10002760:	e0bffc17 	ldw	r2,-16(fp)
10002764:	10c5883a 	add	r2,r2,r3
10002768:	10800017 	ldw	r2,0(r2)
1000276c:	d0e02c17 	ldw	r3,-32592(gp)
10002770:	18800f16 	blt	r3,r2,100027b0 <movement+0x528>
        state_c[Cx] = Bound_left;
10002774:	d0a00817 	ldw	r2,-32736(gp)
10002778:	1085883a 	add	r2,r2,r2
1000277c:	1085883a 	add	r2,r2,r2
10002780:	1007883a 	mov	r3,r2
10002784:	e0bffc17 	ldw	r2,-16(fp)
10002788:	10c5883a 	add	r2,r2,r3
1000278c:	d0e02c17 	ldw	r3,-32592(gp)
10002790:	10c00015 	stw	r3,0(r2)
        state_c[Vx] = 0;
10002794:	d0a00a17 	ldw	r2,-32728(gp)
10002798:	1085883a 	add	r2,r2,r2
1000279c:	1085883a 	add	r2,r2,r2
100027a0:	1007883a 	mov	r3,r2
100027a4:	e0bffc17 	ldw	r2,-16(fp)
100027a8:	10c5883a 	add	r2,r2,r3
100027ac:	10000015 	stw	zero,0(r2)
    }
    if (state_c[Cx] + state_c[Offx] >= Bound_right) {
100027b0:	d0a00817 	ldw	r2,-32736(gp)
100027b4:	1085883a 	add	r2,r2,r2
100027b8:	1085883a 	add	r2,r2,r2
100027bc:	1007883a 	mov	r3,r2
100027c0:	e0bffc17 	ldw	r2,-16(fp)
100027c4:	10c5883a 	add	r2,r2,r3
100027c8:	10c00017 	ldw	r3,0(r2)
100027cc:	d0a00f17 	ldw	r2,-32708(gp)
100027d0:	1085883a 	add	r2,r2,r2
100027d4:	1085883a 	add	r2,r2,r2
100027d8:	1009883a 	mov	r4,r2
100027dc:	e0bffc17 	ldw	r2,-16(fp)
100027e0:	1105883a 	add	r2,r2,r4
100027e4:	10800017 	ldw	r2,0(r2)
100027e8:	1887883a 	add	r3,r3,r2
100027ec:	d0a02d17 	ldw	r2,-32588(gp)
100027f0:	18801816 	blt	r3,r2,10002854 <movement+0x5cc>
        state_c[Cx] = Bound_right - state_c[Offx] - 1;
100027f4:	d0a00817 	ldw	r2,-32736(gp)
100027f8:	1085883a 	add	r2,r2,r2
100027fc:	1085883a 	add	r2,r2,r2
10002800:	1007883a 	mov	r3,r2
10002804:	e0bffc17 	ldw	r2,-16(fp)
10002808:	10c7883a 	add	r3,r2,r3
1000280c:	d1202d17 	ldw	r4,-32588(gp)
10002810:	d0a00f17 	ldw	r2,-32708(gp)
10002814:	1085883a 	add	r2,r2,r2
10002818:	1085883a 	add	r2,r2,r2
1000281c:	100b883a 	mov	r5,r2
10002820:	e0bffc17 	ldw	r2,-16(fp)
10002824:	1145883a 	add	r2,r2,r5
10002828:	10800017 	ldw	r2,0(r2)
1000282c:	2085c83a 	sub	r2,r4,r2
10002830:	10bfffc4 	addi	r2,r2,-1
10002834:	18800015 	stw	r2,0(r3)
        state_c[Vx] = 0;
10002838:	d0a00a17 	ldw	r2,-32728(gp)
1000283c:	1085883a 	add	r2,r2,r2
10002840:	1085883a 	add	r2,r2,r2
10002844:	1007883a 	mov	r3,r2
10002848:	e0bffc17 	ldw	r2,-16(fp)
1000284c:	10c5883a 	add	r2,r2,r3
10002850:	10000015 	stw	zero,0(r2)
    }

    // Update y coordinate, also update system flage
    state_c[Cy] += state_c[Vy];
10002854:	d0a00917 	ldw	r2,-32732(gp)
10002858:	1085883a 	add	r2,r2,r2
1000285c:	1085883a 	add	r2,r2,r2
10002860:	1007883a 	mov	r3,r2
10002864:	e0bffc17 	ldw	r2,-16(fp)
10002868:	10c7883a 	add	r3,r2,r3
1000286c:	d0a00917 	ldw	r2,-32732(gp)
10002870:	1085883a 	add	r2,r2,r2
10002874:	1085883a 	add	r2,r2,r2
10002878:	1009883a 	mov	r4,r2
1000287c:	e0bffc17 	ldw	r2,-16(fp)
10002880:	1105883a 	add	r2,r2,r4
10002884:	11000017 	ldw	r4,0(r2)
10002888:	d0a00b17 	ldw	r2,-32724(gp)
1000288c:	1085883a 	add	r2,r2,r2
10002890:	1085883a 	add	r2,r2,r2
10002894:	100b883a 	mov	r5,r2
10002898:	e0bffc17 	ldw	r2,-16(fp)
1000289c:	1145883a 	add	r2,r2,r5
100028a0:	10800017 	ldw	r2,0(r2)
100028a4:	2085883a 	add	r2,r4,r2
100028a8:	18800015 	stw	r2,0(r3)
    if (state_c[Cy] <= Bound_up) {
100028ac:	d0a00917 	ldw	r2,-32732(gp)
100028b0:	1085883a 	add	r2,r2,r2
100028b4:	1085883a 	add	r2,r2,r2
100028b8:	1007883a 	mov	r3,r2
100028bc:	e0bffc17 	ldw	r2,-16(fp)
100028c0:	10c5883a 	add	r2,r2,r3
100028c4:	10800017 	ldw	r2,0(r2)
100028c8:	d0e02e17 	ldw	r3,-32584(gp)
100028cc:	18801716 	blt	r3,r2,1000292c <movement+0x6a4>
        state_c[Cy] = Bound_up;
100028d0:	d0a00917 	ldw	r2,-32732(gp)
100028d4:	1085883a 	add	r2,r2,r2
100028d8:	1085883a 	add	r2,r2,r2
100028dc:	1007883a 	mov	r3,r2
100028e0:	e0bffc17 	ldw	r2,-16(fp)
100028e4:	10c5883a 	add	r2,r2,r3
100028e8:	d0e02e17 	ldw	r3,-32584(gp)
100028ec:	10c00015 	stw	r3,0(r2)
        state_c[Vy] = - state_c[Vy];
100028f0:	d0a00b17 	ldw	r2,-32724(gp)
100028f4:	1085883a 	add	r2,r2,r2
100028f8:	1085883a 	add	r2,r2,r2
100028fc:	1007883a 	mov	r3,r2
10002900:	e0bffc17 	ldw	r2,-16(fp)
10002904:	10c7883a 	add	r3,r2,r3
10002908:	d0a00b17 	ldw	r2,-32724(gp)
1000290c:	1085883a 	add	r2,r2,r2
10002910:	1085883a 	add	r2,r2,r2
10002914:	1009883a 	mov	r4,r2
10002918:	e0bffc17 	ldw	r2,-16(fp)
1000291c:	1105883a 	add	r2,r2,r4
10002920:	10800017 	ldw	r2,0(r2)
10002924:	0085c83a 	sub	r2,zero,r2
10002928:	18800015 	stw	r2,0(r3)
    }
    if (state_c[Cy] + state_c[Offy] >= Bound_down) {
1000292c:	d0a00917 	ldw	r2,-32732(gp)
10002930:	1085883a 	add	r2,r2,r2
10002934:	1085883a 	add	r2,r2,r2
10002938:	1007883a 	mov	r3,r2
1000293c:	e0bffc17 	ldw	r2,-16(fp)
10002940:	10c5883a 	add	r2,r2,r3
10002944:	10c00017 	ldw	r3,0(r2)
10002948:	d0a01017 	ldw	r2,-32704(gp)
1000294c:	1085883a 	add	r2,r2,r2
10002950:	1085883a 	add	r2,r2,r2
10002954:	1009883a 	mov	r4,r2
10002958:	e0bffc17 	ldw	r2,-16(fp)
1000295c:	1105883a 	add	r2,r2,r4
10002960:	10800017 	ldw	r2,0(r2)
10002964:	1887883a 	add	r3,r3,r2
10002968:	d0a02f17 	ldw	r2,-32580(gp)
1000296c:	18802c16 	blt	r3,r2,10002a20 <movement+0x798>
        state_c[Cy] = Bound_down - state_c[Offy];
10002970:	d0a00917 	ldw	r2,-32732(gp)
10002974:	1085883a 	add	r2,r2,r2
10002978:	1085883a 	add	r2,r2,r2
1000297c:	1007883a 	mov	r3,r2
10002980:	e0bffc17 	ldw	r2,-16(fp)
10002984:	10c7883a 	add	r3,r2,r3
10002988:	d1202f17 	ldw	r4,-32580(gp)
1000298c:	d0a01017 	ldw	r2,-32704(gp)
10002990:	1085883a 	add	r2,r2,r2
10002994:	1085883a 	add	r2,r2,r2
10002998:	100b883a 	mov	r5,r2
1000299c:	e0bffc17 	ldw	r2,-16(fp)
100029a0:	1145883a 	add	r2,r2,r5
100029a4:	10800017 	ldw	r2,0(r2)
100029a8:	2085c83a 	sub	r2,r4,r2
100029ac:	18800015 	stw	r2,0(r3)
        state_c[Vy] = 0;
100029b0:	d0a00b17 	ldw	r2,-32724(gp)
100029b4:	1085883a 	add	r2,r2,r2
100029b8:	1085883a 	add	r2,r2,r2
100029bc:	1007883a 	mov	r3,r2
100029c0:	e0bffc17 	ldw	r2,-16(fp)
100029c4:	10c5883a 	add	r2,r2,r3
100029c8:	10000015 	stw	zero,0(r2)
        system_flage[f_inair] = 0;
100029cc:	d0a02617 	ldw	r2,-32616(gp)
100029d0:	1085883a 	add	r2,r2,r2
100029d4:	1085883a 	add	r2,r2,r2
100029d8:	1007883a 	mov	r3,r2
100029dc:	e0800317 	ldw	r2,12(fp)
100029e0:	10c5883a 	add	r2,r2,r3
100029e4:	10000015 	stw	zero,0(r2)
        system_flage[f_dash] = 0;
100029e8:	d0a02717 	ldw	r2,-32612(gp)
100029ec:	1085883a 	add	r2,r2,r2
100029f0:	1085883a 	add	r2,r2,r2
100029f4:	1007883a 	mov	r3,r2
100029f8:	e0800317 	ldw	r2,12(fp)
100029fc:	10c5883a 	add	r2,r2,r3
10002a00:	10000015 	stw	zero,0(r2)
        system_flage[f_jump2] = 0;
10002a04:	d0a02a17 	ldw	r2,-32600(gp)
10002a08:	1085883a 	add	r2,r2,r2
10002a0c:	1085883a 	add	r2,r2,r2
10002a10:	1007883a 	mov	r3,r2
10002a14:	e0800317 	ldw	r2,12(fp)
10002a18:	10c5883a 	add	r2,r2,r3
10002a1c:	10000015 	stw	zero,0(r2)
    }

    // Update center coordinate
    if (state_c[Ori] == 0) {
10002a20:	d0a00c17 	ldw	r2,-32720(gp)
10002a24:	1085883a 	add	r2,r2,r2
10002a28:	1085883a 	add	r2,r2,r2
10002a2c:	1007883a 	mov	r3,r2
10002a30:	e0bffc17 	ldw	r2,-16(fp)
10002a34:	10c5883a 	add	r2,r2,r3
10002a38:	10800017 	ldw	r2,0(r2)
10002a3c:	10002d1e 	bne	r2,zero,10002af4 <movement+0x86c>
        state_c[Cenx] = state_c[Cx] + state_c[CenOffx];
10002a40:	d0a00d17 	ldw	r2,-32716(gp)
10002a44:	1085883a 	add	r2,r2,r2
10002a48:	1085883a 	add	r2,r2,r2
10002a4c:	1007883a 	mov	r3,r2
10002a50:	e0bffc17 	ldw	r2,-16(fp)
10002a54:	10c7883a 	add	r3,r2,r3
10002a58:	d0a00817 	ldw	r2,-32736(gp)
10002a5c:	1085883a 	add	r2,r2,r2
10002a60:	1085883a 	add	r2,r2,r2
10002a64:	1009883a 	mov	r4,r2
10002a68:	e0bffc17 	ldw	r2,-16(fp)
10002a6c:	1105883a 	add	r2,r2,r4
10002a70:	11000017 	ldw	r4,0(r2)
10002a74:	d0a01117 	ldw	r2,-32700(gp)
10002a78:	1085883a 	add	r2,r2,r2
10002a7c:	1085883a 	add	r2,r2,r2
10002a80:	100b883a 	mov	r5,r2
10002a84:	e0bffc17 	ldw	r2,-16(fp)
10002a88:	1145883a 	add	r2,r2,r5
10002a8c:	10800017 	ldw	r2,0(r2)
10002a90:	2085883a 	add	r2,r4,r2
10002a94:	18800015 	stw	r2,0(r3)
        state_c[Ceny] = state_c[Cy] + state_c[CenOffy];
10002a98:	d0a00e17 	ldw	r2,-32712(gp)
10002a9c:	1085883a 	add	r2,r2,r2
10002aa0:	1085883a 	add	r2,r2,r2
10002aa4:	1007883a 	mov	r3,r2
10002aa8:	e0bffc17 	ldw	r2,-16(fp)
10002aac:	10c7883a 	add	r3,r2,r3
10002ab0:	d0a00917 	ldw	r2,-32732(gp)
10002ab4:	1085883a 	add	r2,r2,r2
10002ab8:	1085883a 	add	r2,r2,r2
10002abc:	1009883a 	mov	r4,r2
10002ac0:	e0bffc17 	ldw	r2,-16(fp)
10002ac4:	1105883a 	add	r2,r2,r4
10002ac8:	11000017 	ldw	r4,0(r2)
10002acc:	d0a01217 	ldw	r2,-32696(gp)
10002ad0:	1085883a 	add	r2,r2,r2
10002ad4:	1085883a 	add	r2,r2,r2
10002ad8:	100b883a 	mov	r5,r2
10002adc:	e0bffc17 	ldw	r2,-16(fp)
10002ae0:	1145883a 	add	r2,r2,r5
10002ae4:	10800017 	ldw	r2,0(r2)
10002ae8:	2085883a 	add	r2,r4,r2
10002aec:	18800015 	stw	r2,0(r3)
    } else {
        state_c[Cenx] = state_c[Cx] + state_c[Offx] - state_c[CenOffx];
        state_c[Ceny] = state_c[Cy] + state_c[CenOffy];
    }

}
10002af0:	00003406 	br	10002bc4 <movement+0x93c>
    // Update center coordinate
    if (state_c[Ori] == 0) {
        state_c[Cenx] = state_c[Cx] + state_c[CenOffx];
        state_c[Ceny] = state_c[Cy] + state_c[CenOffy];
    } else {
        state_c[Cenx] = state_c[Cx] + state_c[Offx] - state_c[CenOffx];
10002af4:	d0a00d17 	ldw	r2,-32716(gp)
10002af8:	1085883a 	add	r2,r2,r2
10002afc:	1085883a 	add	r2,r2,r2
10002b00:	1007883a 	mov	r3,r2
10002b04:	e0bffc17 	ldw	r2,-16(fp)
10002b08:	10c7883a 	add	r3,r2,r3
10002b0c:	d0a00817 	ldw	r2,-32736(gp)
10002b10:	1085883a 	add	r2,r2,r2
10002b14:	1085883a 	add	r2,r2,r2
10002b18:	1009883a 	mov	r4,r2
10002b1c:	e0bffc17 	ldw	r2,-16(fp)
10002b20:	1105883a 	add	r2,r2,r4
10002b24:	11000017 	ldw	r4,0(r2)
10002b28:	d0a00f17 	ldw	r2,-32708(gp)
10002b2c:	1085883a 	add	r2,r2,r2
10002b30:	1085883a 	add	r2,r2,r2
10002b34:	100b883a 	mov	r5,r2
10002b38:	e0bffc17 	ldw	r2,-16(fp)
10002b3c:	1145883a 	add	r2,r2,r5
10002b40:	10800017 	ldw	r2,0(r2)
10002b44:	2089883a 	add	r4,r4,r2
10002b48:	d0a01117 	ldw	r2,-32700(gp)
10002b4c:	1085883a 	add	r2,r2,r2
10002b50:	1085883a 	add	r2,r2,r2
10002b54:	100b883a 	mov	r5,r2
10002b58:	e0bffc17 	ldw	r2,-16(fp)
10002b5c:	1145883a 	add	r2,r2,r5
10002b60:	10800017 	ldw	r2,0(r2)
10002b64:	2085c83a 	sub	r2,r4,r2
10002b68:	18800015 	stw	r2,0(r3)
        state_c[Ceny] = state_c[Cy] + state_c[CenOffy];
10002b6c:	d0a00e17 	ldw	r2,-32712(gp)
10002b70:	1085883a 	add	r2,r2,r2
10002b74:	1085883a 	add	r2,r2,r2
10002b78:	1007883a 	mov	r3,r2
10002b7c:	e0bffc17 	ldw	r2,-16(fp)
10002b80:	10c7883a 	add	r3,r2,r3
10002b84:	d0a00917 	ldw	r2,-32732(gp)
10002b88:	1085883a 	add	r2,r2,r2
10002b8c:	1085883a 	add	r2,r2,r2
10002b90:	1009883a 	mov	r4,r2
10002b94:	e0bffc17 	ldw	r2,-16(fp)
10002b98:	1105883a 	add	r2,r2,r4
10002b9c:	11000017 	ldw	r4,0(r2)
10002ba0:	d0a01217 	ldw	r2,-32696(gp)
10002ba4:	1085883a 	add	r2,r2,r2
10002ba8:	1085883a 	add	r2,r2,r2
10002bac:	100b883a 	mov	r5,r2
10002bb0:	e0bffc17 	ldw	r2,-16(fp)
10002bb4:	1145883a 	add	r2,r2,r5
10002bb8:	10800017 	ldw	r2,0(r2)
10002bbc:	2085883a 	add	r2,r4,r2
10002bc0:	18800015 	stw	r2,0(r3)
    }

}
10002bc4:	0001883a 	nop
10002bc8:	e037883a 	mov	sp,fp
10002bcc:	df000017 	ldw	fp,0(sp)
10002bd0:	dec00104 	addi	sp,sp,4
10002bd4:	f800283a 	ret

10002bd8 <update_event>:
    int cooling_c[N_cooling_c],
    char keycodes[N_keycodes],
    int clock,
    int system_flage[N_system_flage]
)
{
10002bd8:	deffee04 	addi	sp,sp,-72
10002bdc:	dfc01115 	stw	ra,68(sp)
10002be0:	df001015 	stw	fp,64(sp)
10002be4:	ddc00f15 	stw	r23,60(sp)
10002be8:	dd800e15 	stw	r22,56(sp)
10002bec:	dd400d15 	stw	r21,52(sp)
10002bf0:	dd000c15 	stw	r20,48(sp)
10002bf4:	dcc00b15 	stw	r19,44(sp)
10002bf8:	dc800a15 	stw	r18,40(sp)
10002bfc:	dc400915 	stw	r17,36(sp)
10002c00:	dc000815 	stw	r16,32(sp)
10002c04:	df001004 	addi	fp,sp,64
10002c08:	e13ff215 	stw	r4,-56(fp)
10002c0c:	e17ff315 	stw	r5,-52(fp)
10002c10:	e1bff415 	stw	r6,-48(fp)
10002c14:	e1fff515 	stw	r7,-44(fp)
 * 2. If counter of current frame is zero, increment the frame counter by 1, update state accordingly, return
 * 3. Subtract the counter of current frame by 1
 */
void update_event(
    int state_c[N_state_c],
    long long unsigned int event_c[N1_event_c][N2_event_c],
10002c18:	d1203517 	ldw	r4,-32556(gp)
10002c1c:	213fffc4 	addi	r4,r4,-1
/* Update current event list, do following things:
 * 1. If frame counter is larger than number of frames, free prohibition list and reset event list, return
 * 2. If counter of current frame is zero, increment the frame counter by 1, update state accordingly, return
 * 3. Subtract the counter of current frame by 1
 */
void update_event(
10002c20:	e13ff015 	stw	r4,-64(fp)
10002c24:	d1203517 	ldw	r4,-32556(gp)
10002c28:	2011883a 	mov	r8,r4
10002c2c:	0013883a 	mov	r9,zero
10002c30:	4008d6ba 	srli	r4,r8,26
10002c34:	480691ba 	slli	r3,r9,6
10002c38:	20c6b03a 	or	r3,r4,r3
10002c3c:	400491ba 	slli	r2,r8,6
    int system_flage[N_system_flage]
)
{
    // printf("%d, %d\n", event_c[0][fcount], event_c[1][0]);
    
    int index = event_c[0][fcount];
10002c40:	d0a04317 	ldw	r2,-32500(gp)
10002c44:	e0fff317 	ldw	r3,-52(fp)
10002c48:	100490fa 	slli	r2,r2,3
10002c4c:	1889883a 	add	r4,r3,r2
10002c50:	20800017 	ldw	r2,0(r4)
10002c54:	20c00117 	ldw	r3,4(r4)
10002c58:	e0bff115 	stw	r2,-60(fp)

    // If counter of current frame is zero
    if (event_c[index][0] == 0){
10002c5c:	d0a03517 	ldw	r2,-32556(gp)
10002c60:	1007883a 	mov	r3,r2
10002c64:	e0bff117 	ldw	r2,-60(fp)
10002c68:	100b883a 	mov	r5,r2
10002c6c:	1809883a 	mov	r4,r3
10002c70:	0007d040 	call	10007d04 <__mulsi3>
10002c74:	100490fa 	slli	r2,r2,3
10002c78:	e0fff317 	ldw	r3,-52(fp)
10002c7c:	1889883a 	add	r4,r3,r2
10002c80:	20800017 	ldw	r2,0(r4)
10002c84:	20c00117 	ldw	r3,4(r4)
10002c88:	1009883a 	mov	r4,r2
10002c8c:	20c8b03a 	or	r4,r4,r3
10002c90:	2000d61e 	bne	r4,zero,10002fec <update_event+0x414>
        // If frame counter is larger than or equal to number of frames
        if (index >= event_c[0][fnum]) {
10002c94:	e0bff117 	ldw	r2,-60(fp)
10002c98:	1021883a 	mov	r16,r2
10002c9c:	1005d7fa 	srai	r2,r2,31
10002ca0:	1023883a 	mov	r17,r2
10002ca4:	d0a04417 	ldw	r2,-32496(gp)
10002ca8:	e0fff317 	ldw	r3,-52(fp)
10002cac:	100490fa 	slli	r2,r2,3
10002cb0:	1889883a 	add	r4,r3,r2
10002cb4:	20800017 	ldw	r2,0(r4)
10002cb8:	20c00117 	ldw	r3,4(r4)
10002cbc:	88c05636 	bltu	r17,r3,10002e18 <update_event+0x240>
10002cc0:	1c40011e 	bne	r3,r17,10002cc8 <update_event+0xf0>
10002cc4:	80805436 	bltu	r16,r2,10002e18 <update_event+0x240>
            // If the event is jump, the prohibition of itself should continue untill the end of fall
            if (event_c[0][id] == 3) {
10002cc8:	d0a04617 	ldw	r2,-32488(gp)
10002ccc:	e0fff317 	ldw	r3,-52(fp)
10002cd0:	100490fa 	slli	r2,r2,3
10002cd4:	1889883a 	add	r4,r3,r2
10002cd8:	20800017 	ldw	r2,0(r4)
10002cdc:	20c00117 	ldw	r3,4(r4)
10002ce0:	110000d8 	cmpnei	r4,r2,3
10002ce4:	2000051e 	bne	r4,zero,10002cfc <update_event+0x124>
10002ce8:	1800041e 	bne	r3,zero,10002cfc <update_event+0x124>
                free_prohibition(prohibit_c, 0x1180);      //0001 0001 1000 0000
10002cec:	01446004 	movi	r5,4480
10002cf0:	e13ff417 	ldw	r4,-48(fp)
10002cf4:	0004a040 	call	10004a04 <free_prohibition>
                cooling_c[c_dash] = 20;
                free_prohibition(prohibit_c, event_c[0][pvector]);
            } else {
                free_prohibition(prohibit_c, event_c[0][pvector]);
            }
            return;
10002cf8:	00017006 	br	100032bc <update_event+0x6e4>
        // If frame counter is larger than or equal to number of frames
        if (index >= event_c[0][fnum]) {
            // If the event is jump, the prohibition of itself should continue untill the end of fall
            if (event_c[0][id] == 3) {
                free_prohibition(prohibit_c, 0x1180);      //0001 0001 1000 0000
            } else if (event_c[0][id] == 5) {
10002cfc:	d0a04617 	ldw	r2,-32488(gp)
10002d00:	e0fff317 	ldw	r3,-52(fp)
10002d04:	100490fa 	slli	r2,r2,3
10002d08:	1889883a 	add	r4,r3,r2
10002d0c:	20800017 	ldw	r2,0(r4)
10002d10:	20c00117 	ldw	r3,4(r4)
10002d14:	11000158 	cmpnei	r4,r2,5
10002d18:	2000131e 	bne	r4,zero,10002d68 <update_event+0x190>
10002d1c:	1800121e 	bne	r3,zero,10002d68 <update_event+0x190>
                cooling_c[c_attack] = 10;
10002d20:	d0a02117 	ldw	r2,-32636(gp)
10002d24:	1085883a 	add	r2,r2,r2
10002d28:	1085883a 	add	r2,r2,r2
10002d2c:	1007883a 	mov	r3,r2
10002d30:	e0bff517 	ldw	r2,-44(fp)
10002d34:	10c5883a 	add	r2,r2,r3
10002d38:	00c00284 	movi	r3,10
10002d3c:	10c00015 	stw	r3,0(r2)
                free_prohibition(prohibit_c, event_c[0][pvector]);
10002d40:	d0a04517 	ldw	r2,-32492(gp)
10002d44:	e0fff317 	ldw	r3,-52(fp)
10002d48:	100490fa 	slli	r2,r2,3
10002d4c:	1889883a 	add	r4,r3,r2
10002d50:	20800017 	ldw	r2,0(r4)
10002d54:	20c00117 	ldw	r3,4(r4)
10002d58:	100b883a 	mov	r5,r2
10002d5c:	e13ff417 	ldw	r4,-48(fp)
10002d60:	0004a040 	call	10004a04 <free_prohibition>
                cooling_c[c_dash] = 20;
                free_prohibition(prohibit_c, event_c[0][pvector]);
            } else {
                free_prohibition(prohibit_c, event_c[0][pvector]);
            }
            return;
10002d64:	00015506 	br	100032bc <update_event+0x6e4>
            if (event_c[0][id] == 3) {
                free_prohibition(prohibit_c, 0x1180);      //0001 0001 1000 0000
            } else if (event_c[0][id] == 5) {
                cooling_c[c_attack] = 10;
                free_prohibition(prohibit_c, event_c[0][pvector]);
            } else if (event_c[0][id] == 6) {
10002d68:	d0a04617 	ldw	r2,-32488(gp)
10002d6c:	e0fff317 	ldw	r3,-52(fp)
10002d70:	100490fa 	slli	r2,r2,3
10002d74:	1889883a 	add	r4,r3,r2
10002d78:	20800017 	ldw	r2,0(r4)
10002d7c:	20c00117 	ldw	r3,4(r4)
10002d80:	11000198 	cmpnei	r4,r2,6
10002d84:	20001a1e 	bne	r4,zero,10002df0 <update_event+0x218>
10002d88:	1800191e 	bne	r3,zero,10002df0 <update_event+0x218>
                state_c[Vx] = 0;
10002d8c:	d0a00a17 	ldw	r2,-32728(gp)
10002d90:	1085883a 	add	r2,r2,r2
10002d94:	1085883a 	add	r2,r2,r2
10002d98:	1007883a 	mov	r3,r2
10002d9c:	e0bff217 	ldw	r2,-56(fp)
10002da0:	10c5883a 	add	r2,r2,r3
10002da4:	10000015 	stw	zero,0(r2)
                cooling_c[c_dash] = 20;
10002da8:	d0a02217 	ldw	r2,-32632(gp)
10002dac:	1085883a 	add	r2,r2,r2
10002db0:	1085883a 	add	r2,r2,r2
10002db4:	1007883a 	mov	r3,r2
10002db8:	e0bff517 	ldw	r2,-44(fp)
10002dbc:	10c5883a 	add	r2,r2,r3
10002dc0:	00c00504 	movi	r3,20
10002dc4:	10c00015 	stw	r3,0(r2)
                free_prohibition(prohibit_c, event_c[0][pvector]);
10002dc8:	d0a04517 	ldw	r2,-32492(gp)
10002dcc:	e0fff317 	ldw	r3,-52(fp)
10002dd0:	100490fa 	slli	r2,r2,3
10002dd4:	1889883a 	add	r4,r3,r2
10002dd8:	20800017 	ldw	r2,0(r4)
10002ddc:	20c00117 	ldw	r3,4(r4)
10002de0:	100b883a 	mov	r5,r2
10002de4:	e13ff417 	ldw	r4,-48(fp)
10002de8:	0004a040 	call	10004a04 <free_prohibition>
            } else {
                free_prohibition(prohibit_c, event_c[0][pvector]);
            }
            return;
10002dec:	00013306 	br	100032bc <update_event+0x6e4>
            } else if (event_c[0][id] == 6) {
                state_c[Vx] = 0;
                cooling_c[c_dash] = 20;
                free_prohibition(prohibit_c, event_c[0][pvector]);
            } else {
                free_prohibition(prohibit_c, event_c[0][pvector]);
10002df0:	d0a04517 	ldw	r2,-32492(gp)
10002df4:	e0fff317 	ldw	r3,-52(fp)
10002df8:	100490fa 	slli	r2,r2,3
10002dfc:	1889883a 	add	r4,r3,r2
10002e00:	20800017 	ldw	r2,0(r4)
10002e04:	20c00117 	ldw	r3,4(r4)
10002e08:	100b883a 	mov	r5,r2
10002e0c:	e13ff417 	ldw	r4,-48(fp)
10002e10:	0004a040 	call	10004a04 <free_prohibition>
            }
            return;
10002e14:	00012906 	br	100032bc <update_event+0x6e4>
        } else {
            event_c[0][fcount] += 1;
10002e18:	d2204317 	ldw	r8,-32500(gp)
10002e1c:	d0a04317 	ldw	r2,-32500(gp)
10002e20:	e0fff317 	ldw	r3,-52(fp)
10002e24:	100490fa 	slli	r2,r2,3
10002e28:	1885883a 	add	r2,r3,r2
10002e2c:	11000017 	ldw	r4,0(r2)
10002e30:	11400117 	ldw	r5,4(r2)
10002e34:	01800044 	movi	r6,1
10002e38:	000f883a 	mov	r7,zero
10002e3c:	2185883a 	add	r2,r4,r6
10002e40:	1113803a 	cmpltu	r9,r2,r4
10002e44:	29c7883a 	add	r3,r5,r7
10002e48:	48c9883a 	add	r4,r9,r3
10002e4c:	2007883a 	mov	r3,r4
10002e50:	1009883a 	mov	r4,r2
10002e54:	180b883a 	mov	r5,r3
10002e58:	e0fff317 	ldw	r3,-52(fp)
10002e5c:	400490fa 	slli	r2,r8,3
10002e60:	1885883a 	add	r2,r3,r2
10002e64:	11000015 	stw	r4,0(r2)
10002e68:	11400115 	stw	r5,4(r2)
            state_c[Offx] = event_c[index+1][2];
10002e6c:	d0a00f17 	ldw	r2,-32708(gp)
10002e70:	1085883a 	add	r2,r2,r2
10002e74:	1085883a 	add	r2,r2,r2
10002e78:	1007883a 	mov	r3,r2
10002e7c:	e0bff217 	ldw	r2,-56(fp)
10002e80:	10e1883a 	add	r16,r2,r3
10002e84:	e0bff117 	ldw	r2,-60(fp)
10002e88:	10800044 	addi	r2,r2,1
10002e8c:	1007883a 	mov	r3,r2
10002e90:	d0a03517 	ldw	r2,-32556(gp)
10002e94:	100b883a 	mov	r5,r2
10002e98:	1809883a 	mov	r4,r3
10002e9c:	0007d040 	call	10007d04 <__mulsi3>
10002ea0:	100490fa 	slli	r2,r2,3
10002ea4:	e0fff317 	ldw	r3,-52(fp)
10002ea8:	1889883a 	add	r4,r3,r2
10002eac:	20800417 	ldw	r2,16(r4)
10002eb0:	20c00517 	ldw	r3,20(r4)
10002eb4:	80800015 	stw	r2,0(r16)
            state_c[Offy] = event_c[index+1][3];
10002eb8:	d0a01017 	ldw	r2,-32704(gp)
10002ebc:	1085883a 	add	r2,r2,r2
10002ec0:	1085883a 	add	r2,r2,r2
10002ec4:	1007883a 	mov	r3,r2
10002ec8:	e0bff217 	ldw	r2,-56(fp)
10002ecc:	10e1883a 	add	r16,r2,r3
10002ed0:	e0bff117 	ldw	r2,-60(fp)
10002ed4:	10800044 	addi	r2,r2,1
10002ed8:	1007883a 	mov	r3,r2
10002edc:	d0a03517 	ldw	r2,-32556(gp)
10002ee0:	100b883a 	mov	r5,r2
10002ee4:	1809883a 	mov	r4,r3
10002ee8:	0007d040 	call	10007d04 <__mulsi3>
10002eec:	100490fa 	slli	r2,r2,3
10002ef0:	e0fff317 	ldw	r3,-52(fp)
10002ef4:	1889883a 	add	r4,r3,r2
10002ef8:	20800617 	ldw	r2,24(r4)
10002efc:	20c00717 	ldw	r3,28(r4)
10002f00:	80800015 	stw	r2,0(r16)
            state_c[CenOffx] = event_c[index+1][4];
10002f04:	d0a01117 	ldw	r2,-32700(gp)
10002f08:	1085883a 	add	r2,r2,r2
10002f0c:	1085883a 	add	r2,r2,r2
10002f10:	1007883a 	mov	r3,r2
10002f14:	e0bff217 	ldw	r2,-56(fp)
10002f18:	10e1883a 	add	r16,r2,r3
10002f1c:	e0bff117 	ldw	r2,-60(fp)
10002f20:	10800044 	addi	r2,r2,1
10002f24:	1007883a 	mov	r3,r2
10002f28:	d0a03517 	ldw	r2,-32556(gp)
10002f2c:	100b883a 	mov	r5,r2
10002f30:	1809883a 	mov	r4,r3
10002f34:	0007d040 	call	10007d04 <__mulsi3>
10002f38:	100490fa 	slli	r2,r2,3
10002f3c:	e0fff317 	ldw	r3,-52(fp)
10002f40:	1889883a 	add	r4,r3,r2
10002f44:	20800817 	ldw	r2,32(r4)
10002f48:	20c00917 	ldw	r3,36(r4)
10002f4c:	80800015 	stw	r2,0(r16)
            state_c[CenOffy] = event_c[index+1][5];
10002f50:	d0a01217 	ldw	r2,-32696(gp)
10002f54:	1085883a 	add	r2,r2,r2
10002f58:	1085883a 	add	r2,r2,r2
10002f5c:	1007883a 	mov	r3,r2
10002f60:	e0bff217 	ldw	r2,-56(fp)
10002f64:	10e1883a 	add	r16,r2,r3
10002f68:	e0bff117 	ldw	r2,-60(fp)
10002f6c:	10800044 	addi	r2,r2,1
10002f70:	1007883a 	mov	r3,r2
10002f74:	d0a03517 	ldw	r2,-32556(gp)
10002f78:	100b883a 	mov	r5,r2
10002f7c:	1809883a 	mov	r4,r3
10002f80:	0007d040 	call	10007d04 <__mulsi3>
10002f84:	100490fa 	slli	r2,r2,3
10002f88:	e0fff317 	ldw	r3,-52(fp)
10002f8c:	1889883a 	add	r4,r3,r2
10002f90:	20800a17 	ldw	r2,40(r4)
10002f94:	20c00b17 	ldw	r3,44(r4)
10002f98:	80800015 	stw	r2,0(r16)
            
            // If the event is jump and the third frame is coming, give character a vertical velocity
            if ((event_c[0][id] == 3) && (index == 2)) {
10002f9c:	d0a04617 	ldw	r2,-32488(gp)
10002fa0:	e0fff317 	ldw	r3,-52(fp)
10002fa4:	100490fa 	slli	r2,r2,3
10002fa8:	1889883a 	add	r4,r3,r2
10002fac:	20800017 	ldw	r2,0(r4)
10002fb0:	20c00117 	ldw	r3,4(r4)
10002fb4:	110000d8 	cmpnei	r4,r2,3
10002fb8:	20000c1e 	bne	r4,zero,10002fec <update_event+0x414>
10002fbc:	18000b1e 	bne	r3,zero,10002fec <update_event+0x414>
10002fc0:	e0bff117 	ldw	r2,-60(fp)
10002fc4:	10800098 	cmpnei	r2,r2,2
10002fc8:	1000081e 	bne	r2,zero,10002fec <update_event+0x414>
                state_c[Vy] = -20;
10002fcc:	d0a00b17 	ldw	r2,-32724(gp)
10002fd0:	1085883a 	add	r2,r2,r2
10002fd4:	1085883a 	add	r2,r2,r2
10002fd8:	1007883a 	mov	r3,r2
10002fdc:	e0bff217 	ldw	r2,-56(fp)
10002fe0:	10c5883a 	add	r2,r2,r3
10002fe4:	00fffb04 	movi	r3,-20
10002fe8:	10c00015 	stw	r3,0(r2)
            }
        } 
    }

    // Subtract the counter of current frame by 1
    if ((index != event_c[0][condition_1]) && (index != event_c[0][condition_2])){
10002fec:	e0bff117 	ldw	r2,-60(fp)
10002ff0:	e0bff615 	stw	r2,-40(fp)
10002ff4:	1005d7fa 	srai	r2,r2,31
10002ff8:	e0bff715 	stw	r2,-36(fp)
10002ffc:	d0a04717 	ldw	r2,-32484(gp)
10003000:	e0fff317 	ldw	r3,-52(fp)
10003004:	100490fa 	slli	r2,r2,3
10003008:	1889883a 	add	r4,r3,r2
1000300c:	20800017 	ldw	r2,0(r4)
10003010:	20c00117 	ldw	r3,4(r4)
10003014:	e13ff617 	ldw	r4,-40(fp)
10003018:	2080021e 	bne	r4,r2,10003024 <update_event+0x44c>
1000301c:	e13ff717 	ldw	r4,-36(fp)
10003020:	20c02c26 	beq	r4,r3,100030d4 <update_event+0x4fc>
10003024:	e0bff117 	ldw	r2,-60(fp)
10003028:	102d883a 	mov	r22,r2
1000302c:	1005d7fa 	srai	r2,r2,31
10003030:	102f883a 	mov	r23,r2
10003034:	d0a04817 	ldw	r2,-32480(gp)
10003038:	e0fff317 	ldw	r3,-52(fp)
1000303c:	100490fa 	slli	r2,r2,3
10003040:	1889883a 	add	r4,r3,r2
10003044:	20800017 	ldw	r2,0(r4)
10003048:	20c00117 	ldw	r3,4(r4)
1000304c:	b080011e 	bne	r22,r2,10003054 <update_event+0x47c>
10003050:	b8c02026 	beq	r23,r3,100030d4 <update_event+0x4fc>
        event_c[index][0] -= 1;
10003054:	d0a03517 	ldw	r2,-32556(gp)
10003058:	1007883a 	mov	r3,r2
1000305c:	e0bff117 	ldw	r2,-60(fp)
10003060:	100b883a 	mov	r5,r2
10003064:	1809883a 	mov	r4,r3
10003068:	0007d040 	call	10007d04 <__mulsi3>
1000306c:	100490fa 	slli	r2,r2,3
10003070:	e0fff317 	ldw	r3,-52(fp)
10003074:	18a1883a 	add	r16,r3,r2
10003078:	d0a03517 	ldw	r2,-32556(gp)
1000307c:	1007883a 	mov	r3,r2
10003080:	e0bff117 	ldw	r2,-60(fp)
10003084:	100b883a 	mov	r5,r2
10003088:	1809883a 	mov	r4,r3
1000308c:	0007d040 	call	10007d04 <__mulsi3>
10003090:	100490fa 	slli	r2,r2,3
10003094:	e0fff317 	ldw	r3,-52(fp)
10003098:	1885883a 	add	r2,r3,r2
1000309c:	11000017 	ldw	r4,0(r2)
100030a0:	11400117 	ldw	r5,4(r2)
100030a4:	01bfffc4 	movi	r6,-1
100030a8:	01ffffc4 	movi	r7,-1
100030ac:	2185883a 	add	r2,r4,r6
100030b0:	1111803a 	cmpltu	r8,r2,r4
100030b4:	29c7883a 	add	r3,r5,r7
100030b8:	40c9883a 	add	r4,r8,r3
100030bc:	2007883a 	mov	r3,r4
100030c0:	1009883a 	mov	r4,r2
100030c4:	180b883a 	mov	r5,r3
100030c8:	81000015 	stw	r4,0(r16)
100030cc:	81400115 	stw	r5,4(r16)
100030d0:	00007a06 	br	100032bc <update_event+0x6e4>
    } else {
        if ((event_c[0][id] == 3) && (state_c[Vy] >= 0) && (index == event_c[0][condition_1])) {
100030d4:	d0a04617 	ldw	r2,-32488(gp)
100030d8:	e0fff317 	ldw	r3,-52(fp)
100030dc:	100490fa 	slli	r2,r2,3
100030e0:	1889883a 	add	r4,r3,r2
100030e4:	20800017 	ldw	r2,0(r4)
100030e8:	20c00117 	ldw	r3,4(r4)
100030ec:	110000d8 	cmpnei	r4,r2,3
100030f0:	2000341e 	bne	r4,zero,100031c4 <update_event+0x5ec>
100030f4:	1800331e 	bne	r3,zero,100031c4 <update_event+0x5ec>
100030f8:	d0a00b17 	ldw	r2,-32724(gp)
100030fc:	1085883a 	add	r2,r2,r2
10003100:	1085883a 	add	r2,r2,r2
10003104:	1007883a 	mov	r3,r2
10003108:	e0bff217 	ldw	r2,-56(fp)
1000310c:	10c5883a 	add	r2,r2,r3
10003110:	10800017 	ldw	r2,0(r2)
10003114:	10002b16 	blt	r2,zero,100031c4 <update_event+0x5ec>
10003118:	e0bff117 	ldw	r2,-60(fp)
1000311c:	1029883a 	mov	r20,r2
10003120:	1005d7fa 	srai	r2,r2,31
10003124:	102b883a 	mov	r21,r2
10003128:	d0a04717 	ldw	r2,-32484(gp)
1000312c:	e0fff317 	ldw	r3,-52(fp)
10003130:	100490fa 	slli	r2,r2,3
10003134:	1889883a 	add	r4,r3,r2
10003138:	20800017 	ldw	r2,0(r4)
1000313c:	20c00117 	ldw	r3,4(r4)
10003140:	a080201e 	bne	r20,r2,100031c4 <update_event+0x5ec>
10003144:	a8c01f1e 	bne	r21,r3,100031c4 <update_event+0x5ec>
            event_c[index][0] -= 1;
10003148:	d0a03517 	ldw	r2,-32556(gp)
1000314c:	1007883a 	mov	r3,r2
10003150:	e0bff117 	ldw	r2,-60(fp)
10003154:	100b883a 	mov	r5,r2
10003158:	1809883a 	mov	r4,r3
1000315c:	0007d040 	call	10007d04 <__mulsi3>
10003160:	100490fa 	slli	r2,r2,3
10003164:	e0fff317 	ldw	r3,-52(fp)
10003168:	18a1883a 	add	r16,r3,r2
1000316c:	d0a03517 	ldw	r2,-32556(gp)
10003170:	1007883a 	mov	r3,r2
10003174:	e0bff117 	ldw	r2,-60(fp)
10003178:	100b883a 	mov	r5,r2
1000317c:	1809883a 	mov	r4,r3
10003180:	0007d040 	call	10007d04 <__mulsi3>
10003184:	100490fa 	slli	r2,r2,3
10003188:	e0fff317 	ldw	r3,-52(fp)
1000318c:	1885883a 	add	r2,r3,r2
10003190:	11000017 	ldw	r4,0(r2)
10003194:	11400117 	ldw	r5,4(r2)
10003198:	01bfffc4 	movi	r6,-1
1000319c:	01ffffc4 	movi	r7,-1
100031a0:	2185883a 	add	r2,r4,r6
100031a4:	1111803a 	cmpltu	r8,r2,r4
100031a8:	29c7883a 	add	r3,r5,r7
100031ac:	40c9883a 	add	r4,r8,r3
100031b0:	2007883a 	mov	r3,r4
100031b4:	1009883a 	mov	r4,r2
100031b8:	180b883a 	mov	r5,r3
100031bc:	81000015 	stw	r4,0(r16)
100031c0:	81400115 	stw	r5,4(r16)
        }
        if ((event_c[0][id] == 4) && (state_c[Cy] >= (Bound_down - 50)) && (index == event_c[0][condition_1])) {
100031c4:	d0a04617 	ldw	r2,-32488(gp)
100031c8:	e0fff317 	ldw	r3,-52(fp)
100031cc:	100490fa 	slli	r2,r2,3
100031d0:	1889883a 	add	r4,r3,r2
100031d4:	20800017 	ldw	r2,0(r4)
100031d8:	20c00117 	ldw	r3,4(r4)
100031dc:	11000118 	cmpnei	r4,r2,4
100031e0:	2000361e 	bne	r4,zero,100032bc <update_event+0x6e4>
100031e4:	1800351e 	bne	r3,zero,100032bc <update_event+0x6e4>
100031e8:	d0a00917 	ldw	r2,-32732(gp)
100031ec:	1085883a 	add	r2,r2,r2
100031f0:	1085883a 	add	r2,r2,r2
100031f4:	1007883a 	mov	r3,r2
100031f8:	e0bff217 	ldw	r2,-56(fp)
100031fc:	10c5883a 	add	r2,r2,r3
10003200:	10c00017 	ldw	r3,0(r2)
10003204:	d0a02f17 	ldw	r2,-32580(gp)
10003208:	10bff384 	addi	r2,r2,-50
1000320c:	18802b16 	blt	r3,r2,100032bc <update_event+0x6e4>
10003210:	e0bff117 	ldw	r2,-60(fp)
10003214:	1025883a 	mov	r18,r2
10003218:	1005d7fa 	srai	r2,r2,31
1000321c:	1027883a 	mov	r19,r2
10003220:	d0a04717 	ldw	r2,-32484(gp)
10003224:	e0fff317 	ldw	r3,-52(fp)
10003228:	100490fa 	slli	r2,r2,3
1000322c:	1889883a 	add	r4,r3,r2
10003230:	20800017 	ldw	r2,0(r4)
10003234:	20c00117 	ldw	r3,4(r4)
10003238:	9080201e 	bne	r18,r2,100032bc <update_event+0x6e4>
1000323c:	98c01f1e 	bne	r19,r3,100032bc <update_event+0x6e4>
            event_c[index][0] -= 1;
10003240:	d0a03517 	ldw	r2,-32556(gp)
10003244:	1007883a 	mov	r3,r2
10003248:	e0bff117 	ldw	r2,-60(fp)
1000324c:	100b883a 	mov	r5,r2
10003250:	1809883a 	mov	r4,r3
10003254:	0007d040 	call	10007d04 <__mulsi3>
10003258:	100490fa 	slli	r2,r2,3
1000325c:	e0fff317 	ldw	r3,-52(fp)
10003260:	18a1883a 	add	r16,r3,r2
10003264:	d0a03517 	ldw	r2,-32556(gp)
10003268:	1007883a 	mov	r3,r2
1000326c:	e0bff117 	ldw	r2,-60(fp)
10003270:	100b883a 	mov	r5,r2
10003274:	1809883a 	mov	r4,r3
10003278:	0007d040 	call	10007d04 <__mulsi3>
1000327c:	100490fa 	slli	r2,r2,3
10003280:	e0fff317 	ldw	r3,-52(fp)
10003284:	1885883a 	add	r2,r3,r2
10003288:	11000017 	ldw	r4,0(r2)
1000328c:	11400117 	ldw	r5,4(r2)
10003290:	01bfffc4 	movi	r6,-1
10003294:	01ffffc4 	movi	r7,-1
10003298:	2185883a 	add	r2,r4,r6
1000329c:	1111803a 	cmpltu	r8,r2,r4
100032a0:	29c7883a 	add	r3,r5,r7
100032a4:	40c9883a 	add	r4,r8,r3
100032a8:	2007883a 	mov	r3,r4
100032ac:	1009883a 	mov	r4,r2
100032b0:	180b883a 	mov	r5,r3
100032b4:	81000015 	stw	r4,0(r16)
100032b8:	81400115 	stw	r5,4(r16)
        }
    }
}
100032bc:	e6fff804 	addi	sp,fp,-32
100032c0:	dfc00917 	ldw	ra,36(sp)
100032c4:	df000817 	ldw	fp,32(sp)
100032c8:	ddc00717 	ldw	r23,28(sp)
100032cc:	dd800617 	ldw	r22,24(sp)
100032d0:	dd400517 	ldw	r21,20(sp)
100032d4:	dd000417 	ldw	r20,16(sp)
100032d8:	dcc00317 	ldw	r19,12(sp)
100032dc:	dc800217 	ldw	r18,8(sp)
100032e0:	dc400117 	ldw	r17,4(sp)
100032e4:	dc000017 	ldw	r16,0(sp)
100032e8:	dec00a04 	addi	sp,sp,40
100032ec:	f800283a 	ret

100032f0 <change_event>:
    int cooling_c[N_cooling_c],
    char keycodes[N_keycodes],
    int clock,
    int system_flage[N_system_flage]
)
{
100032f0:	defff604 	addi	sp,sp,-40
100032f4:	dfc00915 	stw	ra,36(sp)
100032f8:	df000815 	stw	fp,32(sp)
100032fc:	df000804 	addi	fp,sp,32
10003300:	e13ffc15 	stw	r4,-16(fp)
10003304:	e17ffd15 	stw	r5,-12(fp)
10003308:	e1bffe15 	stw	r6,-8(fp)
1000330c:	e1ffff15 	stw	r7,-4(fp)


// Change the current event
void change_event(
    int state_c[N_state_c],
    long long unsigned int event_c[N1_event_c][N2_event_c],
10003310:	d1203517 	ldw	r4,-32556(gp)
10003314:	213fffc4 	addi	r4,r4,-1
    }
}


// Change the current event
void change_event(
10003318:	e13ffb15 	stw	r4,-20(fp)
1000331c:	d1203517 	ldw	r4,-32556(gp)
10003320:	2011883a 	mov	r8,r4
10003324:	0013883a 	mov	r9,zero
10003328:	4008d6ba 	srli	r4,r8,26
1000332c:	480691ba 	slli	r3,r9,6
10003330:	20c6b03a 	or	r3,r4,r3
10003334:	400491ba 	slli	r2,r8,6
    char keycodes[N_keycodes],
    int clock,
    int system_flage[N_system_flage]
)
{
    int walk_flag = 0;
10003338:	e03ff815 	stw	zero,-32(fp)
    int jump_flag = 0;
1000333c:	e03ff915 	stw	zero,-28(fp)

    for (int i = 0; i < 4; i++){
10003340:	e03ffa15 	stw	zero,-24(fp)
10003344:	00002206 	br	100033d0 <change_event+0xe0>
        if (keycodes[i] == left || keycodes[i] == right) {
10003348:	e0bffa17 	ldw	r2,-24(fp)
1000334c:	e0c00217 	ldw	r3,8(fp)
10003350:	1885883a 	add	r2,r3,r2
10003354:	10800003 	ldbu	r2,0(r2)
10003358:	10c03fcc 	andi	r3,r2,255
1000335c:	18c0201c 	xori	r3,r3,128
10003360:	18ffe004 	addi	r3,r3,-128
10003364:	d0a00317 	ldw	r2,-32756(gp)
10003368:	18800926 	beq	r3,r2,10003390 <change_event+0xa0>
1000336c:	e0bffa17 	ldw	r2,-24(fp)
10003370:	e0c00217 	ldw	r3,8(fp)
10003374:	1885883a 	add	r2,r3,r2
10003378:	10800003 	ldbu	r2,0(r2)
1000337c:	10c03fcc 	andi	r3,r2,255
10003380:	18c0201c 	xori	r3,r3,128
10003384:	18ffe004 	addi	r3,r3,-128
10003388:	d0a00417 	ldw	r2,-32752(gp)
1000338c:	1880021e 	bne	r3,r2,10003398 <change_event+0xa8>
            walk_flag = 1;
10003390:	00800044 	movi	r2,1
10003394:	e0bff815 	stw	r2,-32(fp)
        }
        if  (keycodes[i] == jump) {
10003398:	e0bffa17 	ldw	r2,-24(fp)
1000339c:	e0c00217 	ldw	r3,8(fp)
100033a0:	1885883a 	add	r2,r3,r2
100033a4:	10800003 	ldbu	r2,0(r2)
100033a8:	10c03fcc 	andi	r3,r2,255
100033ac:	18c0201c 	xori	r3,r3,128
100033b0:	18ffe004 	addi	r3,r3,-128
100033b4:	d0a00717 	ldw	r2,-32740(gp)
100033b8:	1880021e 	bne	r3,r2,100033c4 <change_event+0xd4>
            jump_flag = 1;
100033bc:	00800044 	movi	r2,1
100033c0:	e0bff915 	stw	r2,-28(fp)
)
{
    int walk_flag = 0;
    int jump_flag = 0;

    for (int i = 0; i < 4; i++){
100033c4:	e0bffa17 	ldw	r2,-24(fp)
100033c8:	10800044 	addi	r2,r2,1
100033cc:	e0bffa15 	stw	r2,-24(fp)
100033d0:	e0bffa17 	ldw	r2,-24(fp)
100033d4:	10800110 	cmplti	r2,r2,4
100033d8:	103fdb1e 	bne	r2,zero,10003348 <__alt_data_end+0xf8003348>
        if  (keycodes[i] == jump) {
            jump_flag = 1;
        }
    }

    if (system_flage[f_jump_press] == 1) {
100033dc:	d0a02b17 	ldw	r2,-32596(gp)
100033e0:	1085883a 	add	r2,r2,r2
100033e4:	1085883a 	add	r2,r2,r2
100033e8:	1007883a 	mov	r3,r2
100033ec:	e0800417 	ldw	r2,16(fp)
100033f0:	10c5883a 	add	r2,r2,r3
100033f4:	10800017 	ldw	r2,0(r2)
100033f8:	10800058 	cmpnei	r2,r2,1
100033fc:	1000091e 	bne	r2,zero,10003424 <change_event+0x134>
        if (jump_flag == 0) {
10003400:	e0bff917 	ldw	r2,-28(fp)
10003404:	1000071e 	bne	r2,zero,10003424 <change_event+0x134>
            system_flage[f_jump_press] = 0;     // Jump is released
10003408:	d0a02b17 	ldw	r2,-32596(gp)
1000340c:	1085883a 	add	r2,r2,r2
10003410:	1085883a 	add	r2,r2,r2
10003414:	1007883a 	mov	r3,r2
10003418:	e0800417 	ldw	r2,16(fp)
1000341c:	10c5883a 	add	r2,r2,r3
10003420:	10000015 	stw	zero,0(r2)
        }
    }

    // Dash
    if ((keycodes[0] == dash) && (prohibit_c[p_dash] == 0) && (cooling_c[c_dash] == 0) && (system_flage[f_dash] == 0)) { 
10003424:	e0800217 	ldw	r2,8(fp)
10003428:	10800003 	ldbu	r2,0(r2)
1000342c:	10c03fcc 	andi	r3,r2,255
10003430:	18c0201c 	xori	r3,r3,128
10003434:	18ffe004 	addi	r3,r3,-128
10003438:	d0a00617 	ldw	r2,-32744(gp)
1000343c:	1880881e 	bne	r3,r2,10003660 <change_event+0x370>
10003440:	d0a01c17 	ldw	r2,-32656(gp)
10003444:	1085883a 	add	r2,r2,r2
10003448:	1085883a 	add	r2,r2,r2
1000344c:	1007883a 	mov	r3,r2
10003450:	e0bffe17 	ldw	r2,-8(fp)
10003454:	10c5883a 	add	r2,r2,r3
10003458:	10800017 	ldw	r2,0(r2)
1000345c:	1000801e 	bne	r2,zero,10003660 <change_event+0x370>
10003460:	d0a02217 	ldw	r2,-32632(gp)
10003464:	1085883a 	add	r2,r2,r2
10003468:	1085883a 	add	r2,r2,r2
1000346c:	1007883a 	mov	r3,r2
10003470:	e0bfff17 	ldw	r2,-4(fp)
10003474:	10c5883a 	add	r2,r2,r3
10003478:	10800017 	ldw	r2,0(r2)
1000347c:	1000781e 	bne	r2,zero,10003660 <change_event+0x370>
10003480:	d0a02717 	ldw	r2,-32612(gp)
10003484:	1085883a 	add	r2,r2,r2
10003488:	1085883a 	add	r2,r2,r2
1000348c:	1007883a 	mov	r3,r2
10003490:	e0800417 	ldw	r2,16(fp)
10003494:	10c5883a 	add	r2,r2,r3
10003498:	10800017 	ldw	r2,0(r2)
1000349c:	1000701e 	bne	r2,zero,10003660 <change_event+0x370>
        clean_event(event_c);
100034a0:	e13ffd17 	ldw	r4,-12(fp)
100034a4:	0004be00 	call	10004be0 <clean_event>
        free_prohibition(prohibit_c, 0xffff);
100034a8:	017fffd4 	movui	r5,65535
100034ac:	e13ffe17 	ldw	r4,-8(fp)
100034b0:	0004a040 	call	10004a04 <free_prohibition>
        set_event(event_c, event_c_dash);
100034b4:	01440074 	movhi	r5,4097
100034b8:	295df204 	addi	r5,r5,30664
100034bc:	e13ffd17 	ldw	r4,-12(fp)
100034c0:	0004a8c0 	call	10004a8c <set_event>
        set_prohibition(prohibit_c, event_c[0][pvector]);
100034c4:	d0a04517 	ldw	r2,-32492(gp)
100034c8:	e0fffd17 	ldw	r3,-12(fp)
100034cc:	100490fa 	slli	r2,r2,3
100034d0:	1889883a 	add	r4,r3,r2
100034d4:	20800017 	ldw	r2,0(r4)
100034d8:	20c00117 	ldw	r3,4(r4)
100034dc:	100b883a 	mov	r5,r2
100034e0:	e13ffe17 	ldw	r4,-8(fp)
100034e4:	00049780 	call	10004978 <set_prohibition>
        system_flage[f_dash] = 1;
100034e8:	d0a02717 	ldw	r2,-32612(gp)
100034ec:	1085883a 	add	r2,r2,r2
100034f0:	1085883a 	add	r2,r2,r2
100034f4:	1007883a 	mov	r3,r2
100034f8:	e0800417 	ldw	r2,16(fp)
100034fc:	10c5883a 	add	r2,r2,r3
10003500:	00c00044 	movi	r3,1
10003504:	10c00015 	stw	r3,0(r2)
        // Give it a velocity
        if (state_c[Ori] == 0) {
10003508:	d0a00c17 	ldw	r2,-32720(gp)
1000350c:	1085883a 	add	r2,r2,r2
10003510:	1085883a 	add	r2,r2,r2
10003514:	1007883a 	mov	r3,r2
10003518:	e0bffc17 	ldw	r2,-16(fp)
1000351c:	10c5883a 	add	r2,r2,r3
10003520:	10800017 	ldw	r2,0(r2)
10003524:	10000a1e 	bne	r2,zero,10003550 <change_event+0x260>
            state_c[Vx] = -v_dash;
10003528:	d0a00a17 	ldw	r2,-32728(gp)
1000352c:	1085883a 	add	r2,r2,r2
10003530:	1085883a 	add	r2,r2,r2
10003534:	1007883a 	mov	r3,r2
10003538:	e0bffc17 	ldw	r2,-16(fp)
1000353c:	10c5883a 	add	r2,r2,r3
10003540:	d0e04017 	ldw	r3,-32512(gp)
10003544:	00c7c83a 	sub	r3,zero,r3
10003548:	10c00015 	stw	r3,0(r2)
1000354c:	00000806 	br	10003570 <change_event+0x280>
        } else {
            state_c[Vx] = v_dash;
10003550:	d0a00a17 	ldw	r2,-32728(gp)
10003554:	1085883a 	add	r2,r2,r2
10003558:	1085883a 	add	r2,r2,r2
1000355c:	1007883a 	mov	r3,r2
10003560:	e0bffc17 	ldw	r2,-16(fp)
10003564:	10c5883a 	add	r2,r2,r3
10003568:	d0e04017 	ldw	r3,-32512(gp)
1000356c:	10c00015 	stw	r3,0(r2)
        }
        // Update state values
        state_c[Offx] = event_c[1][2];
10003570:	d0a00f17 	ldw	r2,-32708(gp)
10003574:	1085883a 	add	r2,r2,r2
10003578:	1085883a 	add	r2,r2,r2
1000357c:	1007883a 	mov	r3,r2
10003580:	e0bffc17 	ldw	r2,-16(fp)
10003584:	10cb883a 	add	r5,r2,r3
10003588:	d0a03517 	ldw	r2,-32556(gp)
1000358c:	100490fa 	slli	r2,r2,3
10003590:	e0fffd17 	ldw	r3,-12(fp)
10003594:	1889883a 	add	r4,r3,r2
10003598:	20800417 	ldw	r2,16(r4)
1000359c:	20c00517 	ldw	r3,20(r4)
100035a0:	28800015 	stw	r2,0(r5)
        state_c[Offy] = event_c[1][3];
100035a4:	d0a01017 	ldw	r2,-32704(gp)
100035a8:	1085883a 	add	r2,r2,r2
100035ac:	1085883a 	add	r2,r2,r2
100035b0:	1007883a 	mov	r3,r2
100035b4:	e0bffc17 	ldw	r2,-16(fp)
100035b8:	10cb883a 	add	r5,r2,r3
100035bc:	d0a03517 	ldw	r2,-32556(gp)
100035c0:	100490fa 	slli	r2,r2,3
100035c4:	e0fffd17 	ldw	r3,-12(fp)
100035c8:	1889883a 	add	r4,r3,r2
100035cc:	20800617 	ldw	r2,24(r4)
100035d0:	20c00717 	ldw	r3,28(r4)
100035d4:	28800015 	stw	r2,0(r5)
        state_c[CenOffx] = event_c[1][4];
100035d8:	d0a01117 	ldw	r2,-32700(gp)
100035dc:	1085883a 	add	r2,r2,r2
100035e0:	1085883a 	add	r2,r2,r2
100035e4:	1007883a 	mov	r3,r2
100035e8:	e0bffc17 	ldw	r2,-16(fp)
100035ec:	10cb883a 	add	r5,r2,r3
100035f0:	d0a03517 	ldw	r2,-32556(gp)
100035f4:	100490fa 	slli	r2,r2,3
100035f8:	e0fffd17 	ldw	r3,-12(fp)
100035fc:	1889883a 	add	r4,r3,r2
10003600:	20800817 	ldw	r2,32(r4)
10003604:	20c00917 	ldw	r3,36(r4)
10003608:	28800015 	stw	r2,0(r5)
        state_c[CenOffy] = event_c[1][5];
1000360c:	d0a01217 	ldw	r2,-32696(gp)
10003610:	1085883a 	add	r2,r2,r2
10003614:	1085883a 	add	r2,r2,r2
10003618:	1007883a 	mov	r3,r2
1000361c:	e0bffc17 	ldw	r2,-16(fp)
10003620:	10cb883a 	add	r5,r2,r3
10003624:	d0a03517 	ldw	r2,-32556(gp)
10003628:	100490fa 	slli	r2,r2,3
1000362c:	e0fffd17 	ldw	r3,-12(fp)
10003630:	1889883a 	add	r4,r3,r2
10003634:	20800a17 	ldw	r2,40(r4)
10003638:	20c00b17 	ldw	r3,44(r4)
1000363c:	28800015 	stw	r2,0(r5)
        cooling_c[c_attack] = 15;
10003640:	d0a02117 	ldw	r2,-32636(gp)
10003644:	1085883a 	add	r2,r2,r2
10003648:	1085883a 	add	r2,r2,r2
1000364c:	1007883a 	mov	r3,r2
10003650:	e0bfff17 	ldw	r2,-4(fp)
10003654:	10c5883a 	add	r2,r2,r3
10003658:	00c003c4 	movi	r3,15
1000365c:	10c00015 	stw	r3,0(r2)
    }

    // Attack
    if ((keycodes[0] == attack) && (prohibit_c[p_attack] == 0) && (cooling_c[c_attack] == 0)) { 
10003660:	e0800217 	ldw	r2,8(fp)
10003664:	10800003 	ldbu	r2,0(r2)
10003668:	10c03fcc 	andi	r3,r2,255
1000366c:	18c0201c 	xori	r3,r3,128
10003670:	18ffe004 	addi	r3,r3,-128
10003674:	d0a00517 	ldw	r2,-32748(gp)
10003678:	1880561e 	bne	r3,r2,100037d4 <change_event+0x4e4>
1000367c:	d0a01a17 	ldw	r2,-32664(gp)
10003680:	1085883a 	add	r2,r2,r2
10003684:	1085883a 	add	r2,r2,r2
10003688:	1007883a 	mov	r3,r2
1000368c:	e0bffe17 	ldw	r2,-8(fp)
10003690:	10c5883a 	add	r2,r2,r3
10003694:	10800017 	ldw	r2,0(r2)
10003698:	10004e1e 	bne	r2,zero,100037d4 <change_event+0x4e4>
1000369c:	d0a02117 	ldw	r2,-32636(gp)
100036a0:	1085883a 	add	r2,r2,r2
100036a4:	1085883a 	add	r2,r2,r2
100036a8:	1007883a 	mov	r3,r2
100036ac:	e0bfff17 	ldw	r2,-4(fp)
100036b0:	10c5883a 	add	r2,r2,r3
100036b4:	10800017 	ldw	r2,0(r2)
100036b8:	1000461e 	bne	r2,zero,100037d4 <change_event+0x4e4>
        clean_event(event_c);
100036bc:	e13ffd17 	ldw	r4,-12(fp)
100036c0:	0004be00 	call	10004be0 <clean_event>
        free_prohibition(prohibit_c, 0xffff);
100036c4:	017fffd4 	movui	r5,65535
100036c8:	e13ffe17 	ldw	r4,-8(fp)
100036cc:	0004a040 	call	10004a04 <free_prohibition>
        set_event(event_c, event_c_attack);
100036d0:	01440074 	movhi	r5,4097
100036d4:	295dc204 	addi	r5,r5,30472
100036d8:	e13ffd17 	ldw	r4,-12(fp)
100036dc:	0004a8c0 	call	10004a8c <set_event>
        set_prohibition(prohibit_c, event_c[0][pvector]);
100036e0:	d0a04517 	ldw	r2,-32492(gp)
100036e4:	e0fffd17 	ldw	r3,-12(fp)
100036e8:	100490fa 	slli	r2,r2,3
100036ec:	1889883a 	add	r4,r3,r2
100036f0:	20800017 	ldw	r2,0(r4)
100036f4:	20c00117 	ldw	r3,4(r4)
100036f8:	100b883a 	mov	r5,r2
100036fc:	e13ffe17 	ldw	r4,-8(fp)
10003700:	00049780 	call	10004978 <set_prohibition>
        // Update state values
        state_c[Offx] = event_c[1][2];
10003704:	d0a00f17 	ldw	r2,-32708(gp)
10003708:	1085883a 	add	r2,r2,r2
1000370c:	1085883a 	add	r2,r2,r2
10003710:	1007883a 	mov	r3,r2
10003714:	e0bffc17 	ldw	r2,-16(fp)
10003718:	10cb883a 	add	r5,r2,r3
1000371c:	d0a03517 	ldw	r2,-32556(gp)
10003720:	100490fa 	slli	r2,r2,3
10003724:	e0fffd17 	ldw	r3,-12(fp)
10003728:	1889883a 	add	r4,r3,r2
1000372c:	20800417 	ldw	r2,16(r4)
10003730:	20c00517 	ldw	r3,20(r4)
10003734:	28800015 	stw	r2,0(r5)
        state_c[Offy] = event_c[1][3];
10003738:	d0a01017 	ldw	r2,-32704(gp)
1000373c:	1085883a 	add	r2,r2,r2
10003740:	1085883a 	add	r2,r2,r2
10003744:	1007883a 	mov	r3,r2
10003748:	e0bffc17 	ldw	r2,-16(fp)
1000374c:	10cb883a 	add	r5,r2,r3
10003750:	d0a03517 	ldw	r2,-32556(gp)
10003754:	100490fa 	slli	r2,r2,3
10003758:	e0fffd17 	ldw	r3,-12(fp)
1000375c:	1889883a 	add	r4,r3,r2
10003760:	20800617 	ldw	r2,24(r4)
10003764:	20c00717 	ldw	r3,28(r4)
10003768:	28800015 	stw	r2,0(r5)
        state_c[CenOffx] = event_c[1][4];
1000376c:	d0a01117 	ldw	r2,-32700(gp)
10003770:	1085883a 	add	r2,r2,r2
10003774:	1085883a 	add	r2,r2,r2
10003778:	1007883a 	mov	r3,r2
1000377c:	e0bffc17 	ldw	r2,-16(fp)
10003780:	10cb883a 	add	r5,r2,r3
10003784:	d0a03517 	ldw	r2,-32556(gp)
10003788:	100490fa 	slli	r2,r2,3
1000378c:	e0fffd17 	ldw	r3,-12(fp)
10003790:	1889883a 	add	r4,r3,r2
10003794:	20800817 	ldw	r2,32(r4)
10003798:	20c00917 	ldw	r3,36(r4)
1000379c:	28800015 	stw	r2,0(r5)
        state_c[CenOffy] = event_c[1][5];
100037a0:	d0a01217 	ldw	r2,-32696(gp)
100037a4:	1085883a 	add	r2,r2,r2
100037a8:	1085883a 	add	r2,r2,r2
100037ac:	1007883a 	mov	r3,r2
100037b0:	e0bffc17 	ldw	r2,-16(fp)
100037b4:	10cb883a 	add	r5,r2,r3
100037b8:	d0a03517 	ldw	r2,-32556(gp)
100037bc:	100490fa 	slli	r2,r2,3
100037c0:	e0fffd17 	ldw	r3,-12(fp)
100037c4:	1889883a 	add	r4,r3,r2
100037c8:	20800a17 	ldw	r2,40(r4)
100037cc:	20c00b17 	ldw	r3,44(r4)
100037d0:	28800015 	stw	r2,0(r5)
    } 

    // Jump 
    if ((keycodes[0] == jump) && (prohibit_c[p_jump] == 0) && (system_flage[f_inair] == 0) && (system_flage[f_jump_press] == 0)) { 
100037d4:	e0800217 	ldw	r2,8(fp)
100037d8:	10800003 	ldbu	r2,0(r2)
100037dc:	10c03fcc 	andi	r3,r2,255
100037e0:	18c0201c 	xori	r3,r3,128
100037e4:	18ffe004 	addi	r3,r3,-128
100037e8:	d0a00717 	ldw	r2,-32740(gp)
100037ec:	18806e1e 	bne	r3,r2,100039a8 <change_event+0x6b8>
100037f0:	d0a01817 	ldw	r2,-32672(gp)
100037f4:	1085883a 	add	r2,r2,r2
100037f8:	1085883a 	add	r2,r2,r2
100037fc:	1007883a 	mov	r3,r2
10003800:	e0bffe17 	ldw	r2,-8(fp)
10003804:	10c5883a 	add	r2,r2,r3
10003808:	10800017 	ldw	r2,0(r2)
1000380c:	1000661e 	bne	r2,zero,100039a8 <change_event+0x6b8>
10003810:	d0a02617 	ldw	r2,-32616(gp)
10003814:	1085883a 	add	r2,r2,r2
10003818:	1085883a 	add	r2,r2,r2
1000381c:	1007883a 	mov	r3,r2
10003820:	e0800417 	ldw	r2,16(fp)
10003824:	10c5883a 	add	r2,r2,r3
10003828:	10800017 	ldw	r2,0(r2)
1000382c:	10005e1e 	bne	r2,zero,100039a8 <change_event+0x6b8>
10003830:	d0a02b17 	ldw	r2,-32596(gp)
10003834:	1085883a 	add	r2,r2,r2
10003838:	1085883a 	add	r2,r2,r2
1000383c:	1007883a 	mov	r3,r2
10003840:	e0800417 	ldw	r2,16(fp)
10003844:	10c5883a 	add	r2,r2,r3
10003848:	10800017 	ldw	r2,0(r2)
1000384c:	1000561e 	bne	r2,zero,100039a8 <change_event+0x6b8>
        clean_event(event_c);
10003850:	e13ffd17 	ldw	r4,-12(fp)
10003854:	0004be00 	call	10004be0 <clean_event>
        free_prohibition(prohibit_c, 0xffff);
10003858:	017fffd4 	movui	r5,65535
1000385c:	e13ffe17 	ldw	r4,-8(fp)
10003860:	0004a040 	call	10004a04 <free_prohibition>
        set_event(event_c, event_c_jump);
10003864:	01440074 	movhi	r5,4097
10003868:	295d6e04 	addi	r5,r5,30136
1000386c:	e13ffd17 	ldw	r4,-12(fp)
10003870:	0004a8c0 	call	10004a8c <set_event>
        set_prohibition(prohibit_c, event_c[0][pvector]);
10003874:	d0a04517 	ldw	r2,-32492(gp)
10003878:	e0fffd17 	ldw	r3,-12(fp)
1000387c:	100490fa 	slli	r2,r2,3
10003880:	1889883a 	add	r4,r3,r2
10003884:	20800017 	ldw	r2,0(r4)
10003888:	20c00117 	ldw	r3,4(r4)
1000388c:	100b883a 	mov	r5,r2
10003890:	e13ffe17 	ldw	r4,-8(fp)
10003894:	00049780 	call	10004978 <set_prohibition>
        system_flage[f_inair] = 1;
10003898:	d0a02617 	ldw	r2,-32616(gp)
1000389c:	1085883a 	add	r2,r2,r2
100038a0:	1085883a 	add	r2,r2,r2
100038a4:	1007883a 	mov	r3,r2
100038a8:	e0800417 	ldw	r2,16(fp)
100038ac:	10c5883a 	add	r2,r2,r3
100038b0:	00c00044 	movi	r3,1
100038b4:	10c00015 	stw	r3,0(r2)
        system_flage[f_jump_press] = 1;
100038b8:	d0a02b17 	ldw	r2,-32596(gp)
100038bc:	1085883a 	add	r2,r2,r2
100038c0:	1085883a 	add	r2,r2,r2
100038c4:	1007883a 	mov	r3,r2
100038c8:	e0800417 	ldw	r2,16(fp)
100038cc:	10c5883a 	add	r2,r2,r3
100038d0:	00c00044 	movi	r3,1
100038d4:	10c00015 	stw	r3,0(r2)
        // Update state values
        state_c[Offx] = event_c[1][2];
100038d8:	d0a00f17 	ldw	r2,-32708(gp)
100038dc:	1085883a 	add	r2,r2,r2
100038e0:	1085883a 	add	r2,r2,r2
100038e4:	1007883a 	mov	r3,r2
100038e8:	e0bffc17 	ldw	r2,-16(fp)
100038ec:	10cb883a 	add	r5,r2,r3
100038f0:	d0a03517 	ldw	r2,-32556(gp)
100038f4:	100490fa 	slli	r2,r2,3
100038f8:	e0fffd17 	ldw	r3,-12(fp)
100038fc:	1889883a 	add	r4,r3,r2
10003900:	20800417 	ldw	r2,16(r4)
10003904:	20c00517 	ldw	r3,20(r4)
10003908:	28800015 	stw	r2,0(r5)
        state_c[Offy] = event_c[1][3];
1000390c:	d0a01017 	ldw	r2,-32704(gp)
10003910:	1085883a 	add	r2,r2,r2
10003914:	1085883a 	add	r2,r2,r2
10003918:	1007883a 	mov	r3,r2
1000391c:	e0bffc17 	ldw	r2,-16(fp)
10003920:	10cb883a 	add	r5,r2,r3
10003924:	d0a03517 	ldw	r2,-32556(gp)
10003928:	100490fa 	slli	r2,r2,3
1000392c:	e0fffd17 	ldw	r3,-12(fp)
10003930:	1889883a 	add	r4,r3,r2
10003934:	20800617 	ldw	r2,24(r4)
10003938:	20c00717 	ldw	r3,28(r4)
1000393c:	28800015 	stw	r2,0(r5)
        state_c[CenOffx] = event_c[1][4];
10003940:	d0a01117 	ldw	r2,-32700(gp)
10003944:	1085883a 	add	r2,r2,r2
10003948:	1085883a 	add	r2,r2,r2
1000394c:	1007883a 	mov	r3,r2
10003950:	e0bffc17 	ldw	r2,-16(fp)
10003954:	10cb883a 	add	r5,r2,r3
10003958:	d0a03517 	ldw	r2,-32556(gp)
1000395c:	100490fa 	slli	r2,r2,3
10003960:	e0fffd17 	ldw	r3,-12(fp)
10003964:	1889883a 	add	r4,r3,r2
10003968:	20800817 	ldw	r2,32(r4)
1000396c:	20c00917 	ldw	r3,36(r4)
10003970:	28800015 	stw	r2,0(r5)
        state_c[CenOffy] = event_c[1][5];
10003974:	d0a01217 	ldw	r2,-32696(gp)
10003978:	1085883a 	add	r2,r2,r2
1000397c:	1085883a 	add	r2,r2,r2
10003980:	1007883a 	mov	r3,r2
10003984:	e0bffc17 	ldw	r2,-16(fp)
10003988:	10cb883a 	add	r5,r2,r3
1000398c:	d0a03517 	ldw	r2,-32556(gp)
10003990:	100490fa 	slli	r2,r2,3
10003994:	e0fffd17 	ldw	r3,-12(fp)
10003998:	1889883a 	add	r4,r3,r2
1000399c:	20800a17 	ldw	r2,40(r4)
100039a0:	20c00b17 	ldw	r3,44(r4)
100039a4:	28800015 	stw	r2,0(r5)
    }

    // Double jump
    if ((keycodes[0] == jump) && (prohibit_c[p_jump2] == 0) && (system_flage[f_jump2] == 0) && (state_c[Cy] - state_c[Offy] < Bound_down - 40) && (system_flage[f_jump_press] == 0)) {
100039a8:	e0800217 	ldw	r2,8(fp)
100039ac:	10800003 	ldbu	r2,0(r2)
100039b0:	10c03fcc 	andi	r3,r2,255
100039b4:	18c0201c 	xori	r3,r3,128
100039b8:	18ffe004 	addi	r3,r3,-128
100039bc:	d0a00717 	ldw	r2,-32740(gp)
100039c0:	1880881e 	bne	r3,r2,10003be4 <change_event+0x8f4>
100039c4:	d0a01917 	ldw	r2,-32668(gp)
100039c8:	1085883a 	add	r2,r2,r2
100039cc:	1085883a 	add	r2,r2,r2
100039d0:	1007883a 	mov	r3,r2
100039d4:	e0bffe17 	ldw	r2,-8(fp)
100039d8:	10c5883a 	add	r2,r2,r3
100039dc:	10800017 	ldw	r2,0(r2)
100039e0:	1000801e 	bne	r2,zero,10003be4 <change_event+0x8f4>
100039e4:	d0a02a17 	ldw	r2,-32600(gp)
100039e8:	1085883a 	add	r2,r2,r2
100039ec:	1085883a 	add	r2,r2,r2
100039f0:	1007883a 	mov	r3,r2
100039f4:	e0800417 	ldw	r2,16(fp)
100039f8:	10c5883a 	add	r2,r2,r3
100039fc:	10800017 	ldw	r2,0(r2)
10003a00:	1000781e 	bne	r2,zero,10003be4 <change_event+0x8f4>
10003a04:	d0a00917 	ldw	r2,-32732(gp)
10003a08:	1085883a 	add	r2,r2,r2
10003a0c:	1085883a 	add	r2,r2,r2
10003a10:	1007883a 	mov	r3,r2
10003a14:	e0bffc17 	ldw	r2,-16(fp)
10003a18:	10c5883a 	add	r2,r2,r3
10003a1c:	10c00017 	ldw	r3,0(r2)
10003a20:	d0a01017 	ldw	r2,-32704(gp)
10003a24:	1085883a 	add	r2,r2,r2
10003a28:	1085883a 	add	r2,r2,r2
10003a2c:	1009883a 	mov	r4,r2
10003a30:	e0bffc17 	ldw	r2,-16(fp)
10003a34:	1105883a 	add	r2,r2,r4
10003a38:	10800017 	ldw	r2,0(r2)
10003a3c:	1887c83a 	sub	r3,r3,r2
10003a40:	d0a02f17 	ldw	r2,-32580(gp)
10003a44:	10bff604 	addi	r2,r2,-40
10003a48:	1880660e 	bge	r3,r2,10003be4 <change_event+0x8f4>
10003a4c:	d0a02b17 	ldw	r2,-32596(gp)
10003a50:	1085883a 	add	r2,r2,r2
10003a54:	1085883a 	add	r2,r2,r2
10003a58:	1007883a 	mov	r3,r2
10003a5c:	e0800417 	ldw	r2,16(fp)
10003a60:	10c5883a 	add	r2,r2,r3
10003a64:	10800017 	ldw	r2,0(r2)
10003a68:	10005e1e 	bne	r2,zero,10003be4 <change_event+0x8f4>
        system_flage[f_jump2] = 1;
10003a6c:	d0a02a17 	ldw	r2,-32600(gp)
10003a70:	1085883a 	add	r2,r2,r2
10003a74:	1085883a 	add	r2,r2,r2
10003a78:	1007883a 	mov	r3,r2
10003a7c:	e0800417 	ldw	r2,16(fp)
10003a80:	10c5883a 	add	r2,r2,r3
10003a84:	00c00044 	movi	r3,1
10003a88:	10c00015 	stw	r3,0(r2)
        system_flage[f_jump_press] = 1;
10003a8c:	d0a02b17 	ldw	r2,-32596(gp)
10003a90:	1085883a 	add	r2,r2,r2
10003a94:	1085883a 	add	r2,r2,r2
10003a98:	1007883a 	mov	r3,r2
10003a9c:	e0800417 	ldw	r2,16(fp)
10003aa0:	10c5883a 	add	r2,r2,r3
10003aa4:	00c00044 	movi	r3,1
10003aa8:	10c00015 	stw	r3,0(r2)
        clean_event(event_c);
10003aac:	e13ffd17 	ldw	r4,-12(fp)
10003ab0:	0004be00 	call	10004be0 <clean_event>
        free_prohibition(prohibit_c, 0xffff);
10003ab4:	017fffd4 	movui	r5,65535
10003ab8:	e13ffe17 	ldw	r4,-8(fp)
10003abc:	0004a040 	call	10004a04 <free_prohibition>
        set_event(event_c, event_c_jump2);
10003ac0:	01440074 	movhi	r5,4097
10003ac4:	295e0a04 	addi	r5,r5,30760
10003ac8:	e13ffd17 	ldw	r4,-12(fp)
10003acc:	0004a8c0 	call	10004a8c <set_event>
        set_prohibition(prohibit_c, event_c[0][pvector]);
10003ad0:	d0a04517 	ldw	r2,-32492(gp)
10003ad4:	e0fffd17 	ldw	r3,-12(fp)
10003ad8:	100490fa 	slli	r2,r2,3
10003adc:	1889883a 	add	r4,r3,r2
10003ae0:	20800017 	ldw	r2,0(r4)
10003ae4:	20c00117 	ldw	r3,4(r4)
10003ae8:	100b883a 	mov	r5,r2
10003aec:	e13ffe17 	ldw	r4,-8(fp)
10003af0:	00049780 	call	10004978 <set_prohibition>
        // Update state values
        state_c[Offx] = event_c[1][2];
10003af4:	d0a00f17 	ldw	r2,-32708(gp)
10003af8:	1085883a 	add	r2,r2,r2
10003afc:	1085883a 	add	r2,r2,r2
10003b00:	1007883a 	mov	r3,r2
10003b04:	e0bffc17 	ldw	r2,-16(fp)
10003b08:	10cb883a 	add	r5,r2,r3
10003b0c:	d0a03517 	ldw	r2,-32556(gp)
10003b10:	100490fa 	slli	r2,r2,3
10003b14:	e0fffd17 	ldw	r3,-12(fp)
10003b18:	1889883a 	add	r4,r3,r2
10003b1c:	20800417 	ldw	r2,16(r4)
10003b20:	20c00517 	ldw	r3,20(r4)
10003b24:	28800015 	stw	r2,0(r5)
        state_c[Offy] = event_c[1][3];
10003b28:	d0a01017 	ldw	r2,-32704(gp)
10003b2c:	1085883a 	add	r2,r2,r2
10003b30:	1085883a 	add	r2,r2,r2
10003b34:	1007883a 	mov	r3,r2
10003b38:	e0bffc17 	ldw	r2,-16(fp)
10003b3c:	10cb883a 	add	r5,r2,r3
10003b40:	d0a03517 	ldw	r2,-32556(gp)
10003b44:	100490fa 	slli	r2,r2,3
10003b48:	e0fffd17 	ldw	r3,-12(fp)
10003b4c:	1889883a 	add	r4,r3,r2
10003b50:	20800617 	ldw	r2,24(r4)
10003b54:	20c00717 	ldw	r3,28(r4)
10003b58:	28800015 	stw	r2,0(r5)
        state_c[CenOffx] = event_c[1][4];
10003b5c:	d0a01117 	ldw	r2,-32700(gp)
10003b60:	1085883a 	add	r2,r2,r2
10003b64:	1085883a 	add	r2,r2,r2
10003b68:	1007883a 	mov	r3,r2
10003b6c:	e0bffc17 	ldw	r2,-16(fp)
10003b70:	10cb883a 	add	r5,r2,r3
10003b74:	d0a03517 	ldw	r2,-32556(gp)
10003b78:	100490fa 	slli	r2,r2,3
10003b7c:	e0fffd17 	ldw	r3,-12(fp)
10003b80:	1889883a 	add	r4,r3,r2
10003b84:	20800817 	ldw	r2,32(r4)
10003b88:	20c00917 	ldw	r3,36(r4)
10003b8c:	28800015 	stw	r2,0(r5)
        state_c[CenOffy] = event_c[1][5];
10003b90:	d0a01217 	ldw	r2,-32696(gp)
10003b94:	1085883a 	add	r2,r2,r2
10003b98:	1085883a 	add	r2,r2,r2
10003b9c:	1007883a 	mov	r3,r2
10003ba0:	e0bffc17 	ldw	r2,-16(fp)
10003ba4:	10cb883a 	add	r5,r2,r3
10003ba8:	d0a03517 	ldw	r2,-32556(gp)
10003bac:	100490fa 	slli	r2,r2,3
10003bb0:	e0fffd17 	ldw	r3,-12(fp)
10003bb4:	1889883a 	add	r4,r3,r2
10003bb8:	20800a17 	ldw	r2,40(r4)
10003bbc:	20c00b17 	ldw	r3,44(r4)
10003bc0:	28800015 	stw	r2,0(r5)
        // Give a velocity
        state_c[Vy] = -17;
10003bc4:	d0a00b17 	ldw	r2,-32724(gp)
10003bc8:	1085883a 	add	r2,r2,r2
10003bcc:	1085883a 	add	r2,r2,r2
10003bd0:	1007883a 	mov	r3,r2
10003bd4:	e0bffc17 	ldw	r2,-16(fp)
10003bd8:	10c5883a 	add	r2,r2,r3
10003bdc:	00fffbc4 	movi	r3,-17
10003be0:	10c00015 	stw	r3,0(r2)
    }

    //  Fall
    if (((Bound_down - state_c[Cy] - state_c[Offy]) > 10) && (prohibit_c[p_fall] == 0)) { 
10003be4:	d0e02f17 	ldw	r3,-32580(gp)
10003be8:	d0a00917 	ldw	r2,-32732(gp)
10003bec:	1085883a 	add	r2,r2,r2
10003bf0:	1085883a 	add	r2,r2,r2
10003bf4:	1009883a 	mov	r4,r2
10003bf8:	e0bffc17 	ldw	r2,-16(fp)
10003bfc:	1105883a 	add	r2,r2,r4
10003c00:	10800017 	ldw	r2,0(r2)
10003c04:	1887c83a 	sub	r3,r3,r2
10003c08:	d0a01017 	ldw	r2,-32704(gp)
10003c0c:	1085883a 	add	r2,r2,r2
10003c10:	1085883a 	add	r2,r2,r2
10003c14:	1009883a 	mov	r4,r2
10003c18:	e0bffc17 	ldw	r2,-16(fp)
10003c1c:	1105883a 	add	r2,r2,r4
10003c20:	10800017 	ldw	r2,0(r2)
10003c24:	1885c83a 	sub	r2,r3,r2
10003c28:	108002d0 	cmplti	r2,r2,11
10003c2c:	10004e1e 	bne	r2,zero,10003d68 <change_event+0xa78>
10003c30:	d0a01b17 	ldw	r2,-32660(gp)
10003c34:	1085883a 	add	r2,r2,r2
10003c38:	1085883a 	add	r2,r2,r2
10003c3c:	1007883a 	mov	r3,r2
10003c40:	e0bffe17 	ldw	r2,-8(fp)
10003c44:	10c5883a 	add	r2,r2,r3
10003c48:	10800017 	ldw	r2,0(r2)
10003c4c:	1000461e 	bne	r2,zero,10003d68 <change_event+0xa78>
        clean_event(event_c);
10003c50:	e13ffd17 	ldw	r4,-12(fp)
10003c54:	0004be00 	call	10004be0 <clean_event>
        free_prohibition(prohibit_c, 0xffff);
10003c58:	017fffd4 	movui	r5,65535
10003c5c:	e13ffe17 	ldw	r4,-8(fp)
10003c60:	0004a040 	call	10004a04 <free_prohibition>
        set_event(event_c, event_c_fall);
10003c64:	01440074 	movhi	r5,4097
10003c68:	295d9e04 	addi	r5,r5,30328
10003c6c:	e13ffd17 	ldw	r4,-12(fp)
10003c70:	0004a8c0 	call	10004a8c <set_event>
        set_prohibition(prohibit_c, event_c[0][pvector]);
10003c74:	d0a04517 	ldw	r2,-32492(gp)
10003c78:	e0fffd17 	ldw	r3,-12(fp)
10003c7c:	100490fa 	slli	r2,r2,3
10003c80:	1889883a 	add	r4,r3,r2
10003c84:	20800017 	ldw	r2,0(r4)
10003c88:	20c00117 	ldw	r3,4(r4)
10003c8c:	100b883a 	mov	r5,r2
10003c90:	e13ffe17 	ldw	r4,-8(fp)
10003c94:	00049780 	call	10004978 <set_prohibition>
        // Update state values
        state_c[Offx] = event_c[1][2];
10003c98:	d0a00f17 	ldw	r2,-32708(gp)
10003c9c:	1085883a 	add	r2,r2,r2
10003ca0:	1085883a 	add	r2,r2,r2
10003ca4:	1007883a 	mov	r3,r2
10003ca8:	e0bffc17 	ldw	r2,-16(fp)
10003cac:	10cb883a 	add	r5,r2,r3
10003cb0:	d0a03517 	ldw	r2,-32556(gp)
10003cb4:	100490fa 	slli	r2,r2,3
10003cb8:	e0fffd17 	ldw	r3,-12(fp)
10003cbc:	1889883a 	add	r4,r3,r2
10003cc0:	20800417 	ldw	r2,16(r4)
10003cc4:	20c00517 	ldw	r3,20(r4)
10003cc8:	28800015 	stw	r2,0(r5)
        state_c[Offy] = event_c[1][3];
10003ccc:	d0a01017 	ldw	r2,-32704(gp)
10003cd0:	1085883a 	add	r2,r2,r2
10003cd4:	1085883a 	add	r2,r2,r2
10003cd8:	1007883a 	mov	r3,r2
10003cdc:	e0bffc17 	ldw	r2,-16(fp)
10003ce0:	10cb883a 	add	r5,r2,r3
10003ce4:	d0a03517 	ldw	r2,-32556(gp)
10003ce8:	100490fa 	slli	r2,r2,3
10003cec:	e0fffd17 	ldw	r3,-12(fp)
10003cf0:	1889883a 	add	r4,r3,r2
10003cf4:	20800617 	ldw	r2,24(r4)
10003cf8:	20c00717 	ldw	r3,28(r4)
10003cfc:	28800015 	stw	r2,0(r5)
        state_c[CenOffx] = event_c[1][4];
10003d00:	d0a01117 	ldw	r2,-32700(gp)
10003d04:	1085883a 	add	r2,r2,r2
10003d08:	1085883a 	add	r2,r2,r2
10003d0c:	1007883a 	mov	r3,r2
10003d10:	e0bffc17 	ldw	r2,-16(fp)
10003d14:	10cb883a 	add	r5,r2,r3
10003d18:	d0a03517 	ldw	r2,-32556(gp)
10003d1c:	100490fa 	slli	r2,r2,3
10003d20:	e0fffd17 	ldw	r3,-12(fp)
10003d24:	1889883a 	add	r4,r3,r2
10003d28:	20800817 	ldw	r2,32(r4)
10003d2c:	20c00917 	ldw	r3,36(r4)
10003d30:	28800015 	stw	r2,0(r5)
        state_c[CenOffy] = event_c[1][5];
10003d34:	d0a01217 	ldw	r2,-32696(gp)
10003d38:	1085883a 	add	r2,r2,r2
10003d3c:	1085883a 	add	r2,r2,r2
10003d40:	1007883a 	mov	r3,r2
10003d44:	e0bffc17 	ldw	r2,-16(fp)
10003d48:	10cb883a 	add	r5,r2,r3
10003d4c:	d0a03517 	ldw	r2,-32556(gp)
10003d50:	100490fa 	slli	r2,r2,3
10003d54:	e0fffd17 	ldw	r3,-12(fp)
10003d58:	1889883a 	add	r4,r3,r2
10003d5c:	20800a17 	ldw	r2,40(r4)
10003d60:	20c00b17 	ldw	r3,44(r4)
10003d64:	28800015 	stw	r2,0(r5)
    }
    
    // Walk
    if ((walk_flag == 1) && (prohibit_c[p_walk] == 0)) { 
10003d68:	e0bff817 	ldw	r2,-32(fp)
10003d6c:	10800058 	cmpnei	r2,r2,1
10003d70:	10004e1e 	bne	r2,zero,10003eac <change_event+0xbbc>
10003d74:	d0a01717 	ldw	r2,-32676(gp)
10003d78:	1085883a 	add	r2,r2,r2
10003d7c:	1085883a 	add	r2,r2,r2
10003d80:	1007883a 	mov	r3,r2
10003d84:	e0bffe17 	ldw	r2,-8(fp)
10003d88:	10c5883a 	add	r2,r2,r3
10003d8c:	10800017 	ldw	r2,0(r2)
10003d90:	1000461e 	bne	r2,zero,10003eac <change_event+0xbbc>
        clean_event(event_c);
10003d94:	e13ffd17 	ldw	r4,-12(fp)
10003d98:	0004be00 	call	10004be0 <clean_event>
        free_prohibition(prohibit_c, 0xffff);
10003d9c:	017fffd4 	movui	r5,65535
10003da0:	e13ffe17 	ldw	r4,-8(fp)
10003da4:	0004a040 	call	10004a04 <free_prohibition>
        set_event(event_c, event_c_walk);
10003da8:	01440074 	movhi	r5,4097
10003dac:	295d2604 	addi	r5,r5,29848
10003db0:	e13ffd17 	ldw	r4,-12(fp)
10003db4:	0004a8c0 	call	10004a8c <set_event>
        set_prohibition(prohibit_c, event_c[0][pvector]);
10003db8:	d0a04517 	ldw	r2,-32492(gp)
10003dbc:	e0fffd17 	ldw	r3,-12(fp)
10003dc0:	100490fa 	slli	r2,r2,3
10003dc4:	1889883a 	add	r4,r3,r2
10003dc8:	20800017 	ldw	r2,0(r4)
10003dcc:	20c00117 	ldw	r3,4(r4)
10003dd0:	100b883a 	mov	r5,r2
10003dd4:	e13ffe17 	ldw	r4,-8(fp)
10003dd8:	00049780 	call	10004978 <set_prohibition>
        // Update state values
        state_c[Offx] = event_c[1][2];
10003ddc:	d0a00f17 	ldw	r2,-32708(gp)
10003de0:	1085883a 	add	r2,r2,r2
10003de4:	1085883a 	add	r2,r2,r2
10003de8:	1007883a 	mov	r3,r2
10003dec:	e0bffc17 	ldw	r2,-16(fp)
10003df0:	10cb883a 	add	r5,r2,r3
10003df4:	d0a03517 	ldw	r2,-32556(gp)
10003df8:	100490fa 	slli	r2,r2,3
10003dfc:	e0fffd17 	ldw	r3,-12(fp)
10003e00:	1889883a 	add	r4,r3,r2
10003e04:	20800417 	ldw	r2,16(r4)
10003e08:	20c00517 	ldw	r3,20(r4)
10003e0c:	28800015 	stw	r2,0(r5)
        state_c[Offy] = event_c[1][3];
10003e10:	d0a01017 	ldw	r2,-32704(gp)
10003e14:	1085883a 	add	r2,r2,r2
10003e18:	1085883a 	add	r2,r2,r2
10003e1c:	1007883a 	mov	r3,r2
10003e20:	e0bffc17 	ldw	r2,-16(fp)
10003e24:	10cb883a 	add	r5,r2,r3
10003e28:	d0a03517 	ldw	r2,-32556(gp)
10003e2c:	100490fa 	slli	r2,r2,3
10003e30:	e0fffd17 	ldw	r3,-12(fp)
10003e34:	1889883a 	add	r4,r3,r2
10003e38:	20800617 	ldw	r2,24(r4)
10003e3c:	20c00717 	ldw	r3,28(r4)
10003e40:	28800015 	stw	r2,0(r5)
        state_c[CenOffx] = event_c[1][4];
10003e44:	d0a01117 	ldw	r2,-32700(gp)
10003e48:	1085883a 	add	r2,r2,r2
10003e4c:	1085883a 	add	r2,r2,r2
10003e50:	1007883a 	mov	r3,r2
10003e54:	e0bffc17 	ldw	r2,-16(fp)
10003e58:	10cb883a 	add	r5,r2,r3
10003e5c:	d0a03517 	ldw	r2,-32556(gp)
10003e60:	100490fa 	slli	r2,r2,3
10003e64:	e0fffd17 	ldw	r3,-12(fp)
10003e68:	1889883a 	add	r4,r3,r2
10003e6c:	20800817 	ldw	r2,32(r4)
10003e70:	20c00917 	ldw	r3,36(r4)
10003e74:	28800015 	stw	r2,0(r5)
        state_c[CenOffy] = event_c[1][5];
10003e78:	d0a01217 	ldw	r2,-32696(gp)
10003e7c:	1085883a 	add	r2,r2,r2
10003e80:	1085883a 	add	r2,r2,r2
10003e84:	1007883a 	mov	r3,r2
10003e88:	e0bffc17 	ldw	r2,-16(fp)
10003e8c:	10cb883a 	add	r5,r2,r3
10003e90:	d0a03517 	ldw	r2,-32556(gp)
10003e94:	100490fa 	slli	r2,r2,3
10003e98:	e0fffd17 	ldw	r3,-12(fp)
10003e9c:	1889883a 	add	r4,r3,r2
10003ea0:	20800a17 	ldw	r2,40(r4)
10003ea4:	20c00b17 	ldw	r3,44(r4)
10003ea8:	28800015 	stw	r2,0(r5)
    } 
    
    // Stand
    if ((walk_flag == 0) && (prohibit_c[p_stand] == 0)) {
10003eac:	e0bff817 	ldw	r2,-32(fp)
10003eb0:	10004e1e 	bne	r2,zero,10003fec <change_event+0xcfc>
10003eb4:	d0a01617 	ldw	r2,-32680(gp)
10003eb8:	1085883a 	add	r2,r2,r2
10003ebc:	1085883a 	add	r2,r2,r2
10003ec0:	1007883a 	mov	r3,r2
10003ec4:	e0bffe17 	ldw	r2,-8(fp)
10003ec8:	10c5883a 	add	r2,r2,r3
10003ecc:	10800017 	ldw	r2,0(r2)
10003ed0:	1000461e 	bne	r2,zero,10003fec <change_event+0xcfc>
        clean_event(event_c);
10003ed4:	e13ffd17 	ldw	r4,-12(fp)
10003ed8:	0004be00 	call	10004be0 <clean_event>
        free_prohibition(prohibit_c, 0xffff);
10003edc:	017fffd4 	movui	r5,65535
10003ee0:	e13ffe17 	ldw	r4,-8(fp)
10003ee4:	0004a040 	call	10004a04 <free_prohibition>
        set_event(event_c, event_c_stand);
10003ee8:	01440074 	movhi	r5,4097
10003eec:	295d0e04 	addi	r5,r5,29752
10003ef0:	e13ffd17 	ldw	r4,-12(fp)
10003ef4:	0004a8c0 	call	10004a8c <set_event>
        set_prohibition(prohibit_c, event_c[0][pvector]);
10003ef8:	d0a04517 	ldw	r2,-32492(gp)
10003efc:	e0fffd17 	ldw	r3,-12(fp)
10003f00:	100490fa 	slli	r2,r2,3
10003f04:	1889883a 	add	r4,r3,r2
10003f08:	20800017 	ldw	r2,0(r4)
10003f0c:	20c00117 	ldw	r3,4(r4)
10003f10:	100b883a 	mov	r5,r2
10003f14:	e13ffe17 	ldw	r4,-8(fp)
10003f18:	00049780 	call	10004978 <set_prohibition>
        // Update state values
        state_c[Offx] = event_c[1][2];
10003f1c:	d0a00f17 	ldw	r2,-32708(gp)
10003f20:	1085883a 	add	r2,r2,r2
10003f24:	1085883a 	add	r2,r2,r2
10003f28:	1007883a 	mov	r3,r2
10003f2c:	e0bffc17 	ldw	r2,-16(fp)
10003f30:	10cb883a 	add	r5,r2,r3
10003f34:	d0a03517 	ldw	r2,-32556(gp)
10003f38:	100490fa 	slli	r2,r2,3
10003f3c:	e0fffd17 	ldw	r3,-12(fp)
10003f40:	1889883a 	add	r4,r3,r2
10003f44:	20800417 	ldw	r2,16(r4)
10003f48:	20c00517 	ldw	r3,20(r4)
10003f4c:	28800015 	stw	r2,0(r5)
        state_c[Offy] = event_c[1][3];
10003f50:	d0a01017 	ldw	r2,-32704(gp)
10003f54:	1085883a 	add	r2,r2,r2
10003f58:	1085883a 	add	r2,r2,r2
10003f5c:	1007883a 	mov	r3,r2
10003f60:	e0bffc17 	ldw	r2,-16(fp)
10003f64:	10cb883a 	add	r5,r2,r3
10003f68:	d0a03517 	ldw	r2,-32556(gp)
10003f6c:	100490fa 	slli	r2,r2,3
10003f70:	e0fffd17 	ldw	r3,-12(fp)
10003f74:	1889883a 	add	r4,r3,r2
10003f78:	20800617 	ldw	r2,24(r4)
10003f7c:	20c00717 	ldw	r3,28(r4)
10003f80:	28800015 	stw	r2,0(r5)
        state_c[CenOffx] = event_c[1][4];
10003f84:	d0a01117 	ldw	r2,-32700(gp)
10003f88:	1085883a 	add	r2,r2,r2
10003f8c:	1085883a 	add	r2,r2,r2
10003f90:	1007883a 	mov	r3,r2
10003f94:	e0bffc17 	ldw	r2,-16(fp)
10003f98:	10cb883a 	add	r5,r2,r3
10003f9c:	d0a03517 	ldw	r2,-32556(gp)
10003fa0:	100490fa 	slli	r2,r2,3
10003fa4:	e0fffd17 	ldw	r3,-12(fp)
10003fa8:	1889883a 	add	r4,r3,r2
10003fac:	20800817 	ldw	r2,32(r4)
10003fb0:	20c00917 	ldw	r3,36(r4)
10003fb4:	28800015 	stw	r2,0(r5)
        state_c[CenOffy] = event_c[1][5];
10003fb8:	d0a01217 	ldw	r2,-32696(gp)
10003fbc:	1085883a 	add	r2,r2,r2
10003fc0:	1085883a 	add	r2,r2,r2
10003fc4:	1007883a 	mov	r3,r2
10003fc8:	e0bffc17 	ldw	r2,-16(fp)
10003fcc:	10cb883a 	add	r5,r2,r3
10003fd0:	d0a03517 	ldw	r2,-32556(gp)
10003fd4:	100490fa 	slli	r2,r2,3
10003fd8:	e0fffd17 	ldw	r3,-12(fp)
10003fdc:	1889883a 	add	r4,r3,r2
10003fe0:	20800a17 	ldw	r2,40(r4)
10003fe4:	20c00b17 	ldw	r3,44(r4)
10003fe8:	28800015 	stw	r2,0(r5)
    }


10003fec:	0001883a 	nop
10003ff0:	e037883a 	mov	sp,fp
10003ff4:	dfc00117 	ldw	ra,4(sp)
10003ff8:	df000017 	ldw	fp,0(sp)
10003ffc:	dec00204 	addi	sp,sp,8
10004000:	f800283a 	ret

10004004 <initial>:
    int prohibit_c[N_prohibit_c],
    int prohibit_b[N_prohibit_b],
    int cooling_c[N_cooling_c],
    int system_flage[N_system_flage]
)
{
10004004:	defff104 	addi	sp,sp,-60
10004008:	dfc00e15 	stw	ra,56(sp)
1000400c:	df000d15 	stw	fp,52(sp)
10004010:	dc400c15 	stw	r17,48(sp)
10004014:	dc000b15 	stw	r16,44(sp)
10004018:	df000d04 	addi	fp,sp,52
1000401c:	e13ffa15 	stw	r4,-24(fp)
10004020:	e17ffb15 	stw	r5,-20(fp)
10004024:	e1bffc15 	stw	r6,-16(fp)
10004028:	e1fffd15 	stw	r7,-12(fp)
// Noting that event vector should reset seperately
void initial(
    long long unsigned int * spirit, 
    int * state_c, 
    int * state_b,
    long long unsigned int event_c[N1_event_c][N2_event_c],
1000402c:	d1203517 	ldw	r4,-32556(gp)
10004030:	213fffc4 	addi	r4,r4,-1



// Initializing hardware interface and software parameters
// Noting that event vector should reset seperately
void initial(
10004034:	e13ff715 	stw	r4,-36(fp)
10004038:	d1203517 	ldw	r4,-32556(gp)
1000403c:	2021883a 	mov	r16,r4
10004040:	0023883a 	mov	r17,zero
10004044:	8008d6ba 	srli	r4,r16,26
10004048:	881691ba 	slli	r11,r17,6
1000404c:	22d6b03a 	or	r11,r4,r11
10004050:	801491ba 	slli	r10,r16,6
    long long unsigned int * spirit, 
    int * state_c, 
    int * state_b,
    long long unsigned int event_c[N1_event_c][N2_event_c],
    long long unsigned int event_b[N1_event_c][N2_event_c],
10004054:	d1203517 	ldw	r4,-32556(gp)
10004058:	213fffc4 	addi	r4,r4,-1



// Initializing hardware interface and software parameters
// Noting that event vector should reset seperately
void initial(
1000405c:	e13ff815 	stw	r4,-32(fp)
10004060:	d1203517 	ldw	r4,-32556(gp)
10004064:	201d883a 	mov	r14,r4
10004068:	001f883a 	mov	r15,zero
1000406c:	7008d6ba 	srli	r4,r14,26
10004070:	781291ba 	slli	r9,r15,6
10004074:	2252b03a 	or	r9,r4,r9
10004078:	701091ba 	slli	r8,r14,6
    long long unsigned int * spirit, 
    int * state_c, 
    int * state_b,
    long long unsigned int event_c[N1_event_c][N2_event_c],
    long long unsigned int event_b[N1_event_c][N2_event_c],
    long long unsigned int event_s[N1_event_c][N2_event_c],
1000407c:	d1203517 	ldw	r4,-32556(gp)
10004080:	213fffc4 	addi	r4,r4,-1



// Initializing hardware interface and software parameters
// Noting that event vector should reset seperately
void initial(
10004084:	e13ff915 	stw	r4,-28(fp)
10004088:	d1203517 	ldw	r4,-32556(gp)
1000408c:	2019883a 	mov	r12,r4
10004090:	001b883a 	mov	r13,zero
10004094:	6008d6ba 	srli	r4,r12,26
10004098:	680691ba 	slli	r3,r13,6
1000409c:	20c6b03a 	or	r3,r4,r3
100040a0:	600491ba 	slli	r2,r12,6
    int cooling_c[N_cooling_c],
    int system_flage[N_system_flage]
)
{
    // Initializing event
    clean_event(event_c);
100040a4:	e13ffd17 	ldw	r4,-12(fp)
100040a8:	0004be00 	call	10004be0 <clean_event>
    set_event(event_c, event_c_stand);
100040ac:	01440074 	movhi	r5,4097
100040b0:	295d0e04 	addi	r5,r5,29752
100040b4:	e13ffd17 	ldw	r4,-12(fp)
100040b8:	0004a8c0 	call	10004a8c <set_event>
    set_prohibition(prohibit_c, event_c[0][pvector]);
100040bc:	d0a04517 	ldw	r2,-32492(gp)
100040c0:	e0fffd17 	ldw	r3,-12(fp)
100040c4:	100490fa 	slli	r2,r2,3
100040c8:	1889883a 	add	r4,r3,r2
100040cc:	20800017 	ldw	r2,0(r4)
100040d0:	20c00117 	ldw	r3,4(r4)
100040d4:	100b883a 	mov	r5,r2
100040d8:	e1000417 	ldw	r4,16(fp)
100040dc:	00049780 	call	10004978 <set_prohibition>
    state_c[Offx] = event_c[1][2];
100040e0:	d0a00f17 	ldw	r2,-32708(gp)
100040e4:	1085883a 	add	r2,r2,r2
100040e8:	1085883a 	add	r2,r2,r2
100040ec:	1007883a 	mov	r3,r2
100040f0:	e0bffb17 	ldw	r2,-20(fp)
100040f4:	10cb883a 	add	r5,r2,r3
100040f8:	d0a03517 	ldw	r2,-32556(gp)
100040fc:	100490fa 	slli	r2,r2,3
10004100:	e0fffd17 	ldw	r3,-12(fp)
10004104:	1889883a 	add	r4,r3,r2
10004108:	20800417 	ldw	r2,16(r4)
1000410c:	20c00517 	ldw	r3,20(r4)
10004110:	28800015 	stw	r2,0(r5)
    state_c[Offy] = event_c[1][3];
10004114:	d0a01017 	ldw	r2,-32704(gp)
10004118:	1085883a 	add	r2,r2,r2
1000411c:	1085883a 	add	r2,r2,r2
10004120:	1007883a 	mov	r3,r2
10004124:	e0bffb17 	ldw	r2,-20(fp)
10004128:	10cb883a 	add	r5,r2,r3
1000412c:	d0a03517 	ldw	r2,-32556(gp)
10004130:	100490fa 	slli	r2,r2,3
10004134:	e0fffd17 	ldw	r3,-12(fp)
10004138:	1889883a 	add	r4,r3,r2
1000413c:	20800617 	ldw	r2,24(r4)
10004140:	20c00717 	ldw	r3,28(r4)
10004144:	28800015 	stw	r2,0(r5)
    state_c[CenOffx] = event_c[1][4];
10004148:	d0a01117 	ldw	r2,-32700(gp)
1000414c:	1085883a 	add	r2,r2,r2
10004150:	1085883a 	add	r2,r2,r2
10004154:	1007883a 	mov	r3,r2
10004158:	e0bffb17 	ldw	r2,-20(fp)
1000415c:	10cb883a 	add	r5,r2,r3
10004160:	d0a03517 	ldw	r2,-32556(gp)
10004164:	100490fa 	slli	r2,r2,3
10004168:	e0fffd17 	ldw	r3,-12(fp)
1000416c:	1889883a 	add	r4,r3,r2
10004170:	20800817 	ldw	r2,32(r4)
10004174:	20c00917 	ldw	r3,36(r4)
10004178:	28800015 	stw	r2,0(r5)
    state_c[CenOffy] = event_c[1][5];
1000417c:	d0a01217 	ldw	r2,-32696(gp)
10004180:	1085883a 	add	r2,r2,r2
10004184:	1085883a 	add	r2,r2,r2
10004188:	1007883a 	mov	r3,r2
1000418c:	e0bffb17 	ldw	r2,-20(fp)
10004190:	10cb883a 	add	r5,r2,r3
10004194:	d0a03517 	ldw	r2,-32556(gp)
10004198:	100490fa 	slli	r2,r2,3
1000419c:	e0fffd17 	ldw	r3,-12(fp)
100041a0:	1889883a 	add	r4,r3,r2
100041a4:	20800a17 	ldw	r2,40(r4)
100041a8:	20c00b17 	ldw	r3,44(r4)
100041ac:	28800015 	stw	r2,0(r5)

    clean_event(event_b);
100041b0:	e1000217 	ldw	r4,8(fp)
100041b4:	0004be00 	call	10004be0 <clean_event>
    set_event(event_b, event_b_stand);
100041b8:	01440074 	movhi	r5,4097
100041bc:	295e3a04 	addi	r5,r5,30952
100041c0:	e1000217 	ldw	r4,8(fp)
100041c4:	0004a8c0 	call	10004a8c <set_event>
    set_prohibition(prohibit_b, event_b[0][pvector]);
100041c8:	d0a04517 	ldw	r2,-32492(gp)
100041cc:	e0c00217 	ldw	r3,8(fp)
100041d0:	100490fa 	slli	r2,r2,3
100041d4:	1889883a 	add	r4,r3,r2
100041d8:	20800017 	ldw	r2,0(r4)
100041dc:	20c00117 	ldw	r3,4(r4)
100041e0:	100b883a 	mov	r5,r2
100041e4:	e1000517 	ldw	r4,20(fp)
100041e8:	00049780 	call	10004978 <set_prohibition>
    state_b[Offx] = event_b[1][2];
100041ec:	d0a00f17 	ldw	r2,-32708(gp)
100041f0:	1085883a 	add	r2,r2,r2
100041f4:	1085883a 	add	r2,r2,r2
100041f8:	1007883a 	mov	r3,r2
100041fc:	e0bffc17 	ldw	r2,-16(fp)
10004200:	10cb883a 	add	r5,r2,r3
10004204:	d0a03517 	ldw	r2,-32556(gp)
10004208:	100490fa 	slli	r2,r2,3
1000420c:	e0c00217 	ldw	r3,8(fp)
10004210:	1889883a 	add	r4,r3,r2
10004214:	20800417 	ldw	r2,16(r4)
10004218:	20c00517 	ldw	r3,20(r4)
1000421c:	28800015 	stw	r2,0(r5)
    state_b[Offy] = event_b[1][3];
10004220:	d0a01017 	ldw	r2,-32704(gp)
10004224:	1085883a 	add	r2,r2,r2
10004228:	1085883a 	add	r2,r2,r2
1000422c:	1007883a 	mov	r3,r2
10004230:	e0bffc17 	ldw	r2,-16(fp)
10004234:	10cb883a 	add	r5,r2,r3
10004238:	d0a03517 	ldw	r2,-32556(gp)
1000423c:	100490fa 	slli	r2,r2,3
10004240:	e0c00217 	ldw	r3,8(fp)
10004244:	1889883a 	add	r4,r3,r2
10004248:	20800617 	ldw	r2,24(r4)
1000424c:	20c00717 	ldw	r3,28(r4)
10004250:	28800015 	stw	r2,0(r5)
    state_b[CenOffx] = event_b[1][4];
10004254:	d0a01117 	ldw	r2,-32700(gp)
10004258:	1085883a 	add	r2,r2,r2
1000425c:	1085883a 	add	r2,r2,r2
10004260:	1007883a 	mov	r3,r2
10004264:	e0bffc17 	ldw	r2,-16(fp)
10004268:	10cb883a 	add	r5,r2,r3
1000426c:	d0a03517 	ldw	r2,-32556(gp)
10004270:	100490fa 	slli	r2,r2,3
10004274:	e0c00217 	ldw	r3,8(fp)
10004278:	1889883a 	add	r4,r3,r2
1000427c:	20800817 	ldw	r2,32(r4)
10004280:	20c00917 	ldw	r3,36(r4)
10004284:	28800015 	stw	r2,0(r5)
    state_b[CenOffy] = event_b[1][5];
10004288:	d0a01217 	ldw	r2,-32696(gp)
1000428c:	1085883a 	add	r2,r2,r2
10004290:	1085883a 	add	r2,r2,r2
10004294:	1007883a 	mov	r3,r2
10004298:	e0bffc17 	ldw	r2,-16(fp)
1000429c:	10cb883a 	add	r5,r2,r3
100042a0:	d0a03517 	ldw	r2,-32556(gp)
100042a4:	100490fa 	slli	r2,r2,3
100042a8:	e0c00217 	ldw	r3,8(fp)
100042ac:	1889883a 	add	r4,r3,r2
100042b0:	20800a17 	ldw	r2,40(r4)
100042b4:	20c00b17 	ldw	r3,44(r4)
100042b8:	28800015 	stw	r2,0(r5)

    clean_event(event_s);
100042bc:	e1000317 	ldw	r4,12(fp)
100042c0:	0004be00 	call	10004be0 <clean_event>

    spirit[15] = 0x00000040b812ec00;
100042c4:	e0bffa17 	ldw	r2,-24(fp)
100042c8:	10c01e04 	addi	r3,r2,120
100042cc:	00ae04f4 	movhi	r2,47123
100042d0:	10bb0004 	addi	r2,r2,-5120
100042d4:	18800015 	stw	r2,0(r3)
100042d8:	00801004 	movi	r2,64
100042dc:	18800115 	stw	r2,4(r3)
    for (int i = 0; i < 15; i++) {
100042e0:	e03ff315 	stw	zero,-52(fp)
100042e4:	00000906 	br	1000430c <initial+0x308>
        spirit[i] = 0x0;
100042e8:	e0bff317 	ldw	r2,-52(fp)
100042ec:	100490fa 	slli	r2,r2,3
100042f0:	e0fffa17 	ldw	r3,-24(fp)
100042f4:	1885883a 	add	r2,r3,r2
100042f8:	10000015 	stw	zero,0(r2)
100042fc:	10000115 	stw	zero,4(r2)
    state_b[CenOffy] = event_b[1][5];

    clean_event(event_s);

    spirit[15] = 0x00000040b812ec00;
    for (int i = 0; i < 15; i++) {
10004300:	e0bff317 	ldw	r2,-52(fp)
10004304:	10800044 	addi	r2,r2,1
10004308:	e0bff315 	stw	r2,-52(fp)
1000430c:	e0bff317 	ldw	r2,-52(fp)
10004310:	108003d0 	cmplti	r2,r2,15
10004314:	103ff41e 	bne	r2,zero,100042e8 <__alt_data_end+0xf80042e8>
        spirit[i] = 0x0;
    }

    // Initializing state
    for (int i = 0; i < N_state_c; i++){
10004318:	e03ff415 	stw	zero,-48(fp)
1000431c:	00000a06 	br	10004348 <initial+0x344>
        state_c[i] = 0;
10004320:	e0bff417 	ldw	r2,-48(fp)
10004324:	1085883a 	add	r2,r2,r2
10004328:	1085883a 	add	r2,r2,r2
1000432c:	1007883a 	mov	r3,r2
10004330:	e0bffb17 	ldw	r2,-20(fp)
10004334:	10c5883a 	add	r2,r2,r3
10004338:	10000015 	stw	zero,0(r2)
    for (int i = 0; i < 15; i++) {
        spirit[i] = 0x0;
    }

    // Initializing state
    for (int i = 0; i < N_state_c; i++){
1000433c:	e0bff417 	ldw	r2,-48(fp)
10004340:	10800044 	addi	r2,r2,1
10004344:	e0bff415 	stw	r2,-48(fp)
10004348:	d0a03217 	ldw	r2,-32568(gp)
1000434c:	e0fff417 	ldw	r3,-48(fp)
10004350:	18bff316 	blt	r3,r2,10004320 <__alt_data_end+0xf8004320>
        state_c[i] = 0;
    }
    state_c[Cx] = 200;
10004354:	d0a00817 	ldw	r2,-32736(gp)
10004358:	1085883a 	add	r2,r2,r2
1000435c:	1085883a 	add	r2,r2,r2
10004360:	1007883a 	mov	r3,r2
10004364:	e0bffb17 	ldw	r2,-20(fp)
10004368:	10c5883a 	add	r2,r2,r3
1000436c:	00c03204 	movi	r3,200
10004370:	10c00015 	stw	r3,0(r2)
    state_c[Cy] = 358;
10004374:	d0a00917 	ldw	r2,-32732(gp)
10004378:	1085883a 	add	r2,r2,r2
1000437c:	1085883a 	add	r2,r2,r2
10004380:	1007883a 	mov	r3,r2
10004384:	e0bffb17 	ldw	r2,-20(fp)
10004388:	10c5883a 	add	r2,r2,r3
1000438c:	00c05984 	movi	r3,358
10004390:	10c00015 	stw	r3,0(r2)
    state_c[Ori] = 1;
10004394:	d0a00c17 	ldw	r2,-32720(gp)
10004398:	1085883a 	add	r2,r2,r2
1000439c:	1085883a 	add	r2,r2,r2
100043a0:	1007883a 	mov	r3,r2
100043a4:	e0bffb17 	ldw	r2,-20(fp)
100043a8:	10c5883a 	add	r2,r2,r3
100043ac:	00c00044 	movi	r3,1
100043b0:	10c00015 	stw	r3,0(r2)
    state_c[Cenx] = state_c[Cx] + state_c[CenOffx];
100043b4:	d0a00d17 	ldw	r2,-32716(gp)
100043b8:	1085883a 	add	r2,r2,r2
100043bc:	1085883a 	add	r2,r2,r2
100043c0:	1007883a 	mov	r3,r2
100043c4:	e0bffb17 	ldw	r2,-20(fp)
100043c8:	10c7883a 	add	r3,r2,r3
100043cc:	d0a00817 	ldw	r2,-32736(gp)
100043d0:	1085883a 	add	r2,r2,r2
100043d4:	1085883a 	add	r2,r2,r2
100043d8:	1009883a 	mov	r4,r2
100043dc:	e0bffb17 	ldw	r2,-20(fp)
100043e0:	1105883a 	add	r2,r2,r4
100043e4:	11000017 	ldw	r4,0(r2)
100043e8:	d0a01117 	ldw	r2,-32700(gp)
100043ec:	1085883a 	add	r2,r2,r2
100043f0:	1085883a 	add	r2,r2,r2
100043f4:	100b883a 	mov	r5,r2
100043f8:	e0bffb17 	ldw	r2,-20(fp)
100043fc:	1145883a 	add	r2,r2,r5
10004400:	10800017 	ldw	r2,0(r2)
10004404:	2085883a 	add	r2,r4,r2
10004408:	18800015 	stw	r2,0(r3)
    state_c[Ceny] = state_c[Cy] + state_c[CenOffy];
1000440c:	d0a00e17 	ldw	r2,-32712(gp)
10004410:	1085883a 	add	r2,r2,r2
10004414:	1085883a 	add	r2,r2,r2
10004418:	1007883a 	mov	r3,r2
1000441c:	e0bffb17 	ldw	r2,-20(fp)
10004420:	10c7883a 	add	r3,r2,r3
10004424:	d0a00917 	ldw	r2,-32732(gp)
10004428:	1085883a 	add	r2,r2,r2
1000442c:	1085883a 	add	r2,r2,r2
10004430:	1009883a 	mov	r4,r2
10004434:	e0bffb17 	ldw	r2,-20(fp)
10004438:	1105883a 	add	r2,r2,r4
1000443c:	11000017 	ldw	r4,0(r2)
10004440:	d0a01217 	ldw	r2,-32696(gp)
10004444:	1085883a 	add	r2,r2,r2
10004448:	1085883a 	add	r2,r2,r2
1000444c:	100b883a 	mov	r5,r2
10004450:	e0bffb17 	ldw	r2,-20(fp)
10004454:	1145883a 	add	r2,r2,r5
10004458:	10800017 	ldw	r2,0(r2)
1000445c:	2085883a 	add	r2,r4,r2
10004460:	18800015 	stw	r2,0(r3)
    state_c[Health] = 8;
10004464:	d0a01317 	ldw	r2,-32692(gp)
10004468:	1085883a 	add	r2,r2,r2
1000446c:	1085883a 	add	r2,r2,r2
10004470:	1007883a 	mov	r3,r2
10004474:	e0bffb17 	ldw	r2,-20(fp)
10004478:	10c5883a 	add	r2,r2,r3
1000447c:	00c00204 	movi	r3,8
10004480:	10c00015 	stw	r3,0(r2)

    for (int i = 0; i < N_state_b; i++){
10004484:	e03ff515 	stw	zero,-44(fp)
10004488:	00000a06 	br	100044b4 <initial+0x4b0>
        state_b[i] = 0;
1000448c:	e0bff517 	ldw	r2,-44(fp)
10004490:	1085883a 	add	r2,r2,r2
10004494:	1085883a 	add	r2,r2,r2
10004498:	1007883a 	mov	r3,r2
1000449c:	e0bffc17 	ldw	r2,-16(fp)
100044a0:	10c5883a 	add	r2,r2,r3
100044a4:	10000015 	stw	zero,0(r2)
    state_c[Ori] = 1;
    state_c[Cenx] = state_c[Cx] + state_c[CenOffx];
    state_c[Ceny] = state_c[Cy] + state_c[CenOffy];
    state_c[Health] = 8;

    for (int i = 0; i < N_state_b; i++){
100044a8:	e0bff517 	ldw	r2,-44(fp)
100044ac:	10800044 	addi	r2,r2,1
100044b0:	e0bff515 	stw	r2,-44(fp)
100044b4:	d0a03317 	ldw	r2,-32564(gp)
100044b8:	e0fff517 	ldw	r3,-44(fp)
100044bc:	18bff316 	blt	r3,r2,1000448c <__alt_data_end+0xf800448c>
        state_b[i] = 0;
    }
    state_b[Cx] = 400;
100044c0:	d0a00817 	ldw	r2,-32736(gp)
100044c4:	1085883a 	add	r2,r2,r2
100044c8:	1085883a 	add	r2,r2,r2
100044cc:	1007883a 	mov	r3,r2
100044d0:	e0bffc17 	ldw	r2,-16(fp)
100044d4:	10c5883a 	add	r2,r2,r3
100044d8:	00c06404 	movi	r3,400
100044dc:	10c00015 	stw	r3,0(r2)
    state_b[Cy] = 250;
100044e0:	d0a00917 	ldw	r2,-32732(gp)
100044e4:	1085883a 	add	r2,r2,r2
100044e8:	1085883a 	add	r2,r2,r2
100044ec:	1007883a 	mov	r3,r2
100044f0:	e0bffc17 	ldw	r2,-16(fp)
100044f4:	10c5883a 	add	r2,r2,r3
100044f8:	00c03e84 	movi	r3,250
100044fc:	10c00015 	stw	r3,0(r2)
    state_b[Ori] = 0;
10004500:	d0a00c17 	ldw	r2,-32720(gp)
10004504:	1085883a 	add	r2,r2,r2
10004508:	1085883a 	add	r2,r2,r2
1000450c:	1007883a 	mov	r3,r2
10004510:	e0bffc17 	ldw	r2,-16(fp)
10004514:	10c5883a 	add	r2,r2,r3
10004518:	10000015 	stw	zero,0(r2)
    state_b[Cenx] = state_b[Cx] + state_b[CenOffx];
1000451c:	d0a00d17 	ldw	r2,-32716(gp)
10004520:	1085883a 	add	r2,r2,r2
10004524:	1085883a 	add	r2,r2,r2
10004528:	1007883a 	mov	r3,r2
1000452c:	e0bffc17 	ldw	r2,-16(fp)
10004530:	10c7883a 	add	r3,r2,r3
10004534:	d0a00817 	ldw	r2,-32736(gp)
10004538:	1085883a 	add	r2,r2,r2
1000453c:	1085883a 	add	r2,r2,r2
10004540:	1009883a 	mov	r4,r2
10004544:	e0bffc17 	ldw	r2,-16(fp)
10004548:	1105883a 	add	r2,r2,r4
1000454c:	11000017 	ldw	r4,0(r2)
10004550:	d0a01117 	ldw	r2,-32700(gp)
10004554:	1085883a 	add	r2,r2,r2
10004558:	1085883a 	add	r2,r2,r2
1000455c:	100b883a 	mov	r5,r2
10004560:	e0bffc17 	ldw	r2,-16(fp)
10004564:	1145883a 	add	r2,r2,r5
10004568:	10800017 	ldw	r2,0(r2)
1000456c:	2085883a 	add	r2,r4,r2
10004570:	18800015 	stw	r2,0(r3)
    state_b[Ceny] = state_b[Cy] + state_b[CenOffy];
10004574:	d0a00e17 	ldw	r2,-32712(gp)
10004578:	1085883a 	add	r2,r2,r2
1000457c:	1085883a 	add	r2,r2,r2
10004580:	1007883a 	mov	r3,r2
10004584:	e0bffc17 	ldw	r2,-16(fp)
10004588:	10c7883a 	add	r3,r2,r3
1000458c:	d0a00917 	ldw	r2,-32732(gp)
10004590:	1085883a 	add	r2,r2,r2
10004594:	1085883a 	add	r2,r2,r2
10004598:	1009883a 	mov	r4,r2
1000459c:	e0bffc17 	ldw	r2,-16(fp)
100045a0:	1105883a 	add	r2,r2,r4
100045a4:	11000017 	ldw	r4,0(r2)
100045a8:	d0a01217 	ldw	r2,-32696(gp)
100045ac:	1085883a 	add	r2,r2,r2
100045b0:	1085883a 	add	r2,r2,r2
100045b4:	100b883a 	mov	r5,r2
100045b8:	e0bffc17 	ldw	r2,-16(fp)
100045bc:	1145883a 	add	r2,r2,r5
100045c0:	10800017 	ldw	r2,0(r2)
100045c4:	2085883a 	add	r2,r4,r2
100045c8:	18800015 	stw	r2,0(r3)
    state_b[skill] = 1;
100045cc:	d0a01417 	ldw	r2,-32688(gp)
100045d0:	1085883a 	add	r2,r2,r2
100045d4:	1085883a 	add	r2,r2,r2
100045d8:	1007883a 	mov	r3,r2
100045dc:	e0bffc17 	ldw	r2,-16(fp)
100045e0:	10c5883a 	add	r2,r2,r3
100045e4:	00c00044 	movi	r3,1
100045e8:	10c00015 	stw	r3,0(r2)
    state_b[Health] = 30;
100045ec:	d0a01317 	ldw	r2,-32692(gp)
100045f0:	1085883a 	add	r2,r2,r2
100045f4:	1085883a 	add	r2,r2,r2
100045f8:	1007883a 	mov	r3,r2
100045fc:	e0bffc17 	ldw	r2,-16(fp)
10004600:	10c5883a 	add	r2,r2,r3
10004604:	00c00784 	movi	r3,30
10004608:	10c00015 	stw	r3,0(r2)

    // Initializing system_flages and cooling list
    for (int i = 0; i < N_cooling_c; i++) {
1000460c:	e03ff615 	stw	zero,-40(fp)
10004610:	00001106 	br	10004658 <initial+0x654>
        cooling_c[i] = 0;
10004614:	e0bff617 	ldw	r2,-40(fp)
10004618:	1085883a 	add	r2,r2,r2
1000461c:	1085883a 	add	r2,r2,r2
10004620:	1007883a 	mov	r3,r2
10004624:	e0800617 	ldw	r2,24(fp)
10004628:	10c5883a 	add	r2,r2,r3
1000462c:	10000015 	stw	zero,0(r2)
        system_flage[i] = 0;
10004630:	e0bff617 	ldw	r2,-40(fp)
10004634:	1085883a 	add	r2,r2,r2
10004638:	1085883a 	add	r2,r2,r2
1000463c:	1007883a 	mov	r3,r2
10004640:	e0800717 	ldw	r2,28(fp)
10004644:	10c5883a 	add	r2,r2,r3
10004648:	10000015 	stw	zero,0(r2)
    state_b[Ceny] = state_b[Cy] + state_b[CenOffy];
    state_b[skill] = 1;
    state_b[Health] = 30;

    // Initializing system_flages and cooling list
    for (int i = 0; i < N_cooling_c; i++) {
1000464c:	e0bff617 	ldw	r2,-40(fp)
10004650:	10800044 	addi	r2,r2,1
10004654:	e0bff615 	stw	r2,-40(fp)
10004658:	d0a03a17 	ldw	r2,-32536(gp)
1000465c:	e0fff617 	ldw	r3,-40(fp)
10004660:	18bfec16 	blt	r3,r2,10004614 <__alt_data_end+0xf8004614>
        cooling_c[i] = 0;
        system_flage[i] = 0;
    }
    cooling_c[c_stiff] = 120;
10004664:	d0a02317 	ldw	r2,-32628(gp)
10004668:	1085883a 	add	r2,r2,r2
1000466c:	1085883a 	add	r2,r2,r2
10004670:	1007883a 	mov	r3,r2
10004674:	e0800617 	ldw	r2,24(fp)
10004678:	10c5883a 	add	r2,r2,r3
1000467c:	00c01e04 	movi	r3,120
10004680:	10c00015 	stw	r3,0(r2)
}
10004684:	0001883a 	nop
10004688:	e6fffe04 	addi	sp,fp,-8
1000468c:	dfc00317 	ldw	ra,12(sp)
10004690:	df000217 	ldw	fp,8(sp)
10004694:	dc400117 	ldw	r17,4(sp)
10004698:	dc000017 	ldw	r16,0(sp)
1000469c:	dec00404 	addi	sp,sp,16
100046a0:	f800283a 	ret

100046a4 <write_spirit>:
// Write spirits into interface
void write_spirit(
    long long unsigned int * spirit,
    unsigned int * data
)
{
100046a4:	defffc04 	addi	sp,sp,-16
100046a8:	df000315 	stw	fp,12(sp)
100046ac:	df000304 	addi	fp,sp,12
100046b0:	e13ffe15 	stw	r4,-8(fp)
100046b4:	e17fff15 	stw	r5,-4(fp)
    // Wait untile write enable signal becomes high
    while ((GameControl_PTR[60] & 0x2) == 0) {}
100046b8:	0001883a 	nop
100046bc:	d0a00017 	ldw	r2,-32768(gp)
100046c0:	10803c04 	addi	r2,r2,240
100046c4:	10800017 	ldw	r2,0(r2)
100046c8:	1080008c 	andi	r2,r2,2
100046cc:	103ffb26 	beq	r2,zero,100046bc <__alt_data_end+0xf80046bc>
    *data = GameControl_PTR[60];
100046d0:	d0a00017 	ldw	r2,-32768(gp)
100046d4:	10c03c17 	ldw	r3,240(r2)
100046d8:	e0bfff17 	ldw	r2,-4(fp)
100046dc:	10c00015 	stw	r3,0(r2)
    // Write spirits to hardware interface
    for (int i = 0; i < 16; i++) {
100046e0:	e03ffd15 	stw	zero,-12(fp)
100046e4:	00001e06 	br	10004760 <write_spirit+0xbc>
        // GameControl_PTR[4*i] = spirit[i][0];			// [31:0]
        // GameControl_PTR[4*i+1] = spirit[i][0] >> 32;	// [63:23]
        GameControl_PTR[4*i+2] = spirit[i];			// [95:64]
100046e8:	d0e00017 	ldw	r3,-32768(gp)
100046ec:	e0bffd17 	ldw	r2,-12(fp)
100046f0:	1004913a 	slli	r2,r2,4
100046f4:	10800204 	addi	r2,r2,8
100046f8:	188b883a 	add	r5,r3,r2
100046fc:	e0bffd17 	ldw	r2,-12(fp)
10004700:	100490fa 	slli	r2,r2,3
10004704:	e0fffe17 	ldw	r3,-8(fp)
10004708:	1889883a 	add	r4,r3,r2
1000470c:	20800017 	ldw	r2,0(r4)
10004710:	20c00117 	ldw	r3,4(r4)
10004714:	28800015 	stw	r2,0(r5)
        GameControl_PTR[4*i+3] = spirit[i] >> 32;	// [127:96]
10004718:	d0e00017 	ldw	r3,-32768(gp)
1000471c:	e0bffd17 	ldw	r2,-12(fp)
10004720:	1004913a 	slli	r2,r2,4
10004724:	10800304 	addi	r2,r2,12
10004728:	188b883a 	add	r5,r3,r2
1000472c:	e0bffd17 	ldw	r2,-12(fp)
10004730:	100490fa 	slli	r2,r2,3
10004734:	e0fffe17 	ldw	r3,-8(fp)
10004738:	1889883a 	add	r4,r3,r2
1000473c:	20800017 	ldw	r2,0(r4)
10004740:	20c00117 	ldw	r3,4(r4)
10004744:	180cd83a 	srl	r6,r3,zero
10004748:	000f883a 	mov	r7,zero
1000474c:	3005883a 	mov	r2,r6
10004750:	28800015 	stw	r2,0(r5)
{
    // Wait untile write enable signal becomes high
    while ((GameControl_PTR[60] & 0x2) == 0) {}
    *data = GameControl_PTR[60];
    // Write spirits to hardware interface
    for (int i = 0; i < 16; i++) {
10004754:	e0bffd17 	ldw	r2,-12(fp)
10004758:	10800044 	addi	r2,r2,1
1000475c:	e0bffd15 	stw	r2,-12(fp)
10004760:	e0bffd17 	ldw	r2,-12(fp)
10004764:	10800410 	cmplti	r2,r2,16
10004768:	103fdf1e 	bne	r2,zero,100046e8 <__alt_data_end+0xf80046e8>
        // GameControl_PTR[4*i] = spirit[i][0];			// [31:0]
        // GameControl_PTR[4*i+1] = spirit[i][0] >> 32;	// [63:23]
        GameControl_PTR[4*i+2] = spirit[i];			// [95:64]
        GameControl_PTR[4*i+3] = spirit[i] >> 32;	// [127:96]
    }
}
1000476c:	0001883a 	nop
10004770:	e037883a 	mov	sp,fp
10004774:	df000017 	ldw	fp,0(sp)
10004778:	dec00104 	addi	sp,sp,4
1000477c:	f800283a 	ret

10004780 <set_state>:
    int y,
    int ori,
    long long unsigned int * spirit, 
    int i
)
{
10004780:	defff504 	addi	sp,sp,-44
10004784:	df000a15 	stw	fp,40(sp)
10004788:	df000a04 	addi	fp,sp,40
1000478c:	e13ffc15 	stw	r4,-16(fp)
10004790:	e17ffd15 	stw	r5,-12(fp)
10004794:	e1bffe15 	stw	r6,-8(fp)
10004798:	e1ffff15 	stw	r7,-4(fp)
	long long unsigned int copy;
	long long unsigned int temp = 0x0;
1000479c:	e03ff815 	stw	zero,-32(fp)
100047a0:	e03ff915 	stw	zero,-28(fp)
	unsigned int xm, ym;

    if (ori == 0) {
100047a4:	e0bffe17 	ldw	r2,-8(fp)
100047a8:	10000d1e 	bne	r2,zero,100047e0 <set_state+0x60>
        copy = spirit[i] & 0xfefffffffff00000; 	// maked by 0xffff ffff fff0 0000, i.e. set the [19:0] to 0
100047ac:	e0800117 	ldw	r2,4(fp)
100047b0:	100490fa 	slli	r2,r2,3
100047b4:	e0ffff17 	ldw	r3,-4(fp)
100047b8:	1889883a 	add	r4,r3,r2
100047bc:	20800017 	ldw	r2,0(r4)
100047c0:	20c00117 	ldw	r3,4(r4)
100047c4:	113ffc2c 	andhi	r4,r2,65520
100047c8:	e13ff615 	stw	r4,-40(fp)
100047cc:	013fc034 	movhi	r4,65280
100047d0:	213fffc4 	addi	r4,r4,-1
100047d4:	1904703a 	and	r2,r3,r4
100047d8:	e0bff715 	stw	r2,-36(fp)
100047dc:	00001106 	br	10004824 <set_state+0xa4>
    } else {
        copy = spirit[i] & 0xfffffffffff00000;
100047e0:	e0800117 	ldw	r2,4(fp)
100047e4:	100490fa 	slli	r2,r2,3
100047e8:	e0ffff17 	ldw	r3,-4(fp)
100047ec:	1889883a 	add	r4,r3,r2
100047f0:	20800017 	ldw	r2,0(r4)
100047f4:	20c00117 	ldw	r3,4(r4)
100047f8:	113ffc2c 	andhi	r4,r2,65520
100047fc:	e13ff615 	stw	r4,-40(fp)
10004800:	013fffc4 	movi	r4,-1
10004804:	1904703a 	and	r2,r3,r4
10004808:	e0bff715 	stw	r2,-36(fp)
        copy = copy | 0x0100000000000000;
1000480c:	e0bff617 	ldw	r2,-40(fp)
10004810:	1004b03a 	or	r2,r2,zero
10004814:	e0bff615 	stw	r2,-40(fp)
10004818:	e0bff717 	ldw	r2,-36(fp)
1000481c:	10804034 	orhi	r2,r2,256
10004820:	e0bff715 	stw	r2,-36(fp)
    }

	xm = x & 0x03ff;
10004824:	e0bffc17 	ldw	r2,-16(fp)
10004828:	1080ffcc 	andi	r2,r2,1023
1000482c:	e0bffa15 	stw	r2,-24(fp)
	ym = y & 0x03ff;
10004830:	e0bffd17 	ldw	r2,-12(fp)
10004834:	1080ffcc 	andi	r2,r2,1023
10004838:	e0bffb15 	stw	r2,-20(fp)
	temp = (temp + xm) << 10;
1000483c:	e0bffa17 	ldw	r2,-24(fp)
10004840:	1015883a 	mov	r10,r2
10004844:	0017883a 	mov	r11,zero
10004848:	e13ff817 	ldw	r4,-32(fp)
1000484c:	e17ff917 	ldw	r5,-28(fp)
10004850:	5105883a 	add	r2,r10,r4
10004854:	128d803a 	cmpltu	r6,r2,r10
10004858:	5947883a 	add	r3,r11,r5
1000485c:	30c9883a 	add	r4,r6,r3
10004860:	2007883a 	mov	r3,r4
10004864:	1009883a 	mov	r4,r2
10004868:	180b883a 	mov	r5,r3
1000486c:	2004d5ba 	srli	r2,r4,22
10004870:	280692ba 	slli	r3,r5,10
10004874:	1884b03a 	or	r2,r3,r2
10004878:	e0bff915 	stw	r2,-28(fp)
1000487c:	200492ba 	slli	r2,r4,10
10004880:	e0bff815 	stw	r2,-32(fp)
	temp = (temp + ym);
10004884:	e0bffb17 	ldw	r2,-20(fp)
10004888:	1019883a 	mov	r12,r2
1000488c:	001b883a 	mov	r13,zero
10004890:	e13ff817 	ldw	r4,-32(fp)
10004894:	e17ff917 	ldw	r5,-28(fp)
10004898:	2305883a 	add	r2,r4,r12
1000489c:	110d803a 	cmpltu	r6,r2,r4
100048a0:	2b47883a 	add	r3,r5,r13
100048a4:	30c9883a 	add	r4,r6,r3
100048a8:	2007883a 	mov	r3,r4
100048ac:	e0bff815 	stw	r2,-32(fp)
100048b0:	e0fff915 	stw	r3,-28(fp)
	spirit[i] = copy | temp;
100048b4:	e0800117 	ldw	r2,4(fp)
100048b8:	100490fa 	slli	r2,r2,3
100048bc:	e0ffff17 	ldw	r3,-4(fp)
100048c0:	1885883a 	add	r2,r3,r2
100048c4:	e13ff617 	ldw	r4,-40(fp)
100048c8:	e0fff817 	ldw	r3,-32(fp)
100048cc:	20d0b03a 	or	r8,r4,r3
100048d0:	e13ff717 	ldw	r4,-36(fp)
100048d4:	e0fff917 	ldw	r3,-28(fp)
100048d8:	20d2b03a 	or	r9,r4,r3
100048dc:	12000015 	stw	r8,0(r2)
100048e0:	12400115 	stw	r9,4(r2)
}
100048e4:	0001883a 	nop
100048e8:	e037883a 	mov	sp,fp
100048ec:	df000017 	ldw	fp,0(sp)
100048f0:	dec00104 	addi	sp,sp,4
100048f4:	f800283a 	ret

100048f8 <set_address>:
void set_address(
    long long unsigned int data, 
    long long unsigned int * spirit, 
    int i
)
{
100048f8:	defffb04 	addi	sp,sp,-20
100048fc:	df000415 	stw	fp,16(sp)
10004900:	df000404 	addi	fp,sp,16
10004904:	e13ffc15 	stw	r4,-16(fp)
10004908:	e17ffd15 	stw	r5,-12(fp)
1000490c:	e1bffe15 	stw	r6,-8(fp)
10004910:	e1ffff15 	stw	r7,-4(fp)
    spirit[i] = (spirit[i] & 0xff000000000fffff) | data;    // Reset [55:20] while preserving other data
10004914:	e13fff17 	ldw	r4,-4(fp)
10004918:	200890fa 	slli	r4,r4,3
1000491c:	e17ffe17 	ldw	r5,-8(fp)
10004920:	290f883a 	add	r7,r5,r4
10004924:	e13fff17 	ldw	r4,-4(fp)
10004928:	200890fa 	slli	r4,r4,3
1000492c:	e17ffe17 	ldw	r5,-8(fp)
10004930:	290d883a 	add	r6,r5,r4
10004934:	31000017 	ldw	r4,0(r6)
10004938:	31400117 	ldw	r5,4(r6)
1000493c:	01800434 	movhi	r6,16
10004940:	31bfffc4 	addi	r6,r6,-1
10004944:	2190703a 	and	r8,r4,r6
10004948:	2a7fc02c 	andhi	r9,r5,65280
1000494c:	e13ffc17 	ldw	r4,-16(fp)
10004950:	2204b03a 	or	r2,r4,r8
10004954:	e13ffd17 	ldw	r4,-12(fp)
10004958:	2246b03a 	or	r3,r4,r9
1000495c:	38800015 	stw	r2,0(r7)
10004960:	38c00115 	stw	r3,4(r7)
}
10004964:	0001883a 	nop
10004968:	e037883a 	mov	sp,fp
1000496c:	df000017 	ldw	fp,0(sp)
10004970:	dec00104 	addi	sp,sp,4
10004974:	f800283a 	ret

10004978 <set_prohibition>:
// Set Prohibition list
void set_prohibition(
    int prohibit[N_prohibit_c],
    unsigned int p_vector
)
{
10004978:	defffb04 	addi	sp,sp,-20
1000497c:	df000415 	stw	fp,16(sp)
10004980:	df000404 	addi	fp,sp,16
10004984:	e13ffe15 	stw	r4,-8(fp)
10004988:	e17fff15 	stw	r5,-4(fp)
    unsigned int mask = 0x0001;
1000498c:	00800044 	movi	r2,1
10004990:	e0bffc15 	stw	r2,-16(fp)
    for (int i = 0; i < N_prohibit_c; i++) {
10004994:	e03ffd15 	stw	zero,-12(fp)
10004998:	00001206 	br	100049e4 <set_prohibition+0x6c>
        if ((mask & p_vector) != 0) {
1000499c:	e0fffc17 	ldw	r3,-16(fp)
100049a0:	e0bfff17 	ldw	r2,-4(fp)
100049a4:	1884703a 	and	r2,r3,r2
100049a8:	10000826 	beq	r2,zero,100049cc <set_prohibition+0x54>
            prohibit[i] = 1;
100049ac:	e0bffd17 	ldw	r2,-12(fp)
100049b0:	1085883a 	add	r2,r2,r2
100049b4:	1085883a 	add	r2,r2,r2
100049b8:	1007883a 	mov	r3,r2
100049bc:	e0bffe17 	ldw	r2,-8(fp)
100049c0:	10c5883a 	add	r2,r2,r3
100049c4:	00c00044 	movi	r3,1
100049c8:	10c00015 	stw	r3,0(r2)
        }
        mask = mask << 1;
100049cc:	e0bffc17 	ldw	r2,-16(fp)
100049d0:	1085883a 	add	r2,r2,r2
100049d4:	e0bffc15 	stw	r2,-16(fp)
    int prohibit[N_prohibit_c],
    unsigned int p_vector
)
{
    unsigned int mask = 0x0001;
    for (int i = 0; i < N_prohibit_c; i++) {
100049d8:	e0bffd17 	ldw	r2,-12(fp)
100049dc:	10800044 	addi	r2,r2,1
100049e0:	e0bffd15 	stw	r2,-12(fp)
100049e4:	d0a03817 	ldw	r2,-32544(gp)
100049e8:	e0fffd17 	ldw	r3,-12(fp)
100049ec:	18bfeb16 	blt	r3,r2,1000499c <__alt_data_end+0xf800499c>
        if ((mask & p_vector) != 0) {
            prohibit[i] = 1;
        }
        mask = mask << 1;
    }
}
100049f0:	0001883a 	nop
100049f4:	e037883a 	mov	sp,fp
100049f8:	df000017 	ldw	fp,0(sp)
100049fc:	dec00104 	addi	sp,sp,4
10004a00:	f800283a 	ret

10004a04 <free_prohibition>:
// Free Prohibition list
void free_prohibition(
    int prohibit[N_prohibit_c],
    unsigned int p_vector
)
{
10004a04:	defffb04 	addi	sp,sp,-20
10004a08:	df000415 	stw	fp,16(sp)
10004a0c:	df000404 	addi	fp,sp,16
10004a10:	e13ffe15 	stw	r4,-8(fp)
10004a14:	e17fff15 	stw	r5,-4(fp)
    unsigned int mask = 0x0001;
10004a18:	00800044 	movi	r2,1
10004a1c:	e0bffc15 	stw	r2,-16(fp)
    for (int i = 0; i < N_prohibit_c; i++) {
10004a20:	e03ffd15 	stw	zero,-12(fp)
10004a24:	00001106 	br	10004a6c <free_prohibition+0x68>
        if ((mask & p_vector) != 0) {
10004a28:	e0fffc17 	ldw	r3,-16(fp)
10004a2c:	e0bfff17 	ldw	r2,-4(fp)
10004a30:	1884703a 	and	r2,r3,r2
10004a34:	10000726 	beq	r2,zero,10004a54 <free_prohibition+0x50>
            prohibit[i] = 0;
10004a38:	e0bffd17 	ldw	r2,-12(fp)
10004a3c:	1085883a 	add	r2,r2,r2
10004a40:	1085883a 	add	r2,r2,r2
10004a44:	1007883a 	mov	r3,r2
10004a48:	e0bffe17 	ldw	r2,-8(fp)
10004a4c:	10c5883a 	add	r2,r2,r3
10004a50:	10000015 	stw	zero,0(r2)
        }
        mask = mask << 1;
10004a54:	e0bffc17 	ldw	r2,-16(fp)
10004a58:	1085883a 	add	r2,r2,r2
10004a5c:	e0bffc15 	stw	r2,-16(fp)
    int prohibit[N_prohibit_c],
    unsigned int p_vector
)
{
    unsigned int mask = 0x0001;
    for (int i = 0; i < N_prohibit_c; i++) {
10004a60:	e0bffd17 	ldw	r2,-12(fp)
10004a64:	10800044 	addi	r2,r2,1
10004a68:	e0bffd15 	stw	r2,-12(fp)
10004a6c:	d0a03817 	ldw	r2,-32544(gp)
10004a70:	e0fffd17 	ldw	r3,-12(fp)
10004a74:	18bfec16 	blt	r3,r2,10004a28 <__alt_data_end+0xf8004a28>
        if ((mask & p_vector) != 0) {
            prohibit[i] = 0;
        }
        mask = mask << 1;
    }
}
10004a78:	0001883a 	nop
10004a7c:	e037883a 	mov	sp,fp
10004a80:	df000017 	ldw	fp,0(sp)
10004a84:	dec00104 	addi	sp,sp,4
10004a88:	f800283a 	ret

10004a8c <set_event>:
// Set the event list
void set_event(
    long long unsigned int event_list[N1_event_c][N2_event_c],
    long long unsigned int event[N1_event_c][N2_event_c]
)
{
10004a8c:	defff604 	addi	sp,sp,-40
10004a90:	dfc00915 	stw	ra,36(sp)
10004a94:	df000815 	stw	fp,32(sp)
10004a98:	dc000715 	stw	r16,28(sp)
10004a9c:	df000804 	addi	fp,sp,32
10004aa0:	e13ffd15 	stw	r4,-12(fp)
10004aa4:	e17ffe15 	stw	r5,-8(fp)
}


// Set the event list
void set_event(
    long long unsigned int event_list[N1_event_c][N2_event_c],
10004aa8:	d1203517 	ldw	r4,-32556(gp)
10004aac:	213fffc4 	addi	r4,r4,-1
    }
}


// Set the event list
void set_event(
10004ab0:	e13ffa15 	stw	r4,-24(fp)
10004ab4:	d1203517 	ldw	r4,-32556(gp)
10004ab8:	2015883a 	mov	r10,r4
10004abc:	0017883a 	mov	r11,zero
10004ac0:	5008d6ba 	srli	r4,r10,26
10004ac4:	580e91ba 	slli	r7,r11,6
10004ac8:	21ceb03a 	or	r7,r4,r7
10004acc:	500c91ba 	slli	r6,r10,6
    long long unsigned int event_list[N1_event_c][N2_event_c],
    long long unsigned int event[N1_event_c][N2_event_c]
10004ad0:	d1203517 	ldw	r4,-32556(gp)
10004ad4:	213fffc4 	addi	r4,r4,-1
    }
}


// Set the event list
void set_event(
10004ad8:	e13ffb15 	stw	r4,-20(fp)
10004adc:	d1203517 	ldw	r4,-32556(gp)
10004ae0:	2011883a 	mov	r8,r4
10004ae4:	0013883a 	mov	r9,zero
10004ae8:	4008d6ba 	srli	r4,r8,26
10004aec:	480691ba 	slli	r3,r9,6
10004af0:	20c6b03a 	or	r3,r4,r3
10004af4:	400491ba 	slli	r2,r8,6
    long long unsigned int event_list[N1_event_c][N2_event_c],
    long long unsigned int event[N1_event_c][N2_event_c]
)
{
    int size = event[0][fnum];
10004af8:	d0a04417 	ldw	r2,-32496(gp)
10004afc:	e0fffe17 	ldw	r3,-8(fp)
10004b00:	100490fa 	slli	r2,r2,3
10004b04:	1889883a 	add	r4,r3,r2
10004b08:	20800017 	ldw	r2,0(r4)
10004b0c:	20c00117 	ldw	r3,4(r4)
10004b10:	e0bffc15 	stw	r2,-16(fp)
    for (int i = 0; i <= size; i++) {
10004b14:	e03ff815 	stw	zero,-32(fp)
10004b18:	00002706 	br	10004bb8 <set_event+0x12c>
        for (int j = 0; j < N2_event_c; j++) {
10004b1c:	e03ff915 	stw	zero,-28(fp)
10004b20:	00001f06 	br	10004ba0 <set_event+0x114>
            event_list[i][j] = event[i][j];
10004b24:	d0a03517 	ldw	r2,-32556(gp)
10004b28:	1007883a 	mov	r3,r2
10004b2c:	e0bff817 	ldw	r2,-32(fp)
10004b30:	100b883a 	mov	r5,r2
10004b34:	1809883a 	mov	r4,r3
10004b38:	0007d040 	call	10007d04 <__mulsi3>
10004b3c:	100490fa 	slli	r2,r2,3
10004b40:	e0fffd17 	ldw	r3,-12(fp)
10004b44:	18a1883a 	add	r16,r3,r2
10004b48:	d0a03517 	ldw	r2,-32556(gp)
10004b4c:	1007883a 	mov	r3,r2
10004b50:	e0bff817 	ldw	r2,-32(fp)
10004b54:	100b883a 	mov	r5,r2
10004b58:	1809883a 	mov	r4,r3
10004b5c:	0007d040 	call	10007d04 <__mulsi3>
10004b60:	100490fa 	slli	r2,r2,3
10004b64:	e0fffe17 	ldw	r3,-8(fp)
10004b68:	1887883a 	add	r3,r3,r2
10004b6c:	e0bff917 	ldw	r2,-28(fp)
10004b70:	100490fa 	slli	r2,r2,3
10004b74:	1889883a 	add	r4,r3,r2
10004b78:	20800017 	ldw	r2,0(r4)
10004b7c:	20c00117 	ldw	r3,4(r4)
10004b80:	e13ff917 	ldw	r4,-28(fp)
10004b84:	200890fa 	slli	r4,r4,3
10004b88:	8109883a 	add	r4,r16,r4
10004b8c:	20800015 	stw	r2,0(r4)
10004b90:	20c00115 	stw	r3,4(r4)
    long long unsigned int event[N1_event_c][N2_event_c]
)
{
    int size = event[0][fnum];
    for (int i = 0; i <= size; i++) {
        for (int j = 0; j < N2_event_c; j++) {
10004b94:	e0bff917 	ldw	r2,-28(fp)
10004b98:	10800044 	addi	r2,r2,1
10004b9c:	e0bff915 	stw	r2,-28(fp)
10004ba0:	d0a03517 	ldw	r2,-32556(gp)
10004ba4:	e0fff917 	ldw	r3,-28(fp)
10004ba8:	18bfde16 	blt	r3,r2,10004b24 <__alt_data_end+0xf8004b24>
    long long unsigned int event_list[N1_event_c][N2_event_c],
    long long unsigned int event[N1_event_c][N2_event_c]
)
{
    int size = event[0][fnum];
    for (int i = 0; i <= size; i++) {
10004bac:	e0bff817 	ldw	r2,-32(fp)
10004bb0:	10800044 	addi	r2,r2,1
10004bb4:	e0bff815 	stw	r2,-32(fp)
10004bb8:	e0bff817 	ldw	r2,-32(fp)
10004bbc:	e0fffc17 	ldw	r3,-16(fp)
10004bc0:	18bfd60e 	bge	r3,r2,10004b1c <__alt_data_end+0xf8004b1c>
        for (int j = 0; j < N2_event_c; j++) {
            event_list[i][j] = event[i][j];
        }
    }
}
10004bc4:	0001883a 	nop
10004bc8:	e6ffff04 	addi	sp,fp,-4
10004bcc:	dfc00217 	ldw	ra,8(sp)
10004bd0:	df000117 	ldw	fp,4(sp)
10004bd4:	dc000017 	ldw	r16,0(sp)
10004bd8:	dec00304 	addi	sp,sp,12
10004bdc:	f800283a 	ret

10004be0 <clean_event>:

// Clean the event list
void clean_event(
    long long unsigned int event_list[N1_event_c][N2_event_c]
)
{
10004be0:	defffa04 	addi	sp,sp,-24
10004be4:	dfc00515 	stw	ra,20(sp)
10004be8:	df000415 	stw	fp,16(sp)
10004bec:	df000404 	addi	fp,sp,16
10004bf0:	e13fff15 	stw	r4,-4(fp)
}


// Clean the event list
void clean_event(
    long long unsigned int event_list[N1_event_c][N2_event_c]
10004bf4:	d1203517 	ldw	r4,-32556(gp)
10004bf8:	213fffc4 	addi	r4,r4,-1
    }
}


// Clean the event list
void clean_event(
10004bfc:	e13ffe15 	stw	r4,-8(fp)
10004c00:	d1203517 	ldw	r4,-32556(gp)
10004c04:	200b883a 	mov	r5,r4
10004c08:	000d883a 	mov	r6,zero
10004c0c:	2808d6ba 	srli	r4,r5,26
10004c10:	300691ba 	slli	r3,r6,6
10004c14:	20c6b03a 	or	r3,r4,r3
10004c18:	280491ba 	slli	r2,r5,6
    long long unsigned int event_list[N1_event_c][N2_event_c]
)
{
    for (int i = 0; i < N1_event_c; i++) {
10004c1c:	e03ffc15 	stw	zero,-16(fp)
10004c20:	00001906 	br	10004c88 <clean_event+0xa8>
        for (int j = 0; j < N2_event_c; j++) {
10004c24:	e03ffd15 	stw	zero,-12(fp)
10004c28:	00001106 	br	10004c70 <clean_event+0x90>
            event_list[i][j] = 0x0;
10004c2c:	d0a03517 	ldw	r2,-32556(gp)
10004c30:	1007883a 	mov	r3,r2
10004c34:	e0bffc17 	ldw	r2,-16(fp)
10004c38:	100b883a 	mov	r5,r2
10004c3c:	1809883a 	mov	r4,r3
10004c40:	0007d040 	call	10007d04 <__mulsi3>
10004c44:	100490fa 	slli	r2,r2,3
10004c48:	e0ffff17 	ldw	r3,-4(fp)
10004c4c:	1887883a 	add	r3,r3,r2
10004c50:	e0bffd17 	ldw	r2,-12(fp)
10004c54:	100490fa 	slli	r2,r2,3
10004c58:	1885883a 	add	r2,r3,r2
10004c5c:	10000015 	stw	zero,0(r2)
10004c60:	10000115 	stw	zero,4(r2)
void clean_event(
    long long unsigned int event_list[N1_event_c][N2_event_c]
)
{
    for (int i = 0; i < N1_event_c; i++) {
        for (int j = 0; j < N2_event_c; j++) {
10004c64:	e0bffd17 	ldw	r2,-12(fp)
10004c68:	10800044 	addi	r2,r2,1
10004c6c:	e0bffd15 	stw	r2,-12(fp)
10004c70:	d0a03517 	ldw	r2,-32556(gp)
10004c74:	e0fffd17 	ldw	r3,-12(fp)
10004c78:	18bfec16 	blt	r3,r2,10004c2c <__alt_data_end+0xf8004c2c>
// Clean the event list
void clean_event(
    long long unsigned int event_list[N1_event_c][N2_event_c]
)
{
    for (int i = 0; i < N1_event_c; i++) {
10004c7c:	e0bffc17 	ldw	r2,-16(fp)
10004c80:	10800044 	addi	r2,r2,1
10004c84:	e0bffc15 	stw	r2,-16(fp)
10004c88:	d0a03417 	ldw	r2,-32560(gp)
10004c8c:	e0fffc17 	ldw	r3,-16(fp)
10004c90:	18bfe416 	blt	r3,r2,10004c24 <__alt_data_end+0xf8004c24>
        for (int j = 0; j < N2_event_c; j++) {
            event_list[i][j] = 0x0;
        }
    }
}
10004c94:	0001883a 	nop
10004c98:	e037883a 	mov	sp,fp
10004c9c:	dfc00117 	ldw	ra,4(sp)
10004ca0:	df000017 	ldw	fp,0(sp)
10004ca4:	dec00204 	addi	sp,sp,8
10004ca8:	f800283a 	ret

10004cac <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
10004cac:	deffff04 	addi	sp,sp,-4
10004cb0:	df000015 	stw	fp,0(sp)
10004cb4:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10004cb8:	00800804 	movi	r2,32
10004cbc:	00c00044 	movi	r3,1
10004cc0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10004cc4:	00800c04 	movi	r2,48
10004cc8:	00c00044 	movi	r3,1
10004ccc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10004cd0:	00801404 	movi	r2,80
10004cd4:	00c00044 	movi	r3,1
10004cd8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10004cdc:	00801004 	movi	r2,64
10004ce0:	00c00044 	movi	r3,1
10004ce4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10004ce8:	00801c04 	movi	r2,112
10004cec:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10004cf0:	00801804 	movi	r2,96
10004cf4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
10004cf8:	00800c04 	movi	r2,48
10004cfc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
10004d00:	00800804 	movi	r2,32
10004d04:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
10004d08:	00800804 	movi	r2,32
10004d0c:	00c00044 	movi	r3,1
10004d10:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10004d14:	00800c04 	movi	r2,48
10004d18:	00c00044 	movi	r3,1
10004d1c:	10c00005 	stb	r3,0(r2)
}
10004d20:	0001883a 	nop
10004d24:	e037883a 	mov	sp,fp
10004d28:	df000017 	ldw	fp,0(sp)
10004d2c:	dec00104 	addi	sp,sp,4
10004d30:	f800283a 	ret

10004d34 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10004d34:	defffd04 	addi	sp,sp,-12
10004d38:	df000215 	stw	fp,8(sp)
10004d3c:	df000204 	addi	fp,sp,8
10004d40:	2007883a 	mov	r3,r4
10004d44:	2805883a 	mov	r2,r5
10004d48:	e0fffe05 	stb	r3,-8(fp)
10004d4c:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
10004d50:	00801c04 	movi	r2,112
10004d54:	e0fffe03 	ldbu	r3,-8(fp)
10004d58:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10004d5c:	00800c04 	movi	r2,48
10004d60:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10004d64:	00801004 	movi	r2,64
10004d68:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
10004d6c:	00801804 	movi	r2,96
10004d70:	e0ffff0b 	ldhu	r3,-4(fp)
10004d74:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
10004d78:	00801004 	movi	r2,64
10004d7c:	00c00044 	movi	r3,1
10004d80:	10c00005 	stb	r3,0(r2)
//	*otg_hpi_data = 0;
	*otg_hpi_cs = 1;
10004d84:	00800c04 	movi	r2,48
10004d88:	00c00044 	movi	r3,1
10004d8c:	10c00005 	stb	r3,0(r2)
//	*otg_hpi_address = 0;
}
10004d90:	0001883a 	nop
10004d94:	e037883a 	mov	sp,fp
10004d98:	df000017 	ldw	fp,0(sp)
10004d9c:	dec00104 	addi	sp,sp,4
10004da0:	f800283a 	ret

10004da4 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10004da4:	defffd04 	addi	sp,sp,-12
10004da8:	df000215 	stw	fp,8(sp)
10004dac:	df000204 	addi	fp,sp,8
10004db0:	2005883a 	mov	r2,r4
10004db4:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
10004db8:	00801c04 	movi	r2,112
10004dbc:	e0ffff03 	ldbu	r3,-4(fp)
10004dc0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10004dc4:	00800c04 	movi	r2,48
10004dc8:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
10004dcc:	00801404 	movi	r2,80
10004dd0:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
10004dd4:	00801804 	movi	r2,96
10004dd8:	10800017 	ldw	r2,0(r2)
10004ddc:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
10004de0:	00801404 	movi	r2,80
10004de4:	00c00044 	movi	r3,1
10004de8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10004dec:	00800c04 	movi	r2,48
10004df0:	00c00044 	movi	r3,1
10004df4:	10c00005 	stb	r3,0(r2)
//	*otg_hpi_address = 0;
	return temp;
10004df8:	e0bffe0b 	ldhu	r2,-8(fp)
}
10004dfc:	e037883a 	mov	sp,fp
10004e00:	df000017 	ldw	fp,0(sp)
10004e04:	dec00104 	addi	sp,sp,4
10004e08:	f800283a 	ret

10004e0c <read_keycode>:




void read_keycode(alt_u8 data_size, alt_u16 * usb_ctl_val_d, alt_u8 toggle, char * keycodes)
{	
10004e0c:	defff704 	addi	sp,sp,-36
10004e10:	dfc00815 	stw	ra,32(sp)
10004e14:	df000715 	stw	fp,28(sp)
10004e18:	df000704 	addi	fp,sp,28
10004e1c:	2007883a 	mov	r3,r4
10004e20:	e17ffd15 	stw	r5,-12(fp)
10004e24:	3005883a 	mov	r2,r6
10004e28:	e1ffff15 	stw	r7,-4(fp)
10004e2c:	e0fffc05 	stb	r3,-16(fp)
10004e30:	e0bffe05 	stb	r2,-8(fp)
	unsigned int temp = 0;
10004e34:	e03ffb15 	stw	zero,-20(fp)
	int done_flag = 0;
10004e38:	e03ff915 	stw	zero,-28(fp)

	IO_write(HPI_ADDR,0x0500); //the start address
10004e3c:	01414004 	movi	r5,1280
10004e40:	01000084 	movi	r4,2
10004e44:	0004d340 	call	10004d34 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
10004e48:	01414704 	movi	r5,1308
10004e4c:	0009883a 	mov	r4,zero
10004e50:	0004d340 	call	10004d34 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
10004e54:	e0bffc03 	ldbu	r2,-16(fp)
10004e58:	108003cc 	andi	r2,r2,15
10004e5c:	100b883a 	mov	r5,r2
10004e60:	0009883a 	mov	r4,zero
10004e64:	0004d340 	call	10004d34 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10004e68:	0140a444 	movi	r5,657
10004e6c:	0009883a 	mov	r4,zero
10004e70:	0004d340 	call	10004d34 <IO_write>
	if(toggle%2)
10004e74:	e0bffe03 	ldbu	r2,-8(fp)
10004e78:	1080004c 	andi	r2,r2,1
10004e7c:	10803fcc 	andi	r2,r2,255
10004e80:	10000426 	beq	r2,zero,10004e94 <read_keycode+0x88>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
10004e84:	01400044 	movi	r5,1
10004e88:	0009883a 	mov	r4,zero
10004e8c:	0004d340 	call	10004d34 <IO_write>
10004e90:	00000306 	br	10004ea0 <read_keycode+0x94>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
10004e94:	01401044 	movi	r5,65
10004e98:	0009883a 	mov	r4,zero
10004e9c:	0004d340 	call	10004d34 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
10004ea0:	014004c4 	movi	r5,19
10004ea4:	0009883a 	mov	r4,zero
10004ea8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10004eac:	000b883a 	mov	r5,zero
10004eb0:	0009883a 	mov	r4,zero
10004eb4:	0004d340 	call	10004d34 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004eb8:	01414004 	movi	r5,1280
10004ebc:	01006c04 	movi	r4,432
10004ec0:	00069f80 	call	100069f8 <UsbWrite>
	
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004ec4:	00002606 	br	10004f60 <read_keycode+0x154>
	{
		if (done_flag == 0) {
10004ec8:	e0bff917 	ldw	r2,-28(fp)
10004ecc:	1000241e 	bne	r2,zero,10004f60 <read_keycode+0x154>
			IO_write(HPI_ADDR,0x0500); //the start address
10004ed0:	01414004 	movi	r5,1280
10004ed4:	01000084 	movi	r4,2
10004ed8:	0004d340 	call	10004d34 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10004edc:	01414704 	movi	r5,1308
10004ee0:	0009883a 	mov	r4,zero
10004ee4:	0004d340 	call	10004d34 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10004ee8:	e0bffc03 	ldbu	r2,-16(fp)
10004eec:	108003cc 	andi	r2,r2,15
10004ef0:	100b883a 	mov	r5,r2
10004ef4:	0009883a 	mov	r4,zero
10004ef8:	0004d340 	call	10004d34 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10004efc:	0140a444 	movi	r5,657
10004f00:	0009883a 	mov	r4,zero
10004f04:	0004d340 	call	10004d34 <IO_write>
			if(toggle%2)
10004f08:	e0bffe03 	ldbu	r2,-8(fp)
10004f0c:	1080004c 	andi	r2,r2,1
10004f10:	10803fcc 	andi	r2,r2,255
10004f14:	10000426 	beq	r2,zero,10004f28 <read_keycode+0x11c>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10004f18:	01400044 	movi	r5,1
10004f1c:	0009883a 	mov	r4,zero
10004f20:	0004d340 	call	10004d34 <IO_write>
10004f24:	00000306 	br	10004f34 <read_keycode+0x128>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10004f28:	01401044 	movi	r5,65
10004f2c:	0009883a 	mov	r4,zero
10004f30:	0004d340 	call	10004d34 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10004f34:	014004c4 	movi	r5,19
10004f38:	0009883a 	mov	r4,zero
10004f3c:	0004d340 	call	10004d34 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10004f40:	000b883a 	mov	r5,zero
10004f44:	0009883a 	mov	r4,zero
10004f48:	0004d340 	call	10004d34 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004f4c:	01414004 	movi	r5,1280
10004f50:	01006c04 	movi	r4,432
10004f54:	00069f80 	call	100069f8 <UsbWrite>
			done_flag = 1;
10004f58:	00800044 	movi	r2,1
10004f5c:	e0bff915 	stw	r2,-28(fp)
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
	
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004f60:	010000c4 	movi	r4,3
10004f64:	0004da40 	call	10004da4 <IO_read>
10004f68:	10bfffcc 	andi	r2,r2,65535
10004f6c:	1080040c 	andi	r2,r2,16
10004f70:	103fd526 	beq	r2,zero,10004ec8 <__alt_data_end+0xf8004ec8>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			done_flag = 1;
		}
	}//end while

	*usb_ctl_val_d = UsbWaitTDListDone();
10004f74:	00079e80 	call	100079e8 <UsbWaitTDListDone>
10004f78:	1007883a 	mov	r3,r2
10004f7c:	e0bffd17 	ldw	r2,-12(fp)
10004f80:	10c0000d 	sth	r3,0(r2)
	
	// The first two keycodes are stored in 0x051E. Other keycodes are in 
	// subsequent addresses.
	temp = UsbRead(0x051e);
10004f84:	01014784 	movi	r4,1310
10004f88:	0006a500 	call	10006a50 <UsbRead>
10004f8c:	10bfffcc 	andi	r2,r2,65535
10004f90:	e0bffb15 	stw	r2,-20(fp)
	keycodes[3] = temp & 0x00ff;
10004f94:	e0bfff17 	ldw	r2,-4(fp)
10004f98:	108000c4 	addi	r2,r2,3
10004f9c:	e0fffb17 	ldw	r3,-20(fp)
10004fa0:	10c00005 	stb	r3,0(r2)
	keycodes[2] = (temp >> 8) & 0x00ff;
10004fa4:	e0bfff17 	ldw	r2,-4(fp)
10004fa8:	10800084 	addi	r2,r2,2
10004fac:	e0fffb17 	ldw	r3,-20(fp)
10004fb0:	1806d23a 	srli	r3,r3,8
10004fb4:	10c00005 	stb	r3,0(r2)
	temp = UsbRead(0x0520);
10004fb8:	01014804 	movi	r4,1312
10004fbc:	0006a500 	call	10006a50 <UsbRead>
10004fc0:	10bfffcc 	andi	r2,r2,65535
10004fc4:	e0bffb15 	stw	r2,-20(fp)
	keycodes[1] = temp & 0x00ff;
10004fc8:	e0bfff17 	ldw	r2,-4(fp)
10004fcc:	10800044 	addi	r2,r2,1
10004fd0:	e0fffb17 	ldw	r3,-20(fp)
10004fd4:	10c00005 	stb	r3,0(r2)
	keycodes[0] = (temp >> 8) & 0x00ff;
10004fd8:	e0bffb17 	ldw	r2,-20(fp)
10004fdc:	1004d23a 	srli	r2,r2,8
10004fe0:	1007883a 	mov	r3,r2
10004fe4:	e0bfff17 	ldw	r2,-4(fp)
10004fe8:	10c00005 	stb	r3,0(r2)
	
	// Re-order the list
	for (int i = 0; i < 4; i++) {
10004fec:	e03ffa15 	stw	zero,-24(fp)
10004ff0:	00003506 	br	100050c8 <read_keycode+0x2bc>
		if ((keycodes[3] == 0) && (keycodes[2] == 0) && (keycodes[1] == 0) && (keycodes[0] == 0)) {
10004ff4:	e0bfff17 	ldw	r2,-4(fp)
10004ff8:	108000c4 	addi	r2,r2,3
10004ffc:	10800003 	ldbu	r2,0(r2)
10005000:	10803fcc 	andi	r2,r2,255
10005004:	1080201c 	xori	r2,r2,128
10005008:	10bfe004 	addi	r2,r2,-128
1000500c:	1000141e 	bne	r2,zero,10005060 <read_keycode+0x254>
10005010:	e0bfff17 	ldw	r2,-4(fp)
10005014:	10800084 	addi	r2,r2,2
10005018:	10800003 	ldbu	r2,0(r2)
1000501c:	10803fcc 	andi	r2,r2,255
10005020:	1080201c 	xori	r2,r2,128
10005024:	10bfe004 	addi	r2,r2,-128
10005028:	10000d1e 	bne	r2,zero,10005060 <read_keycode+0x254>
1000502c:	e0bfff17 	ldw	r2,-4(fp)
10005030:	10800044 	addi	r2,r2,1
10005034:	10800003 	ldbu	r2,0(r2)
10005038:	10803fcc 	andi	r2,r2,255
1000503c:	1080201c 	xori	r2,r2,128
10005040:	10bfe004 	addi	r2,r2,-128
10005044:	1000061e 	bne	r2,zero,10005060 <read_keycode+0x254>
10005048:	e0bfff17 	ldw	r2,-4(fp)
1000504c:	10800003 	ldbu	r2,0(r2)
10005050:	10803fcc 	andi	r2,r2,255
10005054:	1080201c 	xori	r2,r2,128
10005058:	10bfe004 	addi	r2,r2,-128
1000505c:	10001f26 	beq	r2,zero,100050dc <read_keycode+0x2d0>
			break;
		}
		else if (keycodes[0] != 0) {
10005060:	e0bfff17 	ldw	r2,-4(fp)
10005064:	10800003 	ldbu	r2,0(r2)
10005068:	10803fcc 	andi	r2,r2,255
1000506c:	1080201c 	xori	r2,r2,128
10005070:	10bfe004 	addi	r2,r2,-128
10005074:	1000181e 	bne	r2,zero,100050d8 <read_keycode+0x2cc>
			break;
		}
		else {
			keycodes[0] = keycodes[1];
10005078:	e0bfff17 	ldw	r2,-4(fp)
1000507c:	10c00043 	ldbu	r3,1(r2)
10005080:	e0bfff17 	ldw	r2,-4(fp)
10005084:	10c00005 	stb	r3,0(r2)
			keycodes[1] = keycodes[2];
10005088:	e0bfff17 	ldw	r2,-4(fp)
1000508c:	10800044 	addi	r2,r2,1
10005090:	e0ffff17 	ldw	r3,-4(fp)
10005094:	18c00083 	ldbu	r3,2(r3)
10005098:	10c00005 	stb	r3,0(r2)
			keycodes[2] = keycodes[3];
1000509c:	e0bfff17 	ldw	r2,-4(fp)
100050a0:	10800084 	addi	r2,r2,2
100050a4:	e0ffff17 	ldw	r3,-4(fp)
100050a8:	18c000c3 	ldbu	r3,3(r3)
100050ac:	10c00005 	stb	r3,0(r2)
			keycodes[3] = 0;
100050b0:	e0bfff17 	ldw	r2,-4(fp)
100050b4:	108000c4 	addi	r2,r2,3
100050b8:	10000005 	stb	zero,0(r2)
	temp = UsbRead(0x0520);
	keycodes[1] = temp & 0x00ff;
	keycodes[0] = (temp >> 8) & 0x00ff;
	
	// Re-order the list
	for (int i = 0; i < 4; i++) {
100050bc:	e0bffa17 	ldw	r2,-24(fp)
100050c0:	10800044 	addi	r2,r2,1
100050c4:	e0bffa15 	stw	r2,-24(fp)
100050c8:	e0bffa17 	ldw	r2,-24(fp)
100050cc:	10800110 	cmplti	r2,r2,4
100050d0:	103fc81e 	bne	r2,zero,10004ff4 <__alt_data_end+0xf8004ff4>
			keycodes[1] = keycodes[2];
			keycodes[2] = keycodes[3];
			keycodes[3] = 0;
		}
	}
}
100050d4:	00000106 	br	100050dc <read_keycode+0x2d0>
	for (int i = 0; i < 4; i++) {
		if ((keycodes[3] == 0) && (keycodes[2] == 0) && (keycodes[1] == 0) && (keycodes[0] == 0)) {
			break;
		}
		else if (keycodes[0] != 0) {
			break;
100050d8:	0001883a 	nop
			keycodes[1] = keycodes[2];
			keycodes[2] = keycodes[3];
			keycodes[3] = 0;
		}
	}
}
100050dc:	0001883a 	nop
100050e0:	e037883a 	mov	sp,fp
100050e4:	dfc00117 	ldw	ra,4(sp)
100050e8:	df000017 	ldw	fp,0(sp)
100050ec:	dec00204 	addi	sp,sp,8
100050f0:	f800283a 	ret

100050f4 <game_main>:



void game_main(alt_u8 data_size, alt_u16 usb_ctl_val)
{
100050f4:	defdbc04 	addi	sp,sp,-2320
100050f8:	dfc24315 	stw	ra,2316(sp)
100050fc:	df024215 	stw	fp,2312(sp)
10005100:	ddc24115 	stw	r23,2308(sp)
10005104:	dd824015 	stw	r22,2304(sp)
10005108:	dd423f15 	stw	r21,2300(sp)
1000510c:	dd023e15 	stw	r20,2296(sp)
10005110:	dcc23d15 	stw	r19,2292(sp)
10005114:	dc823c15 	stw	r18,2288(sp)
10005118:	dc423b15 	stw	r17,2284(sp)
1000511c:	dc023a15 	stw	r16,2280(sp)
10005120:	df024204 	addi	fp,sp,2312
10005124:	2007883a 	mov	r3,r4
10005128:	2805883a 	mov	r2,r5
1000512c:	e0ffeb05 	stb	r3,-84(fp)
10005130:	e0bfec0d 	sth	r2,-80(fp)
	
	/* Parameters for keyboard reading
	 */ 
	alt_u8 toggle = 0;
10005134:	e03dc405 	stb	zero,-2288(fp)
	alt_u16 * usb_ctl_val_d ;
	*usb_ctl_val_d = usb_ctl_val;
10005138:	e0bdcc17 	ldw	r2,-2256(fp)
1000513c:	e0ffec0b 	ldhu	r3,-80(fp)
10005140:	10c0000d 	sth	r3,0(r2)
	char keycodes[4] = {0x0, 0x0, 0x0, 0x0};	// Currently pressed 4 keycode, keycode[0] is the latest pressed key
10005144:	e03dd305 	stb	zero,-2228(fp)
10005148:	e03dd345 	stb	zero,-2227(fp)
1000514c:	e03dd385 	stb	zero,-2226(fp)
10005150:	e03dd3c5 	stb	zero,-2225(fp)

	/* List of 16 spirits
	 */ 
	long long unsigned int spirit[16] = {
10005154:	e0bdd404 	addi	r2,fp,-2224
10005158:	00c02004 	movi	r3,128
1000515c:	180d883a 	mov	r6,r3
10005160:	000b883a 	mov	r5,zero
10005164:	1009883a 	mov	r4,r2
10005168:	0007d2c0 	call	10007d2c <memset>
	 *        - not necessarily to follow this order
	 *  X[13] - spark flag, 1 means a park has just been performed
	 *  X[14] - 
	 *  X[15] - 
	 */
	int state_c[12] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
1000516c:	e03df415 	stw	zero,-2096(fp)
10005170:	e03df515 	stw	zero,-2092(fp)
10005174:	e03df615 	stw	zero,-2088(fp)
10005178:	e03df715 	stw	zero,-2084(fp)
1000517c:	e03df815 	stw	zero,-2080(fp)
10005180:	e03df915 	stw	zero,-2076(fp)
10005184:	e03dfa15 	stw	zero,-2072(fp)
10005188:	e03dfb15 	stw	zero,-2068(fp)
1000518c:	e03dfc15 	stw	zero,-2064(fp)
10005190:	e03dfd15 	stw	zero,-2060(fp)
10005194:	e03dfe15 	stw	zero,-2056(fp)
10005198:	e03dff15 	stw	zero,-2052(fp)
	int state_b[16] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
1000519c:	e0be0004 	addi	r2,fp,-2048
100051a0:	00c01004 	movi	r3,64
100051a4:	180d883a 	mov	r6,r3
100051a8:	000b883a 	mov	r5,zero
100051ac:	1009883a 	mov	r4,r2
100051b0:	0007d2c0 	call	10007d2c <memset>
	 * X[0] - {0(character)/1(boss), unique identifer}
	 * X[1] - {number of frames, prohibition vector}
	 *      - prohibition vector: counter from left to right, i-th bit (start from 0) correspods to the i-th index prohibition list
	 * X[i>1] - {frame counter, address and off set information}
	 */ 
	long long unsigned int event_c[12][6] = {
100051b4:	e0be1004 	addi	r2,fp,-1984
100051b8:	00c09004 	movi	r3,576
100051bc:	180d883a 	mov	r6,r3
100051c0:	000b883a 	mov	r5,zero
100051c4:	1009883a 	mov	r4,r2
100051c8:	0007d2c0 	call	10007d2c <memset>
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
	};

	long long unsigned int event_b[12][6] = {
100051cc:	e0bea004 	addi	r2,fp,-1408
100051d0:	00c09004 	movi	r3,576
100051d4:	180d883a 	mov	r6,r3
100051d8:	000b883a 	mov	r5,zero
100051dc:	1009883a 	mov	r4,r2
100051e0:	0007d2c0 	call	10007d2c <memset>
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
		{0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, {0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
	};

	long long unsigned int event_s[12][6] = {
100051e4:	e0bf3004 	addi	r2,fp,-832
100051e8:	00c09004 	movi	r3,576
100051ec:	180d883a 	mov	r6,r3
100051f0:	000b883a 	mov	r5,zero
100051f4:	1009883a 	mov	r4,r2
100051f8:	0007d2c0 	call	10007d2c <memset>
	 *  X[12] - event_spine
	 *  X[13] - event_dash
	 *  X[14] - event_explosion
	 *  X[15] - health
	 */
	int prohibit_c[16] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
100051fc:	e0bfc004 	addi	r2,fp,-256
10005200:	00c01004 	movi	r3,64
10005204:	180d883a 	mov	r6,r3
10005208:	000b883a 	mov	r5,zero
1000520c:	1009883a 	mov	r4,r2
10005210:	0007d2c0 	call	10007d2c <memset>
	int prohibit_b[16] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
10005214:	e0bfd004 	addi	r2,fp,-192
10005218:	00c01004 	movi	r3,64
1000521c:	180d883a 	mov	r6,r3
10005220:	000b883a 	mov	r5,zero
10005224:	1009883a 	mov	r4,r2
10005228:	0007d2c0 	call	10007d2c <memset>
	/*  Cooling counter
	 *  X[0] - attack
	 *  X[1] - dash
	 *  X[2] - boss stiffness
	 */
	int cooling_c[5] = {0x0, 0x0, 0x0, 0x0, 0x0};
1000522c:	e03fe015 	stw	zero,-128(fp)
10005230:	e03fe115 	stw	zero,-124(fp)
10005234:	e03fe215 	stw	zero,-120(fp)
10005238:	e03fe315 	stw	zero,-116(fp)
1000523c:	e03fe415 	stw	zero,-112(fp)
	 *  X[2] - spark orientation flag, 0 means to left, 1 means to right
	 *  X[3] - spell
	 *  X[4] - double jump
	 *  X[5] - jump pressed
	 */
	int system_flage[6] = {0x0, 0x0, 0x0, 0x0, 0x0};
10005240:	e03fe515 	stw	zero,-108(fp)
10005244:	e03fe615 	stw	zero,-104(fp)
10005248:	e03fe715 	stw	zero,-100(fp)
1000524c:	e03fe815 	stw	zero,-96(fp)
10005250:	e03fe915 	stw	zero,-92(fp)
10005254:	e03fea15 	stw	zero,-88(fp)

	// System clock
	int clock = 0;
10005258:	e03dc515 	stw	zero,-2284(fp)
	int is_cb;
	int reset;
	int GoldenFinger;
	long long unsigned int temp;

	*data = 0x0;
1000525c:	e0bdcd17 	ldw	r2,-2252(fp)
10005260:	10000015 	stw	zero,0(r2)

	// Initialization
	initial(spirit, state_c, state_b, event_c, event_b, event_s, prohibit_c, prohibit_b, cooling_c, system_flage);
10005264:	e1be1004 	addi	r6,fp,-1984
10005268:	e17e0004 	addi	r5,fp,-2048
1000526c:	e13df404 	addi	r4,fp,-2096
10005270:	e0fdd404 	addi	r3,fp,-2224
10005274:	e0bfe504 	addi	r2,fp,-108
10005278:	d8800515 	stw	r2,20(sp)
1000527c:	e0bfe004 	addi	r2,fp,-128
10005280:	d8800415 	stw	r2,16(sp)
10005284:	e0bfd004 	addi	r2,fp,-192
10005288:	d8800315 	stw	r2,12(sp)
1000528c:	e0bfc004 	addi	r2,fp,-256
10005290:	d8800215 	stw	r2,8(sp)
10005294:	e0bf3004 	addi	r2,fp,-832
10005298:	d8800115 	stw	r2,4(sp)
1000529c:	e0bea004 	addi	r2,fp,-1408
100052a0:	d8800015 	stw	r2,0(sp)
100052a4:	300f883a 	mov	r7,r6
100052a8:	280d883a 	mov	r6,r5
100052ac:	200b883a 	mov	r5,r4
100052b0:	1809883a 	mov	r4,r3
100052b4:	00040040 	call	10004004 <initial>

	// Main loop
	while (1==1) {
		// Update the clock signal
		clock = (clock + 1) % 2;
100052b8:	e0bdc517 	ldw	r2,-2284(fp)
100052bc:	10c00044 	addi	r3,r2,1
100052c0:	00a00034 	movhi	r2,32768
100052c4:	10800044 	addi	r2,r2,1
100052c8:	1884703a 	and	r2,r3,r2
100052cc:	1000040e 	bge	r2,zero,100052e0 <game_main+0x1ec>
100052d0:	10bfffc4 	addi	r2,r2,-1
100052d4:	00ffff84 	movi	r3,-2
100052d8:	10c4b03a 	or	r2,r2,r3
100052dc:	10800044 	addi	r2,r2,1
100052e0:	e0bdc515 	stw	r2,-2284(fp)

		// Read data from hardware
		reset = *data & 0x0001;
100052e4:	e0bdcd17 	ldw	r2,-2252(fp)
100052e8:	10800017 	ldw	r2,0(r2)
100052ec:	1080004c 	andi	r2,r2,1
100052f0:	e0bdce15 	stw	r2,-2248(fp)
		GoldenFinger = *data & 0x0004;
100052f4:	e0bdcd17 	ldw	r2,-2252(fp)
100052f8:	10800017 	ldw	r2,0(r2)
100052fc:	1080010c 	andi	r2,r2,4
10005300:	e0bdcf15 	stw	r2,-2244(fp)
		is_cs = *data & 0x0008;
10005304:	e0bdcd17 	ldw	r2,-2252(fp)
10005308:	10800017 	ldw	r2,0(r2)
1000530c:	1080020c 	andi	r2,r2,8
10005310:	e0bdd015 	stw	r2,-2240(fp)
		is_cb = *data & 0x0010;
10005314:	e0bdcd17 	ldw	r2,-2252(fp)
10005318:	10800017 	ldw	r2,0(r2)
1000531c:	1080040c 	andi	r2,r2,16
10005320:	e0bdd115 	stw	r2,-2236(fp)
		// Check reset condition
		if (reset != 0 || state_c[Health] == 0 || state_b[Health] == 0) {
10005324:	e0bdce17 	ldw	r2,-2248(fp)
10005328:	1000101e 	bne	r2,zero,1000536c <game_main+0x278>
1000532c:	d0a01317 	ldw	r2,-32692(gp)
10005330:	1085883a 	add	r2,r2,r2
10005334:	1085883a 	add	r2,r2,r2
10005338:	e0fdc404 	addi	r3,fp,-2288
1000533c:	1885883a 	add	r2,r3,r2
10005340:	10803004 	addi	r2,r2,192
10005344:	10800017 	ldw	r2,0(r2)
10005348:	10000826 	beq	r2,zero,1000536c <game_main+0x278>
1000534c:	d0a01317 	ldw	r2,-32692(gp)
10005350:	1085883a 	add	r2,r2,r2
10005354:	1085883a 	add	r2,r2,r2
10005358:	e13dc404 	addi	r4,fp,-2288
1000535c:	2085883a 	add	r2,r4,r2
10005360:	10803c04 	addi	r2,r2,240
10005364:	10800017 	ldw	r2,0(r2)
10005368:	1000191e 	bne	r2,zero,100053d0 <game_main+0x2dc>
			usleep(500000);
1000536c:	01000234 	movhi	r4,8
10005370:	21284804 	addi	r4,r4,-24288
10005374:	00154700 	call	10015470 <usleep>
			initial(spirit, state_c, state_b, event_c, event_b, event_s, prohibit_c, prohibit_b, cooling_c, system_flage);
10005378:	e1be1004 	addi	r6,fp,-1984
1000537c:	e17e0004 	addi	r5,fp,-2048
10005380:	e13df404 	addi	r4,fp,-2096
10005384:	e0fdd404 	addi	r3,fp,-2224
10005388:	e0bfe504 	addi	r2,fp,-108
1000538c:	d8800515 	stw	r2,20(sp)
10005390:	e0bfe004 	addi	r2,fp,-128
10005394:	d8800415 	stw	r2,16(sp)
10005398:	e0bfd004 	addi	r2,fp,-192
1000539c:	d8800315 	stw	r2,12(sp)
100053a0:	e0bfc004 	addi	r2,fp,-256
100053a4:	d8800215 	stw	r2,8(sp)
100053a8:	e0bf3004 	addi	r2,fp,-832
100053ac:	d8800115 	stw	r2,4(sp)
100053b0:	e0bea004 	addi	r2,fp,-1408
100053b4:	d8800015 	stw	r2,0(sp)
100053b8:	300f883a 	mov	r7,r6
100053bc:	280d883a 	mov	r6,r5
100053c0:	200b883a 	mov	r5,r4
100053c4:	1809883a 	mov	r4,r3
100053c8:	00040040 	call	10004004 <initial>
			clock = 0;
100053cc:	e03dc515 	stw	zero,-2284(fp)
		}
		// Check golden finger
		if (event_c[0][id] != 5) {
100053d0:	d0a04617 	ldw	r2,-32488(gp)
100053d4:	100490fa 	slli	r2,r2,3
100053d8:	e17dc404 	addi	r5,fp,-2288
100053dc:	2885883a 	add	r2,r5,r2
100053e0:	11004c04 	addi	r4,r2,304
100053e4:	20800017 	ldw	r2,0(r4)
100053e8:	20c00117 	ldw	r3,4(r4)
100053ec:	11000158 	cmpnei	r4,r2,5
100053f0:	2000011e 	bne	r4,zero,100053f8 <game_main+0x304>
100053f4:	18001226 	beq	r3,zero,10005440 <game_main+0x34c>
			if (GoldenFinger != 0) {
100053f8:	e0bdcf17 	ldw	r2,-2244(fp)
100053fc:	10000926 	beq	r2,zero,10005424 <game_main+0x330>
				prohibit_c[p_health] = 1;
10005400:	d0a02017 	ldw	r2,-32640(gp)
10005404:	1085883a 	add	r2,r2,r2
10005408:	1085883a 	add	r2,r2,r2
1000540c:	e0fdc404 	addi	r3,fp,-2288
10005410:	1885883a 	add	r2,r3,r2
10005414:	1081fc04 	addi	r2,r2,2032
10005418:	00c00044 	movi	r3,1
1000541c:	10c00015 	stw	r3,0(r2)
10005420:	00000706 	br	10005440 <game_main+0x34c>
			} else {
				prohibit_c[p_health] = 0;
10005424:	d0a02017 	ldw	r2,-32640(gp)
10005428:	1085883a 	add	r2,r2,r2
1000542c:	1085883a 	add	r2,r2,r2
10005430:	e13dc404 	addi	r4,fp,-2288
10005434:	2085883a 	add	r2,r4,r2
10005438:	1081fc04 	addi	r2,r2,2032
1000543c:	10000015 	stw	zero,0(r2)
			}
		}
		
		// Check contact condition
		// If contact with spell
		if (is_cs != 0) {	
10005440:	e0bdd017 	ldw	r2,-2240(fp)
10005444:	10004d26 	beq	r2,zero,1000557c <game_main+0x488>
			if ((event_s[0][id] != 0) && (event_s[0][fcount] != 1) && (event_s[0][fcount] != 2)) {	// Not prelude
10005448:	d0a04617 	ldw	r2,-32488(gp)
1000544c:	100490fa 	slli	r2,r2,3
10005450:	e17dc404 	addi	r5,fp,-2288
10005454:	2885883a 	add	r2,r5,r2
10005458:	11016c04 	addi	r4,r2,1456
1000545c:	20800017 	ldw	r2,0(r4)
10005460:	20c00117 	ldw	r3,4(r4)
10005464:	1009883a 	mov	r4,r2
10005468:	20c8b03a 	or	r4,r4,r3
1000546c:	20004326 	beq	r4,zero,1000557c <game_main+0x488>
10005470:	d0a04317 	ldw	r2,-32500(gp)
10005474:	100490fa 	slli	r2,r2,3
10005478:	e0fdc404 	addi	r3,fp,-2288
1000547c:	1885883a 	add	r2,r3,r2
10005480:	11016c04 	addi	r4,r2,1456
10005484:	20800017 	ldw	r2,0(r4)
10005488:	20c00117 	ldw	r3,4(r4)
1000548c:	11000058 	cmpnei	r4,r2,1
10005490:	2000011e 	bne	r4,zero,10005498 <game_main+0x3a4>
10005494:	18003926 	beq	r3,zero,1000557c <game_main+0x488>
10005498:	d0a04317 	ldw	r2,-32500(gp)
1000549c:	100490fa 	slli	r2,r2,3
100054a0:	e13dc404 	addi	r4,fp,-2288
100054a4:	2085883a 	add	r2,r4,r2
100054a8:	11016c04 	addi	r4,r2,1456
100054ac:	20800017 	ldw	r2,0(r4)
100054b0:	20c00117 	ldw	r3,4(r4)
100054b4:	11000098 	cmpnei	r4,r2,2
100054b8:	2000011e 	bne	r4,zero,100054c0 <game_main+0x3cc>
100054bc:	18002f26 	beq	r3,zero,1000557c <game_main+0x488>
				if (prohibit_c[p_health] == 0 && cooling_c[c_hitc] == 0 && cooling_c[c_attack] == 0) {
100054c0:	d0a02017 	ldw	r2,-32640(gp)
100054c4:	1085883a 	add	r2,r2,r2
100054c8:	1085883a 	add	r2,r2,r2
100054cc:	e17dc404 	addi	r5,fp,-2288
100054d0:	2885883a 	add	r2,r5,r2
100054d4:	1081fc04 	addi	r2,r2,2032
100054d8:	10800017 	ldw	r2,0(r2)
100054dc:	1000271e 	bne	r2,zero,1000557c <game_main+0x488>
100054e0:	d0a02417 	ldw	r2,-32624(gp)
100054e4:	1085883a 	add	r2,r2,r2
100054e8:	1085883a 	add	r2,r2,r2
100054ec:	e0fdc404 	addi	r3,fp,-2288
100054f0:	1885883a 	add	r2,r3,r2
100054f4:	10821c04 	addi	r2,r2,2160
100054f8:	10800017 	ldw	r2,0(r2)
100054fc:	10001f1e 	bne	r2,zero,1000557c <game_main+0x488>
10005500:	d0a02117 	ldw	r2,-32636(gp)
10005504:	1085883a 	add	r2,r2,r2
10005508:	1085883a 	add	r2,r2,r2
1000550c:	e13dc404 	addi	r4,fp,-2288
10005510:	2085883a 	add	r2,r4,r2
10005514:	10821c04 	addi	r2,r2,2160
10005518:	10800017 	ldw	r2,0(r2)
1000551c:	1000171e 	bne	r2,zero,1000557c <game_main+0x488>
					state_c[Health] -= 1;
10005520:	d0a01317 	ldw	r2,-32692(gp)
10005524:	d0e01317 	ldw	r3,-32692(gp)
10005528:	18c7883a 	add	r3,r3,r3
1000552c:	18c7883a 	add	r3,r3,r3
10005530:	e17dc404 	addi	r5,fp,-2288
10005534:	28c7883a 	add	r3,r5,r3
10005538:	18c03004 	addi	r3,r3,192
1000553c:	18c00017 	ldw	r3,0(r3)
10005540:	18ffffc4 	addi	r3,r3,-1
10005544:	1085883a 	add	r2,r2,r2
10005548:	1085883a 	add	r2,r2,r2
1000554c:	e13dc404 	addi	r4,fp,-2288
10005550:	2085883a 	add	r2,r4,r2
10005554:	10803004 	addi	r2,r2,192
10005558:	10c00015 	stw	r3,0(r2)
					cooling_c[c_hitc] = 90;
1000555c:	d0a02417 	ldw	r2,-32624(gp)
10005560:	1085883a 	add	r2,r2,r2
10005564:	1085883a 	add	r2,r2,r2
10005568:	e17dc404 	addi	r5,fp,-2288
1000556c:	2885883a 	add	r2,r5,r2
10005570:	10821c04 	addi	r2,r2,2160
10005574:	00c01684 	movi	r3,90
10005578:	10c00015 	stw	r3,0(r2)
				}
			}
		} 
		// If contact with boss
		if (is_cb != 0) {	
1000557c:	e0bdd117 	ldw	r2,-2236(fp)
10005580:	10005926 	beq	r2,zero,100056e8 <game_main+0x5f4>
			if (event_c[0][id] == 5 && cooling_c[c_hitb] == 0) {	// If current event is attack
10005584:	d0a04617 	ldw	r2,-32488(gp)
10005588:	100490fa 	slli	r2,r2,3
1000558c:	e0fdc404 	addi	r3,fp,-2288
10005590:	1885883a 	add	r2,r3,r2
10005594:	11004c04 	addi	r4,r2,304
10005598:	20800017 	ldw	r2,0(r4)
1000559c:	20c00117 	ldw	r3,4(r4)
100055a0:	11000158 	cmpnei	r4,r2,5
100055a4:	2000211e 	bne	r4,zero,1000562c <game_main+0x538>
100055a8:	1800201e 	bne	r3,zero,1000562c <game_main+0x538>
100055ac:	d0a02517 	ldw	r2,-32620(gp)
100055b0:	1085883a 	add	r2,r2,r2
100055b4:	1085883a 	add	r2,r2,r2
100055b8:	e13dc404 	addi	r4,fp,-2288
100055bc:	2085883a 	add	r2,r4,r2
100055c0:	10821c04 	addi	r2,r2,2160
100055c4:	10800017 	ldw	r2,0(r2)
100055c8:	1000181e 	bne	r2,zero,1000562c <game_main+0x538>
				state_b[Health] -= 1;
100055cc:	d0a01317 	ldw	r2,-32692(gp)
100055d0:	d0e01317 	ldw	r3,-32692(gp)
100055d4:	18c7883a 	add	r3,r3,r3
100055d8:	18c7883a 	add	r3,r3,r3
100055dc:	e17dc404 	addi	r5,fp,-2288
100055e0:	28c7883a 	add	r3,r5,r3
100055e4:	18c03c04 	addi	r3,r3,240
100055e8:	18c00017 	ldw	r3,0(r3)
100055ec:	18ffffc4 	addi	r3,r3,-1
100055f0:	1085883a 	add	r2,r2,r2
100055f4:	1085883a 	add	r2,r2,r2
100055f8:	e13dc404 	addi	r4,fp,-2288
100055fc:	2085883a 	add	r2,r4,r2
10005600:	10803c04 	addi	r2,r2,240
10005604:	10c00015 	stw	r3,0(r2)
				cooling_c[c_hitb] = 9;
10005608:	d0a02517 	ldw	r2,-32620(gp)
1000560c:	1085883a 	add	r2,r2,r2
10005610:	1085883a 	add	r2,r2,r2
10005614:	e17dc404 	addi	r5,fp,-2288
10005618:	2885883a 	add	r2,r5,r2
1000561c:	10821c04 	addi	r2,r2,2160
10005620:	00c00244 	movi	r3,9
10005624:	10c00015 	stw	r3,0(r2)
10005628:	00002f06 	br	100056e8 <game_main+0x5f4>
			} else {
				if (prohibit_c[p_health] == 0 && cooling_c[c_hitc] == 0 && cooling_c[c_attack] == 0) {
1000562c:	d0a02017 	ldw	r2,-32640(gp)
10005630:	1085883a 	add	r2,r2,r2
10005634:	1085883a 	add	r2,r2,r2
10005638:	e0fdc404 	addi	r3,fp,-2288
1000563c:	1885883a 	add	r2,r3,r2
10005640:	1081fc04 	addi	r2,r2,2032
10005644:	10800017 	ldw	r2,0(r2)
10005648:	1000271e 	bne	r2,zero,100056e8 <game_main+0x5f4>
1000564c:	d0a02417 	ldw	r2,-32624(gp)
10005650:	1085883a 	add	r2,r2,r2
10005654:	1085883a 	add	r2,r2,r2
10005658:	e13dc404 	addi	r4,fp,-2288
1000565c:	2085883a 	add	r2,r4,r2
10005660:	10821c04 	addi	r2,r2,2160
10005664:	10800017 	ldw	r2,0(r2)
10005668:	10001f1e 	bne	r2,zero,100056e8 <game_main+0x5f4>
1000566c:	d0a02117 	ldw	r2,-32636(gp)
10005670:	1085883a 	add	r2,r2,r2
10005674:	1085883a 	add	r2,r2,r2
10005678:	e17dc404 	addi	r5,fp,-2288
1000567c:	2885883a 	add	r2,r5,r2
10005680:	10821c04 	addi	r2,r2,2160
10005684:	10800017 	ldw	r2,0(r2)
10005688:	1000171e 	bne	r2,zero,100056e8 <game_main+0x5f4>
					state_c[Health] -= 1;
1000568c:	d0a01317 	ldw	r2,-32692(gp)
10005690:	d0e01317 	ldw	r3,-32692(gp)
10005694:	18c7883a 	add	r3,r3,r3
10005698:	18c7883a 	add	r3,r3,r3
1000569c:	e13dc404 	addi	r4,fp,-2288
100056a0:	20c7883a 	add	r3,r4,r3
100056a4:	18c03004 	addi	r3,r3,192
100056a8:	18c00017 	ldw	r3,0(r3)
100056ac:	18ffffc4 	addi	r3,r3,-1
100056b0:	1085883a 	add	r2,r2,r2
100056b4:	1085883a 	add	r2,r2,r2
100056b8:	e17dc404 	addi	r5,fp,-2288
100056bc:	2885883a 	add	r2,r5,r2
100056c0:	10803004 	addi	r2,r2,192
100056c4:	10c00015 	stw	r3,0(r2)
					cooling_c[c_hitc] = 90;
100056c8:	d0a02417 	ldw	r2,-32624(gp)
100056cc:	1085883a 	add	r2,r2,r2
100056d0:	1085883a 	add	r2,r2,r2
100056d4:	e0fdc404 	addi	r3,fp,-2288
100056d8:	1885883a 	add	r2,r3,r2
100056dc:	10821c04 	addi	r2,r2,2160
100056e0:	00c01684 	movi	r3,90
100056e4:	10c00015 	stw	r3,0(r2)
				}
			}
		}

		// Scan current keypresses
		toggle++;
100056e8:	e0bdc403 	ldbu	r2,-2288(fp)
100056ec:	10800044 	addi	r2,r2,1
100056f0:	e0bdc405 	stb	r2,-2288(fp)
		read_keycode(data_size, usb_ctl_val_d, toggle, keycodes);
100056f4:	e0bfeb03 	ldbu	r2,-84(fp)
100056f8:	e0fdc403 	ldbu	r3,-2288(fp)
100056fc:	e13dd304 	addi	r4,fp,-2228
10005700:	200f883a 	mov	r7,r4
10005704:	180d883a 	mov	r6,r3
10005708:	e17dcc17 	ldw	r5,-2256(fp)
1000570c:	1009883a 	mov	r4,r2
10005710:	0004e0c0 	call	10004e0c <read_keycode>

		// Run character control functions
		update_event(state_c, event_c, prohibit_c, cooling_c, keycodes, clock, system_flage);
10005714:	e1bfe004 	addi	r6,fp,-128
10005718:	e17fc004 	addi	r5,fp,-256
1000571c:	e13e1004 	addi	r4,fp,-1984
10005720:	e0fdf404 	addi	r3,fp,-2096
10005724:	e0bfe504 	addi	r2,fp,-108
10005728:	d8800215 	stw	r2,8(sp)
1000572c:	e0bdc517 	ldw	r2,-2284(fp)
10005730:	d8800115 	stw	r2,4(sp)
10005734:	e0bdd304 	addi	r2,fp,-2228
10005738:	d8800015 	stw	r2,0(sp)
1000573c:	300f883a 	mov	r7,r6
10005740:	280d883a 	mov	r6,r5
10005744:	200b883a 	mov	r5,r4
10005748:	1809883a 	mov	r4,r3
1000574c:	0002bd80 	call	10002bd8 <update_event>
		change_event(state_c, event_c, prohibit_c, cooling_c, keycodes, clock, system_flage);
10005750:	e1bfe004 	addi	r6,fp,-128
10005754:	e17fc004 	addi	r5,fp,-256
10005758:	e13e1004 	addi	r4,fp,-1984
1000575c:	e0fdf404 	addi	r3,fp,-2096
10005760:	e0bfe504 	addi	r2,fp,-108
10005764:	d8800215 	stw	r2,8(sp)
10005768:	e0bdc517 	ldw	r2,-2284(fp)
1000576c:	d8800115 	stw	r2,4(sp)
10005770:	e0bdd304 	addi	r2,fp,-2228
10005774:	d8800015 	stw	r2,0(sp)
10005778:	300f883a 	mov	r7,r6
1000577c:	280d883a 	mov	r6,r5
10005780:	200b883a 	mov	r5,r4
10005784:	1809883a 	mov	r4,r3
10005788:	00032f00 	call	100032f0 <change_event>
		movement(state_c, event_c, prohibit_c, cooling_c, keycodes, clock, system_flage);
1000578c:	e1bfe004 	addi	r6,fp,-128
10005790:	e17fc004 	addi	r5,fp,-256
10005794:	e13e1004 	addi	r4,fp,-1984
10005798:	e0fdf404 	addi	r3,fp,-2096
1000579c:	e0bfe504 	addi	r2,fp,-108
100057a0:	d8800215 	stw	r2,8(sp)
100057a4:	e0bdc517 	ldw	r2,-2284(fp)
100057a8:	d8800115 	stw	r2,4(sp)
100057ac:	e0bdd304 	addi	r2,fp,-2228
100057b0:	d8800015 	stw	r2,0(sp)
100057b4:	300f883a 	mov	r7,r6
100057b8:	280d883a 	mov	r6,r5
100057bc:	200b883a 	mov	r5,r4
100057c0:	1809883a 	mov	r4,r3
100057c4:	00022880 	call	10002288 <movement>

		// Run boss control functions
		update_event_b(state_b, state_c, event_b, prohibit_b, clock, system_flage, cooling_c);
100057c8:	e1bfd004 	addi	r6,fp,-192
100057cc:	e17ea004 	addi	r5,fp,-1408
100057d0:	e13df404 	addi	r4,fp,-2096
100057d4:	e0fe0004 	addi	r3,fp,-2048
100057d8:	e0bfe004 	addi	r2,fp,-128
100057dc:	d8800215 	stw	r2,8(sp)
100057e0:	e0bfe504 	addi	r2,fp,-108
100057e4:	d8800115 	stw	r2,4(sp)
100057e8:	e0bdc517 	ldw	r2,-2284(fp)
100057ec:	d8800015 	stw	r2,0(sp)
100057f0:	300f883a 	mov	r7,r6
100057f4:	280d883a 	mov	r6,r5
100057f8:	200b883a 	mov	r5,r4
100057fc:	1809883a 	mov	r4,r3
10005800:	0000a080 	call	10000a08 <update_event_b>
		change_event_b(state_b, state_c, event_b, prohibit_b, clock, system_flage, cooling_c);
10005804:	e1bfd004 	addi	r6,fp,-192
10005808:	e17ea004 	addi	r5,fp,-1408
1000580c:	e13df404 	addi	r4,fp,-2096
10005810:	e0fe0004 	addi	r3,fp,-2048
10005814:	e0bfe004 	addi	r2,fp,-128
10005818:	d8800215 	stw	r2,8(sp)
1000581c:	e0bfe504 	addi	r2,fp,-108
10005820:	d8800115 	stw	r2,4(sp)
10005824:	e0bdc517 	ldw	r2,-2284(fp)
10005828:	d8800015 	stw	r2,0(sp)
1000582c:	300f883a 	mov	r7,r6
10005830:	280d883a 	mov	r6,r5
10005834:	200b883a 	mov	r5,r4
10005838:	1809883a 	mov	r4,r3
1000583c:	00019e00 	call	100019e0 <change_event_b>
		movement_b(state_b, event_b, prohibit_b, clock, system_flage);
10005840:	e17fd004 	addi	r5,fp,-192
10005844:	e13ea004 	addi	r4,fp,-1408
10005848:	e0fe0004 	addi	r3,fp,-2048
1000584c:	e0bfe504 	addi	r2,fp,-108
10005850:	d8800015 	stw	r2,0(sp)
10005854:	e1fdc517 	ldw	r7,-2284(fp)
10005858:	280d883a 	mov	r6,r5
1000585c:	200b883a 	mov	r5,r4
10005860:	1809883a 	mov	r4,r3
10005864:	000026c0 	call	1000026c <movement_b>

		// Spell generation
		if (system_flage[f_spell] == 1) {
10005868:	d0a02917 	ldw	r2,-32604(gp)
1000586c:	1085883a 	add	r2,r2,r2
10005870:	1085883a 	add	r2,r2,r2
10005874:	e13dc404 	addi	r4,fp,-2288
10005878:	2085883a 	add	r2,r4,r2
1000587c:	10822104 	addi	r2,r2,2180
10005880:	10800017 	ldw	r2,0(r2)
10005884:	10800058 	cmpnei	r2,r2,1
10005888:	10000c1e 	bne	r2,zero,100058bc <game_main+0x7c8>
			set_event(event_s, event_s_spine);
1000588c:	e0bf3004 	addi	r2,fp,-832
10005890:	01440074 	movhi	r5,4097
10005894:	295fc604 	addi	r5,r5,32536
10005898:	1009883a 	mov	r4,r2
1000589c:	0004a8c0 	call	10004a8c <set_event>
			system_flage[f_spell] = 0;
100058a0:	d0a02917 	ldw	r2,-32604(gp)
100058a4:	1085883a 	add	r2,r2,r2
100058a8:	1085883a 	add	r2,r2,r2
100058ac:	e17dc404 	addi	r5,fp,-2288
100058b0:	2885883a 	add	r2,r5,r2
100058b4:	10822104 	addi	r2,r2,2180
100058b8:	10000015 	stw	zero,0(r2)
		}

		// Set the value of coordinate for each spirit
		set_state(state_c[Cx], state_c[Cy], state_c[Ori], spirit, 0);
100058bc:	d0a00817 	ldw	r2,-32736(gp)
100058c0:	1085883a 	add	r2,r2,r2
100058c4:	1085883a 	add	r2,r2,r2
100058c8:	e0fdc404 	addi	r3,fp,-2288
100058cc:	1885883a 	add	r2,r3,r2
100058d0:	10803004 	addi	r2,r2,192
100058d4:	10c00017 	ldw	r3,0(r2)
100058d8:	d0a00917 	ldw	r2,-32732(gp)
100058dc:	1085883a 	add	r2,r2,r2
100058e0:	1085883a 	add	r2,r2,r2
100058e4:	e13dc404 	addi	r4,fp,-2288
100058e8:	2085883a 	add	r2,r4,r2
100058ec:	10803004 	addi	r2,r2,192
100058f0:	11000017 	ldw	r4,0(r2)
100058f4:	d0a00c17 	ldw	r2,-32720(gp)
100058f8:	1085883a 	add	r2,r2,r2
100058fc:	1085883a 	add	r2,r2,r2
10005900:	e17dc404 	addi	r5,fp,-2288
10005904:	2885883a 	add	r2,r5,r2
10005908:	10803004 	addi	r2,r2,192
1000590c:	10800017 	ldw	r2,0(r2)
10005910:	e17dd404 	addi	r5,fp,-2224
10005914:	d8000015 	stw	zero,0(sp)
10005918:	280f883a 	mov	r7,r5
1000591c:	100d883a 	mov	r6,r2
10005920:	200b883a 	mov	r5,r4
10005924:	1809883a 	mov	r4,r3
10005928:	00047800 	call	10004780 <set_state>
		set_state(state_b[Cx], state_b[Cy], state_b[Ori], spirit, 1);
1000592c:	d0a00817 	ldw	r2,-32736(gp)
10005930:	1085883a 	add	r2,r2,r2
10005934:	1085883a 	add	r2,r2,r2
10005938:	e0fdc404 	addi	r3,fp,-2288
1000593c:	1885883a 	add	r2,r3,r2
10005940:	10803c04 	addi	r2,r2,240
10005944:	10c00017 	ldw	r3,0(r2)
10005948:	d0a00917 	ldw	r2,-32732(gp)
1000594c:	1085883a 	add	r2,r2,r2
10005950:	1085883a 	add	r2,r2,r2
10005954:	e13dc404 	addi	r4,fp,-2288
10005958:	2085883a 	add	r2,r4,r2
1000595c:	10803c04 	addi	r2,r2,240
10005960:	11000017 	ldw	r4,0(r2)
10005964:	d0a00c17 	ldw	r2,-32720(gp)
10005968:	1085883a 	add	r2,r2,r2
1000596c:	1085883a 	add	r2,r2,r2
10005970:	e17dc404 	addi	r5,fp,-2288
10005974:	2885883a 	add	r2,r5,r2
10005978:	10803c04 	addi	r2,r2,240
1000597c:	11400017 	ldw	r5,0(r2)
10005980:	e1bdd404 	addi	r6,fp,-2224
10005984:	00800044 	movi	r2,1
10005988:	d8800015 	stw	r2,0(sp)
1000598c:	300f883a 	mov	r7,r6
10005990:	280d883a 	mov	r6,r5
10005994:	200b883a 	mov	r5,r4
10005998:	1809883a 	mov	r4,r3
1000599c:	00047800 	call	10004780 <set_state>

		// Set the address and offset information each spirit
		set_address(event_c[event_c[0][fcount]][1], spirit, 0);
100059a0:	d0a04317 	ldw	r2,-32500(gp)
100059a4:	100490fa 	slli	r2,r2,3
100059a8:	e0fdc404 	addi	r3,fp,-2288
100059ac:	1885883a 	add	r2,r3,r2
100059b0:	11004c04 	addi	r4,r2,304
100059b4:	20800017 	ldw	r2,0(r4)
100059b8:	20c00117 	ldw	r3,4(r4)
100059bc:	01400c04 	movi	r5,48
100059c0:	1009883a 	mov	r4,r2
100059c4:	0007d040 	call	10007d04 <__mulsi3>
100059c8:	e13dc404 	addi	r4,fp,-2288
100059cc:	2085883a 	add	r2,r4,r2
100059d0:	11004e04 	addi	r4,r2,312
100059d4:	20800017 	ldw	r2,0(r4)
100059d8:	20c00117 	ldw	r3,4(r4)
100059dc:	e13dd404 	addi	r4,fp,-2224
100059e0:	000f883a 	mov	r7,zero
100059e4:	200d883a 	mov	r6,r4
100059e8:	1009883a 	mov	r4,r2
100059ec:	180b883a 	mov	r5,r3
100059f0:	00048f80 	call	100048f8 <set_address>
		set_address(event_b[event_b[0][fcount]][1], spirit, 1);
100059f4:	d0a04317 	ldw	r2,-32500(gp)
100059f8:	100490fa 	slli	r2,r2,3
100059fc:	e17dc404 	addi	r5,fp,-2288
10005a00:	2885883a 	add	r2,r5,r2
10005a04:	1100dc04 	addi	r4,r2,880
10005a08:	20800017 	ldw	r2,0(r4)
10005a0c:	20c00117 	ldw	r3,4(r4)
10005a10:	01400c04 	movi	r5,48
10005a14:	1009883a 	mov	r4,r2
10005a18:	0007d040 	call	10007d04 <__mulsi3>
10005a1c:	e0fdc404 	addi	r3,fp,-2288
10005a20:	1885883a 	add	r2,r3,r2
10005a24:	1100de04 	addi	r4,r2,888
10005a28:	20800017 	ldw	r2,0(r4)
10005a2c:	20c00117 	ldw	r3,4(r4)
10005a30:	e13dd404 	addi	r4,fp,-2224
10005a34:	01c00044 	movi	r7,1
10005a38:	200d883a 	mov	r6,r4
10005a3c:	1009883a 	mov	r4,r2
10005a40:	180b883a 	mov	r5,r3
10005a44:	00048f80 	call	100048f8 <set_address>

		// Update the event and set the coordinate, address and offset for each spirit
		if (event_s[0][id] != 0) {
10005a48:	d0a04617 	ldw	r2,-32488(gp)
10005a4c:	100490fa 	slli	r2,r2,3
10005a50:	e13dc404 	addi	r4,fp,-2288
10005a54:	2085883a 	add	r2,r4,r2
10005a58:	11016c04 	addi	r4,r2,1456
10005a5c:	20800017 	ldw	r2,0(r4)
10005a60:	20c00117 	ldw	r3,4(r4)
10005a64:	1009883a 	mov	r4,r2
10005a68:	20c8b03a 	or	r4,r4,r3
10005a6c:	20008826 	beq	r4,zero,10005c90 <game_main+0xb9c>
			int index = event_s[0][fcount];
10005a70:	d0a04317 	ldw	r2,-32500(gp)
10005a74:	100490fa 	slli	r2,r2,3
10005a78:	e17dc404 	addi	r5,fp,-2288
10005a7c:	2885883a 	add	r2,r5,r2
10005a80:	11016c04 	addi	r4,r2,1456
10005a84:	20800017 	ldw	r2,0(r4)
10005a88:	20c00117 	ldw	r3,4(r4)
10005a8c:	e0bdd215 	stw	r2,-2232(fp)
			// If counter of current frame is zero
			if (event_s[index][0] == 0) {
10005a90:	e0bdd217 	ldw	r2,-2232(fp)
10005a94:	01400c04 	movi	r5,48
10005a98:	1009883a 	mov	r4,r2
10005a9c:	0007d040 	call	10007d04 <__mulsi3>
10005aa0:	e0fdc404 	addi	r3,fp,-2288
10005aa4:	1885883a 	add	r2,r3,r2
10005aa8:	11016c04 	addi	r4,r2,1456
10005aac:	20800017 	ldw	r2,0(r4)
10005ab0:	20c00117 	ldw	r3,4(r4)
10005ab4:	1009883a 	mov	r4,r2
10005ab8:	20c8b03a 	or	r4,r4,r3
10005abc:	20002c1e 	bne	r4,zero,10005b70 <game_main+0xa7c>
				if (index >= event_s[0][fnum]) {
10005ac0:	e0bdd217 	ldw	r2,-2232(fp)
10005ac4:	e0bff315 	stw	r2,-52(fp)
10005ac8:	1005d7fa 	srai	r2,r2,31
10005acc:	e0bff415 	stw	r2,-48(fp)
10005ad0:	d0a04417 	ldw	r2,-32496(gp)
10005ad4:	100490fa 	slli	r2,r2,3
10005ad8:	e13dc404 	addi	r4,fp,-2288
10005adc:	2085883a 	add	r2,r4,r2
10005ae0:	11016c04 	addi	r4,r2,1456
10005ae4:	20800017 	ldw	r2,0(r4)
10005ae8:	20c00117 	ldw	r3,4(r4)
10005aec:	e17ff417 	ldw	r5,-48(fp)
10005af0:	28c00836 	bltu	r5,r3,10005b14 <game_main+0xa20>
10005af4:	e13ff417 	ldw	r4,-48(fp)
10005af8:	1900021e 	bne	r3,r4,10005b04 <game_main+0xa10>
10005afc:	e17ff317 	ldw	r5,-52(fp)
10005b00:	28800436 	bltu	r5,r2,10005b14 <game_main+0xa20>
					clean_event(event_s);
10005b04:	e0bf3004 	addi	r2,fp,-832
10005b08:	1009883a 	mov	r4,r2
10005b0c:	0004be00 	call	10004be0 <clean_event>
10005b10:	00001706 	br	10005b70 <game_main+0xa7c>
				} else {
					// Current frame ended
					event_s[0][fcount] += 1;
10005b14:	d2204317 	ldw	r8,-32500(gp)
10005b18:	d0a04317 	ldw	r2,-32500(gp)
10005b1c:	100490fa 	slli	r2,r2,3
10005b20:	e0fdc404 	addi	r3,fp,-2288
10005b24:	1885883a 	add	r2,r3,r2
10005b28:	10816c04 	addi	r2,r2,1456
10005b2c:	11000017 	ldw	r4,0(r2)
10005b30:	11400117 	ldw	r5,4(r2)
10005b34:	01800044 	movi	r6,1
10005b38:	000f883a 	mov	r7,zero
10005b3c:	2185883a 	add	r2,r4,r6
10005b40:	1113803a 	cmpltu	r9,r2,r4
10005b44:	29c7883a 	add	r3,r5,r7
10005b48:	48c9883a 	add	r4,r9,r3
10005b4c:	2007883a 	mov	r3,r4
10005b50:	1009883a 	mov	r4,r2
10005b54:	180b883a 	mov	r5,r3
10005b58:	400490fa 	slli	r2,r8,3
10005b5c:	e0fdc404 	addi	r3,fp,-2288
10005b60:	1885883a 	add	r2,r3,r2
10005b64:	10816c04 	addi	r2,r2,1456
10005b68:	11000015 	stw	r4,0(r2)
10005b6c:	11400115 	stw	r5,4(r2)
				}
			}
			// Subtract the counter of current frame by 1
			event_s[index][0] -= 1;
10005b70:	e0bdd217 	ldw	r2,-2232(fp)
10005b74:	01400c04 	movi	r5,48
10005b78:	1009883a 	mov	r4,r2
10005b7c:	0007d040 	call	10007d04 <__mulsi3>
10005b80:	e13dc404 	addi	r4,fp,-2288
10005b84:	2085883a 	add	r2,r4,r2
10005b88:	10816c04 	addi	r2,r2,1456
10005b8c:	11000017 	ldw	r4,0(r2)
10005b90:	11400117 	ldw	r5,4(r2)
10005b94:	01bfffc4 	movi	r6,-1
10005b98:	01ffffc4 	movi	r7,-1
10005b9c:	2185883a 	add	r2,r4,r6
10005ba0:	1111803a 	cmpltu	r8,r2,r4
10005ba4:	29c7883a 	add	r3,r5,r7
10005ba8:	40c9883a 	add	r4,r8,r3
10005bac:	2007883a 	mov	r3,r4
10005bb0:	e0bff515 	stw	r2,-44(fp)
10005bb4:	e0fff615 	stw	r3,-40(fp)
10005bb8:	e0bdd217 	ldw	r2,-2232(fp)
10005bbc:	01400c04 	movi	r5,48
10005bc0:	1009883a 	mov	r4,r2
10005bc4:	0007d040 	call	10007d04 <__mulsi3>
10005bc8:	e17dc404 	addi	r5,fp,-2288
10005bcc:	2885883a 	add	r2,r5,r2
10005bd0:	10816c04 	addi	r2,r2,1456
10005bd4:	e0fff517 	ldw	r3,-44(fp)
10005bd8:	10c00015 	stw	r3,0(r2)
10005bdc:	e13ff617 	ldw	r4,-40(fp)
10005be0:	11000115 	stw	r4,4(r2)
			// Display the spell
			for (int i = 0; i < 10; i++) {
10005be4:	e03dc815 	stw	zero,-2272(fp)
10005be8:	00002506 	br	10005c80 <game_main+0xb8c>
				set_state(71*i, 165, 0, spirit, i+2);
10005bec:	014011c4 	movi	r5,71
10005bf0:	e13dc817 	ldw	r4,-2272(fp)
10005bf4:	0007d040 	call	10007d04 <__mulsi3>
10005bf8:	1009883a 	mov	r4,r2
10005bfc:	e0bdc817 	ldw	r2,-2272(fp)
10005c00:	10800084 	addi	r2,r2,2
10005c04:	e0fdd404 	addi	r3,fp,-2224
10005c08:	d8800015 	stw	r2,0(sp)
10005c0c:	180f883a 	mov	r7,r3
10005c10:	000d883a 	mov	r6,zero
10005c14:	01402944 	movi	r5,165
10005c18:	00047800 	call	10004780 <set_state>
				set_address(event_s_spine[index][1], spirit, i+2);
10005c1c:	01440074 	movhi	r5,4097
10005c20:	e17ff715 	stw	r5,-36(fp)
10005c24:	e0bff717 	ldw	r2,-36(fp)
10005c28:	109fc604 	addi	r2,r2,32536
10005c2c:	e0bff715 	stw	r2,-36(fp)
10005c30:	e0bdd217 	ldw	r2,-2232(fp)
10005c34:	01400c04 	movi	r5,48
10005c38:	1009883a 	mov	r4,r2
10005c3c:	0007d040 	call	10007d04 <__mulsi3>
10005c40:	e0fff717 	ldw	r3,-36(fp)
10005c44:	1885883a 	add	r2,r3,r2
10005c48:	11000204 	addi	r4,r2,8
10005c4c:	20800017 	ldw	r2,0(r4)
10005c50:	20c00117 	ldw	r3,4(r4)
10005c54:	e13dc817 	ldw	r4,-2272(fp)
10005c58:	21400084 	addi	r5,r4,2
10005c5c:	e13dd404 	addi	r4,fp,-2224
10005c60:	280f883a 	mov	r7,r5
10005c64:	200d883a 	mov	r6,r4
10005c68:	1009883a 	mov	r4,r2
10005c6c:	180b883a 	mov	r5,r3
10005c70:	00048f80 	call	100048f8 <set_address>
				}
			}
			// Subtract the counter of current frame by 1
			event_s[index][0] -= 1;
			// Display the spell
			for (int i = 0; i < 10; i++) {
10005c74:	e0bdc817 	ldw	r2,-2272(fp)
10005c78:	10800044 	addi	r2,r2,1
10005c7c:	e0bdc815 	stw	r2,-2272(fp)
10005c80:	e0bdc817 	ldw	r2,-2272(fp)
10005c84:	10800290 	cmplti	r2,r2,10
10005c88:	103fd81e 	bne	r2,zero,10005bec <__alt_data_end+0xf8005bec>
10005c8c:	00001006 	br	10005cd0 <game_main+0xbdc>
				set_state(71*i, 165, 0, spirit, i+2);
				set_address(event_s_spine[index][1], spirit, i+2);
			}
		} else {
			for (int i = 0; i < 10; i++) {
10005c90:	e03dc915 	stw	zero,-2268(fp)
10005c94:	00000b06 	br	10005cc4 <game_main+0xbd0>
				spirit[i+2] = 0x0;
10005c98:	e0bdc917 	ldw	r2,-2268(fp)
10005c9c:	10800084 	addi	r2,r2,2
10005ca0:	100490fa 	slli	r2,r2,3
10005ca4:	e13dc404 	addi	r4,fp,-2288
10005ca8:	2085883a 	add	r2,r4,r2
10005cac:	10801004 	addi	r2,r2,64
10005cb0:	10000015 	stw	zero,0(r2)
10005cb4:	10000115 	stw	zero,4(r2)
			for (int i = 0; i < 10; i++) {
				set_state(71*i, 165, 0, spirit, i+2);
				set_address(event_s_spine[index][1], spirit, i+2);
			}
		} else {
			for (int i = 0; i < 10; i++) {
10005cb8:	e0bdc917 	ldw	r2,-2268(fp)
10005cbc:	10800044 	addi	r2,r2,1
10005cc0:	e0bdc915 	stw	r2,-2268(fp)
10005cc4:	e0bdc917 	ldw	r2,-2268(fp)
10005cc8:	10800290 	cmplti	r2,r2,10
10005ccc:	103ff21e 	bne	r2,zero,10005c98 <__alt_data_end+0xf8005c98>
				spirit[i+2] = 0x0;
			}
		}

		// Update cooling list
		for (int i = 0; i < N_cooling_c; i++) {
10005cd0:	e03dca15 	stw	zero,-2264(fp)
10005cd4:	00001a06 	br	10005d40 <game_main+0xc4c>
			if (cooling_c[i] > 0) {
10005cd8:	e0bdca17 	ldw	r2,-2264(fp)
10005cdc:	1085883a 	add	r2,r2,r2
10005ce0:	1085883a 	add	r2,r2,r2
10005ce4:	e17dc404 	addi	r5,fp,-2288
10005ce8:	2885883a 	add	r2,r5,r2
10005cec:	10821c04 	addi	r2,r2,2160
10005cf0:	10800017 	ldw	r2,0(r2)
10005cf4:	00800f0e 	bge	zero,r2,10005d34 <game_main+0xc40>
				cooling_c[i] -= 1;
10005cf8:	e0bdca17 	ldw	r2,-2264(fp)
10005cfc:	1085883a 	add	r2,r2,r2
10005d00:	1085883a 	add	r2,r2,r2
10005d04:	e0fdc404 	addi	r3,fp,-2288
10005d08:	1885883a 	add	r2,r3,r2
10005d0c:	10821c04 	addi	r2,r2,2160
10005d10:	10800017 	ldw	r2,0(r2)
10005d14:	10ffffc4 	addi	r3,r2,-1
10005d18:	e0bdca17 	ldw	r2,-2264(fp)
10005d1c:	1085883a 	add	r2,r2,r2
10005d20:	1085883a 	add	r2,r2,r2
10005d24:	e13dc404 	addi	r4,fp,-2288
10005d28:	2085883a 	add	r2,r4,r2
10005d2c:	10821c04 	addi	r2,r2,2160
10005d30:	10c00015 	stw	r3,0(r2)
				spirit[i+2] = 0x0;
			}
		}

		// Update cooling list
		for (int i = 0; i < N_cooling_c; i++) {
10005d34:	e0bdca17 	ldw	r2,-2264(fp)
10005d38:	10800044 	addi	r2,r2,1
10005d3c:	e0bdca15 	stw	r2,-2264(fp)
10005d40:	d0a03a17 	ldw	r2,-32536(gp)
10005d44:	e0fdca17 	ldw	r3,-2264(fp)
10005d48:	18bfe316 	blt	r3,r2,10005cd8 <__alt_data_end+0xf8005cd8>
				cooling_c[i] -= 1;
			}
		}

		// Update healthy point
		temp = 0x0;
10005d4c:	e03dc615 	stw	zero,-2280(fp)
10005d50:	e03dc715 	stw	zero,-2276(fp)
		for (int i = 0; i < state_c[Health]; i++) {
10005d54:	e03dcb15 	stw	zero,-2260(fp)
10005d58:	00001006 	br	10005d9c <game_main+0xca8>
			temp = (temp << 1) | 0x0001;
10005d5c:	e0bdc617 	ldw	r2,-2280(fp)
10005d60:	e0fdc717 	ldw	r3,-2276(fp)
10005d64:	1089883a 	add	r4,r2,r2
10005d68:	208d803a 	cmpltu	r6,r4,r2
10005d6c:	18cb883a 	add	r5,r3,r3
10005d70:	3145883a 	add	r2,r6,r5
10005d74:	100b883a 	mov	r5,r2
10005d78:	2005883a 	mov	r2,r4
10005d7c:	2807883a 	mov	r3,r5
10005d80:	11000054 	ori	r4,r2,1
10005d84:	e13dc615 	stw	r4,-2280(fp)
10005d88:	1804b03a 	or	r2,r3,zero
10005d8c:	e0bdc715 	stw	r2,-2276(fp)
			}
		}

		// Update healthy point
		temp = 0x0;
		for (int i = 0; i < state_c[Health]; i++) {
10005d90:	e0bdcb17 	ldw	r2,-2260(fp)
10005d94:	10800044 	addi	r2,r2,1
10005d98:	e0bdcb15 	stw	r2,-2260(fp)
10005d9c:	d0a01317 	ldw	r2,-32692(gp)
10005da0:	1085883a 	add	r2,r2,r2
10005da4:	1085883a 	add	r2,r2,r2
10005da8:	e17dc404 	addi	r5,fp,-2288
10005dac:	2885883a 	add	r2,r5,r2
10005db0:	10803004 	addi	r2,r2,192
10005db4:	10800017 	ldw	r2,0(r2)
10005db8:	e0fdcb17 	ldw	r3,-2260(fp)
10005dbc:	18bfe716 	blt	r3,r2,10005d5c <__alt_data_end+0xf8005d5c>
			temp = (temp << 1) | 0x0001;
		}
		spirit[15] = (spirit[15] & 0xffff00ffffffffff) | (temp << 40);
10005dc0:	e0bdf217 	ldw	r2,-2104(fp)
10005dc4:	e0fdf317 	ldw	r3,-2100(fp)
10005dc8:	013fffc4 	movi	r4,-1
10005dcc:	1120703a 	and	r16,r2,r4
10005dd0:	013ffff4 	movhi	r4,65535
10005dd4:	21003fc4 	addi	r4,r4,255
10005dd8:	1922703a 	and	r17,r3,r4
10005ddc:	e0bdc617 	ldw	r2,-2280(fp)
10005de0:	1004923a 	slli	r2,r2,8
10005de4:	e0bfee15 	stw	r2,-72(fp)
10005de8:	e03fed15 	stw	zero,-76(fp)
10005dec:	e0bfed17 	ldw	r2,-76(fp)
10005df0:	80a4b03a 	or	r18,r16,r2
10005df4:	e0ffee17 	ldw	r3,-72(fp)
10005df8:	88e6b03a 	or	r19,r17,r3
10005dfc:	e4bdf215 	stw	r18,-2104(fp)
10005e00:	e4fdf315 	stw	r19,-2100(fp)

		// Blinking during cooling period
		if ((cooling_c[c_hitc] != 0) && ((cooling_c[c_hitc] / 10) % 2 == 1)) {
10005e04:	d0a02417 	ldw	r2,-32624(gp)
10005e08:	1085883a 	add	r2,r2,r2
10005e0c:	1085883a 	add	r2,r2,r2
10005e10:	e13dc404 	addi	r4,fp,-2288
10005e14:	2085883a 	add	r2,r4,r2
10005e18:	10821c04 	addi	r2,r2,2160
10005e1c:	10800017 	ldw	r2,0(r2)
10005e20:	10001726 	beq	r2,zero,10005e80 <game_main+0xd8c>
10005e24:	d0a02417 	ldw	r2,-32624(gp)
10005e28:	1085883a 	add	r2,r2,r2
10005e2c:	1085883a 	add	r2,r2,r2
10005e30:	e17dc404 	addi	r5,fp,-2288
10005e34:	2885883a 	add	r2,r5,r2
10005e38:	10821c04 	addi	r2,r2,2160
10005e3c:	10800017 	ldw	r2,0(r2)
10005e40:	01400284 	movi	r5,10
10005e44:	1009883a 	mov	r4,r2
10005e48:	0007b500 	call	10007b50 <__divsi3>
10005e4c:	1007883a 	mov	r3,r2
10005e50:	00a00034 	movhi	r2,32768
10005e54:	10800044 	addi	r2,r2,1
10005e58:	1884703a 	and	r2,r3,r2
10005e5c:	1000040e 	bge	r2,zero,10005e70 <game_main+0xd7c>
10005e60:	10bfffc4 	addi	r2,r2,-1
10005e64:	00ffff84 	movi	r3,-2
10005e68:	10c4b03a 	or	r2,r2,r3
10005e6c:	10800044 	addi	r2,r2,1
10005e70:	10800058 	cmpnei	r2,r2,1
10005e74:	1000021e 	bne	r2,zero,10005e80 <game_main+0xd8c>
			spirit[0] = 0x0;
10005e78:	e03dd415 	stw	zero,-2224(fp)
10005e7c:	e03dd515 	stw	zero,-2220(fp)
		}

		// Display hit effect for boss
		spirit[15] = spirit[15] & 0xfffeffffffffffff;
10005e80:	e0bdf217 	ldw	r2,-2104(fp)
10005e84:	e0fdf317 	ldw	r3,-2100(fp)
10005e88:	013fffc4 	movi	r4,-1
10005e8c:	1128703a 	and	r20,r2,r4
10005e90:	013ffff4 	movhi	r4,65535
10005e94:	213fffc4 	addi	r4,r4,-1
10005e98:	192a703a 	and	r21,r3,r4
10005e9c:	e53df215 	stw	r20,-2104(fp)
10005ea0:	e57df315 	stw	r21,-2100(fp)
		if (cooling_c[c_hitb] != 0) {
10005ea4:	d0a02517 	ldw	r2,-32620(gp)
10005ea8:	1085883a 	add	r2,r2,r2
10005eac:	1085883a 	add	r2,r2,r2
10005eb0:	e0fdc404 	addi	r3,fp,-2288
10005eb4:	1885883a 	add	r2,r3,r2
10005eb8:	10821c04 	addi	r2,r2,2160
10005ebc:	10800017 	ldw	r2,0(r2)
10005ec0:	10001826 	beq	r2,zero,10005f24 <game_main+0xe30>
			temp = 0x01;
10005ec4:	00800044 	movi	r2,1
10005ec8:	e0bdc615 	stw	r2,-2280(fp)
10005ecc:	e03dc715 	stw	zero,-2276(fp)
			spirit[15] = (spirit[15] & 0xfffeffffffffffff) | (temp << 48);
10005ed0:	e0bdf217 	ldw	r2,-2104(fp)
10005ed4:	e0fdf317 	ldw	r3,-2100(fp)
10005ed8:	013fffc4 	movi	r4,-1
10005edc:	112c703a 	and	r22,r2,r4
10005ee0:	013ffff4 	movhi	r4,65535
10005ee4:	213fffc4 	addi	r4,r4,-1
10005ee8:	192e703a 	and	r23,r3,r4
10005eec:	e0bdc617 	ldw	r2,-2280(fp)
10005ef0:	1004943a 	slli	r2,r2,16
10005ef4:	e0bff015 	stw	r2,-64(fp)
10005ef8:	e03fef15 	stw	zero,-68(fp)
10005efc:	e13fef17 	ldw	r4,-68(fp)
10005f00:	b108b03a 	or	r4,r22,r4
10005f04:	e13ff115 	stw	r4,-60(fp)
10005f08:	e17ff017 	ldw	r5,-64(fp)
10005f0c:	b94ab03a 	or	r5,r23,r5
10005f10:	e17ff215 	stw	r5,-56(fp)
10005f14:	e0bff117 	ldw	r2,-60(fp)
10005f18:	e0bdf215 	stw	r2,-2104(fp)
10005f1c:	e0fff217 	ldw	r3,-56(fp)
10005f20:	e0fdf315 	stw	r3,-2100(fp)
		}

		// Write data to spirit
		write_spirit(spirit, data);
10005f24:	e0bdd404 	addi	r2,fp,-2224
10005f28:	e17dcd17 	ldw	r5,-2252(fp)
10005f2c:	1009883a 	mov	r4,r2
10005f30:	00046a40 	call	100046a4 <write_spirit>
	}
10005f34:	003ce006 	br	100052b8 <__alt_data_end+0xf80052b8>

10005f38 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
10005f38:	defff704 	addi	sp,sp,-36
10005f3c:	dfc00815 	stw	ra,32(sp)
10005f40:	df000715 	stw	fp,28(sp)
10005f44:	df000704 	addi	fp,sp,28
	IO_init();
10005f48:	0004cac0 	call	10004cac <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
10005f4c:	e03ffa0d 	sth	zero,-24(fp)
	int keycode = 0;
10005f50:	e03ffb15 	stw	zero,-20(fp)
	alt_u8 toggle = 0;
10005f54:	e03ffc05 	stb	zero,-16(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	// Test
	int done_flag = 0;
10005f58:	e03ffd15 	stw	zero,-12(fp)

	printf("USB keyboard setup...\n\n");
10005f5c:	010400b4 	movhi	r4,4098
10005f60:	21202604 	addi	r4,r4,-32616
10005f64:	0007f800 	call	10007f80 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10005f68:	0006a940 	call	10006a94 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10005f6c:	000b883a 	mov	r5,zero
10005f70:	01005104 	movi	r4,324
10005f74:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10005f78:	017fffd4 	movui	r5,65535
10005f7c:	01302414 	movui	r4,49296
10005f80:	00069f80 	call	100069f8 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10005f84:	01409604 	movi	r5,600
10005f88:	01006d04 	movi	r4,436
10005f8c:	00069f80 	call	100069f8 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10005f90:	00811004 	movi	r2,1088
10005f94:	e0bff90d 	sth	r2,-28(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10005f98:	e0bff90b 	ldhu	r2,-28(fp)
10005f9c:	100b883a 	mov	r5,r2
10005fa0:	01005084 	movi	r4,322
10005fa4:	00069f80 	call	100069f8 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10005fa8:	00808404 	movi	r2,528
10005fac:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10005fb0:	e0bffe0b 	ldhu	r2,-8(fp)
10005fb4:	100b883a 	mov	r5,r2
10005fb8:	01302314 	movui	r4,49292
10005fbc:	00069f80 	call	100069f8 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10005fc0:	000b883a 	mov	r5,zero
10005fc4:	01007104 	movi	r4,452
10005fc8:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10005fcc:	000b883a 	mov	r5,zero
10005fd0:	01007184 	movi	r4,454
10005fd4:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10005fd8:	000b883a 	mov	r5,zero
10005fdc:	01007204 	movi	r4,456
10005fe0:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10005fe4:	000b883a 	mov	r5,zero
10005fe8:	01007284 	movi	r4,458
10005fec:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10005ff0:	000b883a 	mov	r5,zero
10005ff4:	01007304 	movi	r4,460
10005ff8:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10005ffc:	000b883a 	mov	r5,zero
10006000:	01007384 	movi	r4,462
10006004:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10006008:	000b883a 	mov	r5,zero
1000600c:	01007404 	movi	r4,464
10006010:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10006014:	000b883a 	mov	r5,zero
10006018:	01007484 	movi	r4,466
1000601c:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10006020:	000b883a 	mov	r5,zero
10006024:	01007504 	movi	r4,468
10006028:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
1000602c:	000b883a 	mov	r5,zero
10006030:	01007584 	movi	r4,470
10006034:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10006038:	000b883a 	mov	r5,zero
1000603c:	01007604 	movi	r4,472
10006040:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10006044:	000b883a 	mov	r5,zero
10006048:	01007684 	movi	r4,474
1000604c:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10006050:	000b883a 	mov	r5,zero
10006054:	01007704 	movi	r4,476
10006058:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
1000605c:	000b883a 	mov	r5,zero
10006060:	01007784 	movi	r4,478
10006064:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10006068:	01401c84 	movi	r5,114
1000606c:	01007084 	movi	r4,450
10006070:	00069f80 	call	100069f8 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10006074:	01738054 	movui	r5,52737
10006078:	01000044 	movi	r4,1
1000607c:	0004d340 	call	10004d34 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10006080:	0001883a 	nop
10006084:	010000c4 	movi	r4,3
10006088:	0004da40 	call	10004da4 <IO_read>
1000608c:	10bfffcc 	andi	r2,r2,65535
10006090:	103ffc26 	beq	r2,zero,10006084 <__alt_data_end+0xf8006084>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10006094:	00000806 	br	100060b8 <main+0x180>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10006098:	01000044 	movi	r4,1
1000609c:	0004da40 	call	10004da4 <IO_read>
100060a0:	10bfffcc 	andi	r2,r2,65535
100060a4:	100b883a 	mov	r5,r2
100060a8:	010400b4 	movhi	r4,4098
100060ac:	21202c04 	addi	r4,r4,-32592
100060b0:	0007e840 	call	10007e84 <printf>
		goto USB_HOT_PLUG;
100060b4:	003fac06 	br	10005f68 <__alt_data_end+0xf8005f68>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100060b8:	01000044 	movi	r4,1
100060bc:	0004da40 	call	10004da4 <IO_read>
100060c0:	10bfffcc 	andi	r2,r2,65535
100060c4:	1083fb58 	cmpnei	r2,r2,4077
100060c8:	103ff31e 	bne	r2,zero,10006098 <__alt_data_end+0xf8006098>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
100060cc:	010400b4 	movhi	r4,4098
100060d0:	21203504 	addi	r4,r4,-32556
100060d4:	0007e840 	call	10007e84 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100060d8:	01401d04 	movi	r5,116
100060dc:	01007084 	movi	r4,450
100060e0:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
100060e4:	01400f04 	movi	r5,60
100060e8:	01007104 	movi	r4,452
100060ec:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100060f0:	000b883a 	mov	r5,zero
100060f4:	01007184 	movi	r4,454
100060f8:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100060fc:	000b883a 	mov	r5,zero
10006100:	01007204 	movi	r4,456
10006104:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10006108:	000b883a 	mov	r5,zero
1000610c:	01007284 	movi	r4,458
10006110:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10006114:	000b883a 	mov	r5,zero
10006118:	01007304 	movi	r4,460
1000611c:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10006120:	000b883a 	mov	r5,zero
10006124:	01007384 	movi	r4,462
10006128:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
1000612c:	000b883a 	mov	r5,zero
10006130:	01007404 	movi	r4,464
10006134:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10006138:	000b883a 	mov	r5,zero
1000613c:	01007484 	movi	r4,466
10006140:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10006144:	000b883a 	mov	r5,zero
10006148:	01007504 	movi	r4,468
1000614c:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10006150:	000b883a 	mov	r5,zero
10006154:	01007584 	movi	r4,470
10006158:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
1000615c:	000b883a 	mov	r5,zero
10006160:	01007604 	movi	r4,472
10006164:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10006168:	000b883a 	mov	r5,zero
1000616c:	01007684 	movi	r4,474
10006170:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10006174:	000b883a 	mov	r5,zero
10006178:	01007704 	movi	r4,476
1000617c:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10006180:	000b883a 	mov	r5,zero
10006184:	01007784 	movi	r4,478
10006188:	00069f80 	call	100069f8 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
1000618c:	01738054 	movui	r5,52737
10006190:	01000044 	movi	r4,1
10006194:	0004d340 	call	10004d34 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10006198:	0001883a 	nop
1000619c:	01000044 	movi	r4,1
100061a0:	0004da40 	call	10004da4 <IO_read>
100061a4:	10bfffcc 	andi	r2,r2,65535
100061a8:	1083fb58 	cmpnei	r2,r2,4077
100061ac:	10000826 	beq	r2,zero,100061d0 <main+0x298>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100061b0:	01000044 	movi	r4,1
100061b4:	0004da40 	call	10004da4 <IO_read>
100061b8:	10bfffcc 	andi	r2,r2,65535
100061bc:	100b883a 	mov	r5,r2
100061c0:	010400b4 	movhi	r4,4098
100061c4:	21202c04 	addi	r4,r4,-32592
100061c8:	0007e840 	call	10007e84 <printf>
		goto USB_HOT_PLUG;
100061cc:	003f6606 	br	10005f68 <__alt_data_end+0xf8005f68>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
100061d0:	00b02284 	movi	r2,-16246
100061d4:	d0a75d0d 	sth	r2,-25228(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
100061d8:	008c0004 	movi	r2,12288
100061dc:	d0a75d8d 	sth	r2,-25226(gp)
	fs_device = A_DP_STAT;
100061e0:	00880004 	movi	r2,8192
100061e4:	e0bffa0d 	sth	r2,-24(fp)
	usb_ctl_val = UsbRead(ctl_reg);
100061e8:	d0a75d0b 	ldhu	r2,-25228(gp)
100061ec:	10bfffcc 	andi	r2,r2,65535
100061f0:	1009883a 	mov	r4,r2
100061f4:	0006a500 	call	10006a50 <UsbRead>
100061f8:	e0bff90d 	sth	r2,-28(fp)

	if (!(usb_ctl_val & no_device))
100061fc:	d0a75d8b 	ldhu	r2,-25226(gp)
10006200:	e0fff90b 	ldhu	r3,-28(fp)
10006204:	1884703a 	and	r2,r3,r2
10006208:	10bfffcc 	andi	r2,r2,65535
1000620c:	1000351e 	bne	r2,zero,100062e4 <main+0x3ac>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10006210:	e03ff985 	stb	zero,-26(fp)
10006214:	00000f06 	br	10006254 <main+0x31c>
		{
			usleep(5*1000);
10006218:	0104e204 	movi	r4,5000
1000621c:	00154700 	call	10015470 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10006220:	d0a75d0b 	ldhu	r2,-25228(gp)
10006224:	10bfffcc 	andi	r2,r2,65535
10006228:	1009883a 	mov	r4,r2
1000622c:	0006a500 	call	10006a50 <UsbRead>
10006230:	e0bff90d 	sth	r2,-28(fp)
			if(usb_ctl_val & no_device) break;
10006234:	d0a75d8b 	ldhu	r2,-25226(gp)
10006238:	e0fff90b 	ldhu	r3,-28(fp)
1000623c:	1884703a 	and	r2,r3,r2
10006240:	10bfffcc 	andi	r2,r2,65535
10006244:	1000071e 	bne	r2,zero,10006264 <main+0x32c>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10006248:	e0bff983 	ldbu	r2,-26(fp)
1000624c:	10800044 	addi	r2,r2,1
10006250:	e0bff985 	stb	r2,-26(fp)
10006254:	e0bff983 	ldbu	r2,-26(fp)
10006258:	10800170 	cmpltui	r2,r2,5
1000625c:	103fee1e 	bne	r2,zero,10006218 <__alt_data_end+0xf8006218>
10006260:	00000106 	br	10006268 <main+0x330>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10006264:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10006268:	d0a75d8b 	ldhu	r2,-25226(gp)
1000626c:	e0fff90b 	ldhu	r3,-28(fp)
10006270:	1884703a 	and	r2,r3,r2
10006274:	10bfffcc 	andi	r2,r2,65535
10006278:	1000261e 	bne	r2,zero,10006314 <main+0x3dc>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
1000627c:	010400b4 	movhi	r4,4098
10006280:	21203904 	addi	r4,r4,-32540
10006284:	0007f800 	call	10007f80 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10006288:	010400b4 	movhi	r4,4098
1000628c:	21204304 	addi	r4,r4,-32500
10006290:	0007f800 	call	10007f80 <puts>
			while (!(usb_ctl_val & no_device))
10006294:	00000d06 	br	100062cc <main+0x394>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10006298:	d0a75d0b 	ldhu	r2,-25228(gp)
1000629c:	10bfffcc 	andi	r2,r2,65535
100062a0:	1009883a 	mov	r4,r2
100062a4:	0006a500 	call	10006a50 <UsbRead>
100062a8:	e0bff90d 	sth	r2,-28(fp)
				if(usb_ctl_val & no_device)
100062ac:	d0a75d8b 	ldhu	r2,-25226(gp)
100062b0:	e0fff90b 	ldhu	r3,-28(fp)
100062b4:	1884703a 	and	r2,r3,r2
100062b8:	10bfffcc 	andi	r2,r2,65535
100062bc:	10000126 	beq	r2,zero,100062c4 <main+0x38c>
					goto USB_HOT_PLUG;
100062c0:	003f2906 	br	10005f68 <__alt_data_end+0xf8005f68>

				usleep(2000);
100062c4:	0101f404 	movi	r4,2000
100062c8:	00154700 	call	10015470 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
100062cc:	d0a75d8b 	ldhu	r2,-25226(gp)
100062d0:	e0fff90b 	ldhu	r3,-28(fp)
100062d4:	1884703a 	and	r2,r3,r2
100062d8:	10bfffcc 	andi	r2,r2,65535
100062dc:	103fee26 	beq	r2,zero,10006298 <__alt_data_end+0xf8006298>
100062e0:	00000c06 	br	10006314 <main+0x3dc>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
100062e4:	e0fff90b 	ldhu	r3,-28(fp)
100062e8:	e0bffa0b 	ldhu	r2,-24(fp)
100062ec:	1884703a 	and	r2,r3,r2
100062f0:	10bfffcc 	andi	r2,r2,65535
100062f4:	10000426 	beq	r2,zero,10006308 <main+0x3d0>
		{
			printf("[INFO]: full speed device\n");
100062f8:	010400b4 	movhi	r4,4098
100062fc:	21204f04 	addi	r4,r4,-32452
10006300:	0007f800 	call	10007f80 <puts>
10006304:	00000306 	br	10006314 <main+0x3dc>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10006308:	010400b4 	movhi	r4,4098
1000630c:	21205604 	addi	r4,r4,-32424
10006310:	0007f800 	call	10007f80 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10006314:	0006b480 	call	10006b48 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006318:	00000306 	br	10006328 <main+0x3f0>
	{
		UsbSetAddress();
1000631c:	0006b480 	call	10006b48 <UsbSetAddress>
		usleep(10*1000);
10006320:	0109c404 	movi	r4,10000
10006324:	00154700 	call	10015470 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006328:	010000c4 	movi	r4,3
1000632c:	0004da40 	call	10004da4 <IO_read>
10006330:	10bfffcc 	andi	r2,r2,65535
10006334:	1080040c 	andi	r2,r2,16
10006338:	103ff826 	beq	r2,zero,1000631c <__alt_data_end+0xf800631c>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000633c:	00079e80 	call	100079e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10006340:	01414184 	movi	r5,1286
10006344:	01000084 	movi	r4,2
10006348:	0004d340 	call	10004d34 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000634c:	0009883a 	mov	r4,zero
10006350:	0004da40 	call	10004da4 <IO_read>
10006354:	10bfffcc 	andi	r2,r2,65535
10006358:	100b883a 	mov	r5,r2
1000635c:	010400b4 	movhi	r4,4098
10006360:	21205d04 	addi	r4,r4,-32396
10006364:	0007e840 	call	10007e84 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10006368:	01414204 	movi	r5,1288
1000636c:	01000084 	movi	r4,2
10006370:	0004d340 	call	10004d34 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006374:	0009883a 	mov	r4,zero
10006378:	0004da40 	call	10004da4 <IO_read>
1000637c:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10006380:	e0bff90b 	ldhu	r2,-28(fp)
10006384:	100b883a 	mov	r5,r2
10006388:	010400b4 	movhi	r4,4098
1000638c:	21206804 	addi	r4,r4,-32352
10006390:	0007e840 	call	10007e84 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10006394:	e0bff90b 	ldhu	r2,-28(fp)
10006398:	108000e0 	cmpeqi	r2,r2,3
1000639c:	1000031e 	bne	r2,zero,100063ac <main+0x474>
	{
		usb_ctl_val = UsbGetRetryCnt();
100063a0:	0007a500 	call	10007a50 <UsbGetRetryCnt>
100063a4:	e0bff90d 	sth	r2,-28(fp)

		goto USB_HOT_PLUG;
100063a8:	003eef06 	br	10005f68 <__alt_data_end+0xf8005f68>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
100063ac:	010400b4 	movhi	r4,4098
100063b0:	21207404 	addi	r4,r4,-32304
100063b4:	0007f800 	call	10007f80 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
100063b8:	0006c480 	call	10006c48 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100063bc:	00000306 	br	100063cc <main+0x494>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
100063c0:	0006c480 	call	10006c48 <UsbGetDeviceDesc1>
		usleep(10*1000);
100063c4:	0109c404 	movi	r4,10000
100063c8:	00154700 	call	10015470 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100063cc:	010000c4 	movi	r4,3
100063d0:	0004da40 	call	10004da4 <IO_read>
100063d4:	10bfffcc 	andi	r2,r2,65535
100063d8:	1080040c 	andi	r2,r2,16
100063dc:	103ff826 	beq	r2,zero,100063c0 <__alt_data_end+0xf80063c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100063e0:	00079e80 	call	100079e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100063e4:	01414184 	movi	r5,1286
100063e8:	01000084 	movi	r4,2
100063ec:	0004d340 	call	10004d34 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100063f0:	0009883a 	mov	r4,zero
100063f4:	0004da40 	call	10004da4 <IO_read>
100063f8:	10bfffcc 	andi	r2,r2,65535
100063fc:	100b883a 	mov	r5,r2
10006400:	010400b4 	movhi	r4,4098
10006404:	21208304 	addi	r4,r4,-32244
10006408:	0007e840 	call	10007e84 <printf>

	IO_write(HPI_ADDR,0x0508);
1000640c:	01414204 	movi	r5,1288
10006410:	01000084 	movi	r4,2
10006414:	0004d340 	call	10004d34 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006418:	0009883a 	mov	r4,zero
1000641c:	0004da40 	call	10004da4 <IO_read>
10006420:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10006424:	e0bff90b 	ldhu	r2,-28(fp)
10006428:	100b883a 	mov	r5,r2
1000642c:	010400b4 	movhi	r4,4098
10006430:	21208e04 	addi	r4,r4,-32200
10006434:	0007e840 	call	10007e84 <printf>
	while (usb_ctl_val != 0x03)
10006438:	00000206 	br	10006444 <main+0x50c>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000643c:	0007a500 	call	10007a50 <UsbGetRetryCnt>
10006440:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10006444:	e0bff90b 	ldhu	r2,-28(fp)
10006448:	108000d8 	cmpnei	r2,r2,3
1000644c:	103ffb1e 	bne	r2,zero,1000643c <__alt_data_end+0xf800643c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10006450:	010400b4 	movhi	r4,4098
10006454:	21209a04 	addi	r4,r4,-32152
10006458:	0007f800 	call	10007f80 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
1000645c:	0006d900 	call	10006d90 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006460:	00000306 	br	10006470 <main+0x538>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10006464:	0006d900 	call	10006d90 <UsbGetDeviceDesc2>
		usleep(10*1000);
10006468:	0109c404 	movi	r4,10000
1000646c:	00154700 	call	10015470 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006470:	010000c4 	movi	r4,3
10006474:	0004da40 	call	10004da4 <IO_read>
10006478:	10bfffcc 	andi	r2,r2,65535
1000647c:	1080040c 	andi	r2,r2,16
10006480:	103ff826 	beq	r2,zero,10006464 <__alt_data_end+0xf8006464>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10006484:	00079e80 	call	100079e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10006488:	01414184 	movi	r5,1286
1000648c:	01000084 	movi	r4,2
10006490:	0004d340 	call	10004d34 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10006494:	0009883a 	mov	r4,zero
10006498:	0004da40 	call	10004da4 <IO_read>
1000649c:	10bfffcc 	andi	r2,r2,65535
100064a0:	100b883a 	mov	r5,r2
100064a4:	010400b4 	movhi	r4,4098
100064a8:	21208304 	addi	r4,r4,-32244
100064ac:	0007e840 	call	10007e84 <printf>

	IO_write(HPI_ADDR,0x0508);
100064b0:	01414204 	movi	r5,1288
100064b4:	01000084 	movi	r4,2
100064b8:	0004d340 	call	10004d34 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100064bc:	0009883a 	mov	r4,zero
100064c0:	0004da40 	call	10004da4 <IO_read>
100064c4:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100064c8:	e0bff90b 	ldhu	r2,-28(fp)
100064cc:	100b883a 	mov	r5,r2
100064d0:	010400b4 	movhi	r4,4098
100064d4:	21208e04 	addi	r4,r4,-32200
100064d8:	0007e840 	call	10007e84 <printf>
	while (usb_ctl_val != 0x03)
100064dc:	00000206 	br	100064e8 <main+0x5b0>
	{
		usb_ctl_val = UsbGetRetryCnt();
100064e0:	0007a500 	call	10007a50 <UsbGetRetryCnt>
100064e4:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100064e8:	e0bff90b 	ldhu	r2,-28(fp)
100064ec:	108000d8 	cmpnei	r2,r2,3
100064f0:	103ffb1e 	bne	r2,zero,100064e0 <__alt_data_end+0xf80064e0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
100064f4:	010400b4 	movhi	r4,4098
100064f8:	2120ae04 	addi	r4,r4,-32072
100064fc:	0007f800 	call	10007f80 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10006500:	0006f680 	call	10006f68 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006504:	00000306 	br	10006514 <main+0x5dc>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10006508:	0006f680 	call	10006f68 <UsbGetConfigDesc1>
		usleep(10*1000);
1000650c:	0109c404 	movi	r4,10000
10006510:	00154700 	call	10015470 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006514:	010000c4 	movi	r4,3
10006518:	0004da40 	call	10004da4 <IO_read>
1000651c:	10bfffcc 	andi	r2,r2,65535
10006520:	1080040c 	andi	r2,r2,16
10006524:	103ff826 	beq	r2,zero,10006508 <__alt_data_end+0xf8006508>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10006528:	00079e80 	call	100079e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000652c:	01414184 	movi	r5,1286
10006530:	01000084 	movi	r4,2
10006534:	0004d340 	call	10004d34 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10006538:	0009883a 	mov	r4,zero
1000653c:	0004da40 	call	10004da4 <IO_read>
10006540:	10bfffcc 	andi	r2,r2,65535
10006544:	100b883a 	mov	r5,r2
10006548:	010400b4 	movhi	r4,4098
1000654c:	2120c004 	addi	r4,r4,-32000
10006550:	0007e840 	call	10007e84 <printf>

	IO_write(HPI_ADDR,0x0508);
10006554:	01414204 	movi	r5,1288
10006558:	01000084 	movi	r4,2
1000655c:	0004d340 	call	10004d34 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006560:	0009883a 	mov	r4,zero
10006564:	0004da40 	call	10004da4 <IO_read>
10006568:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
1000656c:	e0bff90b 	ldhu	r2,-28(fp)
10006570:	100b883a 	mov	r5,r2
10006574:	010400b4 	movhi	r4,4098
10006578:	2120cb04 	addi	r4,r4,-31956
1000657c:	0007e840 	call	10007e84 <printf>
	while (usb_ctl_val != 0x03)
10006580:	00000206 	br	1000658c <main+0x654>
	{
		usb_ctl_val = UsbGetRetryCnt();
10006584:	0007a500 	call	10007a50 <UsbGetRetryCnt>
10006588:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000658c:	e0bff90b 	ldhu	r2,-28(fp)
10006590:	108000d8 	cmpnei	r2,r2,3
10006594:	103ffb1e 	bne	r2,zero,10006584 <__alt_data_end+0xf8006584>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10006598:	010400b4 	movhi	r4,4098
1000659c:	2120d704 	addi	r4,r4,-31908
100065a0:	0007f800 	call	10007f80 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
100065a4:	00070f80 	call	100070f8 <UsbGetConfigDesc2>

	usleep(100*1000);
100065a8:	010000b4 	movhi	r4,2
100065ac:	2121a804 	addi	r4,r4,-31072
100065b0:	00154700 	call	10015470 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100065b4:	00000306 	br	100065c4 <main+0x68c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
100065b8:	00070f80 	call	100070f8 <UsbGetConfigDesc2>
		usleep(10*1000);
100065bc:	0109c404 	movi	r4,10000
100065c0:	00154700 	call	10015470 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100065c4:	010000c4 	movi	r4,3
100065c8:	0004da40 	call	10004da4 <IO_read>
100065cc:	10bfffcc 	andi	r2,r2,65535
100065d0:	1080040c 	andi	r2,r2,16
100065d4:	103ff826 	beq	r2,zero,100065b8 <__alt_data_end+0xf80065b8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100065d8:	00079e80 	call	100079e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100065dc:	01414184 	movi	r5,1286
100065e0:	01000084 	movi	r4,2
100065e4:	0004d340 	call	10004d34 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
100065e8:	0009883a 	mov	r4,zero
100065ec:	0004da40 	call	10004da4 <IO_read>
100065f0:	10bfffcc 	andi	r2,r2,65535
100065f4:	100b883a 	mov	r5,r2
100065f8:	010400b4 	movhi	r4,4098
100065fc:	2120ea04 	addi	r4,r4,-31832
10006600:	0007e840 	call	10007e84 <printf>

	IO_write(HPI_ADDR,0x0508);
10006604:	01414204 	movi	r5,1288
10006608:	01000084 	movi	r4,2
1000660c:	0004d340 	call	10004d34 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006610:	0009883a 	mov	r4,zero
10006614:	0004da40 	call	10004da4 <IO_read>
10006618:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
1000661c:	e0bff90b 	ldhu	r2,-28(fp)
10006620:	100b883a 	mov	r5,r2
10006624:	010400b4 	movhi	r4,4098
10006628:	2120f504 	addi	r4,r4,-31788
1000662c:	0007e840 	call	10007e84 <printf>
	while (usb_ctl_val != 0x03)
10006630:	00000206 	br	1000663c <main+0x704>
	{
		usb_ctl_val = UsbGetRetryCnt();
10006634:	0007a500 	call	10007a50 <UsbGetRetryCnt>
10006638:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000663c:	e0bff90b 	ldhu	r2,-28(fp)
10006640:	108000d8 	cmpnei	r2,r2,3
10006644:	103ffb1e 	bne	r2,zero,10006634 <__alt_data_end+0xf8006634>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10006648:	010400b4 	movhi	r4,4098
1000664c:	21210104 	addi	r4,r4,-31740
10006650:	0007f800 	call	10007f80 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10006654:	01415b04 	movi	r5,1388
10006658:	01000084 	movi	r4,2
1000665c:	0004d340 	call	10004d34 <IO_write>
	code = IO_read(HPI_DATA);
10006660:	0009883a 	mov	r4,zero
10006664:	0004da40 	call	10004da4 <IO_read>
10006668:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
1000666c:	e0bffe8b 	ldhu	r2,-6(fp)
10006670:	108000cc 	andi	r2,r2,3
10006674:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
10006678:	e0bffe8b 	ldhu	r2,-6(fp)
1000667c:	100b883a 	mov	r5,r2
10006680:	010400b4 	movhi	r4,4098
10006684:	21211404 	addi	r4,r4,-31664
10006688:	0007e840 	call	10007e84 <printf>

	if (code == 0x01)
1000668c:	e0bffe8b 	ldhu	r2,-6(fp)
10006690:	10800058 	cmpnei	r2,r2,1
10006694:	1000041e 	bne	r2,zero,100066a8 <main+0x770>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10006698:	010400b4 	movhi	r4,4098
1000669c:	21211704 	addi	r4,r4,-31652
100066a0:	0007f800 	call	10007f80 <puts>
100066a4:	00000306 	br	100066b4 <main+0x77c>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
100066a8:	010400b4 	movhi	r4,4098
100066ac:	21212604 	addi	r4,r4,-31592
100066b0:	0007f800 	call	10007f80 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
100066b4:	01415d84 	movi	r5,1398
100066b8:	01000084 	movi	r4,2
100066bc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x073F);
100066c0:	0141cfc4 	movi	r5,1855
100066c4:	0009883a 	mov	r4,zero
100066c8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x8105);
100066cc:	01604154 	movui	r5,33029
100066d0:	0009883a 	mov	r4,zero
100066d4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0003);
100066d8:	014000c4 	movi	r5,3
100066dc:	0009883a 	mov	r4,zero
100066e0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);
100066e4:	01400204 	movi	r5,8
100066e8:	0009883a 	mov	r4,zero
100066ec:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
100066f0:	016b0294 	movui	r5,44042
100066f4:	0009883a 	mov	r4,zero
100066f8:	0004d340 	call	10004d34 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
100066fc:	01415d84 	movi	r5,1398
10006700:	01006c04 	movi	r4,432
10006704:	00069f80 	call	100069f8 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10006708:	01415f04 	movi	r5,1404
1000670c:	01000084 	movi	r4,2
10006710:	0004d340 	call	10004d34 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10006714:	0009883a 	mov	r4,zero
10006718:	0004da40 	call	10004da4 <IO_read>
1000671c:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10006720:	e0bfff03 	ldbu	r2,-4(fp)
10006724:	100b883a 	mov	r5,r2
10006728:	010400b4 	movhi	r4,4098
1000672c:	21212f04 	addi	r4,r4,-31556
10006730:	0007e840 	call	10007e84 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10006734:	00073600 	call	10007360 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006738:	00000306 	br	10006748 <main+0x810>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
1000673c:	00073600 	call	10007360 <UsbSetConfig>
		usleep(10*1000);
10006740:	0109c404 	movi	r4,10000
10006744:	00154700 	call	10015470 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006748:	010000c4 	movi	r4,3
1000674c:	0004da40 	call	10004da4 <IO_read>
10006750:	10bfffcc 	andi	r2,r2,65535
10006754:	1080040c 	andi	r2,r2,16
10006758:	103ff826 	beq	r2,zero,1000673c <__alt_data_end+0xf800673c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000675c:	00079e80 	call	100079e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10006760:	01414184 	movi	r5,1286
10006764:	01000084 	movi	r4,2
10006768:	0004d340 	call	10004d34 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000676c:	0009883a 	mov	r4,zero
10006770:	0004da40 	call	10004da4 <IO_read>
10006774:	10bfffcc 	andi	r2,r2,65535
10006778:	100b883a 	mov	r5,r2
1000677c:	010400b4 	movhi	r4,4098
10006780:	21213904 	addi	r4,r4,-31516
10006784:	0007e840 	call	10007e84 <printf>

	IO_write(HPI_ADDR,0x0508);
10006788:	01414204 	movi	r5,1288
1000678c:	01000084 	movi	r4,2
10006790:	0004d340 	call	10004d34 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006794:	0009883a 	mov	r4,zero
10006798:	0004da40 	call	10004da4 <IO_read>
1000679c:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
100067a0:	e0bff90b 	ldhu	r2,-28(fp)
100067a4:	100b883a 	mov	r5,r2
100067a8:	010400b4 	movhi	r4,4098
100067ac:	21214404 	addi	r4,r4,-31472
100067b0:	0007e840 	call	10007e84 <printf>
	while (usb_ctl_val != 0x03)
100067b4:	00000206 	br	100067c0 <main+0x888>
	{
		usb_ctl_val = UsbGetRetryCnt();
100067b8:	0007a500 	call	10007a50 <UsbGetRetryCnt>
100067bc:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100067c0:	e0bff90b 	ldhu	r2,-28(fp)
100067c4:	108000d8 	cmpnei	r2,r2,3
100067c8:	103ffb1e 	bne	r2,zero,100067b8 <__alt_data_end+0xf80067b8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
100067cc:	010400b4 	movhi	r4,4098
100067d0:	21215004 	addi	r4,r4,-31424
100067d4:	0007f800 	call	10007f80 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
100067d8:	00074600 	call	10007460 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100067dc:	00000306 	br	100067ec <main+0x8b4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
100067e0:	00074600 	call	10007460 <UsbClassRequest>
		usleep(10*1000);
100067e4:	0109c404 	movi	r4,10000
100067e8:	00154700 	call	10015470 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100067ec:	010000c4 	movi	r4,3
100067f0:	0004da40 	call	10004da4 <IO_read>
100067f4:	10bfffcc 	andi	r2,r2,65535
100067f8:	1080040c 	andi	r2,r2,16
100067fc:	103ff826 	beq	r2,zero,100067e0 <__alt_data_end+0xf80067e0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10006800:	00079e80 	call	100079e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10006804:	01414184 	movi	r5,1286
10006808:	01000084 	movi	r4,2
1000680c:	0004d340 	call	10004d34 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10006810:	0009883a 	mov	r4,zero
10006814:	0004da40 	call	10004da4 <IO_read>
10006818:	10bfffcc 	andi	r2,r2,65535
1000681c:	100b883a 	mov	r5,r2
10006820:	010400b4 	movhi	r4,4098
10006824:	21216204 	addi	r4,r4,-31352
10006828:	0007e840 	call	10007e84 <printf>

	IO_write(HPI_ADDR,0x0508);
1000682c:	01414204 	movi	r5,1288
10006830:	01000084 	movi	r4,2
10006834:	0004d340 	call	10004d34 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006838:	0009883a 	mov	r4,zero
1000683c:	0004da40 	call	10004da4 <IO_read>
10006840:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10006844:	e0bff90b 	ldhu	r2,-28(fp)
10006848:	100b883a 	mov	r5,r2
1000684c:	010400b4 	movhi	r4,4098
10006850:	21216d04 	addi	r4,r4,-31308
10006854:	0007e840 	call	10007e84 <printf>
	while (usb_ctl_val != 0x03)
10006858:	00000206 	br	10006864 <main+0x92c>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000685c:	0007a500 	call	10007a50 <UsbGetRetryCnt>
10006860:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10006864:	e0bff90b 	ldhu	r2,-28(fp)
10006868:	108000d8 	cmpnei	r2,r2,3
1000686c:	103ffb1e 	bne	r2,zero,1000685c <__alt_data_end+0xf800685c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10006870:	010400b4 	movhi	r4,4098
10006874:	21217904 	addi	r4,r4,-31260
10006878:	0007f800 	call	10007f80 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
1000687c:	00075600 	call	10007560 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006880:	00000306 	br	10006890 <main+0x958>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10006884:	00075600 	call	10007560 <UsbGetHidDesc>
		usleep(10*1000);
10006888:	0109c404 	movi	r4,10000
1000688c:	00154700 	call	10015470 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006890:	010000c4 	movi	r4,3
10006894:	0004da40 	call	10004da4 <IO_read>
10006898:	10bfffcc 	andi	r2,r2,65535
1000689c:	1080040c 	andi	r2,r2,16
100068a0:	103ff826 	beq	r2,zero,10006884 <__alt_data_end+0xf8006884>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100068a4:	00079e80 	call	100079e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100068a8:	01414184 	movi	r5,1286
100068ac:	01000084 	movi	r4,2
100068b0:	0004d340 	call	10004d34 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
100068b4:	0009883a 	mov	r4,zero
100068b8:	0004da40 	call	10004da4 <IO_read>
100068bc:	10bfffcc 	andi	r2,r2,65535
100068c0:	100b883a 	mov	r5,r2
100068c4:	010400b4 	movhi	r4,4098
100068c8:	21216204 	addi	r4,r4,-31352
100068cc:	0007e840 	call	10007e84 <printf>

	IO_write(HPI_ADDR,0x0508);
100068d0:	01414204 	movi	r5,1288
100068d4:	01000084 	movi	r4,2
100068d8:	0004d340 	call	10004d34 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100068dc:	0009883a 	mov	r4,zero
100068e0:	0004da40 	call	10004da4 <IO_read>
100068e4:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
100068e8:	e0bff90b 	ldhu	r2,-28(fp)
100068ec:	100b883a 	mov	r5,r2
100068f0:	010400b4 	movhi	r4,4098
100068f4:	21216d04 	addi	r4,r4,-31308
100068f8:	0007e840 	call	10007e84 <printf>
	while (usb_ctl_val != 0x03)
100068fc:	00000206 	br	10006908 <main+0x9d0>
	{
		usb_ctl_val = UsbGetRetryCnt();
10006900:	0007a500 	call	10007a50 <UsbGetRetryCnt>
10006904:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10006908:	e0bff90b 	ldhu	r2,-28(fp)
1000690c:	108000d8 	cmpnei	r2,r2,3
10006910:	103ffb1e 	bne	r2,zero,10006900 <__alt_data_end+0xf8006900>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10006914:	010400b4 	movhi	r4,4098
10006918:	21218b04 	addi	r4,r4,-31188
1000691c:	0007f800 	call	10007f80 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10006920:	00076a80 	call	100076a8 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006924:	00000306 	br	10006934 <main+0x9fc>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10006928:	00076a80 	call	100076a8 <UsbGetReportDesc>
		usleep(10*1000);
1000692c:	0109c404 	movi	r4,10000
10006930:	00154700 	call	10015470 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006934:	010000c4 	movi	r4,3
10006938:	0004da40 	call	10004da4 <IO_read>
1000693c:	10bfffcc 	andi	r2,r2,65535
10006940:	1080040c 	andi	r2,r2,16
10006944:	103ff826 	beq	r2,zero,10006928 <__alt_data_end+0xf8006928>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10006948:	00079e80 	call	100079e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000694c:	01414184 	movi	r5,1286
10006950:	01000084 	movi	r4,2
10006954:	0004d340 	call	10004d34 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10006958:	0009883a 	mov	r4,zero
1000695c:	0004da40 	call	10004da4 <IO_read>
10006960:	10bfffcc 	andi	r2,r2,65535
10006964:	100b883a 	mov	r5,r2
10006968:	010400b4 	movhi	r4,4098
1000696c:	21219f04 	addi	r4,r4,-31108
10006970:	0007e840 	call	10007e84 <printf>

	IO_write(HPI_ADDR,0x0508);
10006974:	01414204 	movi	r5,1288
10006978:	01000084 	movi	r4,2
1000697c:	0004d340 	call	10004d34 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006980:	0009883a 	mov	r4,zero
10006984:	0004da40 	call	10004da4 <IO_read>
10006988:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
1000698c:	e0bff90b 	ldhu	r2,-28(fp)
10006990:	100b883a 	mov	r5,r2
10006994:	010400b4 	movhi	r4,4098
10006998:	2121ab04 	addi	r4,r4,-31060
1000699c:	0007e840 	call	10007e84 <printf>
	while (usb_ctl_val != 0x03)
100069a0:	00000206 	br	100069ac <main+0xa74>
	{
		usb_ctl_val = UsbGetRetryCnt();
100069a4:	0007a500 	call	10007a50 <UsbGetRetryCnt>
100069a8:	e0bff90d 	sth	r2,-28(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100069ac:	e0bff90b 	ldhu	r2,-28(fp)
100069b0:	108000d8 	cmpnei	r2,r2,3
100069b4:	103ffb1e 	bne	r2,zero,100069a4 <__alt_data_end+0xf80069a4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
100069b8:	010400b4 	movhi	r4,4098
100069bc:	2121b704 	addi	r4,r4,-31012
100069c0:	0007f800 	call	10007f80 <puts>


	usleep(10000);
100069c4:	0109c404 	movi	r4,10000
100069c8:	00154700 	call	10015470 <usleep>
	

	// Start main game loop
	game_main(data_size, usb_ctl_val);
100069cc:	e0bfff03 	ldbu	r2,-4(fp)
100069d0:	e0fff90b 	ldhu	r3,-28(fp)
100069d4:	180b883a 	mov	r5,r3
100069d8:	1009883a 	mov	r4,r2
100069dc:	00050f40 	call	100050f4 <game_main>

	return 0;
100069e0:	0005883a 	mov	r2,zero
}
100069e4:	e037883a 	mov	sp,fp
100069e8:	dfc00117 	ldw	ra,4(sp)
100069ec:	df000017 	ldw	fp,0(sp)
100069f0:	dec00204 	addi	sp,sp,8
100069f4:	f800283a 	ret

100069f8 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
100069f8:	defffc04 	addi	sp,sp,-16
100069fc:	dfc00315 	stw	ra,12(sp)
10006a00:	df000215 	stw	fp,8(sp)
10006a04:	df000204 	addi	fp,sp,8
10006a08:	2007883a 	mov	r3,r4
10006a0c:	2805883a 	mov	r2,r5
10006a10:	e0fffe0d 	sth	r3,-8(fp)
10006a14:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10006a18:	e0bffe0b 	ldhu	r2,-8(fp)
10006a1c:	100b883a 	mov	r5,r2
10006a20:	01000084 	movi	r4,2
10006a24:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA, Data);
10006a28:	e0bfff0b 	ldhu	r2,-4(fp)
10006a2c:	100b883a 	mov	r5,r2
10006a30:	0009883a 	mov	r4,zero
10006a34:	0004d340 	call	10004d34 <IO_write>
}
10006a38:	0001883a 	nop
10006a3c:	e037883a 	mov	sp,fp
10006a40:	dfc00117 	ldw	ra,4(sp)
10006a44:	df000017 	ldw	fp,0(sp)
10006a48:	dec00204 	addi	sp,sp,8
10006a4c:	f800283a 	ret

10006a50 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10006a50:	defffd04 	addi	sp,sp,-12
10006a54:	dfc00215 	stw	ra,8(sp)
10006a58:	df000115 	stw	fp,4(sp)
10006a5c:	df000104 	addi	fp,sp,4
10006a60:	2005883a 	mov	r2,r4
10006a64:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10006a68:	e0bfff0b 	ldhu	r2,-4(fp)
10006a6c:	100b883a 	mov	r5,r2
10006a70:	01000084 	movi	r4,2
10006a74:	0004d340 	call	10004d34 <IO_write>
	return IO_read(HPI_DATA);
10006a78:	0009883a 	mov	r4,zero
10006a7c:	0004da40 	call	10004da4 <IO_read>
}
10006a80:	e037883a 	mov	sp,fp
10006a84:	dfc00117 	ldw	ra,4(sp)
10006a88:	df000017 	ldw	fp,0(sp)
10006a8c:	dec00204 	addi	sp,sp,8
10006a90:	f800283a 	ret

10006a94 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10006a94:	defffe04 	addi	sp,sp,-8
10006a98:	dfc00115 	stw	ra,4(sp)
10006a9c:	df000015 	stw	fp,0(sp)
10006aa0:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10006aa4:	017e9414 	movui	r5,64080
10006aa8:	01000044 	movi	r4,1
10006aac:	0004d340 	call	10004d34 <IO_write>
	usleep(100000);
10006ab0:	010000b4 	movhi	r4,2
10006ab4:	2121a804 	addi	r4,r4,-31072
10006ab8:	00154700 	call	10015470 <usleep>
	printf("[USB INIT]:reset finished!\n");
10006abc:	010400b4 	movhi	r4,4098
10006ac0:	2121cb04 	addi	r4,r4,-30932
10006ac4:	0007f800 	call	10007f80 <puts>

	usleep(500000);
10006ac8:	01000234 	movhi	r4,8
10006acc:	21284804 	addi	r4,r4,-24288
10006ad0:	00154700 	call	10015470 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10006ad4:	010400b4 	movhi	r4,4098
10006ad8:	2121d204 	addi	r4,r4,-30904
10006adc:	0007f800 	call	10007f80 <puts>
	IO_read(HPI_MAILBOX);
10006ae0:	01000044 	movi	r4,1
10006ae4:	0004da40 	call	10004da4 <IO_read>
	IO_read(HPI_STATUS);
10006ae8:	010000c4 	movi	r4,3
10006aec:	0004da40 	call	10004da4 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10006af0:	01005104 	movi	r4,324
10006af4:	0006a500 	call	10006a50 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10006af8:	000b883a 	mov	r5,zero
10006afc:	01005104 	movi	r4,324
10006b00:	00069f80 	call	100069f8 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10006b04:	01005204 	movi	r4,328
10006b08:	0006a500 	call	10006a50 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10006b0c:	000b883a 	mov	r5,zero
10006b10:	01005204 	movi	r4,328
10006b14:	00069f80 	call	100069f8 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10006b18:	017fffd4 	movui	r5,65535
10006b1c:	01302414 	movui	r4,49296
10006b20:	00069f80 	call	100069f8 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10006b24:	017fffd4 	movui	r5,65535
10006b28:	01302c14 	movui	r4,49328
10006b2c:	00069f80 	call	100069f8 <UsbWrite>
}
10006b30:	0001883a 	nop
10006b34:	e037883a 	mov	sp,fp
10006b38:	dfc00117 	ldw	ra,4(sp)
10006b3c:	df000017 	ldw	fp,0(sp)
10006b40:	dec00204 	addi	sp,sp,8
10006b44:	f800283a 	ret

10006b48 <UsbSetAddress>:


void UsbSetAddress()
{
10006b48:	defffe04 	addi	sp,sp,-8
10006b4c:	dfc00115 	stw	ra,4(sp)
10006b50:	df000015 	stw	fp,0(sp)
10006b54:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10006b58:	01414004 	movi	r5,1280
10006b5c:	01000084 	movi	r4,2
10006b60:	0004d340 	call	10004d34 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10006b64:	01414304 	movi	r5,1292
10006b68:	0009883a 	mov	r4,zero
10006b6c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006b70:	01400204 	movi	r5,8
10006b74:	0009883a 	mov	r4,zero
10006b78:	0004d340 	call	10004d34 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10006b7c:	01403404 	movi	r5,208
10006b80:	0009883a 	mov	r4,zero
10006b84:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);
10006b88:	01400044 	movi	r5,1
10006b8c:	0009883a 	mov	r4,zero
10006b90:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006b94:	014004c4 	movi	r5,19
10006b98:	0009883a 	mov	r4,zero
10006b9c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0514);
10006ba0:	01414504 	movi	r5,1300
10006ba4:	0009883a 	mov	r4,zero
10006ba8:	0004d340 	call	10004d34 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10006bac:	01414004 	movi	r5,1280
10006bb0:	0009883a 	mov	r4,zero
10006bb4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0002);
10006bb8:	01400084 	movi	r5,2
10006bbc:	0009883a 	mov	r4,zero
10006bc0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006bc4:	000b883a 	mov	r5,zero
10006bc8:	0009883a 	mov	r4,zero
10006bcc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006bd0:	000b883a 	mov	r5,zero
10006bd4:	0009883a 	mov	r4,zero
10006bd8:	0004d340 	call	10004d34 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10006bdc:	000b883a 	mov	r5,zero
10006be0:	0009883a 	mov	r4,zero
10006be4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10006be8:	000b883a 	mov	r5,zero
10006bec:	0009883a 	mov	r4,zero
10006bf0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10006bf4:	01402404 	movi	r5,144
10006bf8:	0009883a 	mov	r4,zero
10006bfc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);
10006c00:	01401044 	movi	r5,65
10006c04:	0009883a 	mov	r4,zero
10006c08:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006c0c:	014004c4 	movi	r5,19
10006c10:	0009883a 	mov	r4,zero
10006c14:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006c18:	000b883a 	mov	r5,zero
10006c1c:	0009883a 	mov	r4,zero
10006c20:	0004d340 	call	10004d34 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006c24:	01414004 	movi	r5,1280
10006c28:	01006c04 	movi	r4,432
10006c2c:	00069f80 	call	100069f8 <UsbWrite>
}
10006c30:	0001883a 	nop
10006c34:	e037883a 	mov	sp,fp
10006c38:	dfc00117 	ldw	ra,4(sp)
10006c3c:	df000017 	ldw	fp,0(sp)
10006c40:	dec00204 	addi	sp,sp,8
10006c44:	f800283a 	ret

10006c48 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10006c48:	defffe04 	addi	sp,sp,-8
10006c4c:	dfc00115 	stw	ra,4(sp)
10006c50:	df000015 	stw	fp,0(sp)
10006c54:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10006c58:	01414004 	movi	r5,1280
10006c5c:	01000084 	movi	r4,2
10006c60:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x050C);
10006c64:	01414304 	movi	r5,1292
10006c68:	0009883a 	mov	r4,zero
10006c6c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006c70:	01400204 	movi	r5,8
10006c74:	0009883a 	mov	r4,zero
10006c78:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10006c7c:	0140b404 	movi	r5,720
10006c80:	0009883a 	mov	r4,zero
10006c84:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);
10006c88:	01400044 	movi	r5,1
10006c8c:	0009883a 	mov	r4,zero
10006c90:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006c94:	014004c4 	movi	r5,19
10006c98:	0009883a 	mov	r4,zero
10006c9c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0514);
10006ca0:	01414504 	movi	r5,1300
10006ca4:	0009883a 	mov	r4,zero
10006ca8:	0004d340 	call	10004d34 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10006cac:	0141a004 	movi	r5,1664
10006cb0:	0009883a 	mov	r4,zero
10006cb4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10006cb8:	01404004 	movi	r5,256
10006cbc:	0009883a 	mov	r4,zero
10006cc0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006cc4:	000b883a 	mov	r5,zero
10006cc8:	0009883a 	mov	r4,zero
10006ccc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);
10006cd0:	01400204 	movi	r5,8
10006cd4:	0009883a 	mov	r4,zero
10006cd8:	0004d340 	call	10004d34 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10006cdc:	01414b04 	movi	r5,1324
10006ce0:	0009883a 	mov	r4,zero
10006ce4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10006ce8:	01400204 	movi	r5,8
10006cec:	0009883a 	mov	r4,zero
10006cf0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10006cf4:	0140a404 	movi	r5,656
10006cf8:	0009883a 	mov	r4,zero
10006cfc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);
10006d00:	01401044 	movi	r5,65
10006d04:	0009883a 	mov	r4,zero
10006d08:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006d0c:	014004c4 	movi	r5,19
10006d10:	0009883a 	mov	r4,zero
10006d14:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0520);
10006d18:	01414804 	movi	r5,1312
10006d1c:	0009883a 	mov	r4,zero
10006d20:	0004d340 	call	10004d34 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10006d24:	000b883a 	mov	r5,zero
10006d28:	0009883a 	mov	r4,zero
10006d2c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10006d30:	000b883a 	mov	r5,zero
10006d34:	0009883a 	mov	r4,zero
10006d38:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10006d3c:	01408404 	movi	r5,528
10006d40:	0009883a 	mov	r4,zero
10006d44:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);
10006d48:	01401044 	movi	r5,65
10006d4c:	0009883a 	mov	r4,zero
10006d50:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006d54:	014004c4 	movi	r5,19
10006d58:	0009883a 	mov	r4,zero
10006d5c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006d60:	000b883a 	mov	r5,zero
10006d64:	0009883a 	mov	r4,zero
10006d68:	0004d340 	call	10004d34 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006d6c:	01414004 	movi	r5,1280
10006d70:	01006c04 	movi	r4,432
10006d74:	00069f80 	call	100069f8 <UsbWrite>
}
10006d78:	0001883a 	nop
10006d7c:	e037883a 	mov	sp,fp
10006d80:	dfc00117 	ldw	ra,4(sp)
10006d84:	df000017 	ldw	fp,0(sp)
10006d88:	dec00204 	addi	sp,sp,8
10006d8c:	f800283a 	ret

10006d90 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10006d90:	defffe04 	addi	sp,sp,-8
10006d94:	dfc00115 	stw	ra,4(sp)
10006d98:	df000015 	stw	fp,0(sp)
10006d9c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10006da0:	01414004 	movi	r5,1280
10006da4:	01000084 	movi	r4,2
10006da8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x050C);
10006dac:	01414304 	movi	r5,1292
10006db0:	0009883a 	mov	r4,zero
10006db4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006db8:	01400204 	movi	r5,8
10006dbc:	0009883a 	mov	r4,zero
10006dc0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10006dc4:	0140b404 	movi	r5,720
10006dc8:	0009883a 	mov	r4,zero
10006dcc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);
10006dd0:	01400044 	movi	r5,1
10006dd4:	0009883a 	mov	r4,zero
10006dd8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006ddc:	014004c4 	movi	r5,19
10006de0:	0009883a 	mov	r4,zero
10006de4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0514);
10006de8:	01414504 	movi	r5,1300
10006dec:	0009883a 	mov	r4,zero
10006df0:	0004d340 	call	10004d34 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10006df4:	0141a004 	movi	r5,1664
10006df8:	0009883a 	mov	r4,zero
10006dfc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10006e00:	01404004 	movi	r5,256
10006e04:	0009883a 	mov	r4,zero
10006e08:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10006e0c:	000b883a 	mov	r5,zero
10006e10:	0009883a 	mov	r4,zero
10006e14:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10006e18:	01400484 	movi	r5,18
10006e1c:	0009883a 	mov	r4,zero
10006e20:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10006e24:	01415104 	movi	r5,1348
10006e28:	0009883a 	mov	r4,zero
10006e2c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10006e30:	01400204 	movi	r5,8
10006e34:	0009883a 	mov	r4,zero
10006e38:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10006e3c:	0140a404 	movi	r5,656
10006e40:	0009883a 	mov	r4,zero
10006e44:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10006e48:	01401044 	movi	r5,65
10006e4c:	0009883a 	mov	r4,zero
10006e50:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10006e54:	014004c4 	movi	r5,19
10006e58:	0009883a 	mov	r4,zero
10006e5c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10006e60:	01414804 	movi	r5,1312
10006e64:	0009883a 	mov	r4,zero
10006e68:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10006e6c:	01415304 	movi	r5,1356
10006e70:	0009883a 	mov	r4,zero
10006e74:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10006e78:	01400204 	movi	r5,8
10006e7c:	0009883a 	mov	r4,zero
10006e80:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10006e84:	0140a404 	movi	r5,656
10006e88:	0009883a 	mov	r4,zero
10006e8c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10006e90:	01400044 	movi	r5,1
10006e94:	0009883a 	mov	r4,zero
10006e98:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10006e9c:	014004c4 	movi	r5,19
10006ea0:	0009883a 	mov	r4,zero
10006ea4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10006ea8:	01414b04 	movi	r5,1324
10006eac:	0009883a 	mov	r4,zero
10006eb0:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10006eb4:	01415504 	movi	r5,1364
10006eb8:	0009883a 	mov	r4,zero
10006ebc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10006ec0:	01400084 	movi	r5,2
10006ec4:	0009883a 	mov	r4,zero
10006ec8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10006ecc:	0140a404 	movi	r5,656
10006ed0:	0009883a 	mov	r4,zero
10006ed4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10006ed8:	01401044 	movi	r5,65
10006edc:	0009883a 	mov	r4,zero
10006ee0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10006ee4:	014004c4 	movi	r5,19
10006ee8:	0009883a 	mov	r4,zero
10006eec:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10006ef0:	01414e04 	movi	r5,1336
10006ef4:	0009883a 	mov	r4,zero
10006ef8:	0004d340 	call	10004d34 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10006efc:	000b883a 	mov	r5,zero
10006f00:	0009883a 	mov	r4,zero
10006f04:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10006f08:	000b883a 	mov	r5,zero
10006f0c:	0009883a 	mov	r4,zero
10006f10:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10006f14:	01408404 	movi	r5,528
10006f18:	0009883a 	mov	r4,zero
10006f1c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10006f20:	01401044 	movi	r5,65
10006f24:	0009883a 	mov	r4,zero
10006f28:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10006f2c:	014004c4 	movi	r5,19
10006f30:	0009883a 	mov	r4,zero
10006f34:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10006f38:	000b883a 	mov	r5,zero
10006f3c:	0009883a 	mov	r4,zero
10006f40:	0004d340 	call	10004d34 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006f44:	01414004 	movi	r5,1280
10006f48:	01006c04 	movi	r4,432
10006f4c:	00069f80 	call	100069f8 <UsbWrite>
}
10006f50:	0001883a 	nop
10006f54:	e037883a 	mov	sp,fp
10006f58:	dfc00117 	ldw	ra,4(sp)
10006f5c:	df000017 	ldw	fp,0(sp)
10006f60:	dec00204 	addi	sp,sp,8
10006f64:	f800283a 	ret

10006f68 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10006f68:	defffe04 	addi	sp,sp,-8
10006f6c:	dfc00115 	stw	ra,4(sp)
10006f70:	df000015 	stw	fp,0(sp)
10006f74:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10006f78:	01414004 	movi	r5,1280
10006f7c:	01000084 	movi	r4,2
10006f80:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x050C);
10006f84:	01414304 	movi	r5,1292
10006f88:	0009883a 	mov	r4,zero
10006f8c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006f90:	01400204 	movi	r5,8
10006f94:	0009883a 	mov	r4,zero
10006f98:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10006f9c:	0140b404 	movi	r5,720
10006fa0:	0009883a 	mov	r4,zero
10006fa4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);
10006fa8:	01400044 	movi	r5,1
10006fac:	0009883a 	mov	r4,zero
10006fb0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006fb4:	014004c4 	movi	r5,19
10006fb8:	0009883a 	mov	r4,zero
10006fbc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0514);
10006fc0:	01414504 	movi	r5,1300
10006fc4:	0009883a 	mov	r4,zero
10006fc8:	0004d340 	call	10004d34 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10006fcc:	0141a004 	movi	r5,1664
10006fd0:	0009883a 	mov	r4,zero
10006fd4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10006fd8:	01408004 	movi	r5,512
10006fdc:	0009883a 	mov	r4,zero
10006fe0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10006fe4:	000b883a 	mov	r5,zero
10006fe8:	0009883a 	mov	r4,zero
10006fec:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10006ff0:	01400244 	movi	r5,9
10006ff4:	0009883a 	mov	r4,zero
10006ff8:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10006ffc:	01415104 	movi	r5,1348
10007000:	0009883a 	mov	r4,zero
10007004:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10007008:	01400204 	movi	r5,8
1000700c:	0009883a 	mov	r4,zero
10007010:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10007014:	0140a404 	movi	r5,656
10007018:	0009883a 	mov	r4,zero
1000701c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10007020:	01401044 	movi	r5,65
10007024:	0009883a 	mov	r4,zero
10007028:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000702c:	014004c4 	movi	r5,19
10007030:	0009883a 	mov	r4,zero
10007034:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10007038:	01414804 	movi	r5,1312
1000703c:	0009883a 	mov	r4,zero
10007040:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10007044:	01415304 	movi	r5,1356
10007048:	0009883a 	mov	r4,zero
1000704c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10007050:	01400044 	movi	r5,1
10007054:	0009883a 	mov	r4,zero
10007058:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
1000705c:	0140a404 	movi	r5,656
10007060:	0009883a 	mov	r4,zero
10007064:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10007068:	01400044 	movi	r5,1
1000706c:	0009883a 	mov	r4,zero
10007070:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10007074:	014004c4 	movi	r5,19
10007078:	0009883a 	mov	r4,zero
1000707c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10007080:	01414b04 	movi	r5,1324
10007084:	0009883a 	mov	r4,zero
10007088:	0004d340 	call	10004d34 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
1000708c:	000b883a 	mov	r5,zero
10007090:	0009883a 	mov	r4,zero
10007094:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10007098:	000b883a 	mov	r5,zero
1000709c:	0009883a 	mov	r4,zero
100070a0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100070a4:	01408404 	movi	r5,528
100070a8:	0009883a 	mov	r4,zero
100070ac:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100070b0:	01401044 	movi	r5,65
100070b4:	0009883a 	mov	r4,zero
100070b8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100070bc:	014004c4 	movi	r5,19
100070c0:	0009883a 	mov	r4,zero
100070c4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100070c8:	000b883a 	mov	r5,zero
100070cc:	0009883a 	mov	r4,zero
100070d0:	0004d340 	call	10004d34 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100070d4:	01414004 	movi	r5,1280
100070d8:	01006c04 	movi	r4,432
100070dc:	00069f80 	call	100069f8 <UsbWrite>
}
100070e0:	0001883a 	nop
100070e4:	e037883a 	mov	sp,fp
100070e8:	dfc00117 	ldw	ra,4(sp)
100070ec:	df000017 	ldw	fp,0(sp)
100070f0:	dec00204 	addi	sp,sp,8
100070f4:	f800283a 	ret

100070f8 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
100070f8:	defffe04 	addi	sp,sp,-8
100070fc:	dfc00115 	stw	ra,4(sp)
10007100:	df000015 	stw	fp,0(sp)
10007104:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10007108:	01414004 	movi	r5,1280
1000710c:	01000084 	movi	r4,2
10007110:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x050C);
10007114:	01414304 	movi	r5,1292
10007118:	0009883a 	mov	r4,zero
1000711c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10007120:	01400204 	movi	r5,8
10007124:	0009883a 	mov	r4,zero
10007128:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000712c:	0140b404 	movi	r5,720
10007130:	0009883a 	mov	r4,zero
10007134:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);
10007138:	01400044 	movi	r5,1
1000713c:	0009883a 	mov	r4,zero
10007140:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);
10007144:	014004c4 	movi	r5,19
10007148:	0009883a 	mov	r4,zero
1000714c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0514);
10007150:	01414504 	movi	r5,1300
10007154:	0009883a 	mov	r4,zero
10007158:	0004d340 	call	10004d34 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
1000715c:	0141a004 	movi	r5,1664
10007160:	0009883a 	mov	r4,zero
10007164:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10007168:	01408004 	movi	r5,512
1000716c:	0009883a 	mov	r4,zero
10007170:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10007174:	000b883a 	mov	r5,zero
10007178:	0009883a 	mov	r4,zero
1000717c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10007180:	01403fc4 	movi	r5,255
10007184:	0009883a 	mov	r4,zero
10007188:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
1000718c:	01415704 	movi	r5,1372
10007190:	0009883a 	mov	r4,zero
10007194:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10007198:	01400204 	movi	r5,8
1000719c:	0009883a 	mov	r4,zero
100071a0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100071a4:	0140a404 	movi	r5,656
100071a8:	0009883a 	mov	r4,zero
100071ac:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100071b0:	01401044 	movi	r5,65
100071b4:	0009883a 	mov	r4,zero
100071b8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100071bc:	014004c4 	movi	r5,19
100071c0:	0009883a 	mov	r4,zero
100071c4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100071c8:	01414804 	movi	r5,1312
100071cc:	0009883a 	mov	r4,zero
100071d0:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
100071d4:	01415904 	movi	r5,1380
100071d8:	0009883a 	mov	r4,zero
100071dc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100071e0:	01400204 	movi	r5,8
100071e4:	0009883a 	mov	r4,zero
100071e8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100071ec:	0140a404 	movi	r5,656
100071f0:	0009883a 	mov	r4,zero
100071f4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100071f8:	01400044 	movi	r5,1
100071fc:	0009883a 	mov	r4,zero
10007200:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10007204:	014004c4 	movi	r5,19
10007208:	0009883a 	mov	r4,zero
1000720c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10007210:	01414b04 	movi	r5,1324
10007214:	0009883a 	mov	r4,zero
10007218:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
1000721c:	01415b04 	movi	r5,1388
10007220:	0009883a 	mov	r4,zero
10007224:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10007228:	01400204 	movi	r5,8
1000722c:	0009883a 	mov	r4,zero
10007230:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10007234:	0140a404 	movi	r5,656
10007238:	0009883a 	mov	r4,zero
1000723c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10007240:	01401044 	movi	r5,65
10007244:	0009883a 	mov	r4,zero
10007248:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000724c:	014004c4 	movi	r5,19
10007250:	0009883a 	mov	r4,zero
10007254:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10007258:	01414e04 	movi	r5,1336
1000725c:	0009883a 	mov	r4,zero
10007260:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10007264:	01415d04 	movi	r5,1396
10007268:	0009883a 	mov	r4,zero
1000726c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10007270:	01400204 	movi	r5,8
10007274:	0009883a 	mov	r4,zero
10007278:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
1000727c:	0140a404 	movi	r5,656
10007280:	0009883a 	mov	r4,zero
10007284:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10007288:	01400044 	movi	r5,1
1000728c:	0009883a 	mov	r4,zero
10007290:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10007294:	014004c4 	movi	r5,19
10007298:	0009883a 	mov	r4,zero
1000729c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100072a0:	01415104 	movi	r5,1348
100072a4:	0009883a 	mov	r4,zero
100072a8:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
100072ac:	01415f04 	movi	r5,1404
100072b0:	0009883a 	mov	r4,zero
100072b4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
100072b8:	01400084 	movi	r5,2
100072bc:	0009883a 	mov	r4,zero
100072c0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100072c4:	0140a404 	movi	r5,656
100072c8:	0009883a 	mov	r4,zero
100072cc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100072d0:	01401044 	movi	r5,65
100072d4:	0009883a 	mov	r4,zero
100072d8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100072dc:	014004c4 	movi	r5,19
100072e0:	0009883a 	mov	r4,zero
100072e4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100072e8:	01415404 	movi	r5,1360
100072ec:	0009883a 	mov	r4,zero
100072f0:	0004d340 	call	10004d34 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
100072f4:	000b883a 	mov	r5,zero
100072f8:	0009883a 	mov	r4,zero
100072fc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10007300:	000b883a 	mov	r5,zero
10007304:	0009883a 	mov	r4,zero
10007308:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
1000730c:	01408404 	movi	r5,528
10007310:	0009883a 	mov	r4,zero
10007314:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10007318:	01401044 	movi	r5,65
1000731c:	0009883a 	mov	r4,zero
10007320:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10007324:	014004c4 	movi	r5,19
10007328:	0009883a 	mov	r4,zero
1000732c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10007330:	000b883a 	mov	r5,zero
10007334:	0009883a 	mov	r4,zero
10007338:	0004d340 	call	10004d34 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000733c:	01414004 	movi	r5,1280
10007340:	01006c04 	movi	r4,432
10007344:	00069f80 	call	100069f8 <UsbWrite>
}
10007348:	0001883a 	nop
1000734c:	e037883a 	mov	sp,fp
10007350:	dfc00117 	ldw	ra,4(sp)
10007354:	df000017 	ldw	fp,0(sp)
10007358:	dec00204 	addi	sp,sp,8
1000735c:	f800283a 	ret

10007360 <UsbSetConfig>:

void UsbSetConfig()
{
10007360:	defffe04 	addi	sp,sp,-8
10007364:	dfc00115 	stw	ra,4(sp)
10007368:	df000015 	stw	fp,0(sp)
1000736c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10007370:	01414004 	movi	r5,1280
10007374:	01000084 	movi	r4,2
10007378:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000737c:	01414304 	movi	r5,1292
10007380:	0009883a 	mov	r4,zero
10007384:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10007388:	01400204 	movi	r5,8
1000738c:	0009883a 	mov	r4,zero
10007390:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10007394:	0140b404 	movi	r5,720
10007398:	0009883a 	mov	r4,zero
1000739c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);
100073a0:	01400044 	movi	r5,1
100073a4:	0009883a 	mov	r4,zero
100073a8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);
100073ac:	014004c4 	movi	r5,19
100073b0:	0009883a 	mov	r4,zero
100073b4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0514);
100073b8:	01414504 	movi	r5,1300
100073bc:	0009883a 	mov	r4,zero
100073c0:	0004d340 	call	10004d34 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
100073c4:	01424004 	movi	r5,2304
100073c8:	0009883a 	mov	r4,zero
100073cc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
100073d0:	01400044 	movi	r5,1
100073d4:	0009883a 	mov	r4,zero
100073d8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);
100073dc:	000b883a 	mov	r5,zero
100073e0:	0009883a 	mov	r4,zero
100073e4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);
100073e8:	000b883a 	mov	r5,zero
100073ec:	0009883a 	mov	r4,zero
100073f0:	0004d340 	call	10004d34 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
100073f4:	000b883a 	mov	r5,zero
100073f8:	0009883a 	mov	r4,zero
100073fc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10007400:	000b883a 	mov	r5,zero
10007404:	0009883a 	mov	r4,zero
10007408:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
1000740c:	0140a404 	movi	r5,656
10007410:	0009883a 	mov	r4,zero
10007414:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10007418:	01401044 	movi	r5,65
1000741c:	0009883a 	mov	r4,zero
10007420:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);
10007424:	014004c4 	movi	r5,19
10007428:	0009883a 	mov	r4,zero
1000742c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);
10007430:	000b883a 	mov	r5,zero
10007434:	0009883a 	mov	r4,zero
10007438:	0004d340 	call	10004d34 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000743c:	01414004 	movi	r5,1280
10007440:	01006c04 	movi	r4,432
10007444:	00069f80 	call	100069f8 <UsbWrite>

}
10007448:	0001883a 	nop
1000744c:	e037883a 	mov	sp,fp
10007450:	dfc00117 	ldw	ra,4(sp)
10007454:	df000017 	ldw	fp,0(sp)
10007458:	dec00204 	addi	sp,sp,8
1000745c:	f800283a 	ret

10007460 <UsbClassRequest>:

void UsbClassRequest()
{
10007460:	defffe04 	addi	sp,sp,-8
10007464:	dfc00115 	stw	ra,4(sp)
10007468:	df000015 	stw	fp,0(sp)
1000746c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10007470:	01414004 	movi	r5,1280
10007474:	01000084 	movi	r4,2
10007478:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000747c:	01414304 	movi	r5,1292
10007480:	0009883a 	mov	r4,zero
10007484:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10007488:	01400204 	movi	r5,8
1000748c:	0009883a 	mov	r4,zero
10007490:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10007494:	0140b404 	movi	r5,720
10007498:	0009883a 	mov	r4,zero
1000749c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);
100074a0:	01400044 	movi	r5,1
100074a4:	0009883a 	mov	r4,zero
100074a8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);
100074ac:	014004c4 	movi	r5,19
100074b0:	0009883a 	mov	r4,zero
100074b4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0514);
100074b8:	01414504 	movi	r5,1300
100074bc:	0009883a 	mov	r4,zero
100074c0:	0004d340 	call	10004d34 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
100074c4:	01428844 	movi	r5,2593
100074c8:	0009883a 	mov	r4,zero
100074cc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
100074d0:	000b883a 	mov	r5,zero
100074d4:	0009883a 	mov	r4,zero
100074d8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);
100074dc:	000b883a 	mov	r5,zero
100074e0:	0009883a 	mov	r4,zero
100074e4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);
100074e8:	000b883a 	mov	r5,zero
100074ec:	0009883a 	mov	r4,zero
100074f0:	0004d340 	call	10004d34 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
100074f4:	000b883a 	mov	r5,zero
100074f8:	0009883a 	mov	r4,zero
100074fc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10007500:	000b883a 	mov	r5,zero
10007504:	0009883a 	mov	r4,zero
10007508:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
1000750c:	0140a404 	movi	r5,656
10007510:	0009883a 	mov	r4,zero
10007514:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10007518:	01401044 	movi	r5,65
1000751c:	0009883a 	mov	r4,zero
10007520:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);
10007524:	014004c4 	movi	r5,19
10007528:	0009883a 	mov	r4,zero
1000752c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);
10007530:	000b883a 	mov	r5,zero
10007534:	0009883a 	mov	r4,zero
10007538:	0004d340 	call	10004d34 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000753c:	01414004 	movi	r5,1280
10007540:	01006c04 	movi	r4,432
10007544:	00069f80 	call	100069f8 <UsbWrite>
}
10007548:	0001883a 	nop
1000754c:	e037883a 	mov	sp,fp
10007550:	dfc00117 	ldw	ra,4(sp)
10007554:	df000017 	ldw	fp,0(sp)
10007558:	dec00204 	addi	sp,sp,8
1000755c:	f800283a 	ret

10007560 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10007560:	defffe04 	addi	sp,sp,-8
10007564:	dfc00115 	stw	ra,4(sp)
10007568:	df000015 	stw	fp,0(sp)
1000756c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10007570:	01414004 	movi	r5,1280
10007574:	01000084 	movi	r4,2
10007578:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000757c:	01414304 	movi	r5,1292
10007580:	0009883a 	mov	r4,zero
10007584:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10007588:	01400204 	movi	r5,8
1000758c:	0009883a 	mov	r4,zero
10007590:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10007594:	0140b404 	movi	r5,720
10007598:	0009883a 	mov	r4,zero
1000759c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);
100075a0:	01400044 	movi	r5,1
100075a4:	0009883a 	mov	r4,zero
100075a8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);
100075ac:	014004c4 	movi	r5,19
100075b0:	0009883a 	mov	r4,zero
100075b4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0514);
100075b8:	01414504 	movi	r5,1300
100075bc:	0009883a 	mov	r4,zero
100075c0:	0004d340 	call	10004d34 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
100075c4:	0141a044 	movi	r5,1665
100075c8:	0009883a 	mov	r4,zero
100075cc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
100075d0:	01484004 	movi	r5,8448
100075d4:	0009883a 	mov	r4,zero
100075d8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100075dc:	000b883a 	mov	r5,zero
100075e0:	0009883a 	mov	r4,zero
100075e4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
100075e8:	01401ec4 	movi	r5,123
100075ec:	0009883a 	mov	r4,zero
100075f0:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100075f4:	01415104 	movi	r5,1348
100075f8:	0009883a 	mov	r4,zero
100075fc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10007600:	01400204 	movi	r5,8
10007604:	0009883a 	mov	r4,zero
10007608:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000760c:	0140a404 	movi	r5,656
10007610:	0009883a 	mov	r4,zero
10007614:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10007618:	01401044 	movi	r5,65
1000761c:	0009883a 	mov	r4,zero
10007620:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10007624:	014004c4 	movi	r5,19
10007628:	0009883a 	mov	r4,zero
1000762c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10007630:	01414804 	movi	r5,1312
10007634:	0009883a 	mov	r4,zero
10007638:	0004d340 	call	10004d34 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
1000763c:	000b883a 	mov	r5,zero
10007640:	0009883a 	mov	r4,zero
10007644:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10007648:	000b883a 	mov	r5,zero
1000764c:	0009883a 	mov	r4,zero
10007650:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10007654:	01408404 	movi	r5,528
10007658:	0009883a 	mov	r4,zero
1000765c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10007660:	01401044 	movi	r5,65
10007664:	0009883a 	mov	r4,zero
10007668:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000766c:	014004c4 	movi	r5,19
10007670:	0009883a 	mov	r4,zero
10007674:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10007678:	000b883a 	mov	r5,zero
1000767c:	0009883a 	mov	r4,zero
10007680:	0004d340 	call	10004d34 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10007684:	01414004 	movi	r5,1280
10007688:	01006c04 	movi	r4,432
1000768c:	00069f80 	call	100069f8 <UsbWrite>

}
10007690:	0001883a 	nop
10007694:	e037883a 	mov	sp,fp
10007698:	dfc00117 	ldw	ra,4(sp)
1000769c:	df000017 	ldw	fp,0(sp)
100076a0:	dec00204 	addi	sp,sp,8
100076a4:	f800283a 	ret

100076a8 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
100076a8:	defffe04 	addi	sp,sp,-8
100076ac:	dfc00115 	stw	ra,4(sp)
100076b0:	df000015 	stw	fp,0(sp)
100076b4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100076b8:	01414004 	movi	r5,1280
100076bc:	01000084 	movi	r4,2
100076c0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x050C);
100076c4:	01414304 	movi	r5,1292
100076c8:	0009883a 	mov	r4,zero
100076cc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100076d0:	01400204 	movi	r5,8
100076d4:	0009883a 	mov	r4,zero
100076d8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100076dc:	0140b404 	movi	r5,720
100076e0:	0009883a 	mov	r4,zero
100076e4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);
100076e8:	01400044 	movi	r5,1
100076ec:	0009883a 	mov	r4,zero
100076f0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);
100076f4:	014004c4 	movi	r5,19
100076f8:	0009883a 	mov	r4,zero
100076fc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0514);
10007700:	01414504 	movi	r5,1300
10007704:	0009883a 	mov	r4,zero
10007708:	0004d340 	call	10004d34 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
1000770c:	0141a044 	movi	r5,1665
10007710:	0009883a 	mov	r4,zero
10007714:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10007718:	01488004 	movi	r5,8704
1000771c:	0009883a 	mov	r4,zero
10007720:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10007724:	000b883a 	mov	r5,zero
10007728:	0009883a 	mov	r4,zero
1000772c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10007730:	01401ec4 	movi	r5,123
10007734:	0009883a 	mov	r4,zero
10007738:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
1000773c:	01416004 	movi	r5,1408
10007740:	0009883a 	mov	r4,zero
10007744:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10007748:	01400204 	movi	r5,8
1000774c:	0009883a 	mov	r4,zero
10007750:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10007754:	0140a404 	movi	r5,656
10007758:	0009883a 	mov	r4,zero
1000775c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10007760:	01401044 	movi	r5,65
10007764:	0009883a 	mov	r4,zero
10007768:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000776c:	014004c4 	movi	r5,19
10007770:	0009883a 	mov	r4,zero
10007774:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10007778:	01414804 	movi	r5,1312
1000777c:	0009883a 	mov	r4,zero
10007780:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10007784:	01416204 	movi	r5,1416
10007788:	0009883a 	mov	r4,zero
1000778c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10007790:	01400204 	movi	r5,8
10007794:	0009883a 	mov	r4,zero
10007798:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
1000779c:	0140a404 	movi	r5,656
100077a0:	0009883a 	mov	r4,zero
100077a4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100077a8:	01400044 	movi	r5,1
100077ac:	0009883a 	mov	r4,zero
100077b0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100077b4:	014004c4 	movi	r5,19
100077b8:	0009883a 	mov	r4,zero
100077bc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100077c0:	01414b04 	movi	r5,1324
100077c4:	0009883a 	mov	r4,zero
100077c8:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
100077cc:	01416404 	movi	r5,1424
100077d0:	0009883a 	mov	r4,zero
100077d4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100077d8:	01400204 	movi	r5,8
100077dc:	0009883a 	mov	r4,zero
100077e0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100077e4:	0140a404 	movi	r5,656
100077e8:	0009883a 	mov	r4,zero
100077ec:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100077f0:	01401044 	movi	r5,65
100077f4:	0009883a 	mov	r4,zero
100077f8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100077fc:	014004c4 	movi	r5,19
10007800:	0009883a 	mov	r4,zero
10007804:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10007808:	01414e04 	movi	r5,1336
1000780c:	0009883a 	mov	r4,zero
10007810:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10007814:	01416604 	movi	r5,1432
10007818:	0009883a 	mov	r4,zero
1000781c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10007820:	01400204 	movi	r5,8
10007824:	0009883a 	mov	r4,zero
10007828:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
1000782c:	0140a404 	movi	r5,656
10007830:	0009883a 	mov	r4,zero
10007834:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10007838:	01400044 	movi	r5,1
1000783c:	0009883a 	mov	r4,zero
10007840:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10007844:	014004c4 	movi	r5,19
10007848:	0009883a 	mov	r4,zero
1000784c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10007850:	01415104 	movi	r5,1348
10007854:	0009883a 	mov	r4,zero
10007858:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
1000785c:	01416804 	movi	r5,1440
10007860:	0009883a 	mov	r4,zero
10007864:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10007868:	01400204 	movi	r5,8
1000786c:	0009883a 	mov	r4,zero
10007870:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10007874:	0140a404 	movi	r5,656
10007878:	0009883a 	mov	r4,zero
1000787c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10007880:	01401044 	movi	r5,65
10007884:	0009883a 	mov	r4,zero
10007888:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000788c:	014004c4 	movi	r5,19
10007890:	0009883a 	mov	r4,zero
10007894:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10007898:	01415404 	movi	r5,1360
1000789c:	0009883a 	mov	r4,zero
100078a0:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
100078a4:	01416a04 	movi	r5,1448
100078a8:	0009883a 	mov	r4,zero
100078ac:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100078b0:	01400204 	movi	r5,8
100078b4:	0009883a 	mov	r4,zero
100078b8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100078bc:	0140a404 	movi	r5,656
100078c0:	0009883a 	mov	r4,zero
100078c4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100078c8:	01400044 	movi	r5,1
100078cc:	0009883a 	mov	r4,zero
100078d0:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100078d4:	014004c4 	movi	r5,19
100078d8:	0009883a 	mov	r4,zero
100078dc:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
100078e0:	01415704 	movi	r5,1372
100078e4:	0009883a 	mov	r4,zero
100078e8:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
100078ec:	01416c04 	movi	r5,1456
100078f0:	0009883a 	mov	r4,zero
100078f4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100078f8:	01400204 	movi	r5,8
100078fc:	0009883a 	mov	r4,zero
10007900:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10007904:	0140a404 	movi	r5,656
10007908:	0009883a 	mov	r4,zero
1000790c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10007910:	01401044 	movi	r5,65
10007914:	0009883a 	mov	r4,zero
10007918:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000791c:	014004c4 	movi	r5,19
10007920:	0009883a 	mov	r4,zero
10007924:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10007928:	01415a04 	movi	r5,1384
1000792c:	0009883a 	mov	r4,zero
10007930:	0004d340 	call	10004d34 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10007934:	01416e04 	movi	r5,1464
10007938:	0009883a 	mov	r4,zero
1000793c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10007940:	014000c4 	movi	r5,3
10007944:	0009883a 	mov	r4,zero
10007948:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
1000794c:	0140a404 	movi	r5,656
10007950:	0009883a 	mov	r4,zero
10007954:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10007958:	01400044 	movi	r5,1
1000795c:	0009883a 	mov	r4,zero
10007960:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10007964:	014004c4 	movi	r5,19
10007968:	0009883a 	mov	r4,zero
1000796c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10007970:	01415d04 	movi	r5,1396
10007974:	0009883a 	mov	r4,zero
10007978:	0004d340 	call	10004d34 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
1000797c:	000b883a 	mov	r5,zero
10007980:	0009883a 	mov	r4,zero
10007984:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10007988:	000b883a 	mov	r5,zero
1000798c:	0009883a 	mov	r4,zero
10007990:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10007994:	01408404 	movi	r5,528
10007998:	0009883a 	mov	r4,zero
1000799c:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100079a0:	01401044 	movi	r5,65
100079a4:	0009883a 	mov	r4,zero
100079a8:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100079ac:	014004c4 	movi	r5,19
100079b0:	0009883a 	mov	r4,zero
100079b4:	0004d340 	call	10004d34 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100079b8:	000b883a 	mov	r5,zero
100079bc:	0009883a 	mov	r4,zero
100079c0:	0004d340 	call	10004d34 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100079c4:	01414004 	movi	r5,1280
100079c8:	01006c04 	movi	r4,432
100079cc:	00069f80 	call	100069f8 <UsbWrite>

}
100079d0:	0001883a 	nop
100079d4:	e037883a 	mov	sp,fp
100079d8:	dfc00117 	ldw	ra,4(sp)
100079dc:	df000017 	ldw	fp,0(sp)
100079e0:	dec00204 	addi	sp,sp,8
100079e4:	f800283a 	ret

100079e8 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
100079e8:	defffd04 	addi	sp,sp,-12
100079ec:	dfc00215 	stw	ra,8(sp)
100079f0:	df000115 	stw	fp,4(sp)
100079f4:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
100079f8:	01005104 	movi	r4,324
100079fc:	0006a500 	call	10006a50 <UsbRead>
10007a00:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10007a04:	000b883a 	mov	r5,zero
10007a08:	01005104 	movi	r4,324
10007a0c:	00069f80 	call	100069f8 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10007a10:	00000606 	br	10007a2c <UsbWaitTDListDone+0x44>
//		}
//		else
//		{
//			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
//		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10007a14:	01005104 	movi	r4,324
10007a18:	0006a500 	call	10006a50 <UsbRead>
10007a1c:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10007a20:	000b883a 	mov	r5,zero
10007a24:	01005104 	movi	r4,324
10007a28:	00069f80 	call	100069f8 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10007a2c:	e0bfff0b 	ldhu	r2,-4(fp)
10007a30:	10840018 	cmpnei	r2,r2,4096
10007a34:	103ff71e 	bne	r2,zero,10007a14 <__alt_data_end+0xf8007a14>
//		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10007a38:	e0bfff0b 	ldhu	r2,-4(fp)
}
10007a3c:	e037883a 	mov	sp,fp
10007a40:	dfc00117 	ldw	ra,4(sp)
10007a44:	df000017 	ldw	fp,0(sp)
10007a48:	dec00204 	addi	sp,sp,8
10007a4c:	f800283a 	ret

10007a50 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10007a50:	defffd04 	addi	sp,sp,-12
10007a54:	dfc00215 	stw	ra,8(sp)
10007a58:	df000115 	stw	fp,4(sp)
10007a5c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10007a60:	010000c4 	movi	r4,3
10007a64:	0004da40 	call	10004da4 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10007a68:	01005104 	movi	r4,324
10007a6c:	0006a500 	call	10006a50 <UsbRead>
10007a70:	10bfffcc 	andi	r2,r2,65535
10007a74:	10840018 	cmpnei	r2,r2,4096
10007a78:	1000091e 	bne	r2,zero,10007aa0 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10007a7c:	000b883a 	mov	r5,zero
10007a80:	01005104 	movi	r4,324
10007a84:	00069f80 	call	100069f8 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10007a88:	0001883a 	nop
10007a8c:	010000c4 	movi	r4,3
10007a90:	0004da40 	call	10004da4 <IO_read>
10007a94:	10bfffcc 	andi	r2,r2,65535
10007a98:	1080040c 	andi	r2,r2,16
10007a9c:	103ffb26 	beq	r2,zero,10007a8c <__alt_data_end+0xf8007a8c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10007aa0:	01414204 	movi	r5,1288
10007aa4:	01000084 	movi	r4,2
10007aa8:	0004d340 	call	10004d34 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10007aac:	0009883a 	mov	r4,zero
10007ab0:	0004da40 	call	10004da4 <IO_read>
10007ab4:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10007ab8:	e0bfff0b 	ldhu	r2,-4(fp)
}
10007abc:	e037883a 	mov	sp,fp
10007ac0:	dfc00117 	ldw	ra,4(sp)
10007ac4:	df000017 	ldw	fp,0(sp)
10007ac8:	dec00204 	addi	sp,sp,8
10007acc:	f800283a 	ret

10007ad0 <UsbPrintMem>:


void UsbPrintMem()
{
10007ad0:	defffc04 	addi	sp,sp,-16
10007ad4:	dfc00315 	stw	ra,12(sp)
10007ad8:	df000215 	stw	fp,8(sp)
10007adc:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10007ae0:	01414004 	movi	r5,1280
10007ae4:	01000084 	movi	r4,2
10007ae8:	0004d340 	call	10004d34 <IO_write>
	for (i = 0; i <= 200; i += 2)
10007aec:	e03ffe15 	stw	zero,-8(fp)
10007af0:	00000e06 	br	10007b2c <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10007af4:	0009883a 	mov	r4,zero
10007af8:	0004da40 	call	10004da4 <IO_read>
10007afc:	10bfffcc 	andi	r2,r2,65535
10007b00:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10007b04:	e0bffe17 	ldw	r2,-8(fp)
10007b08:	10814004 	addi	r2,r2,1280
10007b0c:	e1bfff17 	ldw	r6,-4(fp)
10007b10:	100b883a 	mov	r5,r2
10007b14:	010400b4 	movhi	r4,4098
10007b18:	2121db04 	addi	r4,r4,-30868
10007b1c:	0007e840 	call	10007e84 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10007b20:	e0bffe17 	ldw	r2,-8(fp)
10007b24:	10800084 	addi	r2,r2,2
10007b28:	e0bffe15 	stw	r2,-8(fp)
10007b2c:	e0bffe17 	ldw	r2,-8(fp)
10007b30:	10803250 	cmplti	r2,r2,201
10007b34:	103fef1e 	bne	r2,zero,10007af4 <__alt_data_end+0xf8007af4>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10007b38:	0001883a 	nop
10007b3c:	e037883a 	mov	sp,fp
10007b40:	dfc00117 	ldw	ra,4(sp)
10007b44:	df000017 	ldw	fp,0(sp)
10007b48:	dec00204 	addi	sp,sp,8
10007b4c:	f800283a 	ret

10007b50 <__divsi3>:
10007b50:	20001b16 	blt	r4,zero,10007bc0 <__divsi3+0x70>
10007b54:	000f883a 	mov	r7,zero
10007b58:	28001616 	blt	r5,zero,10007bb4 <__divsi3+0x64>
10007b5c:	200d883a 	mov	r6,r4
10007b60:	29001a2e 	bgeu	r5,r4,10007bcc <__divsi3+0x7c>
10007b64:	00800804 	movi	r2,32
10007b68:	00c00044 	movi	r3,1
10007b6c:	00000106 	br	10007b74 <__divsi3+0x24>
10007b70:	10000d26 	beq	r2,zero,10007ba8 <__divsi3+0x58>
10007b74:	294b883a 	add	r5,r5,r5
10007b78:	10bfffc4 	addi	r2,r2,-1
10007b7c:	18c7883a 	add	r3,r3,r3
10007b80:	293ffb36 	bltu	r5,r4,10007b70 <__alt_data_end+0xf8007b70>
10007b84:	0005883a 	mov	r2,zero
10007b88:	18000726 	beq	r3,zero,10007ba8 <__divsi3+0x58>
10007b8c:	0005883a 	mov	r2,zero
10007b90:	31400236 	bltu	r6,r5,10007b9c <__divsi3+0x4c>
10007b94:	314dc83a 	sub	r6,r6,r5
10007b98:	10c4b03a 	or	r2,r2,r3
10007b9c:	1806d07a 	srli	r3,r3,1
10007ba0:	280ad07a 	srli	r5,r5,1
10007ba4:	183ffa1e 	bne	r3,zero,10007b90 <__alt_data_end+0xf8007b90>
10007ba8:	38000126 	beq	r7,zero,10007bb0 <__divsi3+0x60>
10007bac:	0085c83a 	sub	r2,zero,r2
10007bb0:	f800283a 	ret
10007bb4:	014bc83a 	sub	r5,zero,r5
10007bb8:	39c0005c 	xori	r7,r7,1
10007bbc:	003fe706 	br	10007b5c <__alt_data_end+0xf8007b5c>
10007bc0:	0109c83a 	sub	r4,zero,r4
10007bc4:	01c00044 	movi	r7,1
10007bc8:	003fe306 	br	10007b58 <__alt_data_end+0xf8007b58>
10007bcc:	00c00044 	movi	r3,1
10007bd0:	003fee06 	br	10007b8c <__alt_data_end+0xf8007b8c>

10007bd4 <__modsi3>:
10007bd4:	20001716 	blt	r4,zero,10007c34 <__modsi3+0x60>
10007bd8:	000f883a 	mov	r7,zero
10007bdc:	2005883a 	mov	r2,r4
10007be0:	28001216 	blt	r5,zero,10007c2c <__modsi3+0x58>
10007be4:	2900162e 	bgeu	r5,r4,10007c40 <__modsi3+0x6c>
10007be8:	01800804 	movi	r6,32
10007bec:	00c00044 	movi	r3,1
10007bf0:	00000106 	br	10007bf8 <__modsi3+0x24>
10007bf4:	30000a26 	beq	r6,zero,10007c20 <__modsi3+0x4c>
10007bf8:	294b883a 	add	r5,r5,r5
10007bfc:	31bfffc4 	addi	r6,r6,-1
10007c00:	18c7883a 	add	r3,r3,r3
10007c04:	293ffb36 	bltu	r5,r4,10007bf4 <__alt_data_end+0xf8007bf4>
10007c08:	18000526 	beq	r3,zero,10007c20 <__modsi3+0x4c>
10007c0c:	1806d07a 	srli	r3,r3,1
10007c10:	11400136 	bltu	r2,r5,10007c18 <__modsi3+0x44>
10007c14:	1145c83a 	sub	r2,r2,r5
10007c18:	280ad07a 	srli	r5,r5,1
10007c1c:	183ffb1e 	bne	r3,zero,10007c0c <__alt_data_end+0xf8007c0c>
10007c20:	38000126 	beq	r7,zero,10007c28 <__modsi3+0x54>
10007c24:	0085c83a 	sub	r2,zero,r2
10007c28:	f800283a 	ret
10007c2c:	014bc83a 	sub	r5,zero,r5
10007c30:	003fec06 	br	10007be4 <__alt_data_end+0xf8007be4>
10007c34:	0109c83a 	sub	r4,zero,r4
10007c38:	01c00044 	movi	r7,1
10007c3c:	003fe706 	br	10007bdc <__alt_data_end+0xf8007bdc>
10007c40:	00c00044 	movi	r3,1
10007c44:	003ff106 	br	10007c0c <__alt_data_end+0xf8007c0c>

10007c48 <__udivsi3>:
10007c48:	200d883a 	mov	r6,r4
10007c4c:	2900152e 	bgeu	r5,r4,10007ca4 <__udivsi3+0x5c>
10007c50:	28001416 	blt	r5,zero,10007ca4 <__udivsi3+0x5c>
10007c54:	00800804 	movi	r2,32
10007c58:	00c00044 	movi	r3,1
10007c5c:	00000206 	br	10007c68 <__udivsi3+0x20>
10007c60:	10000e26 	beq	r2,zero,10007c9c <__udivsi3+0x54>
10007c64:	28000516 	blt	r5,zero,10007c7c <__udivsi3+0x34>
10007c68:	294b883a 	add	r5,r5,r5
10007c6c:	10bfffc4 	addi	r2,r2,-1
10007c70:	18c7883a 	add	r3,r3,r3
10007c74:	293ffa36 	bltu	r5,r4,10007c60 <__alt_data_end+0xf8007c60>
10007c78:	18000826 	beq	r3,zero,10007c9c <__udivsi3+0x54>
10007c7c:	0005883a 	mov	r2,zero
10007c80:	31400236 	bltu	r6,r5,10007c8c <__udivsi3+0x44>
10007c84:	314dc83a 	sub	r6,r6,r5
10007c88:	10c4b03a 	or	r2,r2,r3
10007c8c:	1806d07a 	srli	r3,r3,1
10007c90:	280ad07a 	srli	r5,r5,1
10007c94:	183ffa1e 	bne	r3,zero,10007c80 <__alt_data_end+0xf8007c80>
10007c98:	f800283a 	ret
10007c9c:	0005883a 	mov	r2,zero
10007ca0:	f800283a 	ret
10007ca4:	00c00044 	movi	r3,1
10007ca8:	003ff406 	br	10007c7c <__alt_data_end+0xf8007c7c>

10007cac <__umodsi3>:
10007cac:	2005883a 	mov	r2,r4
10007cb0:	2900122e 	bgeu	r5,r4,10007cfc <__umodsi3+0x50>
10007cb4:	28001116 	blt	r5,zero,10007cfc <__umodsi3+0x50>
10007cb8:	01800804 	movi	r6,32
10007cbc:	00c00044 	movi	r3,1
10007cc0:	00000206 	br	10007ccc <__umodsi3+0x20>
10007cc4:	30000c26 	beq	r6,zero,10007cf8 <__umodsi3+0x4c>
10007cc8:	28000516 	blt	r5,zero,10007ce0 <__umodsi3+0x34>
10007ccc:	294b883a 	add	r5,r5,r5
10007cd0:	31bfffc4 	addi	r6,r6,-1
10007cd4:	18c7883a 	add	r3,r3,r3
10007cd8:	293ffa36 	bltu	r5,r4,10007cc4 <__alt_data_end+0xf8007cc4>
10007cdc:	18000626 	beq	r3,zero,10007cf8 <__umodsi3+0x4c>
10007ce0:	1806d07a 	srli	r3,r3,1
10007ce4:	11400136 	bltu	r2,r5,10007cec <__umodsi3+0x40>
10007ce8:	1145c83a 	sub	r2,r2,r5
10007cec:	280ad07a 	srli	r5,r5,1
10007cf0:	183ffb1e 	bne	r3,zero,10007ce0 <__alt_data_end+0xf8007ce0>
10007cf4:	f800283a 	ret
10007cf8:	f800283a 	ret
10007cfc:	00c00044 	movi	r3,1
10007d00:	003ff706 	br	10007ce0 <__alt_data_end+0xf8007ce0>

10007d04 <__mulsi3>:
10007d04:	0005883a 	mov	r2,zero
10007d08:	20000726 	beq	r4,zero,10007d28 <__mulsi3+0x24>
10007d0c:	20c0004c 	andi	r3,r4,1
10007d10:	2008d07a 	srli	r4,r4,1
10007d14:	18000126 	beq	r3,zero,10007d1c <__mulsi3+0x18>
10007d18:	1145883a 	add	r2,r2,r5
10007d1c:	294b883a 	add	r5,r5,r5
10007d20:	203ffa1e 	bne	r4,zero,10007d0c <__alt_data_end+0xf8007d0c>
10007d24:	f800283a 	ret
10007d28:	f800283a 	ret

10007d2c <memset>:
10007d2c:	20c000cc 	andi	r3,r4,3
10007d30:	2005883a 	mov	r2,r4
10007d34:	18004426 	beq	r3,zero,10007e48 <memset+0x11c>
10007d38:	31ffffc4 	addi	r7,r6,-1
10007d3c:	30004026 	beq	r6,zero,10007e40 <memset+0x114>
10007d40:	2813883a 	mov	r9,r5
10007d44:	200d883a 	mov	r6,r4
10007d48:	2007883a 	mov	r3,r4
10007d4c:	00000406 	br	10007d60 <memset+0x34>
10007d50:	3a3fffc4 	addi	r8,r7,-1
10007d54:	31800044 	addi	r6,r6,1
10007d58:	38003926 	beq	r7,zero,10007e40 <memset+0x114>
10007d5c:	400f883a 	mov	r7,r8
10007d60:	18c00044 	addi	r3,r3,1
10007d64:	32400005 	stb	r9,0(r6)
10007d68:	1a0000cc 	andi	r8,r3,3
10007d6c:	403ff81e 	bne	r8,zero,10007d50 <__alt_data_end+0xf8007d50>
10007d70:	010000c4 	movi	r4,3
10007d74:	21c02d2e 	bgeu	r4,r7,10007e2c <memset+0x100>
10007d78:	29003fcc 	andi	r4,r5,255
10007d7c:	200c923a 	slli	r6,r4,8
10007d80:	3108b03a 	or	r4,r6,r4
10007d84:	200c943a 	slli	r6,r4,16
10007d88:	218cb03a 	or	r6,r4,r6
10007d8c:	010003c4 	movi	r4,15
10007d90:	21c0182e 	bgeu	r4,r7,10007df4 <memset+0xc8>
10007d94:	3b3ffc04 	addi	r12,r7,-16
10007d98:	6018d13a 	srli	r12,r12,4
10007d9c:	1a000104 	addi	r8,r3,4
10007da0:	1ac00204 	addi	r11,r3,8
10007da4:	6008913a 	slli	r4,r12,4
10007da8:	1a800304 	addi	r10,r3,12
10007dac:	1813883a 	mov	r9,r3
10007db0:	21000504 	addi	r4,r4,20
10007db4:	1909883a 	add	r4,r3,r4
10007db8:	49800015 	stw	r6,0(r9)
10007dbc:	41800015 	stw	r6,0(r8)
10007dc0:	59800015 	stw	r6,0(r11)
10007dc4:	51800015 	stw	r6,0(r10)
10007dc8:	42000404 	addi	r8,r8,16
10007dcc:	4a400404 	addi	r9,r9,16
10007dd0:	5ac00404 	addi	r11,r11,16
10007dd4:	52800404 	addi	r10,r10,16
10007dd8:	413ff71e 	bne	r8,r4,10007db8 <__alt_data_end+0xf8007db8>
10007ddc:	63000044 	addi	r12,r12,1
10007de0:	6018913a 	slli	r12,r12,4
10007de4:	39c003cc 	andi	r7,r7,15
10007de8:	010000c4 	movi	r4,3
10007dec:	1b07883a 	add	r3,r3,r12
10007df0:	21c00e2e 	bgeu	r4,r7,10007e2c <memset+0x100>
10007df4:	1813883a 	mov	r9,r3
10007df8:	3811883a 	mov	r8,r7
10007dfc:	010000c4 	movi	r4,3
10007e00:	49800015 	stw	r6,0(r9)
10007e04:	423fff04 	addi	r8,r8,-4
10007e08:	4a400104 	addi	r9,r9,4
10007e0c:	223ffc36 	bltu	r4,r8,10007e00 <__alt_data_end+0xf8007e00>
10007e10:	393fff04 	addi	r4,r7,-4
10007e14:	2008d0ba 	srli	r4,r4,2
10007e18:	39c000cc 	andi	r7,r7,3
10007e1c:	21000044 	addi	r4,r4,1
10007e20:	2109883a 	add	r4,r4,r4
10007e24:	2109883a 	add	r4,r4,r4
10007e28:	1907883a 	add	r3,r3,r4
10007e2c:	38000526 	beq	r7,zero,10007e44 <memset+0x118>
10007e30:	19cf883a 	add	r7,r3,r7
10007e34:	19400005 	stb	r5,0(r3)
10007e38:	18c00044 	addi	r3,r3,1
10007e3c:	38fffd1e 	bne	r7,r3,10007e34 <__alt_data_end+0xf8007e34>
10007e40:	f800283a 	ret
10007e44:	f800283a 	ret
10007e48:	2007883a 	mov	r3,r4
10007e4c:	300f883a 	mov	r7,r6
10007e50:	003fc706 	br	10007d70 <__alt_data_end+0xf8007d70>

10007e54 <_printf_r>:
10007e54:	defffd04 	addi	sp,sp,-12
10007e58:	2805883a 	mov	r2,r5
10007e5c:	dfc00015 	stw	ra,0(sp)
10007e60:	d9800115 	stw	r6,4(sp)
10007e64:	d9c00215 	stw	r7,8(sp)
10007e68:	21400217 	ldw	r5,8(r4)
10007e6c:	d9c00104 	addi	r7,sp,4
10007e70:	100d883a 	mov	r6,r2
10007e74:	00080a80 	call	100080a8 <___vfprintf_internal_r>
10007e78:	dfc00017 	ldw	ra,0(sp)
10007e7c:	dec00304 	addi	sp,sp,12
10007e80:	f800283a 	ret

10007e84 <printf>:
10007e84:	defffc04 	addi	sp,sp,-16
10007e88:	dfc00015 	stw	ra,0(sp)
10007e8c:	d9400115 	stw	r5,4(sp)
10007e90:	d9800215 	stw	r6,8(sp)
10007e94:	d9c00315 	stw	r7,12(sp)
10007e98:	008400b4 	movhi	r2,4098
10007e9c:	10a99504 	addi	r2,r2,-22956
10007ea0:	10800017 	ldw	r2,0(r2)
10007ea4:	200b883a 	mov	r5,r4
10007ea8:	d9800104 	addi	r6,sp,4
10007eac:	11000217 	ldw	r4,8(r2)
10007eb0:	000a3840 	call	1000a384 <__vfprintf_internal>
10007eb4:	dfc00017 	ldw	ra,0(sp)
10007eb8:	dec00404 	addi	sp,sp,16
10007ebc:	f800283a 	ret

10007ec0 <_puts_r>:
10007ec0:	defff604 	addi	sp,sp,-40
10007ec4:	dc000715 	stw	r16,28(sp)
10007ec8:	2021883a 	mov	r16,r4
10007ecc:	2809883a 	mov	r4,r5
10007ed0:	dc400815 	stw	r17,32(sp)
10007ed4:	dfc00915 	stw	ra,36(sp)
10007ed8:	2823883a 	mov	r17,r5
10007edc:	00080100 	call	10008010 <strlen>
10007ee0:	10c00044 	addi	r3,r2,1
10007ee4:	d8800115 	stw	r2,4(sp)
10007ee8:	008400b4 	movhi	r2,4098
10007eec:	10a1e004 	addi	r2,r2,-30848
10007ef0:	d8800215 	stw	r2,8(sp)
10007ef4:	00800044 	movi	r2,1
10007ef8:	d8800315 	stw	r2,12(sp)
10007efc:	00800084 	movi	r2,2
10007f00:	dc400015 	stw	r17,0(sp)
10007f04:	d8c00615 	stw	r3,24(sp)
10007f08:	dec00415 	stw	sp,16(sp)
10007f0c:	d8800515 	stw	r2,20(sp)
10007f10:	80000226 	beq	r16,zero,10007f1c <_puts_r+0x5c>
10007f14:	80800e17 	ldw	r2,56(r16)
10007f18:	10001426 	beq	r2,zero,10007f6c <_puts_r+0xac>
10007f1c:	81400217 	ldw	r5,8(r16)
10007f20:	2880030b 	ldhu	r2,12(r5)
10007f24:	10c8000c 	andi	r3,r2,8192
10007f28:	1800061e 	bne	r3,zero,10007f44 <_puts_r+0x84>
10007f2c:	29001917 	ldw	r4,100(r5)
10007f30:	00f7ffc4 	movi	r3,-8193
10007f34:	10880014 	ori	r2,r2,8192
10007f38:	20c6703a 	and	r3,r4,r3
10007f3c:	2880030d 	sth	r2,12(r5)
10007f40:	28c01915 	stw	r3,100(r5)
10007f44:	d9800404 	addi	r6,sp,16
10007f48:	8009883a 	mov	r4,r16
10007f4c:	000c8ec0 	call	1000c8ec <__sfvwrite_r>
10007f50:	1000091e 	bne	r2,zero,10007f78 <_puts_r+0xb8>
10007f54:	00800284 	movi	r2,10
10007f58:	dfc00917 	ldw	ra,36(sp)
10007f5c:	dc400817 	ldw	r17,32(sp)
10007f60:	dc000717 	ldw	r16,28(sp)
10007f64:	dec00a04 	addi	sp,sp,40
10007f68:	f800283a 	ret
10007f6c:	8009883a 	mov	r4,r16
10007f70:	000c4680 	call	1000c468 <__sinit>
10007f74:	003fe906 	br	10007f1c <__alt_data_end+0xf8007f1c>
10007f78:	00bfffc4 	movi	r2,-1
10007f7c:	003ff606 	br	10007f58 <__alt_data_end+0xf8007f58>

10007f80 <puts>:
10007f80:	008400b4 	movhi	r2,4098
10007f84:	10a99504 	addi	r2,r2,-22956
10007f88:	200b883a 	mov	r5,r4
10007f8c:	11000017 	ldw	r4,0(r2)
10007f90:	0007ec01 	jmpi	10007ec0 <_puts_r>

10007f94 <srand>:
10007f94:	008400b4 	movhi	r2,4098
10007f98:	10a99504 	addi	r2,r2,-22956
10007f9c:	10800017 	ldw	r2,0(r2)
10007fa0:	11002915 	stw	r4,164(r2)
10007fa4:	10002a15 	stw	zero,168(r2)
10007fa8:	f800283a 	ret

10007fac <rand>:
10007fac:	008400b4 	movhi	r2,4098
10007fb0:	defffe04 	addi	sp,sp,-8
10007fb4:	10a99504 	addi	r2,r2,-22956
10007fb8:	dc000015 	stw	r16,0(sp)
10007fbc:	14000017 	ldw	r16,0(r2)
10007fc0:	dfc00115 	stw	ra,4(sp)
10007fc4:	01932574 	movhi	r6,19605
10007fc8:	81002917 	ldw	r4,164(r16)
10007fcc:	81402a17 	ldw	r5,168(r16)
10007fd0:	01d614b4 	movhi	r7,22610
10007fd4:	319fcb44 	addi	r6,r6,32557
10007fd8:	39fd0b44 	addi	r7,r7,-3027
10007fdc:	00116a80 	call	100116a8 <__muldi3>
10007fe0:	11000044 	addi	r4,r2,1
10007fe4:	2085803a 	cmpltu	r2,r4,r2
10007fe8:	10c7883a 	add	r3,r2,r3
10007fec:	00a00034 	movhi	r2,32768
10007ff0:	10bfffc4 	addi	r2,r2,-1
10007ff4:	1884703a 	and	r2,r3,r2
10007ff8:	81002915 	stw	r4,164(r16)
10007ffc:	80c02a15 	stw	r3,168(r16)
10008000:	dfc00117 	ldw	ra,4(sp)
10008004:	dc000017 	ldw	r16,0(sp)
10008008:	dec00204 	addi	sp,sp,8
1000800c:	f800283a 	ret

10008010 <strlen>:
10008010:	208000cc 	andi	r2,r4,3
10008014:	10002026 	beq	r2,zero,10008098 <strlen+0x88>
10008018:	20800007 	ldb	r2,0(r4)
1000801c:	10002026 	beq	r2,zero,100080a0 <strlen+0x90>
10008020:	2005883a 	mov	r2,r4
10008024:	00000206 	br	10008030 <strlen+0x20>
10008028:	10c00007 	ldb	r3,0(r2)
1000802c:	18001826 	beq	r3,zero,10008090 <strlen+0x80>
10008030:	10800044 	addi	r2,r2,1
10008034:	10c000cc 	andi	r3,r2,3
10008038:	183ffb1e 	bne	r3,zero,10008028 <__alt_data_end+0xf8008028>
1000803c:	10c00017 	ldw	r3,0(r2)
10008040:	01ffbff4 	movhi	r7,65279
10008044:	39ffbfc4 	addi	r7,r7,-257
10008048:	00ca303a 	nor	r5,zero,r3
1000804c:	01a02074 	movhi	r6,32897
10008050:	19c7883a 	add	r3,r3,r7
10008054:	31a02004 	addi	r6,r6,-32640
10008058:	1946703a 	and	r3,r3,r5
1000805c:	1986703a 	and	r3,r3,r6
10008060:	1800091e 	bne	r3,zero,10008088 <strlen+0x78>
10008064:	10800104 	addi	r2,r2,4
10008068:	10c00017 	ldw	r3,0(r2)
1000806c:	19cb883a 	add	r5,r3,r7
10008070:	00c6303a 	nor	r3,zero,r3
10008074:	28c6703a 	and	r3,r5,r3
10008078:	1986703a 	and	r3,r3,r6
1000807c:	183ff926 	beq	r3,zero,10008064 <__alt_data_end+0xf8008064>
10008080:	00000106 	br	10008088 <strlen+0x78>
10008084:	10800044 	addi	r2,r2,1
10008088:	10c00007 	ldb	r3,0(r2)
1000808c:	183ffd1e 	bne	r3,zero,10008084 <__alt_data_end+0xf8008084>
10008090:	1105c83a 	sub	r2,r2,r4
10008094:	f800283a 	ret
10008098:	2005883a 	mov	r2,r4
1000809c:	003fe706 	br	1000803c <__alt_data_end+0xf800803c>
100080a0:	0005883a 	mov	r2,zero
100080a4:	f800283a 	ret

100080a8 <___vfprintf_internal_r>:
100080a8:	deffb804 	addi	sp,sp,-288
100080ac:	dfc04715 	stw	ra,284(sp)
100080b0:	ddc04515 	stw	r23,276(sp)
100080b4:	dd404315 	stw	r21,268(sp)
100080b8:	d9002d15 	stw	r4,180(sp)
100080bc:	282f883a 	mov	r23,r5
100080c0:	302b883a 	mov	r21,r6
100080c4:	d9c02e15 	stw	r7,184(sp)
100080c8:	df004615 	stw	fp,280(sp)
100080cc:	dd804415 	stw	r22,272(sp)
100080d0:	dd004215 	stw	r20,264(sp)
100080d4:	dcc04115 	stw	r19,260(sp)
100080d8:	dc804015 	stw	r18,256(sp)
100080dc:	dc403f15 	stw	r17,252(sp)
100080e0:	dc003e15 	stw	r16,248(sp)
100080e4:	000cfe80 	call	1000cfe8 <_localeconv_r>
100080e8:	10800017 	ldw	r2,0(r2)
100080ec:	1009883a 	mov	r4,r2
100080f0:	d8803415 	stw	r2,208(sp)
100080f4:	00080100 	call	10008010 <strlen>
100080f8:	d8803715 	stw	r2,220(sp)
100080fc:	d8802d17 	ldw	r2,180(sp)
10008100:	10000226 	beq	r2,zero,1000810c <___vfprintf_internal_r+0x64>
10008104:	10800e17 	ldw	r2,56(r2)
10008108:	1000fb26 	beq	r2,zero,100084f8 <___vfprintf_internal_r+0x450>
1000810c:	b880030b 	ldhu	r2,12(r23)
10008110:	10c8000c 	andi	r3,r2,8192
10008114:	1800061e 	bne	r3,zero,10008130 <___vfprintf_internal_r+0x88>
10008118:	b9001917 	ldw	r4,100(r23)
1000811c:	00f7ffc4 	movi	r3,-8193
10008120:	10880014 	ori	r2,r2,8192
10008124:	20c6703a 	and	r3,r4,r3
10008128:	b880030d 	sth	r2,12(r23)
1000812c:	b8c01915 	stw	r3,100(r23)
10008130:	10c0020c 	andi	r3,r2,8
10008134:	1800c326 	beq	r3,zero,10008444 <___vfprintf_internal_r+0x39c>
10008138:	b8c00417 	ldw	r3,16(r23)
1000813c:	1800c126 	beq	r3,zero,10008444 <___vfprintf_internal_r+0x39c>
10008140:	1080068c 	andi	r2,r2,26
10008144:	00c00284 	movi	r3,10
10008148:	10c0c626 	beq	r2,r3,10008464 <___vfprintf_internal_r+0x3bc>
1000814c:	d8c00404 	addi	r3,sp,16
10008150:	050400b4 	movhi	r20,4098
10008154:	d9001e04 	addi	r4,sp,120
10008158:	a521f184 	addi	r20,r20,-30778
1000815c:	d8c01e15 	stw	r3,120(sp)
10008160:	d8002015 	stw	zero,128(sp)
10008164:	d8001f15 	stw	zero,124(sp)
10008168:	d8003315 	stw	zero,204(sp)
1000816c:	d8003615 	stw	zero,216(sp)
10008170:	d8003815 	stw	zero,224(sp)
10008174:	1811883a 	mov	r8,r3
10008178:	d8003915 	stw	zero,228(sp)
1000817c:	d8003a15 	stw	zero,232(sp)
10008180:	d8002f15 	stw	zero,188(sp)
10008184:	d9002815 	stw	r4,160(sp)
10008188:	a8800007 	ldb	r2,0(r21)
1000818c:	10028b26 	beq	r2,zero,10008bbc <___vfprintf_internal_r+0xb14>
10008190:	00c00944 	movi	r3,37
10008194:	a823883a 	mov	r17,r21
10008198:	10c0021e 	bne	r2,r3,100081a4 <___vfprintf_internal_r+0xfc>
1000819c:	00001406 	br	100081f0 <___vfprintf_internal_r+0x148>
100081a0:	10c00326 	beq	r2,r3,100081b0 <___vfprintf_internal_r+0x108>
100081a4:	8c400044 	addi	r17,r17,1
100081a8:	88800007 	ldb	r2,0(r17)
100081ac:	103ffc1e 	bne	r2,zero,100081a0 <__alt_data_end+0xf80081a0>
100081b0:	8d61c83a 	sub	r16,r17,r21
100081b4:	80000e26 	beq	r16,zero,100081f0 <___vfprintf_internal_r+0x148>
100081b8:	d8c02017 	ldw	r3,128(sp)
100081bc:	d8801f17 	ldw	r2,124(sp)
100081c0:	45400015 	stw	r21,0(r8)
100081c4:	1c07883a 	add	r3,r3,r16
100081c8:	10800044 	addi	r2,r2,1
100081cc:	d8c02015 	stw	r3,128(sp)
100081d0:	44000115 	stw	r16,4(r8)
100081d4:	d8801f15 	stw	r2,124(sp)
100081d8:	00c001c4 	movi	r3,7
100081dc:	1880a916 	blt	r3,r2,10008484 <___vfprintf_internal_r+0x3dc>
100081e0:	42000204 	addi	r8,r8,8
100081e4:	d9402f17 	ldw	r5,188(sp)
100081e8:	2c0b883a 	add	r5,r5,r16
100081ec:	d9402f15 	stw	r5,188(sp)
100081f0:	88800007 	ldb	r2,0(r17)
100081f4:	1000aa26 	beq	r2,zero,100084a0 <___vfprintf_internal_r+0x3f8>
100081f8:	8d400044 	addi	r21,r17,1
100081fc:	8c400047 	ldb	r17,1(r17)
10008200:	0021883a 	mov	r16,zero
10008204:	00bfffc4 	movi	r2,-1
10008208:	0025883a 	mov	r18,zero
1000820c:	dc002905 	stb	r16,164(sp)
10008210:	d8002785 	stb	zero,158(sp)
10008214:	d8002b05 	stb	zero,172(sp)
10008218:	d8802a15 	stw	r2,168(sp)
1000821c:	d8003115 	stw	zero,196(sp)
10008220:	04c01604 	movi	r19,88
10008224:	05800244 	movi	r22,9
10008228:	9021883a 	mov	r16,r18
1000822c:	4039883a 	mov	fp,r8
10008230:	ad400044 	addi	r21,r21,1
10008234:	88bff804 	addi	r2,r17,-32
10008238:	98833236 	bltu	r19,r2,10008f04 <___vfprintf_internal_r+0xe5c>
1000823c:	100490ba 	slli	r2,r2,2
10008240:	00c40074 	movhi	r3,4097
10008244:	18e09504 	addi	r3,r3,-32172
10008248:	10c5883a 	add	r2,r2,r3
1000824c:	10800017 	ldw	r2,0(r2)
10008250:	1000683a 	jmp	r2
10008254:	10008dfc 	xorhi	zero,r2,567
10008258:	10008f04 	addi	zero,r2,572
1000825c:	10008f04 	addi	zero,r2,572
10008260:	10008e1c 	xori	zero,r2,568
10008264:	10008f04 	addi	zero,r2,572
10008268:	10008f04 	addi	zero,r2,572
1000826c:	10008f04 	addi	zero,r2,572
10008270:	10008f04 	addi	zero,r2,572
10008274:	10008f04 	addi	zero,r2,572
10008278:	10008f04 	addi	zero,r2,572
1000827c:	10008504 	addi	zero,r2,532
10008280:	10008d0c 	andi	zero,r2,564
10008284:	10008f04 	addi	zero,r2,572
10008288:	100083c8 	cmpgei	zero,r2,527
1000828c:	10008528 	cmpgeui	zero,r2,532
10008290:	10008f04 	addi	zero,r2,572
10008294:	10008578 	rdprs	zero,r2,533
10008298:	10008584 	addi	zero,r2,534
1000829c:	10008584 	addi	zero,r2,534
100082a0:	10008584 	addi	zero,r2,534
100082a4:	10008584 	addi	zero,r2,534
100082a8:	10008584 	addi	zero,r2,534
100082ac:	10008584 	addi	zero,r2,534
100082b0:	10008584 	addi	zero,r2,534
100082b4:	10008584 	addi	zero,r2,534
100082b8:	10008584 	addi	zero,r2,534
100082bc:	10008f04 	addi	zero,r2,572
100082c0:	10008f04 	addi	zero,r2,572
100082c4:	10008f04 	addi	zero,r2,572
100082c8:	10008f04 	addi	zero,r2,572
100082cc:	10008f04 	addi	zero,r2,572
100082d0:	10008f04 	addi	zero,r2,572
100082d4:	10008f04 	addi	zero,r2,572
100082d8:	10008f04 	addi	zero,r2,572
100082dc:	10008f04 	addi	zero,r2,572
100082e0:	10008f04 	addi	zero,r2,572
100082e4:	100085c0 	call	1100085c <_gp+0xfde330>
100082e8:	10008688 	cmpgei	zero,r2,538
100082ec:	10008f04 	addi	zero,r2,572
100082f0:	10008688 	cmpgei	zero,r2,538
100082f4:	10008f04 	addi	zero,r2,572
100082f8:	10008f04 	addi	zero,r2,572
100082fc:	10008f04 	addi	zero,r2,572
10008300:	10008f04 	addi	zero,r2,572
10008304:	10008734 	orhi	zero,r2,540
10008308:	10008f04 	addi	zero,r2,572
1000830c:	10008f04 	addi	zero,r2,572
10008310:	10008740 	call	11000874 <_gp+0xfde348>
10008314:	10008f04 	addi	zero,r2,572
10008318:	10008f04 	addi	zero,r2,572
1000831c:	10008f04 	addi	zero,r2,572
10008320:	10008f04 	addi	zero,r2,572
10008324:	10008f04 	addi	zero,r2,572
10008328:	10008bc4 	addi	zero,r2,559
1000832c:	10008f04 	addi	zero,r2,572
10008330:	10008f04 	addi	zero,r2,572
10008334:	10008c30 	cmpltui	zero,r2,560
10008338:	10008f04 	addi	zero,r2,572
1000833c:	10008f04 	addi	zero,r2,572
10008340:	10008f04 	addi	zero,r2,572
10008344:	10008f04 	addi	zero,r2,572
10008348:	10008f04 	addi	zero,r2,572
1000834c:	10008f04 	addi	zero,r2,572
10008350:	10008f04 	addi	zero,r2,572
10008354:	10008f04 	addi	zero,r2,572
10008358:	10008f04 	addi	zero,r2,572
1000835c:	10008f04 	addi	zero,r2,572
10008360:	10008ea8 	cmpgeui	zero,r2,570
10008364:	10008e28 	cmpgeui	zero,r2,568
10008368:	10008688 	cmpgei	zero,r2,538
1000836c:	10008688 	cmpgei	zero,r2,538
10008370:	10008688 	cmpgei	zero,r2,538
10008374:	10008e48 	cmpgei	zero,r2,569
10008378:	10008e28 	cmpgeui	zero,r2,568
1000837c:	10008f04 	addi	zero,r2,572
10008380:	10008f04 	addi	zero,r2,572
10008384:	10008e54 	ori	zero,r2,569
10008388:	10008f04 	addi	zero,r2,572
1000838c:	10008e68 	cmpgeui	zero,r2,569
10008390:	10008cec 	andhi	zero,r2,563
10008394:	100083d4 	ori	zero,r2,527
10008398:	10008d24 	muli	zero,r2,564
1000839c:	10008f04 	addi	zero,r2,572
100083a0:	10008d30 	cmpltui	zero,r2,564
100083a4:	10008f04 	addi	zero,r2,572
100083a8:	10008d94 	ori	zero,r2,566
100083ac:	10008f04 	addi	zero,r2,572
100083b0:	10008f04 	addi	zero,r2,572
100083b4:	10008db4 	orhi	zero,r2,566
100083b8:	d8c03117 	ldw	r3,196(sp)
100083bc:	d8802e15 	stw	r2,184(sp)
100083c0:	00c7c83a 	sub	r3,zero,r3
100083c4:	d8c03115 	stw	r3,196(sp)
100083c8:	84000114 	ori	r16,r16,4
100083cc:	ac400007 	ldb	r17,0(r21)
100083d0:	003f9706 	br	10008230 <__alt_data_end+0xf8008230>
100083d4:	00800c04 	movi	r2,48
100083d8:	d8802705 	stb	r2,156(sp)
100083dc:	00801e04 	movi	r2,120
100083e0:	d8802745 	stb	r2,157(sp)
100083e4:	d9002a17 	ldw	r4,168(sp)
100083e8:	d8802e17 	ldw	r2,184(sp)
100083ec:	d8002785 	stb	zero,158(sp)
100083f0:	e011883a 	mov	r8,fp
100083f4:	10c00104 	addi	r3,r2,4
100083f8:	14c00017 	ldw	r19,0(r2)
100083fc:	002d883a 	mov	r22,zero
10008400:	80800094 	ori	r2,r16,2
10008404:	2002ca16 	blt	r4,zero,10008f30 <___vfprintf_internal_r+0xe88>
10008408:	00bfdfc4 	movi	r2,-129
1000840c:	80a4703a 	and	r18,r16,r2
10008410:	d8c02e15 	stw	r3,184(sp)
10008414:	94800094 	ori	r18,r18,2
10008418:	9802b41e 	bne	r19,zero,10008eec <___vfprintf_internal_r+0xe44>
1000841c:	014400b4 	movhi	r5,4098
10008420:	2961ea04 	addi	r5,r5,-30808
10008424:	d9403915 	stw	r5,228(sp)
10008428:	04401e04 	movi	r17,120
1000842c:	d8802a17 	ldw	r2,168(sp)
10008430:	0039883a 	mov	fp,zero
10008434:	1001fa26 	beq	r2,zero,10008c20 <___vfprintf_internal_r+0xb78>
10008438:	0027883a 	mov	r19,zero
1000843c:	002d883a 	mov	r22,zero
10008440:	00021906 	br	10008ca8 <___vfprintf_internal_r+0xc00>
10008444:	d9002d17 	ldw	r4,180(sp)
10008448:	b80b883a 	mov	r5,r23
1000844c:	000a45c0 	call	1000a45c <__swsetup_r>
10008450:	1005dc1e 	bne	r2,zero,10009bc4 <___vfprintf_internal_r+0x1b1c>
10008454:	b880030b 	ldhu	r2,12(r23)
10008458:	00c00284 	movi	r3,10
1000845c:	1080068c 	andi	r2,r2,26
10008460:	10ff3a1e 	bne	r2,r3,1000814c <__alt_data_end+0xf800814c>
10008464:	b880038f 	ldh	r2,14(r23)
10008468:	103f3816 	blt	r2,zero,1000814c <__alt_data_end+0xf800814c>
1000846c:	d9c02e17 	ldw	r7,184(sp)
10008470:	d9002d17 	ldw	r4,180(sp)
10008474:	a80d883a 	mov	r6,r21
10008478:	b80b883a 	mov	r5,r23
1000847c:	000a3a00 	call	1000a3a0 <__sbprintf>
10008480:	00001106 	br	100084c8 <___vfprintf_internal_r+0x420>
10008484:	d9002d17 	ldw	r4,180(sp)
10008488:	d9801e04 	addi	r6,sp,120
1000848c:	b80b883a 	mov	r5,r23
10008490:	000f7600 	call	1000f760 <__sprint_r>
10008494:	1000081e 	bne	r2,zero,100084b8 <___vfprintf_internal_r+0x410>
10008498:	da000404 	addi	r8,sp,16
1000849c:	003f5106 	br	100081e4 <__alt_data_end+0xf80081e4>
100084a0:	d8802017 	ldw	r2,128(sp)
100084a4:	10000426 	beq	r2,zero,100084b8 <___vfprintf_internal_r+0x410>
100084a8:	d9002d17 	ldw	r4,180(sp)
100084ac:	d9801e04 	addi	r6,sp,120
100084b0:	b80b883a 	mov	r5,r23
100084b4:	000f7600 	call	1000f760 <__sprint_r>
100084b8:	b880030b 	ldhu	r2,12(r23)
100084bc:	1080100c 	andi	r2,r2,64
100084c0:	1005c01e 	bne	r2,zero,10009bc4 <___vfprintf_internal_r+0x1b1c>
100084c4:	d8802f17 	ldw	r2,188(sp)
100084c8:	dfc04717 	ldw	ra,284(sp)
100084cc:	df004617 	ldw	fp,280(sp)
100084d0:	ddc04517 	ldw	r23,276(sp)
100084d4:	dd804417 	ldw	r22,272(sp)
100084d8:	dd404317 	ldw	r21,268(sp)
100084dc:	dd004217 	ldw	r20,264(sp)
100084e0:	dcc04117 	ldw	r19,260(sp)
100084e4:	dc804017 	ldw	r18,256(sp)
100084e8:	dc403f17 	ldw	r17,252(sp)
100084ec:	dc003e17 	ldw	r16,248(sp)
100084f0:	dec04804 	addi	sp,sp,288
100084f4:	f800283a 	ret
100084f8:	d9002d17 	ldw	r4,180(sp)
100084fc:	000c4680 	call	1000c468 <__sinit>
10008500:	003f0206 	br	1000810c <__alt_data_end+0xf800810c>
10008504:	d9002e17 	ldw	r4,184(sp)
10008508:	d9402e17 	ldw	r5,184(sp)
1000850c:	21000017 	ldw	r4,0(r4)
10008510:	28800104 	addi	r2,r5,4
10008514:	d9003115 	stw	r4,196(sp)
10008518:	203fa716 	blt	r4,zero,100083b8 <__alt_data_end+0xf80083b8>
1000851c:	d8802e15 	stw	r2,184(sp)
10008520:	ac400007 	ldb	r17,0(r21)
10008524:	003f4206 	br	10008230 <__alt_data_end+0xf8008230>
10008528:	ac400007 	ldb	r17,0(r21)
1000852c:	01000a84 	movi	r4,42
10008530:	a8c00044 	addi	r3,r21,1
10008534:	89075826 	beq	r17,r4,1000a298 <___vfprintf_internal_r+0x21f0>
10008538:	8cbff404 	addi	r18,r17,-48
1000853c:	b486ae36 	bltu	r22,r18,10009ff8 <___vfprintf_internal_r+0x1f50>
10008540:	0009883a 	mov	r4,zero
10008544:	1823883a 	mov	r17,r3
10008548:	01400284 	movi	r5,10
1000854c:	0007d040 	call	10007d04 <__mulsi3>
10008550:	88c00007 	ldb	r3,0(r17)
10008554:	1489883a 	add	r4,r2,r18
10008558:	8d400044 	addi	r21,r17,1
1000855c:	1cbff404 	addi	r18,r3,-48
10008560:	a823883a 	mov	r17,r21
10008564:	b4bff82e 	bgeu	r22,r18,10008548 <__alt_data_end+0xf8008548>
10008568:	1823883a 	mov	r17,r3
1000856c:	2005f616 	blt	r4,zero,10009d48 <___vfprintf_internal_r+0x1ca0>
10008570:	d9002a15 	stw	r4,168(sp)
10008574:	003f2f06 	br	10008234 <__alt_data_end+0xf8008234>
10008578:	84002014 	ori	r16,r16,128
1000857c:	ac400007 	ldb	r17,0(r21)
10008580:	003f2b06 	br	10008230 <__alt_data_end+0xf8008230>
10008584:	8cbff404 	addi	r18,r17,-48
10008588:	d8003115 	stw	zero,196(sp)
1000858c:	0009883a 	mov	r4,zero
10008590:	a823883a 	mov	r17,r21
10008594:	01400284 	movi	r5,10
10008598:	0007d040 	call	10007d04 <__mulsi3>
1000859c:	88c00007 	ldb	r3,0(r17)
100085a0:	9089883a 	add	r4,r18,r2
100085a4:	ad400044 	addi	r21,r21,1
100085a8:	1cbff404 	addi	r18,r3,-48
100085ac:	a823883a 	mov	r17,r21
100085b0:	b4bff82e 	bgeu	r22,r18,10008594 <__alt_data_end+0xf8008594>
100085b4:	1823883a 	mov	r17,r3
100085b8:	d9003115 	stw	r4,196(sp)
100085bc:	003f1d06 	br	10008234 <__alt_data_end+0xf8008234>
100085c0:	8025883a 	mov	r18,r16
100085c4:	dc002903 	ldbu	r16,164(sp)
100085c8:	e011883a 	mov	r8,fp
100085cc:	84003fcc 	andi	r16,r16,255
100085d0:	8007531e 	bne	r16,zero,1000a320 <___vfprintf_internal_r+0x2278>
100085d4:	94800414 	ori	r18,r18,16
100085d8:	9080080c 	andi	r2,r18,32
100085dc:	1003a326 	beq	r2,zero,1000946c <___vfprintf_internal_r+0x13c4>
100085e0:	d9002e17 	ldw	r4,184(sp)
100085e4:	20800117 	ldw	r2,4(r4)
100085e8:	24c00017 	ldw	r19,0(r4)
100085ec:	21000204 	addi	r4,r4,8
100085f0:	d9002e15 	stw	r4,184(sp)
100085f4:	102d883a 	mov	r22,r2
100085f8:	10047316 	blt	r2,zero,100097c8 <___vfprintf_internal_r+0x1720>
100085fc:	d9002a17 	ldw	r4,168(sp)
10008600:	df002783 	ldbu	fp,158(sp)
10008604:	2003e416 	blt	r4,zero,10009598 <___vfprintf_internal_r+0x14f0>
10008608:	00ffdfc4 	movi	r3,-129
1000860c:	9d84b03a 	or	r2,r19,r22
10008610:	90e4703a 	and	r18,r18,r3
10008614:	10018026 	beq	r2,zero,10008c18 <___vfprintf_internal_r+0xb70>
10008618:	b003ab26 	beq	r22,zero,100094c8 <___vfprintf_internal_r+0x1420>
1000861c:	dc402915 	stw	r17,164(sp)
10008620:	dc001e04 	addi	r16,sp,120
10008624:	b023883a 	mov	r17,r22
10008628:	402d883a 	mov	r22,r8
1000862c:	9809883a 	mov	r4,r19
10008630:	880b883a 	mov	r5,r17
10008634:	01800284 	movi	r6,10
10008638:	000f883a 	mov	r7,zero
1000863c:	0011db00 	call	10011db0 <__umoddi3>
10008640:	10800c04 	addi	r2,r2,48
10008644:	843fffc4 	addi	r16,r16,-1
10008648:	9809883a 	mov	r4,r19
1000864c:	880b883a 	mov	r5,r17
10008650:	80800005 	stb	r2,0(r16)
10008654:	01800284 	movi	r6,10
10008658:	000f883a 	mov	r7,zero
1000865c:	00117b40 	call	100117b4 <__udivdi3>
10008660:	1027883a 	mov	r19,r2
10008664:	10c4b03a 	or	r2,r2,r3
10008668:	1823883a 	mov	r17,r3
1000866c:	103fef1e 	bne	r2,zero,1000862c <__alt_data_end+0xf800862c>
10008670:	d8c02817 	ldw	r3,160(sp)
10008674:	dc402917 	ldw	r17,164(sp)
10008678:	b011883a 	mov	r8,r22
1000867c:	1c07c83a 	sub	r3,r3,r16
10008680:	d8c02b15 	stw	r3,172(sp)
10008684:	00005f06 	br	10008804 <___vfprintf_internal_r+0x75c>
10008688:	8025883a 	mov	r18,r16
1000868c:	dc002903 	ldbu	r16,164(sp)
10008690:	e011883a 	mov	r8,fp
10008694:	84003fcc 	andi	r16,r16,255
10008698:	80071e1e 	bne	r16,zero,1000a314 <___vfprintf_internal_r+0x226c>
1000869c:	9080020c 	andi	r2,r18,8
100086a0:	1004af26 	beq	r2,zero,10009960 <___vfprintf_internal_r+0x18b8>
100086a4:	d9002e17 	ldw	r4,184(sp)
100086a8:	d9402e17 	ldw	r5,184(sp)
100086ac:	d8802e17 	ldw	r2,184(sp)
100086b0:	21000017 	ldw	r4,0(r4)
100086b4:	29400117 	ldw	r5,4(r5)
100086b8:	10800204 	addi	r2,r2,8
100086bc:	d9003615 	stw	r4,216(sp)
100086c0:	d9403815 	stw	r5,224(sp)
100086c4:	d8802e15 	stw	r2,184(sp)
100086c8:	d9003617 	ldw	r4,216(sp)
100086cc:	d9403817 	ldw	r5,224(sp)
100086d0:	da003d15 	stw	r8,244(sp)
100086d4:	04000044 	movi	r16,1
100086d8:	000f3840 	call	1000f384 <__fpclassifyd>
100086dc:	da003d17 	ldw	r8,244(sp)
100086e0:	1404441e 	bne	r2,r16,100097f4 <___vfprintf_internal_r+0x174c>
100086e4:	d9003617 	ldw	r4,216(sp)
100086e8:	d9403817 	ldw	r5,224(sp)
100086ec:	000d883a 	mov	r6,zero
100086f0:	000f883a 	mov	r7,zero
100086f4:	00137540 	call	10013754 <__ledf2>
100086f8:	da003d17 	ldw	r8,244(sp)
100086fc:	1005e316 	blt	r2,zero,10009e8c <___vfprintf_internal_r+0x1de4>
10008700:	df002783 	ldbu	fp,158(sp)
10008704:	008011c4 	movi	r2,71
10008708:	1445580e 	bge	r2,r17,10009c6c <___vfprintf_internal_r+0x1bc4>
1000870c:	040400b4 	movhi	r16,4098
10008710:	8421e204 	addi	r16,r16,-30840
10008714:	00c000c4 	movi	r3,3
10008718:	00bfdfc4 	movi	r2,-129
1000871c:	d8c02915 	stw	r3,164(sp)
10008720:	90a4703a 	and	r18,r18,r2
10008724:	d8c02b15 	stw	r3,172(sp)
10008728:	d8002a15 	stw	zero,168(sp)
1000872c:	d8003215 	stw	zero,200(sp)
10008730:	00003a06 	br	1000881c <___vfprintf_internal_r+0x774>
10008734:	84000214 	ori	r16,r16,8
10008738:	ac400007 	ldb	r17,0(r21)
1000873c:	003ebc06 	br	10008230 <__alt_data_end+0xf8008230>
10008740:	8025883a 	mov	r18,r16
10008744:	dc002903 	ldbu	r16,164(sp)
10008748:	e011883a 	mov	r8,fp
1000874c:	84003fcc 	andi	r16,r16,255
10008750:	8007001e 	bne	r16,zero,1000a354 <___vfprintf_internal_r+0x22ac>
10008754:	94800414 	ori	r18,r18,16
10008758:	9080080c 	andi	r2,r18,32
1000875c:	1002fa26 	beq	r2,zero,10009348 <___vfprintf_internal_r+0x12a0>
10008760:	d9002e17 	ldw	r4,184(sp)
10008764:	d9402a17 	ldw	r5,168(sp)
10008768:	d8002785 	stb	zero,158(sp)
1000876c:	20800204 	addi	r2,r4,8
10008770:	24c00017 	ldw	r19,0(r4)
10008774:	25800117 	ldw	r22,4(r4)
10008778:	2804b116 	blt	r5,zero,10009a40 <___vfprintf_internal_r+0x1998>
1000877c:	013fdfc4 	movi	r4,-129
10008780:	9d86b03a 	or	r3,r19,r22
10008784:	d8802e15 	stw	r2,184(sp)
10008788:	9124703a 	and	r18,r18,r4
1000878c:	1802fb1e 	bne	r3,zero,1000937c <___vfprintf_internal_r+0x12d4>
10008790:	d8c02a17 	ldw	r3,168(sp)
10008794:	0039883a 	mov	fp,zero
10008798:	1805e526 	beq	r3,zero,10009f30 <___vfprintf_internal_r+0x1e88>
1000879c:	0027883a 	mov	r19,zero
100087a0:	002d883a 	mov	r22,zero
100087a4:	dc001e04 	addi	r16,sp,120
100087a8:	9806d0fa 	srli	r3,r19,3
100087ac:	b008977a 	slli	r4,r22,29
100087b0:	b02cd0fa 	srli	r22,r22,3
100087b4:	9cc001cc 	andi	r19,r19,7
100087b8:	98800c04 	addi	r2,r19,48
100087bc:	843fffc4 	addi	r16,r16,-1
100087c0:	20e6b03a 	or	r19,r4,r3
100087c4:	80800005 	stb	r2,0(r16)
100087c8:	9d86b03a 	or	r3,r19,r22
100087cc:	183ff61e 	bne	r3,zero,100087a8 <__alt_data_end+0xf80087a8>
100087d0:	90c0004c 	andi	r3,r18,1
100087d4:	18014126 	beq	r3,zero,10008cdc <___vfprintf_internal_r+0xc34>
100087d8:	10803fcc 	andi	r2,r2,255
100087dc:	1080201c 	xori	r2,r2,128
100087e0:	10bfe004 	addi	r2,r2,-128
100087e4:	00c00c04 	movi	r3,48
100087e8:	10c13c26 	beq	r2,r3,10008cdc <___vfprintf_internal_r+0xc34>
100087ec:	80ffffc5 	stb	r3,-1(r16)
100087f0:	d8c02817 	ldw	r3,160(sp)
100087f4:	80bfffc4 	addi	r2,r16,-1
100087f8:	1021883a 	mov	r16,r2
100087fc:	1887c83a 	sub	r3,r3,r2
10008800:	d8c02b15 	stw	r3,172(sp)
10008804:	d8802b17 	ldw	r2,172(sp)
10008808:	d9002a17 	ldw	r4,168(sp)
1000880c:	1100010e 	bge	r2,r4,10008814 <___vfprintf_internal_r+0x76c>
10008810:	2005883a 	mov	r2,r4
10008814:	d8802915 	stw	r2,164(sp)
10008818:	d8003215 	stw	zero,200(sp)
1000881c:	e7003fcc 	andi	fp,fp,255
10008820:	e700201c 	xori	fp,fp,128
10008824:	e73fe004 	addi	fp,fp,-128
10008828:	e0000326 	beq	fp,zero,10008838 <___vfprintf_internal_r+0x790>
1000882c:	d8c02917 	ldw	r3,164(sp)
10008830:	18c00044 	addi	r3,r3,1
10008834:	d8c02915 	stw	r3,164(sp)
10008838:	90c0008c 	andi	r3,r18,2
1000883c:	d8c02c15 	stw	r3,176(sp)
10008840:	18000326 	beq	r3,zero,10008850 <___vfprintf_internal_r+0x7a8>
10008844:	d8c02917 	ldw	r3,164(sp)
10008848:	18c00084 	addi	r3,r3,2
1000884c:	d8c02915 	stw	r3,164(sp)
10008850:	90c0210c 	andi	r3,r18,132
10008854:	d8c03015 	stw	r3,192(sp)
10008858:	1801c51e 	bne	r3,zero,10008f70 <___vfprintf_internal_r+0xec8>
1000885c:	d9003117 	ldw	r4,196(sp)
10008860:	d8c02917 	ldw	r3,164(sp)
10008864:	20e7c83a 	sub	r19,r4,r3
10008868:	04c1c10e 	bge	zero,r19,10008f70 <___vfprintf_internal_r+0xec8>
1000886c:	02400404 	movi	r9,16
10008870:	d8c02017 	ldw	r3,128(sp)
10008874:	d8801f17 	ldw	r2,124(sp)
10008878:	4cc52f0e 	bge	r9,r19,10009d38 <___vfprintf_internal_r+0x1c90>
1000887c:	014400b4 	movhi	r5,4098
10008880:	2961f584 	addi	r5,r5,-30762
10008884:	dc403b15 	stw	r17,236(sp)
10008888:	d9403515 	stw	r5,212(sp)
1000888c:	9823883a 	mov	r17,r19
10008890:	482d883a 	mov	r22,r9
10008894:	9027883a 	mov	r19,r18
10008898:	070001c4 	movi	fp,7
1000889c:	8025883a 	mov	r18,r16
100088a0:	dc002d17 	ldw	r16,180(sp)
100088a4:	00000306 	br	100088b4 <___vfprintf_internal_r+0x80c>
100088a8:	8c7ffc04 	addi	r17,r17,-16
100088ac:	42000204 	addi	r8,r8,8
100088b0:	b440130e 	bge	r22,r17,10008900 <___vfprintf_internal_r+0x858>
100088b4:	010400b4 	movhi	r4,4098
100088b8:	18c00404 	addi	r3,r3,16
100088bc:	10800044 	addi	r2,r2,1
100088c0:	2121f584 	addi	r4,r4,-30762
100088c4:	41000015 	stw	r4,0(r8)
100088c8:	45800115 	stw	r22,4(r8)
100088cc:	d8c02015 	stw	r3,128(sp)
100088d0:	d8801f15 	stw	r2,124(sp)
100088d4:	e0bff40e 	bge	fp,r2,100088a8 <__alt_data_end+0xf80088a8>
100088d8:	d9801e04 	addi	r6,sp,120
100088dc:	b80b883a 	mov	r5,r23
100088e0:	8009883a 	mov	r4,r16
100088e4:	000f7600 	call	1000f760 <__sprint_r>
100088e8:	103ef31e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
100088ec:	8c7ffc04 	addi	r17,r17,-16
100088f0:	d8c02017 	ldw	r3,128(sp)
100088f4:	d8801f17 	ldw	r2,124(sp)
100088f8:	da000404 	addi	r8,sp,16
100088fc:	b47fed16 	blt	r22,r17,100088b4 <__alt_data_end+0xf80088b4>
10008900:	9021883a 	mov	r16,r18
10008904:	9825883a 	mov	r18,r19
10008908:	8827883a 	mov	r19,r17
1000890c:	dc403b17 	ldw	r17,236(sp)
10008910:	d9403517 	ldw	r5,212(sp)
10008914:	98c7883a 	add	r3,r19,r3
10008918:	10800044 	addi	r2,r2,1
1000891c:	41400015 	stw	r5,0(r8)
10008920:	44c00115 	stw	r19,4(r8)
10008924:	d8c02015 	stw	r3,128(sp)
10008928:	d8801f15 	stw	r2,124(sp)
1000892c:	010001c4 	movi	r4,7
10008930:	2082c516 	blt	r4,r2,10009448 <___vfprintf_internal_r+0x13a0>
10008934:	df002787 	ldb	fp,158(sp)
10008938:	42000204 	addi	r8,r8,8
1000893c:	e0000c26 	beq	fp,zero,10008970 <___vfprintf_internal_r+0x8c8>
10008940:	d8801f17 	ldw	r2,124(sp)
10008944:	d9002784 	addi	r4,sp,158
10008948:	18c00044 	addi	r3,r3,1
1000894c:	10800044 	addi	r2,r2,1
10008950:	41000015 	stw	r4,0(r8)
10008954:	01000044 	movi	r4,1
10008958:	41000115 	stw	r4,4(r8)
1000895c:	d8c02015 	stw	r3,128(sp)
10008960:	d8801f15 	stw	r2,124(sp)
10008964:	010001c4 	movi	r4,7
10008968:	20825e16 	blt	r4,r2,100092e4 <___vfprintf_internal_r+0x123c>
1000896c:	42000204 	addi	r8,r8,8
10008970:	d8802c17 	ldw	r2,176(sp)
10008974:	10000c26 	beq	r2,zero,100089a8 <___vfprintf_internal_r+0x900>
10008978:	d8801f17 	ldw	r2,124(sp)
1000897c:	d9002704 	addi	r4,sp,156
10008980:	18c00084 	addi	r3,r3,2
10008984:	10800044 	addi	r2,r2,1
10008988:	41000015 	stw	r4,0(r8)
1000898c:	01000084 	movi	r4,2
10008990:	41000115 	stw	r4,4(r8)
10008994:	d8c02015 	stw	r3,128(sp)
10008998:	d8801f15 	stw	r2,124(sp)
1000899c:	010001c4 	movi	r4,7
100089a0:	20825816 	blt	r4,r2,10009304 <___vfprintf_internal_r+0x125c>
100089a4:	42000204 	addi	r8,r8,8
100089a8:	d9003017 	ldw	r4,192(sp)
100089ac:	00802004 	movi	r2,128
100089b0:	2081bb26 	beq	r4,r2,100090a0 <___vfprintf_internal_r+0xff8>
100089b4:	d9402a17 	ldw	r5,168(sp)
100089b8:	d8802b17 	ldw	r2,172(sp)
100089bc:	28adc83a 	sub	r22,r5,r2
100089c0:	0580310e 	bge	zero,r22,10008a88 <___vfprintf_internal_r+0x9e0>
100089c4:	07000404 	movi	fp,16
100089c8:	d8801f17 	ldw	r2,124(sp)
100089cc:	e584360e 	bge	fp,r22,10009aa8 <___vfprintf_internal_r+0x1a00>
100089d0:	014400b4 	movhi	r5,4098
100089d4:	2961f184 	addi	r5,r5,-30778
100089d8:	dc402a15 	stw	r17,168(sp)
100089dc:	d9402c15 	stw	r5,176(sp)
100089e0:	b023883a 	mov	r17,r22
100089e4:	04c001c4 	movi	r19,7
100089e8:	a82d883a 	mov	r22,r21
100089ec:	902b883a 	mov	r21,r18
100089f0:	8025883a 	mov	r18,r16
100089f4:	dc002d17 	ldw	r16,180(sp)
100089f8:	00000306 	br	10008a08 <___vfprintf_internal_r+0x960>
100089fc:	8c7ffc04 	addi	r17,r17,-16
10008a00:	42000204 	addi	r8,r8,8
10008a04:	e440110e 	bge	fp,r17,10008a4c <___vfprintf_internal_r+0x9a4>
10008a08:	18c00404 	addi	r3,r3,16
10008a0c:	10800044 	addi	r2,r2,1
10008a10:	45000015 	stw	r20,0(r8)
10008a14:	47000115 	stw	fp,4(r8)
10008a18:	d8c02015 	stw	r3,128(sp)
10008a1c:	d8801f15 	stw	r2,124(sp)
10008a20:	98bff60e 	bge	r19,r2,100089fc <__alt_data_end+0xf80089fc>
10008a24:	d9801e04 	addi	r6,sp,120
10008a28:	b80b883a 	mov	r5,r23
10008a2c:	8009883a 	mov	r4,r16
10008a30:	000f7600 	call	1000f760 <__sprint_r>
10008a34:	103ea01e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10008a38:	8c7ffc04 	addi	r17,r17,-16
10008a3c:	d8c02017 	ldw	r3,128(sp)
10008a40:	d8801f17 	ldw	r2,124(sp)
10008a44:	da000404 	addi	r8,sp,16
10008a48:	e47fef16 	blt	fp,r17,10008a08 <__alt_data_end+0xf8008a08>
10008a4c:	9021883a 	mov	r16,r18
10008a50:	a825883a 	mov	r18,r21
10008a54:	b02b883a 	mov	r21,r22
10008a58:	882d883a 	mov	r22,r17
10008a5c:	dc402a17 	ldw	r17,168(sp)
10008a60:	d9002c17 	ldw	r4,176(sp)
10008a64:	1d87883a 	add	r3,r3,r22
10008a68:	10800044 	addi	r2,r2,1
10008a6c:	41000015 	stw	r4,0(r8)
10008a70:	45800115 	stw	r22,4(r8)
10008a74:	d8c02015 	stw	r3,128(sp)
10008a78:	d8801f15 	stw	r2,124(sp)
10008a7c:	010001c4 	movi	r4,7
10008a80:	20821016 	blt	r4,r2,100092c4 <___vfprintf_internal_r+0x121c>
10008a84:	42000204 	addi	r8,r8,8
10008a88:	9080400c 	andi	r2,r18,256
10008a8c:	10013a1e 	bne	r2,zero,10008f78 <___vfprintf_internal_r+0xed0>
10008a90:	d9402b17 	ldw	r5,172(sp)
10008a94:	d8801f17 	ldw	r2,124(sp)
10008a98:	44000015 	stw	r16,0(r8)
10008a9c:	1947883a 	add	r3,r3,r5
10008aa0:	10800044 	addi	r2,r2,1
10008aa4:	41400115 	stw	r5,4(r8)
10008aa8:	d8c02015 	stw	r3,128(sp)
10008aac:	d8801f15 	stw	r2,124(sp)
10008ab0:	010001c4 	movi	r4,7
10008ab4:	2081f516 	blt	r4,r2,1000928c <___vfprintf_internal_r+0x11e4>
10008ab8:	42000204 	addi	r8,r8,8
10008abc:	9480010c 	andi	r18,r18,4
10008ac0:	90003226 	beq	r18,zero,10008b8c <___vfprintf_internal_r+0xae4>
10008ac4:	d9403117 	ldw	r5,196(sp)
10008ac8:	d8802917 	ldw	r2,164(sp)
10008acc:	28a1c83a 	sub	r16,r5,r2
10008ad0:	04002e0e 	bge	zero,r16,10008b8c <___vfprintf_internal_r+0xae4>
10008ad4:	04400404 	movi	r17,16
10008ad8:	d8801f17 	ldw	r2,124(sp)
10008adc:	8c04c40e 	bge	r17,r16,10009df0 <___vfprintf_internal_r+0x1d48>
10008ae0:	014400b4 	movhi	r5,4098
10008ae4:	2961f584 	addi	r5,r5,-30762
10008ae8:	d9403515 	stw	r5,212(sp)
10008aec:	048001c4 	movi	r18,7
10008af0:	dcc02d17 	ldw	r19,180(sp)
10008af4:	00000306 	br	10008b04 <___vfprintf_internal_r+0xa5c>
10008af8:	843ffc04 	addi	r16,r16,-16
10008afc:	42000204 	addi	r8,r8,8
10008b00:	8c00130e 	bge	r17,r16,10008b50 <___vfprintf_internal_r+0xaa8>
10008b04:	010400b4 	movhi	r4,4098
10008b08:	18c00404 	addi	r3,r3,16
10008b0c:	10800044 	addi	r2,r2,1
10008b10:	2121f584 	addi	r4,r4,-30762
10008b14:	41000015 	stw	r4,0(r8)
10008b18:	44400115 	stw	r17,4(r8)
10008b1c:	d8c02015 	stw	r3,128(sp)
10008b20:	d8801f15 	stw	r2,124(sp)
10008b24:	90bff40e 	bge	r18,r2,10008af8 <__alt_data_end+0xf8008af8>
10008b28:	d9801e04 	addi	r6,sp,120
10008b2c:	b80b883a 	mov	r5,r23
10008b30:	9809883a 	mov	r4,r19
10008b34:	000f7600 	call	1000f760 <__sprint_r>
10008b38:	103e5f1e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10008b3c:	843ffc04 	addi	r16,r16,-16
10008b40:	d8c02017 	ldw	r3,128(sp)
10008b44:	d8801f17 	ldw	r2,124(sp)
10008b48:	da000404 	addi	r8,sp,16
10008b4c:	8c3fed16 	blt	r17,r16,10008b04 <__alt_data_end+0xf8008b04>
10008b50:	d9403517 	ldw	r5,212(sp)
10008b54:	1c07883a 	add	r3,r3,r16
10008b58:	10800044 	addi	r2,r2,1
10008b5c:	41400015 	stw	r5,0(r8)
10008b60:	44000115 	stw	r16,4(r8)
10008b64:	d8c02015 	stw	r3,128(sp)
10008b68:	d8801f15 	stw	r2,124(sp)
10008b6c:	010001c4 	movi	r4,7
10008b70:	2080060e 	bge	r4,r2,10008b8c <___vfprintf_internal_r+0xae4>
10008b74:	d9002d17 	ldw	r4,180(sp)
10008b78:	d9801e04 	addi	r6,sp,120
10008b7c:	b80b883a 	mov	r5,r23
10008b80:	000f7600 	call	1000f760 <__sprint_r>
10008b84:	103e4c1e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10008b88:	d8c02017 	ldw	r3,128(sp)
10008b8c:	d8803117 	ldw	r2,196(sp)
10008b90:	d9002917 	ldw	r4,164(sp)
10008b94:	1100010e 	bge	r2,r4,10008b9c <___vfprintf_internal_r+0xaf4>
10008b98:	2005883a 	mov	r2,r4
10008b9c:	d9402f17 	ldw	r5,188(sp)
10008ba0:	288b883a 	add	r5,r5,r2
10008ba4:	d9402f15 	stw	r5,188(sp)
10008ba8:	1801c01e 	bne	r3,zero,100092ac <___vfprintf_internal_r+0x1204>
10008bac:	a8800007 	ldb	r2,0(r21)
10008bb0:	d8001f15 	stw	zero,124(sp)
10008bb4:	da000404 	addi	r8,sp,16
10008bb8:	103d751e 	bne	r2,zero,10008190 <__alt_data_end+0xf8008190>
10008bbc:	a823883a 	mov	r17,r21
10008bc0:	003d8b06 	br	100081f0 <__alt_data_end+0xf80081f0>
10008bc4:	8025883a 	mov	r18,r16
10008bc8:	dc002903 	ldbu	r16,164(sp)
10008bcc:	e011883a 	mov	r8,fp
10008bd0:	84003fcc 	andi	r16,r16,255
10008bd4:	8005e51e 	bne	r16,zero,1000a36c <___vfprintf_internal_r+0x22c4>
10008bd8:	94800414 	ori	r18,r18,16
10008bdc:	9080080c 	andi	r2,r18,32
10008be0:	10022b26 	beq	r2,zero,10009490 <___vfprintf_internal_r+0x13e8>
10008be4:	d9002e17 	ldw	r4,184(sp)
10008be8:	d9402a17 	ldw	r5,168(sp)
10008bec:	d8002785 	stb	zero,158(sp)
10008bf0:	20c00204 	addi	r3,r4,8
10008bf4:	24c00017 	ldw	r19,0(r4)
10008bf8:	25800117 	ldw	r22,4(r4)
10008bfc:	28042e16 	blt	r5,zero,10009cb8 <___vfprintf_internal_r+0x1c10>
10008c00:	013fdfc4 	movi	r4,-129
10008c04:	9d84b03a 	or	r2,r19,r22
10008c08:	d8c02e15 	stw	r3,184(sp)
10008c0c:	9124703a 	and	r18,r18,r4
10008c10:	0039883a 	mov	fp,zero
10008c14:	103e801e 	bne	r2,zero,10008618 <__alt_data_end+0xf8008618>
10008c18:	d9002a17 	ldw	r4,168(sp)
10008c1c:	2002e01e 	bne	r4,zero,100097a0 <___vfprintf_internal_r+0x16f8>
10008c20:	d8002a15 	stw	zero,168(sp)
10008c24:	d8002b15 	stw	zero,172(sp)
10008c28:	dc001e04 	addi	r16,sp,120
10008c2c:	003ef506 	br	10008804 <__alt_data_end+0xf8008804>
10008c30:	8025883a 	mov	r18,r16
10008c34:	dc002903 	ldbu	r16,164(sp)
10008c38:	e011883a 	mov	r8,fp
10008c3c:	84003fcc 	andi	r16,r16,255
10008c40:	8005ba1e 	bne	r16,zero,1000a32c <___vfprintf_internal_r+0x2284>
10008c44:	010400b4 	movhi	r4,4098
10008c48:	2121e504 	addi	r4,r4,-30828
10008c4c:	d9003915 	stw	r4,228(sp)
10008c50:	9080080c 	andi	r2,r18,32
10008c54:	10006126 	beq	r2,zero,10008ddc <___vfprintf_internal_r+0xd34>
10008c58:	d9402e17 	ldw	r5,184(sp)
10008c5c:	2cc00017 	ldw	r19,0(r5)
10008c60:	2d800117 	ldw	r22,4(r5)
10008c64:	29400204 	addi	r5,r5,8
10008c68:	d9402e15 	stw	r5,184(sp)
10008c6c:	9080004c 	andi	r2,r18,1
10008c70:	1001ac26 	beq	r2,zero,10009324 <___vfprintf_internal_r+0x127c>
10008c74:	9d84b03a 	or	r2,r19,r22
10008c78:	10038526 	beq	r2,zero,10009a90 <___vfprintf_internal_r+0x19e8>
10008c7c:	d8c02a17 	ldw	r3,168(sp)
10008c80:	00800c04 	movi	r2,48
10008c84:	d8802705 	stb	r2,156(sp)
10008c88:	dc402745 	stb	r17,157(sp)
10008c8c:	d8002785 	stb	zero,158(sp)
10008c90:	90800094 	ori	r2,r18,2
10008c94:	18047916 	blt	r3,zero,10009e7c <___vfprintf_internal_r+0x1dd4>
10008c98:	00bfdfc4 	movi	r2,-129
10008c9c:	90a4703a 	and	r18,r18,r2
10008ca0:	94800094 	ori	r18,r18,2
10008ca4:	0039883a 	mov	fp,zero
10008ca8:	d9003917 	ldw	r4,228(sp)
10008cac:	dc001e04 	addi	r16,sp,120
10008cb0:	988003cc 	andi	r2,r19,15
10008cb4:	b006973a 	slli	r3,r22,28
10008cb8:	2085883a 	add	r2,r4,r2
10008cbc:	9826d13a 	srli	r19,r19,4
10008cc0:	10800003 	ldbu	r2,0(r2)
10008cc4:	b02cd13a 	srli	r22,r22,4
10008cc8:	843fffc4 	addi	r16,r16,-1
10008ccc:	1ce6b03a 	or	r19,r3,r19
10008cd0:	80800005 	stb	r2,0(r16)
10008cd4:	9d84b03a 	or	r2,r19,r22
10008cd8:	103ff51e 	bne	r2,zero,10008cb0 <__alt_data_end+0xf8008cb0>
10008cdc:	d8c02817 	ldw	r3,160(sp)
10008ce0:	1c07c83a 	sub	r3,r3,r16
10008ce4:	d8c02b15 	stw	r3,172(sp)
10008ce8:	003ec606 	br	10008804 <__alt_data_end+0xf8008804>
10008cec:	8025883a 	mov	r18,r16
10008cf0:	dc002903 	ldbu	r16,164(sp)
10008cf4:	e011883a 	mov	r8,fp
10008cf8:	84003fcc 	andi	r16,r16,255
10008cfc:	803e9626 	beq	r16,zero,10008758 <__alt_data_end+0xf8008758>
10008d00:	d8c02b03 	ldbu	r3,172(sp)
10008d04:	d8c02785 	stb	r3,158(sp)
10008d08:	003e9306 	br	10008758 <__alt_data_end+0xf8008758>
10008d0c:	00c00044 	movi	r3,1
10008d10:	d8c02905 	stb	r3,164(sp)
10008d14:	00c00ac4 	movi	r3,43
10008d18:	d8c02b05 	stb	r3,172(sp)
10008d1c:	ac400007 	ldb	r17,0(r21)
10008d20:	003d4306 	br	10008230 <__alt_data_end+0xf8008230>
10008d24:	84000814 	ori	r16,r16,32
10008d28:	ac400007 	ldb	r17,0(r21)
10008d2c:	003d4006 	br	10008230 <__alt_data_end+0xf8008230>
10008d30:	d8802e17 	ldw	r2,184(sp)
10008d34:	8025883a 	mov	r18,r16
10008d38:	d8002785 	stb	zero,158(sp)
10008d3c:	14000017 	ldw	r16,0(r2)
10008d40:	e011883a 	mov	r8,fp
10008d44:	14c00104 	addi	r19,r2,4
10008d48:	80042d26 	beq	r16,zero,10009e00 <___vfprintf_internal_r+0x1d58>
10008d4c:	d8c02a17 	ldw	r3,168(sp)
10008d50:	1803e416 	blt	r3,zero,10009ce4 <___vfprintf_internal_r+0x1c3c>
10008d54:	180d883a 	mov	r6,r3
10008d58:	000b883a 	mov	r5,zero
10008d5c:	8009883a 	mov	r4,r16
10008d60:	df003d15 	stw	fp,244(sp)
10008d64:	000d9e00 	call	1000d9e0 <memchr>
10008d68:	da003d17 	ldw	r8,244(sp)
10008d6c:	10046826 	beq	r2,zero,10009f10 <___vfprintf_internal_r+0x1e68>
10008d70:	1405c83a 	sub	r2,r2,r16
10008d74:	d8802b15 	stw	r2,172(sp)
10008d78:	1003e016 	blt	r2,zero,10009cfc <___vfprintf_internal_r+0x1c54>
10008d7c:	df002783 	ldbu	fp,158(sp)
10008d80:	d8802915 	stw	r2,164(sp)
10008d84:	dcc02e15 	stw	r19,184(sp)
10008d88:	d8002a15 	stw	zero,168(sp)
10008d8c:	d8003215 	stw	zero,200(sp)
10008d90:	003ea206 	br	1000881c <__alt_data_end+0xf800881c>
10008d94:	8025883a 	mov	r18,r16
10008d98:	dc002903 	ldbu	r16,164(sp)
10008d9c:	e011883a 	mov	r8,fp
10008da0:	84003fcc 	andi	r16,r16,255
10008da4:	803f8d26 	beq	r16,zero,10008bdc <__alt_data_end+0xf8008bdc>
10008da8:	d8c02b03 	ldbu	r3,172(sp)
10008dac:	d8c02785 	stb	r3,158(sp)
10008db0:	003f8a06 	br	10008bdc <__alt_data_end+0xf8008bdc>
10008db4:	8025883a 	mov	r18,r16
10008db8:	dc002903 	ldbu	r16,164(sp)
10008dbc:	e011883a 	mov	r8,fp
10008dc0:	84003fcc 	andi	r16,r16,255
10008dc4:	8005661e 	bne	r16,zero,1000a360 <___vfprintf_internal_r+0x22b8>
10008dc8:	010400b4 	movhi	r4,4098
10008dcc:	2121ea04 	addi	r4,r4,-30808
10008dd0:	d9003915 	stw	r4,228(sp)
10008dd4:	9080080c 	andi	r2,r18,32
10008dd8:	103f9f1e 	bne	r2,zero,10008c58 <__alt_data_end+0xf8008c58>
10008ddc:	9080040c 	andi	r2,r18,16
10008de0:	1002eb26 	beq	r2,zero,10009990 <___vfprintf_internal_r+0x18e8>
10008de4:	d8802e17 	ldw	r2,184(sp)
10008de8:	002d883a 	mov	r22,zero
10008dec:	14c00017 	ldw	r19,0(r2)
10008df0:	10800104 	addi	r2,r2,4
10008df4:	d8802e15 	stw	r2,184(sp)
10008df8:	003f9c06 	br	10008c6c <__alt_data_end+0xf8008c6c>
10008dfc:	d8802b07 	ldb	r2,172(sp)
10008e00:	1002e11e 	bne	r2,zero,10009988 <___vfprintf_internal_r+0x18e0>
10008e04:	00c00044 	movi	r3,1
10008e08:	d8c02905 	stb	r3,164(sp)
10008e0c:	00c00804 	movi	r3,32
10008e10:	d8c02b05 	stb	r3,172(sp)
10008e14:	ac400007 	ldb	r17,0(r21)
10008e18:	003d0506 	br	10008230 <__alt_data_end+0xf8008230>
10008e1c:	84000054 	ori	r16,r16,1
10008e20:	ac400007 	ldb	r17,0(r21)
10008e24:	003d0206 	br	10008230 <__alt_data_end+0xf8008230>
10008e28:	8025883a 	mov	r18,r16
10008e2c:	dc002903 	ldbu	r16,164(sp)
10008e30:	e011883a 	mov	r8,fp
10008e34:	84003fcc 	andi	r16,r16,255
10008e38:	803de726 	beq	r16,zero,100085d8 <__alt_data_end+0xf80085d8>
10008e3c:	d8c02b03 	ldbu	r3,172(sp)
10008e40:	d8c02785 	stb	r3,158(sp)
10008e44:	003de406 	br	100085d8 <__alt_data_end+0xf80085d8>
10008e48:	84001014 	ori	r16,r16,64
10008e4c:	ac400007 	ldb	r17,0(r21)
10008e50:	003cf706 	br	10008230 <__alt_data_end+0xf8008230>
10008e54:	ac400007 	ldb	r17,0(r21)
10008e58:	00801b04 	movi	r2,108
10008e5c:	88838f26 	beq	r17,r2,10009c9c <___vfprintf_internal_r+0x1bf4>
10008e60:	84000414 	ori	r16,r16,16
10008e64:	003cf206 	br	10008230 <__alt_data_end+0xf8008230>
10008e68:	8025883a 	mov	r18,r16
10008e6c:	dc002903 	ldbu	r16,164(sp)
10008e70:	e011883a 	mov	r8,fp
10008e74:	84003fcc 	andi	r16,r16,255
10008e78:	80053f1e 	bne	r16,zero,1000a378 <___vfprintf_internal_r+0x22d0>
10008e7c:	9080080c 	andi	r2,r18,32
10008e80:	1002d226 	beq	r2,zero,100099cc <___vfprintf_internal_r+0x1924>
10008e84:	d9002e17 	ldw	r4,184(sp)
10008e88:	d9402f17 	ldw	r5,188(sp)
10008e8c:	20800017 	ldw	r2,0(r4)
10008e90:	2807d7fa 	srai	r3,r5,31
10008e94:	21000104 	addi	r4,r4,4
10008e98:	d9002e15 	stw	r4,184(sp)
10008e9c:	11400015 	stw	r5,0(r2)
10008ea0:	10c00115 	stw	r3,4(r2)
10008ea4:	003cb806 	br	10008188 <__alt_data_end+0xf8008188>
10008ea8:	d8c02e17 	ldw	r3,184(sp)
10008eac:	d9002e17 	ldw	r4,184(sp)
10008eb0:	8025883a 	mov	r18,r16
10008eb4:	18800017 	ldw	r2,0(r3)
10008eb8:	21000104 	addi	r4,r4,4
10008ebc:	00c00044 	movi	r3,1
10008ec0:	e011883a 	mov	r8,fp
10008ec4:	d8c02915 	stw	r3,164(sp)
10008ec8:	d8002785 	stb	zero,158(sp)
10008ecc:	d8801405 	stb	r2,80(sp)
10008ed0:	d9002e15 	stw	r4,184(sp)
10008ed4:	d8c02b15 	stw	r3,172(sp)
10008ed8:	d8002a15 	stw	zero,168(sp)
10008edc:	d8003215 	stw	zero,200(sp)
10008ee0:	dc001404 	addi	r16,sp,80
10008ee4:	0039883a 	mov	fp,zero
10008ee8:	003e5306 	br	10008838 <__alt_data_end+0xf8008838>
10008eec:	010400b4 	movhi	r4,4098
10008ef0:	2121ea04 	addi	r4,r4,-30808
10008ef4:	0039883a 	mov	fp,zero
10008ef8:	d9003915 	stw	r4,228(sp)
10008efc:	04401e04 	movi	r17,120
10008f00:	003f6906 	br	10008ca8 <__alt_data_end+0xf8008ca8>
10008f04:	8025883a 	mov	r18,r16
10008f08:	dc002903 	ldbu	r16,164(sp)
10008f0c:	e011883a 	mov	r8,fp
10008f10:	84003fcc 	andi	r16,r16,255
10008f14:	8005081e 	bne	r16,zero,1000a338 <___vfprintf_internal_r+0x2290>
10008f18:	883d6126 	beq	r17,zero,100084a0 <__alt_data_end+0xf80084a0>
10008f1c:	00c00044 	movi	r3,1
10008f20:	d8c02915 	stw	r3,164(sp)
10008f24:	dc401405 	stb	r17,80(sp)
10008f28:	d8002785 	stb	zero,158(sp)
10008f2c:	003fe906 	br	10008ed4 <__alt_data_end+0xf8008ed4>
10008f30:	014400b4 	movhi	r5,4098
10008f34:	2961ea04 	addi	r5,r5,-30808
10008f38:	d9403915 	stw	r5,228(sp)
10008f3c:	d8c02e15 	stw	r3,184(sp)
10008f40:	1025883a 	mov	r18,r2
10008f44:	04401e04 	movi	r17,120
10008f48:	9d84b03a 	or	r2,r19,r22
10008f4c:	1000fc1e 	bne	r2,zero,10009340 <___vfprintf_internal_r+0x1298>
10008f50:	0039883a 	mov	fp,zero
10008f54:	00800084 	movi	r2,2
10008f58:	10803fcc 	andi	r2,r2,255
10008f5c:	00c00044 	movi	r3,1
10008f60:	10c20f26 	beq	r2,r3,100097a0 <___vfprintf_internal_r+0x16f8>
10008f64:	00c00084 	movi	r3,2
10008f68:	10fd3326 	beq	r2,r3,10008438 <__alt_data_end+0xf8008438>
10008f6c:	003e0b06 	br	1000879c <__alt_data_end+0xf800879c>
10008f70:	d8c02017 	ldw	r3,128(sp)
10008f74:	003e7106 	br	1000893c <__alt_data_end+0xf800893c>
10008f78:	00801944 	movi	r2,101
10008f7c:	14407e0e 	bge	r2,r17,10009178 <___vfprintf_internal_r+0x10d0>
10008f80:	d9003617 	ldw	r4,216(sp)
10008f84:	d9403817 	ldw	r5,224(sp)
10008f88:	000d883a 	mov	r6,zero
10008f8c:	000f883a 	mov	r7,zero
10008f90:	d8c03c15 	stw	r3,240(sp)
10008f94:	da003d15 	stw	r8,244(sp)
10008f98:	00135f00 	call	100135f0 <__eqdf2>
10008f9c:	d8c03c17 	ldw	r3,240(sp)
10008fa0:	da003d17 	ldw	r8,244(sp)
10008fa4:	1000f71e 	bne	r2,zero,10009384 <___vfprintf_internal_r+0x12dc>
10008fa8:	d8801f17 	ldw	r2,124(sp)
10008fac:	010400b4 	movhi	r4,4098
10008fb0:	2121f104 	addi	r4,r4,-30780
10008fb4:	18c00044 	addi	r3,r3,1
10008fb8:	10800044 	addi	r2,r2,1
10008fbc:	41000015 	stw	r4,0(r8)
10008fc0:	01000044 	movi	r4,1
10008fc4:	41000115 	stw	r4,4(r8)
10008fc8:	d8c02015 	stw	r3,128(sp)
10008fcc:	d8801f15 	stw	r2,124(sp)
10008fd0:	010001c4 	movi	r4,7
10008fd4:	2082b816 	blt	r4,r2,10009ab8 <___vfprintf_internal_r+0x1a10>
10008fd8:	42000204 	addi	r8,r8,8
10008fdc:	d8802617 	ldw	r2,152(sp)
10008fe0:	d9403317 	ldw	r5,204(sp)
10008fe4:	11400216 	blt	r2,r5,10008ff0 <___vfprintf_internal_r+0xf48>
10008fe8:	9080004c 	andi	r2,r18,1
10008fec:	103eb326 	beq	r2,zero,10008abc <__alt_data_end+0xf8008abc>
10008ff0:	d8803717 	ldw	r2,220(sp)
10008ff4:	d9003417 	ldw	r4,208(sp)
10008ff8:	d9403717 	ldw	r5,220(sp)
10008ffc:	1887883a 	add	r3,r3,r2
10009000:	d8801f17 	ldw	r2,124(sp)
10009004:	41000015 	stw	r4,0(r8)
10009008:	41400115 	stw	r5,4(r8)
1000900c:	10800044 	addi	r2,r2,1
10009010:	d8c02015 	stw	r3,128(sp)
10009014:	d8801f15 	stw	r2,124(sp)
10009018:	010001c4 	movi	r4,7
1000901c:	20832916 	blt	r4,r2,10009cc4 <___vfprintf_internal_r+0x1c1c>
10009020:	42000204 	addi	r8,r8,8
10009024:	d8803317 	ldw	r2,204(sp)
10009028:	143fffc4 	addi	r16,r2,-1
1000902c:	043ea30e 	bge	zero,r16,10008abc <__alt_data_end+0xf8008abc>
10009030:	04400404 	movi	r17,16
10009034:	d8801f17 	ldw	r2,124(sp)
10009038:	8c00880e 	bge	r17,r16,1000925c <___vfprintf_internal_r+0x11b4>
1000903c:	014400b4 	movhi	r5,4098
10009040:	2961f184 	addi	r5,r5,-30778
10009044:	d9402c15 	stw	r5,176(sp)
10009048:	058001c4 	movi	r22,7
1000904c:	dcc02d17 	ldw	r19,180(sp)
10009050:	00000306 	br	10009060 <___vfprintf_internal_r+0xfb8>
10009054:	42000204 	addi	r8,r8,8
10009058:	843ffc04 	addi	r16,r16,-16
1000905c:	8c00820e 	bge	r17,r16,10009268 <___vfprintf_internal_r+0x11c0>
10009060:	18c00404 	addi	r3,r3,16
10009064:	10800044 	addi	r2,r2,1
10009068:	45000015 	stw	r20,0(r8)
1000906c:	44400115 	stw	r17,4(r8)
10009070:	d8c02015 	stw	r3,128(sp)
10009074:	d8801f15 	stw	r2,124(sp)
10009078:	b0bff60e 	bge	r22,r2,10009054 <__alt_data_end+0xf8009054>
1000907c:	d9801e04 	addi	r6,sp,120
10009080:	b80b883a 	mov	r5,r23
10009084:	9809883a 	mov	r4,r19
10009088:	000f7600 	call	1000f760 <__sprint_r>
1000908c:	103d0a1e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10009090:	d8c02017 	ldw	r3,128(sp)
10009094:	d8801f17 	ldw	r2,124(sp)
10009098:	da000404 	addi	r8,sp,16
1000909c:	003fee06 	br	10009058 <__alt_data_end+0xf8009058>
100090a0:	d9403117 	ldw	r5,196(sp)
100090a4:	d8802917 	ldw	r2,164(sp)
100090a8:	28adc83a 	sub	r22,r5,r2
100090ac:	05be410e 	bge	zero,r22,100089b4 <__alt_data_end+0xf80089b4>
100090b0:	07000404 	movi	fp,16
100090b4:	d8801f17 	ldw	r2,124(sp)
100090b8:	e5838f0e 	bge	fp,r22,10009ef8 <___vfprintf_internal_r+0x1e50>
100090bc:	014400b4 	movhi	r5,4098
100090c0:	2961f184 	addi	r5,r5,-30778
100090c4:	dc403015 	stw	r17,192(sp)
100090c8:	d9402c15 	stw	r5,176(sp)
100090cc:	b023883a 	mov	r17,r22
100090d0:	04c001c4 	movi	r19,7
100090d4:	a82d883a 	mov	r22,r21
100090d8:	902b883a 	mov	r21,r18
100090dc:	8025883a 	mov	r18,r16
100090e0:	dc002d17 	ldw	r16,180(sp)
100090e4:	00000306 	br	100090f4 <___vfprintf_internal_r+0x104c>
100090e8:	8c7ffc04 	addi	r17,r17,-16
100090ec:	42000204 	addi	r8,r8,8
100090f0:	e440110e 	bge	fp,r17,10009138 <___vfprintf_internal_r+0x1090>
100090f4:	18c00404 	addi	r3,r3,16
100090f8:	10800044 	addi	r2,r2,1
100090fc:	45000015 	stw	r20,0(r8)
10009100:	47000115 	stw	fp,4(r8)
10009104:	d8c02015 	stw	r3,128(sp)
10009108:	d8801f15 	stw	r2,124(sp)
1000910c:	98bff60e 	bge	r19,r2,100090e8 <__alt_data_end+0xf80090e8>
10009110:	d9801e04 	addi	r6,sp,120
10009114:	b80b883a 	mov	r5,r23
10009118:	8009883a 	mov	r4,r16
1000911c:	000f7600 	call	1000f760 <__sprint_r>
10009120:	103ce51e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10009124:	8c7ffc04 	addi	r17,r17,-16
10009128:	d8c02017 	ldw	r3,128(sp)
1000912c:	d8801f17 	ldw	r2,124(sp)
10009130:	da000404 	addi	r8,sp,16
10009134:	e47fef16 	blt	fp,r17,100090f4 <__alt_data_end+0xf80090f4>
10009138:	9021883a 	mov	r16,r18
1000913c:	a825883a 	mov	r18,r21
10009140:	b02b883a 	mov	r21,r22
10009144:	882d883a 	mov	r22,r17
10009148:	dc403017 	ldw	r17,192(sp)
1000914c:	d9002c17 	ldw	r4,176(sp)
10009150:	1d87883a 	add	r3,r3,r22
10009154:	10800044 	addi	r2,r2,1
10009158:	41000015 	stw	r4,0(r8)
1000915c:	45800115 	stw	r22,4(r8)
10009160:	d8c02015 	stw	r3,128(sp)
10009164:	d8801f15 	stw	r2,124(sp)
10009168:	010001c4 	movi	r4,7
1000916c:	20818e16 	blt	r4,r2,100097a8 <___vfprintf_internal_r+0x1700>
10009170:	42000204 	addi	r8,r8,8
10009174:	003e0f06 	br	100089b4 <__alt_data_end+0xf80089b4>
10009178:	d9403317 	ldw	r5,204(sp)
1000917c:	00800044 	movi	r2,1
10009180:	18c00044 	addi	r3,r3,1
10009184:	1141530e 	bge	r2,r5,100096d4 <___vfprintf_internal_r+0x162c>
10009188:	dc401f17 	ldw	r17,124(sp)
1000918c:	00800044 	movi	r2,1
10009190:	40800115 	stw	r2,4(r8)
10009194:	8c400044 	addi	r17,r17,1
10009198:	44000015 	stw	r16,0(r8)
1000919c:	d8c02015 	stw	r3,128(sp)
100091a0:	dc401f15 	stw	r17,124(sp)
100091a4:	008001c4 	movi	r2,7
100091a8:	14416b16 	blt	r2,r17,10009758 <___vfprintf_internal_r+0x16b0>
100091ac:	42000204 	addi	r8,r8,8
100091b0:	d8803717 	ldw	r2,220(sp)
100091b4:	d9003417 	ldw	r4,208(sp)
100091b8:	8c400044 	addi	r17,r17,1
100091bc:	10c7883a 	add	r3,r2,r3
100091c0:	40800115 	stw	r2,4(r8)
100091c4:	41000015 	stw	r4,0(r8)
100091c8:	d8c02015 	stw	r3,128(sp)
100091cc:	dc401f15 	stw	r17,124(sp)
100091d0:	008001c4 	movi	r2,7
100091d4:	14416916 	blt	r2,r17,1000977c <___vfprintf_internal_r+0x16d4>
100091d8:	45800204 	addi	r22,r8,8
100091dc:	d9003617 	ldw	r4,216(sp)
100091e0:	d9403817 	ldw	r5,224(sp)
100091e4:	000d883a 	mov	r6,zero
100091e8:	000f883a 	mov	r7,zero
100091ec:	d8c03c15 	stw	r3,240(sp)
100091f0:	00135f00 	call	100135f0 <__eqdf2>
100091f4:	d8c03c17 	ldw	r3,240(sp)
100091f8:	1000bc26 	beq	r2,zero,100094ec <___vfprintf_internal_r+0x1444>
100091fc:	d9403317 	ldw	r5,204(sp)
10009200:	84000044 	addi	r16,r16,1
10009204:	8c400044 	addi	r17,r17,1
10009208:	28bfffc4 	addi	r2,r5,-1
1000920c:	1887883a 	add	r3,r3,r2
10009210:	b0800115 	stw	r2,4(r22)
10009214:	b4000015 	stw	r16,0(r22)
10009218:	d8c02015 	stw	r3,128(sp)
1000921c:	dc401f15 	stw	r17,124(sp)
10009220:	008001c4 	movi	r2,7
10009224:	14414316 	blt	r2,r17,10009734 <___vfprintf_internal_r+0x168c>
10009228:	b5800204 	addi	r22,r22,8
1000922c:	d9003a17 	ldw	r4,232(sp)
10009230:	df0022c4 	addi	fp,sp,139
10009234:	8c400044 	addi	r17,r17,1
10009238:	20c7883a 	add	r3,r4,r3
1000923c:	b7000015 	stw	fp,0(r22)
10009240:	b1000115 	stw	r4,4(r22)
10009244:	d8c02015 	stw	r3,128(sp)
10009248:	dc401f15 	stw	r17,124(sp)
1000924c:	008001c4 	movi	r2,7
10009250:	14400e16 	blt	r2,r17,1000928c <___vfprintf_internal_r+0x11e4>
10009254:	b2000204 	addi	r8,r22,8
10009258:	003e1806 	br	10008abc <__alt_data_end+0xf8008abc>
1000925c:	010400b4 	movhi	r4,4098
10009260:	2121f184 	addi	r4,r4,-30778
10009264:	d9002c15 	stw	r4,176(sp)
10009268:	d9002c17 	ldw	r4,176(sp)
1000926c:	1c07883a 	add	r3,r3,r16
10009270:	44000115 	stw	r16,4(r8)
10009274:	41000015 	stw	r4,0(r8)
10009278:	10800044 	addi	r2,r2,1
1000927c:	d8c02015 	stw	r3,128(sp)
10009280:	d8801f15 	stw	r2,124(sp)
10009284:	010001c4 	movi	r4,7
10009288:	20be0b0e 	bge	r4,r2,10008ab8 <__alt_data_end+0xf8008ab8>
1000928c:	d9002d17 	ldw	r4,180(sp)
10009290:	d9801e04 	addi	r6,sp,120
10009294:	b80b883a 	mov	r5,r23
10009298:	000f7600 	call	1000f760 <__sprint_r>
1000929c:	103c861e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
100092a0:	d8c02017 	ldw	r3,128(sp)
100092a4:	da000404 	addi	r8,sp,16
100092a8:	003e0406 	br	10008abc <__alt_data_end+0xf8008abc>
100092ac:	d9002d17 	ldw	r4,180(sp)
100092b0:	d9801e04 	addi	r6,sp,120
100092b4:	b80b883a 	mov	r5,r23
100092b8:	000f7600 	call	1000f760 <__sprint_r>
100092bc:	103e3b26 	beq	r2,zero,10008bac <__alt_data_end+0xf8008bac>
100092c0:	003c7d06 	br	100084b8 <__alt_data_end+0xf80084b8>
100092c4:	d9002d17 	ldw	r4,180(sp)
100092c8:	d9801e04 	addi	r6,sp,120
100092cc:	b80b883a 	mov	r5,r23
100092d0:	000f7600 	call	1000f760 <__sprint_r>
100092d4:	103c781e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
100092d8:	d8c02017 	ldw	r3,128(sp)
100092dc:	da000404 	addi	r8,sp,16
100092e0:	003de906 	br	10008a88 <__alt_data_end+0xf8008a88>
100092e4:	d9002d17 	ldw	r4,180(sp)
100092e8:	d9801e04 	addi	r6,sp,120
100092ec:	b80b883a 	mov	r5,r23
100092f0:	000f7600 	call	1000f760 <__sprint_r>
100092f4:	103c701e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
100092f8:	d8c02017 	ldw	r3,128(sp)
100092fc:	da000404 	addi	r8,sp,16
10009300:	003d9b06 	br	10008970 <__alt_data_end+0xf8008970>
10009304:	d9002d17 	ldw	r4,180(sp)
10009308:	d9801e04 	addi	r6,sp,120
1000930c:	b80b883a 	mov	r5,r23
10009310:	000f7600 	call	1000f760 <__sprint_r>
10009314:	103c681e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10009318:	d8c02017 	ldw	r3,128(sp)
1000931c:	da000404 	addi	r8,sp,16
10009320:	003da106 	br	100089a8 <__alt_data_end+0xf80089a8>
10009324:	d9402a17 	ldw	r5,168(sp)
10009328:	d8002785 	stb	zero,158(sp)
1000932c:	283f0616 	blt	r5,zero,10008f48 <__alt_data_end+0xf8008f48>
10009330:	00ffdfc4 	movi	r3,-129
10009334:	9d84b03a 	or	r2,r19,r22
10009338:	90e4703a 	and	r18,r18,r3
1000933c:	103c3b26 	beq	r2,zero,1000842c <__alt_data_end+0xf800842c>
10009340:	0039883a 	mov	fp,zero
10009344:	003e5806 	br	10008ca8 <__alt_data_end+0xf8008ca8>
10009348:	9080040c 	andi	r2,r18,16
1000934c:	1001b326 	beq	r2,zero,10009a1c <___vfprintf_internal_r+0x1974>
10009350:	d8c02e17 	ldw	r3,184(sp)
10009354:	d9002a17 	ldw	r4,168(sp)
10009358:	d8002785 	stb	zero,158(sp)
1000935c:	18800104 	addi	r2,r3,4
10009360:	1cc00017 	ldw	r19,0(r3)
10009364:	002d883a 	mov	r22,zero
10009368:	2001b516 	blt	r4,zero,10009a40 <___vfprintf_internal_r+0x1998>
1000936c:	00ffdfc4 	movi	r3,-129
10009370:	d8802e15 	stw	r2,184(sp)
10009374:	90e4703a 	and	r18,r18,r3
10009378:	983d0526 	beq	r19,zero,10008790 <__alt_data_end+0xf8008790>
1000937c:	0039883a 	mov	fp,zero
10009380:	003d0806 	br	100087a4 <__alt_data_end+0xf80087a4>
10009384:	dc402617 	ldw	r17,152(sp)
10009388:	0441d30e 	bge	zero,r17,10009ad8 <___vfprintf_internal_r+0x1a30>
1000938c:	dc403217 	ldw	r17,200(sp)
10009390:	d8803317 	ldw	r2,204(sp)
10009394:	1440010e 	bge	r2,r17,1000939c <___vfprintf_internal_r+0x12f4>
10009398:	1023883a 	mov	r17,r2
1000939c:	04400a0e 	bge	zero,r17,100093c8 <___vfprintf_internal_r+0x1320>
100093a0:	d8801f17 	ldw	r2,124(sp)
100093a4:	1c47883a 	add	r3,r3,r17
100093a8:	44000015 	stw	r16,0(r8)
100093ac:	10800044 	addi	r2,r2,1
100093b0:	44400115 	stw	r17,4(r8)
100093b4:	d8c02015 	stw	r3,128(sp)
100093b8:	d8801f15 	stw	r2,124(sp)
100093bc:	010001c4 	movi	r4,7
100093c0:	20826516 	blt	r4,r2,10009d58 <___vfprintf_internal_r+0x1cb0>
100093c4:	42000204 	addi	r8,r8,8
100093c8:	88026116 	blt	r17,zero,10009d50 <___vfprintf_internal_r+0x1ca8>
100093cc:	d9003217 	ldw	r4,200(sp)
100093d0:	2463c83a 	sub	r17,r4,r17
100093d4:	04407b0e 	bge	zero,r17,100095c4 <___vfprintf_internal_r+0x151c>
100093d8:	05800404 	movi	r22,16
100093dc:	d8801f17 	ldw	r2,124(sp)
100093e0:	b4419d0e 	bge	r22,r17,10009a58 <___vfprintf_internal_r+0x19b0>
100093e4:	010400b4 	movhi	r4,4098
100093e8:	2121f184 	addi	r4,r4,-30778
100093ec:	d9002c15 	stw	r4,176(sp)
100093f0:	070001c4 	movi	fp,7
100093f4:	dcc02d17 	ldw	r19,180(sp)
100093f8:	00000306 	br	10009408 <___vfprintf_internal_r+0x1360>
100093fc:	42000204 	addi	r8,r8,8
10009400:	8c7ffc04 	addi	r17,r17,-16
10009404:	b441970e 	bge	r22,r17,10009a64 <___vfprintf_internal_r+0x19bc>
10009408:	18c00404 	addi	r3,r3,16
1000940c:	10800044 	addi	r2,r2,1
10009410:	45000015 	stw	r20,0(r8)
10009414:	45800115 	stw	r22,4(r8)
10009418:	d8c02015 	stw	r3,128(sp)
1000941c:	d8801f15 	stw	r2,124(sp)
10009420:	e0bff60e 	bge	fp,r2,100093fc <__alt_data_end+0xf80093fc>
10009424:	d9801e04 	addi	r6,sp,120
10009428:	b80b883a 	mov	r5,r23
1000942c:	9809883a 	mov	r4,r19
10009430:	000f7600 	call	1000f760 <__sprint_r>
10009434:	103c201e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10009438:	d8c02017 	ldw	r3,128(sp)
1000943c:	d8801f17 	ldw	r2,124(sp)
10009440:	da000404 	addi	r8,sp,16
10009444:	003fee06 	br	10009400 <__alt_data_end+0xf8009400>
10009448:	d9002d17 	ldw	r4,180(sp)
1000944c:	d9801e04 	addi	r6,sp,120
10009450:	b80b883a 	mov	r5,r23
10009454:	000f7600 	call	1000f760 <__sprint_r>
10009458:	103c171e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
1000945c:	d8c02017 	ldw	r3,128(sp)
10009460:	df002787 	ldb	fp,158(sp)
10009464:	da000404 	addi	r8,sp,16
10009468:	003d3406 	br	1000893c <__alt_data_end+0xf800893c>
1000946c:	9080040c 	andi	r2,r18,16
10009470:	10016126 	beq	r2,zero,100099f8 <___vfprintf_internal_r+0x1950>
10009474:	d9402e17 	ldw	r5,184(sp)
10009478:	2cc00017 	ldw	r19,0(r5)
1000947c:	29400104 	addi	r5,r5,4
10009480:	d9402e15 	stw	r5,184(sp)
10009484:	982dd7fa 	srai	r22,r19,31
10009488:	b005883a 	mov	r2,r22
1000948c:	003c5a06 	br	100085f8 <__alt_data_end+0xf80085f8>
10009490:	9080040c 	andi	r2,r18,16
10009494:	10003526 	beq	r2,zero,1000956c <___vfprintf_internal_r+0x14c4>
10009498:	d8c02e17 	ldw	r3,184(sp)
1000949c:	d9002a17 	ldw	r4,168(sp)
100094a0:	d8002785 	stb	zero,158(sp)
100094a4:	18800104 	addi	r2,r3,4
100094a8:	1cc00017 	ldw	r19,0(r3)
100094ac:	002d883a 	mov	r22,zero
100094b0:	20003716 	blt	r4,zero,10009590 <___vfprintf_internal_r+0x14e8>
100094b4:	00ffdfc4 	movi	r3,-129
100094b8:	d8802e15 	stw	r2,184(sp)
100094bc:	90e4703a 	and	r18,r18,r3
100094c0:	0039883a 	mov	fp,zero
100094c4:	983dd426 	beq	r19,zero,10008c18 <__alt_data_end+0xf8008c18>
100094c8:	00800244 	movi	r2,9
100094cc:	14fc5336 	bltu	r2,r19,1000861c <__alt_data_end+0xf800861c>
100094d0:	d8c02817 	ldw	r3,160(sp)
100094d4:	dc001dc4 	addi	r16,sp,119
100094d8:	9cc00c04 	addi	r19,r19,48
100094dc:	1c07c83a 	sub	r3,r3,r16
100094e0:	dcc01dc5 	stb	r19,119(sp)
100094e4:	d8c02b15 	stw	r3,172(sp)
100094e8:	003cc606 	br	10008804 <__alt_data_end+0xf8008804>
100094ec:	d8803317 	ldw	r2,204(sp)
100094f0:	143fffc4 	addi	r16,r2,-1
100094f4:	043f4d0e 	bge	zero,r16,1000922c <__alt_data_end+0xf800922c>
100094f8:	07000404 	movi	fp,16
100094fc:	e400810e 	bge	fp,r16,10009704 <___vfprintf_internal_r+0x165c>
10009500:	014400b4 	movhi	r5,4098
10009504:	2961f184 	addi	r5,r5,-30778
10009508:	d9402c15 	stw	r5,176(sp)
1000950c:	01c001c4 	movi	r7,7
10009510:	dcc02d17 	ldw	r19,180(sp)
10009514:	00000306 	br	10009524 <___vfprintf_internal_r+0x147c>
10009518:	b5800204 	addi	r22,r22,8
1000951c:	843ffc04 	addi	r16,r16,-16
10009520:	e4007b0e 	bge	fp,r16,10009710 <___vfprintf_internal_r+0x1668>
10009524:	18c00404 	addi	r3,r3,16
10009528:	8c400044 	addi	r17,r17,1
1000952c:	b5000015 	stw	r20,0(r22)
10009530:	b7000115 	stw	fp,4(r22)
10009534:	d8c02015 	stw	r3,128(sp)
10009538:	dc401f15 	stw	r17,124(sp)
1000953c:	3c7ff60e 	bge	r7,r17,10009518 <__alt_data_end+0xf8009518>
10009540:	d9801e04 	addi	r6,sp,120
10009544:	b80b883a 	mov	r5,r23
10009548:	9809883a 	mov	r4,r19
1000954c:	d9c03c15 	stw	r7,240(sp)
10009550:	000f7600 	call	1000f760 <__sprint_r>
10009554:	d9c03c17 	ldw	r7,240(sp)
10009558:	103bd71e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
1000955c:	d8c02017 	ldw	r3,128(sp)
10009560:	dc401f17 	ldw	r17,124(sp)
10009564:	dd800404 	addi	r22,sp,16
10009568:	003fec06 	br	1000951c <__alt_data_end+0xf800951c>
1000956c:	9080100c 	andi	r2,r18,64
10009570:	d8002785 	stb	zero,158(sp)
10009574:	10010e26 	beq	r2,zero,100099b0 <___vfprintf_internal_r+0x1908>
10009578:	d9402e17 	ldw	r5,184(sp)
1000957c:	d8c02a17 	ldw	r3,168(sp)
10009580:	002d883a 	mov	r22,zero
10009584:	28800104 	addi	r2,r5,4
10009588:	2cc0000b 	ldhu	r19,0(r5)
1000958c:	183fc90e 	bge	r3,zero,100094b4 <__alt_data_end+0xf80094b4>
10009590:	d8802e15 	stw	r2,184(sp)
10009594:	0039883a 	mov	fp,zero
10009598:	9d84b03a 	or	r2,r19,r22
1000959c:	103c1e1e 	bne	r2,zero,10008618 <__alt_data_end+0xf8008618>
100095a0:	00800044 	movi	r2,1
100095a4:	003e6c06 	br	10008f58 <__alt_data_end+0xf8008f58>
100095a8:	d9002d17 	ldw	r4,180(sp)
100095ac:	d9801e04 	addi	r6,sp,120
100095b0:	b80b883a 	mov	r5,r23
100095b4:	000f7600 	call	1000f760 <__sprint_r>
100095b8:	103bbf1e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
100095bc:	d8c02017 	ldw	r3,128(sp)
100095c0:	da000404 	addi	r8,sp,16
100095c4:	d9003217 	ldw	r4,200(sp)
100095c8:	d8802617 	ldw	r2,152(sp)
100095cc:	d9403317 	ldw	r5,204(sp)
100095d0:	8123883a 	add	r17,r16,r4
100095d4:	11400216 	blt	r2,r5,100095e0 <___vfprintf_internal_r+0x1538>
100095d8:	9100004c 	andi	r4,r18,1
100095dc:	20000d26 	beq	r4,zero,10009614 <___vfprintf_internal_r+0x156c>
100095e0:	d9003717 	ldw	r4,220(sp)
100095e4:	d9403417 	ldw	r5,208(sp)
100095e8:	1907883a 	add	r3,r3,r4
100095ec:	d9001f17 	ldw	r4,124(sp)
100095f0:	41400015 	stw	r5,0(r8)
100095f4:	d9403717 	ldw	r5,220(sp)
100095f8:	21000044 	addi	r4,r4,1
100095fc:	d8c02015 	stw	r3,128(sp)
10009600:	41400115 	stw	r5,4(r8)
10009604:	d9001f15 	stw	r4,124(sp)
10009608:	014001c4 	movi	r5,7
1000960c:	2901e816 	blt	r5,r4,10009db0 <___vfprintf_internal_r+0x1d08>
10009610:	42000204 	addi	r8,r8,8
10009614:	d9003317 	ldw	r4,204(sp)
10009618:	8121883a 	add	r16,r16,r4
1000961c:	2085c83a 	sub	r2,r4,r2
10009620:	8461c83a 	sub	r16,r16,r17
10009624:	1400010e 	bge	r2,r16,1000962c <___vfprintf_internal_r+0x1584>
10009628:	1021883a 	mov	r16,r2
1000962c:	04000a0e 	bge	zero,r16,10009658 <___vfprintf_internal_r+0x15b0>
10009630:	d9001f17 	ldw	r4,124(sp)
10009634:	1c07883a 	add	r3,r3,r16
10009638:	44400015 	stw	r17,0(r8)
1000963c:	21000044 	addi	r4,r4,1
10009640:	44000115 	stw	r16,4(r8)
10009644:	d8c02015 	stw	r3,128(sp)
10009648:	d9001f15 	stw	r4,124(sp)
1000964c:	014001c4 	movi	r5,7
10009650:	2901fb16 	blt	r5,r4,10009e40 <___vfprintf_internal_r+0x1d98>
10009654:	42000204 	addi	r8,r8,8
10009658:	8001f716 	blt	r16,zero,10009e38 <___vfprintf_internal_r+0x1d90>
1000965c:	1421c83a 	sub	r16,r2,r16
10009660:	043d160e 	bge	zero,r16,10008abc <__alt_data_end+0xf8008abc>
10009664:	04400404 	movi	r17,16
10009668:	d8801f17 	ldw	r2,124(sp)
1000966c:	8c3efb0e 	bge	r17,r16,1000925c <__alt_data_end+0xf800925c>
10009670:	014400b4 	movhi	r5,4098
10009674:	2961f184 	addi	r5,r5,-30778
10009678:	d9402c15 	stw	r5,176(sp)
1000967c:	058001c4 	movi	r22,7
10009680:	dcc02d17 	ldw	r19,180(sp)
10009684:	00000306 	br	10009694 <___vfprintf_internal_r+0x15ec>
10009688:	42000204 	addi	r8,r8,8
1000968c:	843ffc04 	addi	r16,r16,-16
10009690:	8c3ef50e 	bge	r17,r16,10009268 <__alt_data_end+0xf8009268>
10009694:	18c00404 	addi	r3,r3,16
10009698:	10800044 	addi	r2,r2,1
1000969c:	45000015 	stw	r20,0(r8)
100096a0:	44400115 	stw	r17,4(r8)
100096a4:	d8c02015 	stw	r3,128(sp)
100096a8:	d8801f15 	stw	r2,124(sp)
100096ac:	b0bff60e 	bge	r22,r2,10009688 <__alt_data_end+0xf8009688>
100096b0:	d9801e04 	addi	r6,sp,120
100096b4:	b80b883a 	mov	r5,r23
100096b8:	9809883a 	mov	r4,r19
100096bc:	000f7600 	call	1000f760 <__sprint_r>
100096c0:	103b7d1e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
100096c4:	d8c02017 	ldw	r3,128(sp)
100096c8:	d8801f17 	ldw	r2,124(sp)
100096cc:	da000404 	addi	r8,sp,16
100096d0:	003fee06 	br	1000968c <__alt_data_end+0xf800968c>
100096d4:	9088703a 	and	r4,r18,r2
100096d8:	203eab1e 	bne	r4,zero,10009188 <__alt_data_end+0xf8009188>
100096dc:	dc401f17 	ldw	r17,124(sp)
100096e0:	40800115 	stw	r2,4(r8)
100096e4:	44000015 	stw	r16,0(r8)
100096e8:	8c400044 	addi	r17,r17,1
100096ec:	d8c02015 	stw	r3,128(sp)
100096f0:	dc401f15 	stw	r17,124(sp)
100096f4:	008001c4 	movi	r2,7
100096f8:	14400e16 	blt	r2,r17,10009734 <___vfprintf_internal_r+0x168c>
100096fc:	45800204 	addi	r22,r8,8
10009700:	003eca06 	br	1000922c <__alt_data_end+0xf800922c>
10009704:	010400b4 	movhi	r4,4098
10009708:	2121f184 	addi	r4,r4,-30778
1000970c:	d9002c15 	stw	r4,176(sp)
10009710:	d8802c17 	ldw	r2,176(sp)
10009714:	1c07883a 	add	r3,r3,r16
10009718:	8c400044 	addi	r17,r17,1
1000971c:	b0800015 	stw	r2,0(r22)
10009720:	b4000115 	stw	r16,4(r22)
10009724:	d8c02015 	stw	r3,128(sp)
10009728:	dc401f15 	stw	r17,124(sp)
1000972c:	008001c4 	movi	r2,7
10009730:	147ebd0e 	bge	r2,r17,10009228 <__alt_data_end+0xf8009228>
10009734:	d9002d17 	ldw	r4,180(sp)
10009738:	d9801e04 	addi	r6,sp,120
1000973c:	b80b883a 	mov	r5,r23
10009740:	000f7600 	call	1000f760 <__sprint_r>
10009744:	103b5c1e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10009748:	d8c02017 	ldw	r3,128(sp)
1000974c:	dc401f17 	ldw	r17,124(sp)
10009750:	dd800404 	addi	r22,sp,16
10009754:	003eb506 	br	1000922c <__alt_data_end+0xf800922c>
10009758:	d9002d17 	ldw	r4,180(sp)
1000975c:	d9801e04 	addi	r6,sp,120
10009760:	b80b883a 	mov	r5,r23
10009764:	000f7600 	call	1000f760 <__sprint_r>
10009768:	103b531e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
1000976c:	d8c02017 	ldw	r3,128(sp)
10009770:	dc401f17 	ldw	r17,124(sp)
10009774:	da000404 	addi	r8,sp,16
10009778:	003e8d06 	br	100091b0 <__alt_data_end+0xf80091b0>
1000977c:	d9002d17 	ldw	r4,180(sp)
10009780:	d9801e04 	addi	r6,sp,120
10009784:	b80b883a 	mov	r5,r23
10009788:	000f7600 	call	1000f760 <__sprint_r>
1000978c:	103b4a1e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10009790:	d8c02017 	ldw	r3,128(sp)
10009794:	dc401f17 	ldw	r17,124(sp)
10009798:	dd800404 	addi	r22,sp,16
1000979c:	003e8f06 	br	100091dc <__alt_data_end+0xf80091dc>
100097a0:	0027883a 	mov	r19,zero
100097a4:	003f4a06 	br	100094d0 <__alt_data_end+0xf80094d0>
100097a8:	d9002d17 	ldw	r4,180(sp)
100097ac:	d9801e04 	addi	r6,sp,120
100097b0:	b80b883a 	mov	r5,r23
100097b4:	000f7600 	call	1000f760 <__sprint_r>
100097b8:	103b3f1e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
100097bc:	d8c02017 	ldw	r3,128(sp)
100097c0:	da000404 	addi	r8,sp,16
100097c4:	003c7b06 	br	100089b4 <__alt_data_end+0xf80089b4>
100097c8:	d9402a17 	ldw	r5,168(sp)
100097cc:	04e7c83a 	sub	r19,zero,r19
100097d0:	07000b44 	movi	fp,45
100097d4:	9804c03a 	cmpne	r2,r19,zero
100097d8:	05adc83a 	sub	r22,zero,r22
100097dc:	df002785 	stb	fp,158(sp)
100097e0:	b0adc83a 	sub	r22,r22,r2
100097e4:	28017b16 	blt	r5,zero,10009dd4 <___vfprintf_internal_r+0x1d2c>
100097e8:	00bfdfc4 	movi	r2,-129
100097ec:	90a4703a 	and	r18,r18,r2
100097f0:	003b8906 	br	10008618 <__alt_data_end+0xf8008618>
100097f4:	d9003617 	ldw	r4,216(sp)
100097f8:	d9403817 	ldw	r5,224(sp)
100097fc:	da003d15 	stw	r8,244(sp)
10009800:	000f3840 	call	1000f384 <__fpclassifyd>
10009804:	da003d17 	ldw	r8,244(sp)
10009808:	1000f026 	beq	r2,zero,10009bcc <___vfprintf_internal_r+0x1b24>
1000980c:	d9002a17 	ldw	r4,168(sp)
10009810:	05bff7c4 	movi	r22,-33
10009814:	00bfffc4 	movi	r2,-1
10009818:	8dac703a 	and	r22,r17,r22
1000981c:	20820026 	beq	r4,r2,1000a020 <___vfprintf_internal_r+0x1f78>
10009820:	008011c4 	movi	r2,71
10009824:	b081f726 	beq	r22,r2,1000a004 <___vfprintf_internal_r+0x1f5c>
10009828:	d9003817 	ldw	r4,224(sp)
1000982c:	90c04014 	ori	r3,r18,256
10009830:	d8c02c15 	stw	r3,176(sp)
10009834:	20021516 	blt	r4,zero,1000a08c <___vfprintf_internal_r+0x1fe4>
10009838:	dcc03817 	ldw	r19,224(sp)
1000983c:	d8002905 	stb	zero,164(sp)
10009840:	00801984 	movi	r2,102
10009844:	8881f926 	beq	r17,r2,1000a02c <___vfprintf_internal_r+0x1f84>
10009848:	00801184 	movi	r2,70
1000984c:	88821c26 	beq	r17,r2,1000a0c0 <___vfprintf_internal_r+0x2018>
10009850:	00801144 	movi	r2,69
10009854:	b081ef26 	beq	r22,r2,1000a014 <___vfprintf_internal_r+0x1f6c>
10009858:	d8c02a17 	ldw	r3,168(sp)
1000985c:	d8802104 	addi	r2,sp,132
10009860:	d8800315 	stw	r2,12(sp)
10009864:	d9403617 	ldw	r5,216(sp)
10009868:	d8802504 	addi	r2,sp,148
1000986c:	d9002d17 	ldw	r4,180(sp)
10009870:	d8800215 	stw	r2,8(sp)
10009874:	d8802604 	addi	r2,sp,152
10009878:	d8c00015 	stw	r3,0(sp)
1000987c:	d8800115 	stw	r2,4(sp)
10009880:	01c00084 	movi	r7,2
10009884:	980d883a 	mov	r6,r19
10009888:	d8c03c15 	stw	r3,240(sp)
1000988c:	da003d15 	stw	r8,244(sp)
10009890:	000a7d80 	call	1000a7d8 <_dtoa_r>
10009894:	1021883a 	mov	r16,r2
10009898:	008019c4 	movi	r2,103
1000989c:	d8c03c17 	ldw	r3,240(sp)
100098a0:	da003d17 	ldw	r8,244(sp)
100098a4:	88817126 	beq	r17,r2,10009e6c <___vfprintf_internal_r+0x1dc4>
100098a8:	008011c4 	movi	r2,71
100098ac:	88829126 	beq	r17,r2,1000a2f4 <___vfprintf_internal_r+0x224c>
100098b0:	80f9883a 	add	fp,r16,r3
100098b4:	d9003617 	ldw	r4,216(sp)
100098b8:	000d883a 	mov	r6,zero
100098bc:	000f883a 	mov	r7,zero
100098c0:	980b883a 	mov	r5,r19
100098c4:	da003d15 	stw	r8,244(sp)
100098c8:	00135f00 	call	100135f0 <__eqdf2>
100098cc:	da003d17 	ldw	r8,244(sp)
100098d0:	10018d26 	beq	r2,zero,10009f08 <___vfprintf_internal_r+0x1e60>
100098d4:	d8802117 	ldw	r2,132(sp)
100098d8:	1700062e 	bgeu	r2,fp,100098f4 <___vfprintf_internal_r+0x184c>
100098dc:	01000c04 	movi	r4,48
100098e0:	10c00044 	addi	r3,r2,1
100098e4:	d8c02115 	stw	r3,132(sp)
100098e8:	11000005 	stb	r4,0(r2)
100098ec:	d8802117 	ldw	r2,132(sp)
100098f0:	173ffb36 	bltu	r2,fp,100098e0 <__alt_data_end+0xf80098e0>
100098f4:	1405c83a 	sub	r2,r2,r16
100098f8:	d8803315 	stw	r2,204(sp)
100098fc:	008011c4 	movi	r2,71
10009900:	b0817626 	beq	r22,r2,10009edc <___vfprintf_internal_r+0x1e34>
10009904:	00801944 	movi	r2,101
10009908:	1442800e 	bge	r2,r17,1000a30c <___vfprintf_internal_r+0x2264>
1000990c:	d8c02617 	ldw	r3,152(sp)
10009910:	00801984 	movi	r2,102
10009914:	d8c03215 	stw	r3,200(sp)
10009918:	8881fe26 	beq	r17,r2,1000a114 <___vfprintf_internal_r+0x206c>
1000991c:	d8c03217 	ldw	r3,200(sp)
10009920:	d9003317 	ldw	r4,204(sp)
10009924:	1901dd16 	blt	r3,r4,1000a09c <___vfprintf_internal_r+0x1ff4>
10009928:	9480004c 	andi	r18,r18,1
1000992c:	90022b1e 	bne	r18,zero,1000a1dc <___vfprintf_internal_r+0x2134>
10009930:	1805883a 	mov	r2,r3
10009934:	18028316 	blt	r3,zero,1000a344 <___vfprintf_internal_r+0x229c>
10009938:	d8c03217 	ldw	r3,200(sp)
1000993c:	044019c4 	movi	r17,103
10009940:	d8c02b15 	stw	r3,172(sp)
10009944:	df002907 	ldb	fp,164(sp)
10009948:	e001531e 	bne	fp,zero,10009e98 <___vfprintf_internal_r+0x1df0>
1000994c:	df002783 	ldbu	fp,158(sp)
10009950:	d8802915 	stw	r2,164(sp)
10009954:	dc802c17 	ldw	r18,176(sp)
10009958:	d8002a15 	stw	zero,168(sp)
1000995c:	003baf06 	br	1000881c <__alt_data_end+0xf800881c>
10009960:	d8c02e17 	ldw	r3,184(sp)
10009964:	d9002e17 	ldw	r4,184(sp)
10009968:	d9402e17 	ldw	r5,184(sp)
1000996c:	18c00017 	ldw	r3,0(r3)
10009970:	21000117 	ldw	r4,4(r4)
10009974:	29400204 	addi	r5,r5,8
10009978:	d8c03615 	stw	r3,216(sp)
1000997c:	d9003815 	stw	r4,224(sp)
10009980:	d9402e15 	stw	r5,184(sp)
10009984:	003b5006 	br	100086c8 <__alt_data_end+0xf80086c8>
10009988:	ac400007 	ldb	r17,0(r21)
1000998c:	003a2806 	br	10008230 <__alt_data_end+0xf8008230>
10009990:	9080100c 	andi	r2,r18,64
10009994:	1000a826 	beq	r2,zero,10009c38 <___vfprintf_internal_r+0x1b90>
10009998:	d8c02e17 	ldw	r3,184(sp)
1000999c:	002d883a 	mov	r22,zero
100099a0:	1cc0000b 	ldhu	r19,0(r3)
100099a4:	18c00104 	addi	r3,r3,4
100099a8:	d8c02e15 	stw	r3,184(sp)
100099ac:	003caf06 	br	10008c6c <__alt_data_end+0xf8008c6c>
100099b0:	d9002e17 	ldw	r4,184(sp)
100099b4:	d9402a17 	ldw	r5,168(sp)
100099b8:	002d883a 	mov	r22,zero
100099bc:	20800104 	addi	r2,r4,4
100099c0:	24c00017 	ldw	r19,0(r4)
100099c4:	283ebb0e 	bge	r5,zero,100094b4 <__alt_data_end+0xf80094b4>
100099c8:	003ef106 	br	10009590 <__alt_data_end+0xf8009590>
100099cc:	9080040c 	andi	r2,r18,16
100099d0:	1000921e 	bne	r2,zero,10009c1c <___vfprintf_internal_r+0x1b74>
100099d4:	9480100c 	andi	r18,r18,64
100099d8:	90013926 	beq	r18,zero,10009ec0 <___vfprintf_internal_r+0x1e18>
100099dc:	d9402e17 	ldw	r5,184(sp)
100099e0:	d8c02f17 	ldw	r3,188(sp)
100099e4:	28800017 	ldw	r2,0(r5)
100099e8:	29400104 	addi	r5,r5,4
100099ec:	d9402e15 	stw	r5,184(sp)
100099f0:	10c0000d 	sth	r3,0(r2)
100099f4:	0039e406 	br	10008188 <__alt_data_end+0xf8008188>
100099f8:	9080100c 	andi	r2,r18,64
100099fc:	10008026 	beq	r2,zero,10009c00 <___vfprintf_internal_r+0x1b58>
10009a00:	d8802e17 	ldw	r2,184(sp)
10009a04:	14c0000f 	ldh	r19,0(r2)
10009a08:	10800104 	addi	r2,r2,4
10009a0c:	d8802e15 	stw	r2,184(sp)
10009a10:	982dd7fa 	srai	r22,r19,31
10009a14:	b005883a 	mov	r2,r22
10009a18:	003af706 	br	100085f8 <__alt_data_end+0xf80085f8>
10009a1c:	9080100c 	andi	r2,r18,64
10009a20:	d8002785 	stb	zero,158(sp)
10009a24:	10008a1e 	bne	r2,zero,10009c50 <___vfprintf_internal_r+0x1ba8>
10009a28:	d9002e17 	ldw	r4,184(sp)
10009a2c:	d9402a17 	ldw	r5,168(sp)
10009a30:	002d883a 	mov	r22,zero
10009a34:	20800104 	addi	r2,r4,4
10009a38:	24c00017 	ldw	r19,0(r4)
10009a3c:	283e4b0e 	bge	r5,zero,1000936c <__alt_data_end+0xf800936c>
10009a40:	9d86b03a 	or	r3,r19,r22
10009a44:	d8802e15 	stw	r2,184(sp)
10009a48:	183e4c1e 	bne	r3,zero,1000937c <__alt_data_end+0xf800937c>
10009a4c:	0039883a 	mov	fp,zero
10009a50:	0005883a 	mov	r2,zero
10009a54:	003d4006 	br	10008f58 <__alt_data_end+0xf8008f58>
10009a58:	014400b4 	movhi	r5,4098
10009a5c:	2961f184 	addi	r5,r5,-30778
10009a60:	d9402c15 	stw	r5,176(sp)
10009a64:	d9402c17 	ldw	r5,176(sp)
10009a68:	1c47883a 	add	r3,r3,r17
10009a6c:	10800044 	addi	r2,r2,1
10009a70:	41400015 	stw	r5,0(r8)
10009a74:	44400115 	stw	r17,4(r8)
10009a78:	d8c02015 	stw	r3,128(sp)
10009a7c:	d8801f15 	stw	r2,124(sp)
10009a80:	010001c4 	movi	r4,7
10009a84:	20bec816 	blt	r4,r2,100095a8 <__alt_data_end+0xf80095a8>
10009a88:	42000204 	addi	r8,r8,8
10009a8c:	003ecd06 	br	100095c4 <__alt_data_end+0xf80095c4>
10009a90:	d9002a17 	ldw	r4,168(sp)
10009a94:	d8002785 	stb	zero,158(sp)
10009a98:	203d2d16 	blt	r4,zero,10008f50 <__alt_data_end+0xf8008f50>
10009a9c:	00bfdfc4 	movi	r2,-129
10009aa0:	90a4703a 	and	r18,r18,r2
10009aa4:	003a6106 	br	1000842c <__alt_data_end+0xf800842c>
10009aa8:	010400b4 	movhi	r4,4098
10009aac:	2121f184 	addi	r4,r4,-30778
10009ab0:	d9002c15 	stw	r4,176(sp)
10009ab4:	003bea06 	br	10008a60 <__alt_data_end+0xf8008a60>
10009ab8:	d9002d17 	ldw	r4,180(sp)
10009abc:	d9801e04 	addi	r6,sp,120
10009ac0:	b80b883a 	mov	r5,r23
10009ac4:	000f7600 	call	1000f760 <__sprint_r>
10009ac8:	103a7b1e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10009acc:	d8c02017 	ldw	r3,128(sp)
10009ad0:	da000404 	addi	r8,sp,16
10009ad4:	003d4106 	br	10008fdc <__alt_data_end+0xf8008fdc>
10009ad8:	d8801f17 	ldw	r2,124(sp)
10009adc:	014400b4 	movhi	r5,4098
10009ae0:	01000044 	movi	r4,1
10009ae4:	18c00044 	addi	r3,r3,1
10009ae8:	10800044 	addi	r2,r2,1
10009aec:	2961f104 	addi	r5,r5,-30780
10009af0:	41000115 	stw	r4,4(r8)
10009af4:	41400015 	stw	r5,0(r8)
10009af8:	d8c02015 	stw	r3,128(sp)
10009afc:	d8801f15 	stw	r2,124(sp)
10009b00:	010001c4 	movi	r4,7
10009b04:	20805c16 	blt	r4,r2,10009c78 <___vfprintf_internal_r+0x1bd0>
10009b08:	42000204 	addi	r8,r8,8
10009b0c:	8800041e 	bne	r17,zero,10009b20 <___vfprintf_internal_r+0x1a78>
10009b10:	d8803317 	ldw	r2,204(sp)
10009b14:	1000021e 	bne	r2,zero,10009b20 <___vfprintf_internal_r+0x1a78>
10009b18:	9080004c 	andi	r2,r18,1
10009b1c:	103be726 	beq	r2,zero,10008abc <__alt_data_end+0xf8008abc>
10009b20:	d9003717 	ldw	r4,220(sp)
10009b24:	d8801f17 	ldw	r2,124(sp)
10009b28:	d9403417 	ldw	r5,208(sp)
10009b2c:	20c7883a 	add	r3,r4,r3
10009b30:	10800044 	addi	r2,r2,1
10009b34:	41000115 	stw	r4,4(r8)
10009b38:	41400015 	stw	r5,0(r8)
10009b3c:	d8c02015 	stw	r3,128(sp)
10009b40:	d8801f15 	stw	r2,124(sp)
10009b44:	010001c4 	movi	r4,7
10009b48:	20812116 	blt	r4,r2,10009fd0 <___vfprintf_internal_r+0x1f28>
10009b4c:	42000204 	addi	r8,r8,8
10009b50:	0463c83a 	sub	r17,zero,r17
10009b54:	0440730e 	bge	zero,r17,10009d24 <___vfprintf_internal_r+0x1c7c>
10009b58:	05800404 	movi	r22,16
10009b5c:	b440860e 	bge	r22,r17,10009d78 <___vfprintf_internal_r+0x1cd0>
10009b60:	014400b4 	movhi	r5,4098
10009b64:	2961f184 	addi	r5,r5,-30778
10009b68:	d9402c15 	stw	r5,176(sp)
10009b6c:	070001c4 	movi	fp,7
10009b70:	dcc02d17 	ldw	r19,180(sp)
10009b74:	00000306 	br	10009b84 <___vfprintf_internal_r+0x1adc>
10009b78:	42000204 	addi	r8,r8,8
10009b7c:	8c7ffc04 	addi	r17,r17,-16
10009b80:	b440800e 	bge	r22,r17,10009d84 <___vfprintf_internal_r+0x1cdc>
10009b84:	18c00404 	addi	r3,r3,16
10009b88:	10800044 	addi	r2,r2,1
10009b8c:	45000015 	stw	r20,0(r8)
10009b90:	45800115 	stw	r22,4(r8)
10009b94:	d8c02015 	stw	r3,128(sp)
10009b98:	d8801f15 	stw	r2,124(sp)
10009b9c:	e0bff60e 	bge	fp,r2,10009b78 <__alt_data_end+0xf8009b78>
10009ba0:	d9801e04 	addi	r6,sp,120
10009ba4:	b80b883a 	mov	r5,r23
10009ba8:	9809883a 	mov	r4,r19
10009bac:	000f7600 	call	1000f760 <__sprint_r>
10009bb0:	103a411e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10009bb4:	d8c02017 	ldw	r3,128(sp)
10009bb8:	d8801f17 	ldw	r2,124(sp)
10009bbc:	da000404 	addi	r8,sp,16
10009bc0:	003fee06 	br	10009b7c <__alt_data_end+0xf8009b7c>
10009bc4:	00bfffc4 	movi	r2,-1
10009bc8:	003a3f06 	br	100084c8 <__alt_data_end+0xf80084c8>
10009bcc:	008011c4 	movi	r2,71
10009bd0:	1440b816 	blt	r2,r17,10009eb4 <___vfprintf_internal_r+0x1e0c>
10009bd4:	040400b4 	movhi	r16,4098
10009bd8:	8421e304 	addi	r16,r16,-30836
10009bdc:	00c000c4 	movi	r3,3
10009be0:	00bfdfc4 	movi	r2,-129
10009be4:	d8c02915 	stw	r3,164(sp)
10009be8:	90a4703a 	and	r18,r18,r2
10009bec:	df002783 	ldbu	fp,158(sp)
10009bf0:	d8c02b15 	stw	r3,172(sp)
10009bf4:	d8002a15 	stw	zero,168(sp)
10009bf8:	d8003215 	stw	zero,200(sp)
10009bfc:	003b0706 	br	1000881c <__alt_data_end+0xf800881c>
10009c00:	d8c02e17 	ldw	r3,184(sp)
10009c04:	1cc00017 	ldw	r19,0(r3)
10009c08:	18c00104 	addi	r3,r3,4
10009c0c:	d8c02e15 	stw	r3,184(sp)
10009c10:	982dd7fa 	srai	r22,r19,31
10009c14:	b005883a 	mov	r2,r22
10009c18:	003a7706 	br	100085f8 <__alt_data_end+0xf80085f8>
10009c1c:	d8c02e17 	ldw	r3,184(sp)
10009c20:	d9002f17 	ldw	r4,188(sp)
10009c24:	18800017 	ldw	r2,0(r3)
10009c28:	18c00104 	addi	r3,r3,4
10009c2c:	d8c02e15 	stw	r3,184(sp)
10009c30:	11000015 	stw	r4,0(r2)
10009c34:	00395406 	br	10008188 <__alt_data_end+0xf8008188>
10009c38:	d9002e17 	ldw	r4,184(sp)
10009c3c:	002d883a 	mov	r22,zero
10009c40:	24c00017 	ldw	r19,0(r4)
10009c44:	21000104 	addi	r4,r4,4
10009c48:	d9002e15 	stw	r4,184(sp)
10009c4c:	003c0706 	br	10008c6c <__alt_data_end+0xf8008c6c>
10009c50:	d9402e17 	ldw	r5,184(sp)
10009c54:	d8c02a17 	ldw	r3,168(sp)
10009c58:	002d883a 	mov	r22,zero
10009c5c:	28800104 	addi	r2,r5,4
10009c60:	2cc0000b 	ldhu	r19,0(r5)
10009c64:	183dc10e 	bge	r3,zero,1000936c <__alt_data_end+0xf800936c>
10009c68:	003f7506 	br	10009a40 <__alt_data_end+0xf8009a40>
10009c6c:	040400b4 	movhi	r16,4098
10009c70:	8421e104 	addi	r16,r16,-30844
10009c74:	003aa706 	br	10008714 <__alt_data_end+0xf8008714>
10009c78:	d9002d17 	ldw	r4,180(sp)
10009c7c:	d9801e04 	addi	r6,sp,120
10009c80:	b80b883a 	mov	r5,r23
10009c84:	000f7600 	call	1000f760 <__sprint_r>
10009c88:	103a0b1e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10009c8c:	dc402617 	ldw	r17,152(sp)
10009c90:	d8c02017 	ldw	r3,128(sp)
10009c94:	da000404 	addi	r8,sp,16
10009c98:	003f9c06 	br	10009b0c <__alt_data_end+0xf8009b0c>
10009c9c:	ac400043 	ldbu	r17,1(r21)
10009ca0:	84000814 	ori	r16,r16,32
10009ca4:	ad400044 	addi	r21,r21,1
10009ca8:	8c403fcc 	andi	r17,r17,255
10009cac:	8c40201c 	xori	r17,r17,128
10009cb0:	8c7fe004 	addi	r17,r17,-128
10009cb4:	00395e06 	br	10008230 <__alt_data_end+0xf8008230>
10009cb8:	d8c02e15 	stw	r3,184(sp)
10009cbc:	0039883a 	mov	fp,zero
10009cc0:	003e3506 	br	10009598 <__alt_data_end+0xf8009598>
10009cc4:	d9002d17 	ldw	r4,180(sp)
10009cc8:	d9801e04 	addi	r6,sp,120
10009ccc:	b80b883a 	mov	r5,r23
10009cd0:	000f7600 	call	1000f760 <__sprint_r>
10009cd4:	1039f81e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10009cd8:	d8c02017 	ldw	r3,128(sp)
10009cdc:	da000404 	addi	r8,sp,16
10009ce0:	003cd006 	br	10009024 <__alt_data_end+0xf8009024>
10009ce4:	8009883a 	mov	r4,r16
10009ce8:	df003d15 	stw	fp,244(sp)
10009cec:	00080100 	call	10008010 <strlen>
10009cf0:	d8802b15 	stw	r2,172(sp)
10009cf4:	da003d17 	ldw	r8,244(sp)
10009cf8:	103c200e 	bge	r2,zero,10008d7c <__alt_data_end+0xf8008d7c>
10009cfc:	0005883a 	mov	r2,zero
10009d00:	003c1e06 	br	10008d7c <__alt_data_end+0xf8008d7c>
10009d04:	d9002d17 	ldw	r4,180(sp)
10009d08:	d9801e04 	addi	r6,sp,120
10009d0c:	b80b883a 	mov	r5,r23
10009d10:	000f7600 	call	1000f760 <__sprint_r>
10009d14:	1039e81e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10009d18:	d8c02017 	ldw	r3,128(sp)
10009d1c:	d8801f17 	ldw	r2,124(sp)
10009d20:	da000404 	addi	r8,sp,16
10009d24:	d9403317 	ldw	r5,204(sp)
10009d28:	10800044 	addi	r2,r2,1
10009d2c:	44000015 	stw	r16,0(r8)
10009d30:	28c7883a 	add	r3,r5,r3
10009d34:	003b5b06 	br	10008aa4 <__alt_data_end+0xf8008aa4>
10009d38:	010400b4 	movhi	r4,4098
10009d3c:	2121f584 	addi	r4,r4,-30762
10009d40:	d9003515 	stw	r4,212(sp)
10009d44:	003af206 	br	10008910 <__alt_data_end+0xf8008910>
10009d48:	013fffc4 	movi	r4,-1
10009d4c:	003a0806 	br	10008570 <__alt_data_end+0xf8008570>
10009d50:	0023883a 	mov	r17,zero
10009d54:	003d9d06 	br	100093cc <__alt_data_end+0xf80093cc>
10009d58:	d9002d17 	ldw	r4,180(sp)
10009d5c:	d9801e04 	addi	r6,sp,120
10009d60:	b80b883a 	mov	r5,r23
10009d64:	000f7600 	call	1000f760 <__sprint_r>
10009d68:	1039d31e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10009d6c:	d8c02017 	ldw	r3,128(sp)
10009d70:	da000404 	addi	r8,sp,16
10009d74:	003d9406 	br	100093c8 <__alt_data_end+0xf80093c8>
10009d78:	010400b4 	movhi	r4,4098
10009d7c:	2121f184 	addi	r4,r4,-30778
10009d80:	d9002c15 	stw	r4,176(sp)
10009d84:	d9002c17 	ldw	r4,176(sp)
10009d88:	1c47883a 	add	r3,r3,r17
10009d8c:	10800044 	addi	r2,r2,1
10009d90:	41000015 	stw	r4,0(r8)
10009d94:	44400115 	stw	r17,4(r8)
10009d98:	d8c02015 	stw	r3,128(sp)
10009d9c:	d8801f15 	stw	r2,124(sp)
10009da0:	010001c4 	movi	r4,7
10009da4:	20bfd716 	blt	r4,r2,10009d04 <__alt_data_end+0xf8009d04>
10009da8:	42000204 	addi	r8,r8,8
10009dac:	003fdd06 	br	10009d24 <__alt_data_end+0xf8009d24>
10009db0:	d9002d17 	ldw	r4,180(sp)
10009db4:	d9801e04 	addi	r6,sp,120
10009db8:	b80b883a 	mov	r5,r23
10009dbc:	000f7600 	call	1000f760 <__sprint_r>
10009dc0:	1039bd1e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10009dc4:	d8802617 	ldw	r2,152(sp)
10009dc8:	d8c02017 	ldw	r3,128(sp)
10009dcc:	da000404 	addi	r8,sp,16
10009dd0:	003e1006 	br	10009614 <__alt_data_end+0xf8009614>
10009dd4:	00800044 	movi	r2,1
10009dd8:	10803fcc 	andi	r2,r2,255
10009ddc:	00c00044 	movi	r3,1
10009de0:	10fa0d26 	beq	r2,r3,10008618 <__alt_data_end+0xf8008618>
10009de4:	00c00084 	movi	r3,2
10009de8:	10fbaf26 	beq	r2,r3,10008ca8 <__alt_data_end+0xf8008ca8>
10009dec:	003a6d06 	br	100087a4 <__alt_data_end+0xf80087a4>
10009df0:	010400b4 	movhi	r4,4098
10009df4:	2121f584 	addi	r4,r4,-30762
10009df8:	d9003515 	stw	r4,212(sp)
10009dfc:	003b5406 	br	10008b50 <__alt_data_end+0xf8008b50>
10009e00:	d8802a17 	ldw	r2,168(sp)
10009e04:	00c00184 	movi	r3,6
10009e08:	1880012e 	bgeu	r3,r2,10009e10 <___vfprintf_internal_r+0x1d68>
10009e0c:	1805883a 	mov	r2,r3
10009e10:	d8802b15 	stw	r2,172(sp)
10009e14:	1000ef16 	blt	r2,zero,1000a1d4 <___vfprintf_internal_r+0x212c>
10009e18:	040400b4 	movhi	r16,4098
10009e1c:	d8802915 	stw	r2,164(sp)
10009e20:	dcc02e15 	stw	r19,184(sp)
10009e24:	d8002a15 	stw	zero,168(sp)
10009e28:	d8003215 	stw	zero,200(sp)
10009e2c:	8421ef04 	addi	r16,r16,-30788
10009e30:	0039883a 	mov	fp,zero
10009e34:	003a8006 	br	10008838 <__alt_data_end+0xf8008838>
10009e38:	0021883a 	mov	r16,zero
10009e3c:	003e0706 	br	1000965c <__alt_data_end+0xf800965c>
10009e40:	d9002d17 	ldw	r4,180(sp)
10009e44:	d9801e04 	addi	r6,sp,120
10009e48:	b80b883a 	mov	r5,r23
10009e4c:	000f7600 	call	1000f760 <__sprint_r>
10009e50:	1039991e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10009e54:	d8802617 	ldw	r2,152(sp)
10009e58:	d9403317 	ldw	r5,204(sp)
10009e5c:	d8c02017 	ldw	r3,128(sp)
10009e60:	da000404 	addi	r8,sp,16
10009e64:	2885c83a 	sub	r2,r5,r2
10009e68:	003dfb06 	br	10009658 <__alt_data_end+0xf8009658>
10009e6c:	9080004c 	andi	r2,r18,1
10009e70:	103e8f1e 	bne	r2,zero,100098b0 <__alt_data_end+0xf80098b0>
10009e74:	d8802117 	ldw	r2,132(sp)
10009e78:	003e9e06 	br	100098f4 <__alt_data_end+0xf80098f4>
10009e7c:	1025883a 	mov	r18,r2
10009e80:	0039883a 	mov	fp,zero
10009e84:	00800084 	movi	r2,2
10009e88:	003fd306 	br	10009dd8 <__alt_data_end+0xf8009dd8>
10009e8c:	07000b44 	movi	fp,45
10009e90:	df002785 	stb	fp,158(sp)
10009e94:	003a1b06 	br	10008704 <__alt_data_end+0xf8008704>
10009e98:	00c00b44 	movi	r3,45
10009e9c:	d8c02785 	stb	r3,158(sp)
10009ea0:	d8802915 	stw	r2,164(sp)
10009ea4:	dc802c17 	ldw	r18,176(sp)
10009ea8:	d8002a15 	stw	zero,168(sp)
10009eac:	07000b44 	movi	fp,45
10009eb0:	003a5e06 	br	1000882c <__alt_data_end+0xf800882c>
10009eb4:	040400b4 	movhi	r16,4098
10009eb8:	8421e404 	addi	r16,r16,-30832
10009ebc:	003f4706 	br	10009bdc <__alt_data_end+0xf8009bdc>
10009ec0:	d9002e17 	ldw	r4,184(sp)
10009ec4:	d9402f17 	ldw	r5,188(sp)
10009ec8:	20800017 	ldw	r2,0(r4)
10009ecc:	21000104 	addi	r4,r4,4
10009ed0:	d9002e15 	stw	r4,184(sp)
10009ed4:	11400015 	stw	r5,0(r2)
10009ed8:	0038ab06 	br	10008188 <__alt_data_end+0xf8008188>
10009edc:	dd802617 	ldw	r22,152(sp)
10009ee0:	00bfff44 	movi	r2,-3
10009ee4:	b0801c16 	blt	r22,r2,10009f58 <___vfprintf_internal_r+0x1eb0>
10009ee8:	d9402a17 	ldw	r5,168(sp)
10009eec:	2d801a16 	blt	r5,r22,10009f58 <___vfprintf_internal_r+0x1eb0>
10009ef0:	dd803215 	stw	r22,200(sp)
10009ef4:	003e8906 	br	1000991c <__alt_data_end+0xf800991c>
10009ef8:	010400b4 	movhi	r4,4098
10009efc:	2121f184 	addi	r4,r4,-30778
10009f00:	d9002c15 	stw	r4,176(sp)
10009f04:	003c9106 	br	1000914c <__alt_data_end+0xf800914c>
10009f08:	e005883a 	mov	r2,fp
10009f0c:	003e7906 	br	100098f4 <__alt_data_end+0xf80098f4>
10009f10:	d9002a17 	ldw	r4,168(sp)
10009f14:	df002783 	ldbu	fp,158(sp)
10009f18:	dcc02e15 	stw	r19,184(sp)
10009f1c:	d9002915 	stw	r4,164(sp)
10009f20:	d9002b15 	stw	r4,172(sp)
10009f24:	d8002a15 	stw	zero,168(sp)
10009f28:	d8003215 	stw	zero,200(sp)
10009f2c:	003a3b06 	br	1000881c <__alt_data_end+0xf800881c>
10009f30:	9080004c 	andi	r2,r18,1
10009f34:	0039883a 	mov	fp,zero
10009f38:	10000426 	beq	r2,zero,10009f4c <___vfprintf_internal_r+0x1ea4>
10009f3c:	00800c04 	movi	r2,48
10009f40:	dc001dc4 	addi	r16,sp,119
10009f44:	d8801dc5 	stb	r2,119(sp)
10009f48:	003b6406 	br	10008cdc <__alt_data_end+0xf8008cdc>
10009f4c:	d8002b15 	stw	zero,172(sp)
10009f50:	dc001e04 	addi	r16,sp,120
10009f54:	003a2b06 	br	10008804 <__alt_data_end+0xf8008804>
10009f58:	8c7fff84 	addi	r17,r17,-2
10009f5c:	b5bfffc4 	addi	r22,r22,-1
10009f60:	dd802615 	stw	r22,152(sp)
10009f64:	dc4022c5 	stb	r17,139(sp)
10009f68:	b000bf16 	blt	r22,zero,1000a268 <___vfprintf_internal_r+0x21c0>
10009f6c:	00800ac4 	movi	r2,43
10009f70:	d8802305 	stb	r2,140(sp)
10009f74:	00800244 	movi	r2,9
10009f78:	15807016 	blt	r2,r22,1000a13c <___vfprintf_internal_r+0x2094>
10009f7c:	00800c04 	movi	r2,48
10009f80:	b5800c04 	addi	r22,r22,48
10009f84:	d8802345 	stb	r2,141(sp)
10009f88:	dd802385 	stb	r22,142(sp)
10009f8c:	d88023c4 	addi	r2,sp,143
10009f90:	df0022c4 	addi	fp,sp,139
10009f94:	d8c03317 	ldw	r3,204(sp)
10009f98:	1739c83a 	sub	fp,r2,fp
10009f9c:	d9003317 	ldw	r4,204(sp)
10009fa0:	e0c7883a 	add	r3,fp,r3
10009fa4:	df003a15 	stw	fp,232(sp)
10009fa8:	d8c02b15 	stw	r3,172(sp)
10009fac:	00800044 	movi	r2,1
10009fb0:	1100b30e 	bge	r2,r4,1000a280 <___vfprintf_internal_r+0x21d8>
10009fb4:	d8c02b17 	ldw	r3,172(sp)
10009fb8:	18c00044 	addi	r3,r3,1
10009fbc:	d8c02b15 	stw	r3,172(sp)
10009fc0:	1805883a 	mov	r2,r3
10009fc4:	1800ac16 	blt	r3,zero,1000a278 <___vfprintf_internal_r+0x21d0>
10009fc8:	d8003215 	stw	zero,200(sp)
10009fcc:	003e5d06 	br	10009944 <__alt_data_end+0xf8009944>
10009fd0:	d9002d17 	ldw	r4,180(sp)
10009fd4:	d9801e04 	addi	r6,sp,120
10009fd8:	b80b883a 	mov	r5,r23
10009fdc:	000f7600 	call	1000f760 <__sprint_r>
10009fe0:	1039351e 	bne	r2,zero,100084b8 <__alt_data_end+0xf80084b8>
10009fe4:	dc402617 	ldw	r17,152(sp)
10009fe8:	d8c02017 	ldw	r3,128(sp)
10009fec:	d8801f17 	ldw	r2,124(sp)
10009ff0:	da000404 	addi	r8,sp,16
10009ff4:	003ed606 	br	10009b50 <__alt_data_end+0xf8009b50>
10009ff8:	182b883a 	mov	r21,r3
10009ffc:	d8002a15 	stw	zero,168(sp)
1000a000:	00388c06 	br	10008234 <__alt_data_end+0xf8008234>
1000a004:	d8802a17 	ldw	r2,168(sp)
1000a008:	103e071e 	bne	r2,zero,10009828 <__alt_data_end+0xf8009828>
1000a00c:	dc002a15 	stw	r16,168(sp)
1000a010:	003e0506 	br	10009828 <__alt_data_end+0xf8009828>
1000a014:	d9002a17 	ldw	r4,168(sp)
1000a018:	20c00044 	addi	r3,r4,1
1000a01c:	003e0f06 	br	1000985c <__alt_data_end+0xf800985c>
1000a020:	01400184 	movi	r5,6
1000a024:	d9402a15 	stw	r5,168(sp)
1000a028:	003dff06 	br	10009828 <__alt_data_end+0xf8009828>
1000a02c:	d8802104 	addi	r2,sp,132
1000a030:	d8800315 	stw	r2,12(sp)
1000a034:	d8802504 	addi	r2,sp,148
1000a038:	d8800215 	stw	r2,8(sp)
1000a03c:	d8802604 	addi	r2,sp,152
1000a040:	d8800115 	stw	r2,4(sp)
1000a044:	d8802a17 	ldw	r2,168(sp)
1000a048:	d9403617 	ldw	r5,216(sp)
1000a04c:	d9002d17 	ldw	r4,180(sp)
1000a050:	d8800015 	stw	r2,0(sp)
1000a054:	01c000c4 	movi	r7,3
1000a058:	980d883a 	mov	r6,r19
1000a05c:	da003d15 	stw	r8,244(sp)
1000a060:	000a7d80 	call	1000a7d8 <_dtoa_r>
1000a064:	d8c02a17 	ldw	r3,168(sp)
1000a068:	da003d17 	ldw	r8,244(sp)
1000a06c:	1021883a 	mov	r16,r2
1000a070:	10f9883a 	add	fp,r2,r3
1000a074:	81000007 	ldb	r4,0(r16)
1000a078:	00800c04 	movi	r2,48
1000a07c:	20805e26 	beq	r4,r2,1000a1f8 <___vfprintf_internal_r+0x2150>
1000a080:	d8c02617 	ldw	r3,152(sp)
1000a084:	e0f9883a 	add	fp,fp,r3
1000a088:	003e0a06 	br	100098b4 <__alt_data_end+0xf80098b4>
1000a08c:	00c00b44 	movi	r3,45
1000a090:	24e0003c 	xorhi	r19,r4,32768
1000a094:	d8c02905 	stb	r3,164(sp)
1000a098:	003de906 	br	10009840 <__alt_data_end+0xf8009840>
1000a09c:	d8c03217 	ldw	r3,200(sp)
1000a0a0:	00c07a0e 	bge	zero,r3,1000a28c <___vfprintf_internal_r+0x21e4>
1000a0a4:	00800044 	movi	r2,1
1000a0a8:	d9003317 	ldw	r4,204(sp)
1000a0ac:	1105883a 	add	r2,r2,r4
1000a0b0:	d8802b15 	stw	r2,172(sp)
1000a0b4:	10004e16 	blt	r2,zero,1000a1f0 <___vfprintf_internal_r+0x2148>
1000a0b8:	044019c4 	movi	r17,103
1000a0bc:	003e2106 	br	10009944 <__alt_data_end+0xf8009944>
1000a0c0:	d9002a17 	ldw	r4,168(sp)
1000a0c4:	d8802104 	addi	r2,sp,132
1000a0c8:	d8800315 	stw	r2,12(sp)
1000a0cc:	d9000015 	stw	r4,0(sp)
1000a0d0:	d8802504 	addi	r2,sp,148
1000a0d4:	d9403617 	ldw	r5,216(sp)
1000a0d8:	d9002d17 	ldw	r4,180(sp)
1000a0dc:	d8800215 	stw	r2,8(sp)
1000a0e0:	d8802604 	addi	r2,sp,152
1000a0e4:	d8800115 	stw	r2,4(sp)
1000a0e8:	01c000c4 	movi	r7,3
1000a0ec:	980d883a 	mov	r6,r19
1000a0f0:	da003d15 	stw	r8,244(sp)
1000a0f4:	000a7d80 	call	1000a7d8 <_dtoa_r>
1000a0f8:	d8c02a17 	ldw	r3,168(sp)
1000a0fc:	da003d17 	ldw	r8,244(sp)
1000a100:	1021883a 	mov	r16,r2
1000a104:	00801184 	movi	r2,70
1000a108:	80f9883a 	add	fp,r16,r3
1000a10c:	88bfd926 	beq	r17,r2,1000a074 <__alt_data_end+0xf800a074>
1000a110:	003de806 	br	100098b4 <__alt_data_end+0xf80098b4>
1000a114:	d9002a17 	ldw	r4,168(sp)
1000a118:	00c04d0e 	bge	zero,r3,1000a250 <___vfprintf_internal_r+0x21a8>
1000a11c:	2000441e 	bne	r4,zero,1000a230 <___vfprintf_internal_r+0x2188>
1000a120:	9480004c 	andi	r18,r18,1
1000a124:	9000421e 	bne	r18,zero,1000a230 <___vfprintf_internal_r+0x2188>
1000a128:	1805883a 	mov	r2,r3
1000a12c:	18006f16 	blt	r3,zero,1000a2ec <___vfprintf_internal_r+0x2244>
1000a130:	d8c03217 	ldw	r3,200(sp)
1000a134:	d8c02b15 	stw	r3,172(sp)
1000a138:	003e0206 	br	10009944 <__alt_data_end+0xf8009944>
1000a13c:	df0022c4 	addi	fp,sp,139
1000a140:	dc002a15 	stw	r16,168(sp)
1000a144:	4027883a 	mov	r19,r8
1000a148:	e021883a 	mov	r16,fp
1000a14c:	b009883a 	mov	r4,r22
1000a150:	01400284 	movi	r5,10
1000a154:	0007bd40 	call	10007bd4 <__modsi3>
1000a158:	10800c04 	addi	r2,r2,48
1000a15c:	843fffc4 	addi	r16,r16,-1
1000a160:	b009883a 	mov	r4,r22
1000a164:	01400284 	movi	r5,10
1000a168:	80800005 	stb	r2,0(r16)
1000a16c:	0007b500 	call	10007b50 <__divsi3>
1000a170:	102d883a 	mov	r22,r2
1000a174:	00800244 	movi	r2,9
1000a178:	15bff416 	blt	r2,r22,1000a14c <__alt_data_end+0xf800a14c>
1000a17c:	9811883a 	mov	r8,r19
1000a180:	b0800c04 	addi	r2,r22,48
1000a184:	8027883a 	mov	r19,r16
1000a188:	997fffc4 	addi	r5,r19,-1
1000a18c:	98bfffc5 	stb	r2,-1(r19)
1000a190:	dc002a17 	ldw	r16,168(sp)
1000a194:	2f006d2e 	bgeu	r5,fp,1000a34c <___vfprintf_internal_r+0x22a4>
1000a198:	d9c02384 	addi	r7,sp,142
1000a19c:	3ccfc83a 	sub	r7,r7,r19
1000a1a0:	d9002344 	addi	r4,sp,141
1000a1a4:	e1cf883a 	add	r7,fp,r7
1000a1a8:	00000106 	br	1000a1b0 <___vfprintf_internal_r+0x2108>
1000a1ac:	28800003 	ldbu	r2,0(r5)
1000a1b0:	20800005 	stb	r2,0(r4)
1000a1b4:	21000044 	addi	r4,r4,1
1000a1b8:	29400044 	addi	r5,r5,1
1000a1bc:	393ffb1e 	bne	r7,r4,1000a1ac <__alt_data_end+0xf800a1ac>
1000a1c0:	d8802304 	addi	r2,sp,140
1000a1c4:	14c5c83a 	sub	r2,r2,r19
1000a1c8:	d8c02344 	addi	r3,sp,141
1000a1cc:	1885883a 	add	r2,r3,r2
1000a1d0:	003f7006 	br	10009f94 <__alt_data_end+0xf8009f94>
1000a1d4:	0005883a 	mov	r2,zero
1000a1d8:	003f0f06 	br	10009e18 <__alt_data_end+0xf8009e18>
1000a1dc:	d8c03217 	ldw	r3,200(sp)
1000a1e0:	18c00044 	addi	r3,r3,1
1000a1e4:	d8c02b15 	stw	r3,172(sp)
1000a1e8:	1805883a 	mov	r2,r3
1000a1ec:	183fb20e 	bge	r3,zero,1000a0b8 <__alt_data_end+0xf800a0b8>
1000a1f0:	0005883a 	mov	r2,zero
1000a1f4:	003fb006 	br	1000a0b8 <__alt_data_end+0xf800a0b8>
1000a1f8:	d9003617 	ldw	r4,216(sp)
1000a1fc:	000d883a 	mov	r6,zero
1000a200:	000f883a 	mov	r7,zero
1000a204:	980b883a 	mov	r5,r19
1000a208:	d8c03c15 	stw	r3,240(sp)
1000a20c:	da003d15 	stw	r8,244(sp)
1000a210:	00135f00 	call	100135f0 <__eqdf2>
1000a214:	d8c03c17 	ldw	r3,240(sp)
1000a218:	da003d17 	ldw	r8,244(sp)
1000a21c:	103f9826 	beq	r2,zero,1000a080 <__alt_data_end+0xf800a080>
1000a220:	00800044 	movi	r2,1
1000a224:	10c7c83a 	sub	r3,r2,r3
1000a228:	d8c02615 	stw	r3,152(sp)
1000a22c:	003f9506 	br	1000a084 <__alt_data_end+0xf800a084>
1000a230:	d9002a17 	ldw	r4,168(sp)
1000a234:	d8c03217 	ldw	r3,200(sp)
1000a238:	20800044 	addi	r2,r4,1
1000a23c:	1885883a 	add	r2,r3,r2
1000a240:	d8802b15 	stw	r2,172(sp)
1000a244:	103dbf0e 	bge	r2,zero,10009944 <__alt_data_end+0xf8009944>
1000a248:	0005883a 	mov	r2,zero
1000a24c:	003dbd06 	br	10009944 <__alt_data_end+0xf8009944>
1000a250:	2000201e 	bne	r4,zero,1000a2d4 <___vfprintf_internal_r+0x222c>
1000a254:	9480004c 	andi	r18,r18,1
1000a258:	90001e1e 	bne	r18,zero,1000a2d4 <___vfprintf_internal_r+0x222c>
1000a25c:	00800044 	movi	r2,1
1000a260:	d8802b15 	stw	r2,172(sp)
1000a264:	003db706 	br	10009944 <__alt_data_end+0xf8009944>
1000a268:	00800b44 	movi	r2,45
1000a26c:	05adc83a 	sub	r22,zero,r22
1000a270:	d8802305 	stb	r2,140(sp)
1000a274:	003f3f06 	br	10009f74 <__alt_data_end+0xf8009f74>
1000a278:	0005883a 	mov	r2,zero
1000a27c:	003f5206 	br	10009fc8 <__alt_data_end+0xf8009fc8>
1000a280:	90a4703a 	and	r18,r18,r2
1000a284:	903f4e26 	beq	r18,zero,10009fc0 <__alt_data_end+0xf8009fc0>
1000a288:	003f4a06 	br	10009fb4 <__alt_data_end+0xf8009fb4>
1000a28c:	00800084 	movi	r2,2
1000a290:	10c5c83a 	sub	r2,r2,r3
1000a294:	003f8406 	br	1000a0a8 <__alt_data_end+0xf800a0a8>
1000a298:	d9402e17 	ldw	r5,184(sp)
1000a29c:	d9002e17 	ldw	r4,184(sp)
1000a2a0:	ac400043 	ldbu	r17,1(r21)
1000a2a4:	29400017 	ldw	r5,0(r5)
1000a2a8:	20800104 	addi	r2,r4,4
1000a2ac:	d8802e15 	stw	r2,184(sp)
1000a2b0:	d9402a15 	stw	r5,168(sp)
1000a2b4:	182b883a 	mov	r21,r3
1000a2b8:	283e7b0e 	bge	r5,zero,10009ca8 <__alt_data_end+0xf8009ca8>
1000a2bc:	8c403fcc 	andi	r17,r17,255
1000a2c0:	017fffc4 	movi	r5,-1
1000a2c4:	8c40201c 	xori	r17,r17,128
1000a2c8:	d9402a15 	stw	r5,168(sp)
1000a2cc:	8c7fe004 	addi	r17,r17,-128
1000a2d0:	0037d706 	br	10008230 <__alt_data_end+0xf8008230>
1000a2d4:	d8c02a17 	ldw	r3,168(sp)
1000a2d8:	18c00084 	addi	r3,r3,2
1000a2dc:	d8c02b15 	stw	r3,172(sp)
1000a2e0:	1805883a 	mov	r2,r3
1000a2e4:	183d970e 	bge	r3,zero,10009944 <__alt_data_end+0xf8009944>
1000a2e8:	003fd706 	br	1000a248 <__alt_data_end+0xf800a248>
1000a2ec:	0005883a 	mov	r2,zero
1000a2f0:	003f8f06 	br	1000a130 <__alt_data_end+0xf800a130>
1000a2f4:	9080004c 	andi	r2,r18,1
1000a2f8:	103f821e 	bne	r2,zero,1000a104 <__alt_data_end+0xf800a104>
1000a2fc:	d8802117 	ldw	r2,132(sp)
1000a300:	1405c83a 	sub	r2,r2,r16
1000a304:	d8803315 	stw	r2,204(sp)
1000a308:	b47ef426 	beq	r22,r17,10009edc <__alt_data_end+0xf8009edc>
1000a30c:	dd802617 	ldw	r22,152(sp)
1000a310:	003f1206 	br	10009f5c <__alt_data_end+0xf8009f5c>
1000a314:	d8c02b03 	ldbu	r3,172(sp)
1000a318:	d8c02785 	stb	r3,158(sp)
1000a31c:	0038df06 	br	1000869c <__alt_data_end+0xf800869c>
1000a320:	d8c02b03 	ldbu	r3,172(sp)
1000a324:	d8c02785 	stb	r3,158(sp)
1000a328:	0038aa06 	br	100085d4 <__alt_data_end+0xf80085d4>
1000a32c:	d8c02b03 	ldbu	r3,172(sp)
1000a330:	d8c02785 	stb	r3,158(sp)
1000a334:	003a4306 	br	10008c44 <__alt_data_end+0xf8008c44>
1000a338:	d8c02b03 	ldbu	r3,172(sp)
1000a33c:	d8c02785 	stb	r3,158(sp)
1000a340:	003af506 	br	10008f18 <__alt_data_end+0xf8008f18>
1000a344:	0005883a 	mov	r2,zero
1000a348:	003d7b06 	br	10009938 <__alt_data_end+0xf8009938>
1000a34c:	d8802344 	addi	r2,sp,141
1000a350:	003f1006 	br	10009f94 <__alt_data_end+0xf8009f94>
1000a354:	d8c02b03 	ldbu	r3,172(sp)
1000a358:	d8c02785 	stb	r3,158(sp)
1000a35c:	0038fd06 	br	10008754 <__alt_data_end+0xf8008754>
1000a360:	d8c02b03 	ldbu	r3,172(sp)
1000a364:	d8c02785 	stb	r3,158(sp)
1000a368:	003a9706 	br	10008dc8 <__alt_data_end+0xf8008dc8>
1000a36c:	d8c02b03 	ldbu	r3,172(sp)
1000a370:	d8c02785 	stb	r3,158(sp)
1000a374:	003a1806 	br	10008bd8 <__alt_data_end+0xf8008bd8>
1000a378:	d8c02b03 	ldbu	r3,172(sp)
1000a37c:	d8c02785 	stb	r3,158(sp)
1000a380:	003abe06 	br	10008e7c <__alt_data_end+0xf8008e7c>

1000a384 <__vfprintf_internal>:
1000a384:	008400b4 	movhi	r2,4098
1000a388:	10a99504 	addi	r2,r2,-22956
1000a38c:	300f883a 	mov	r7,r6
1000a390:	280d883a 	mov	r6,r5
1000a394:	200b883a 	mov	r5,r4
1000a398:	11000017 	ldw	r4,0(r2)
1000a39c:	00080a81 	jmpi	100080a8 <___vfprintf_internal_r>

1000a3a0 <__sbprintf>:
1000a3a0:	2880030b 	ldhu	r2,12(r5)
1000a3a4:	2ac01917 	ldw	r11,100(r5)
1000a3a8:	2a80038b 	ldhu	r10,14(r5)
1000a3ac:	2a400717 	ldw	r9,28(r5)
1000a3b0:	2a000917 	ldw	r8,36(r5)
1000a3b4:	defee204 	addi	sp,sp,-1144
1000a3b8:	00c10004 	movi	r3,1024
1000a3bc:	dc011a15 	stw	r16,1128(sp)
1000a3c0:	10bfff4c 	andi	r2,r2,65533
1000a3c4:	2821883a 	mov	r16,r5
1000a3c8:	d8cb883a 	add	r5,sp,r3
1000a3cc:	dc811c15 	stw	r18,1136(sp)
1000a3d0:	dc411b15 	stw	r17,1132(sp)
1000a3d4:	dfc11d15 	stw	ra,1140(sp)
1000a3d8:	2025883a 	mov	r18,r4
1000a3dc:	d881030d 	sth	r2,1036(sp)
1000a3e0:	dac11915 	stw	r11,1124(sp)
1000a3e4:	da81038d 	sth	r10,1038(sp)
1000a3e8:	da410715 	stw	r9,1052(sp)
1000a3ec:	da010915 	stw	r8,1060(sp)
1000a3f0:	dec10015 	stw	sp,1024(sp)
1000a3f4:	dec10415 	stw	sp,1040(sp)
1000a3f8:	d8c10215 	stw	r3,1032(sp)
1000a3fc:	d8c10515 	stw	r3,1044(sp)
1000a400:	d8010615 	stw	zero,1048(sp)
1000a404:	00080a80 	call	100080a8 <___vfprintf_internal_r>
1000a408:	1023883a 	mov	r17,r2
1000a40c:	10000416 	blt	r2,zero,1000a420 <__sbprintf+0x80>
1000a410:	d9410004 	addi	r5,sp,1024
1000a414:	9009883a 	mov	r4,r18
1000a418:	000c07c0 	call	1000c07c <_fflush_r>
1000a41c:	10000d1e 	bne	r2,zero,1000a454 <__sbprintf+0xb4>
1000a420:	d881030b 	ldhu	r2,1036(sp)
1000a424:	1080100c 	andi	r2,r2,64
1000a428:	10000326 	beq	r2,zero,1000a438 <__sbprintf+0x98>
1000a42c:	8080030b 	ldhu	r2,12(r16)
1000a430:	10801014 	ori	r2,r2,64
1000a434:	8080030d 	sth	r2,12(r16)
1000a438:	8805883a 	mov	r2,r17
1000a43c:	dfc11d17 	ldw	ra,1140(sp)
1000a440:	dc811c17 	ldw	r18,1136(sp)
1000a444:	dc411b17 	ldw	r17,1132(sp)
1000a448:	dc011a17 	ldw	r16,1128(sp)
1000a44c:	dec11e04 	addi	sp,sp,1144
1000a450:	f800283a 	ret
1000a454:	047fffc4 	movi	r17,-1
1000a458:	003ff106 	br	1000a420 <__alt_data_end+0xf800a420>

1000a45c <__swsetup_r>:
1000a45c:	008400b4 	movhi	r2,4098
1000a460:	defffd04 	addi	sp,sp,-12
1000a464:	10a99504 	addi	r2,r2,-22956
1000a468:	dc400115 	stw	r17,4(sp)
1000a46c:	2023883a 	mov	r17,r4
1000a470:	11000017 	ldw	r4,0(r2)
1000a474:	dc000015 	stw	r16,0(sp)
1000a478:	dfc00215 	stw	ra,8(sp)
1000a47c:	2821883a 	mov	r16,r5
1000a480:	20000226 	beq	r4,zero,1000a48c <__swsetup_r+0x30>
1000a484:	20800e17 	ldw	r2,56(r4)
1000a488:	10003126 	beq	r2,zero,1000a550 <__swsetup_r+0xf4>
1000a48c:	8080030b 	ldhu	r2,12(r16)
1000a490:	10c0020c 	andi	r3,r2,8
1000a494:	1009883a 	mov	r4,r2
1000a498:	18000f26 	beq	r3,zero,1000a4d8 <__swsetup_r+0x7c>
1000a49c:	80c00417 	ldw	r3,16(r16)
1000a4a0:	18001526 	beq	r3,zero,1000a4f8 <__swsetup_r+0x9c>
1000a4a4:	1100004c 	andi	r4,r2,1
1000a4a8:	20001c1e 	bne	r4,zero,1000a51c <__swsetup_r+0xc0>
1000a4ac:	1080008c 	andi	r2,r2,2
1000a4b0:	1000291e 	bne	r2,zero,1000a558 <__swsetup_r+0xfc>
1000a4b4:	80800517 	ldw	r2,20(r16)
1000a4b8:	80800215 	stw	r2,8(r16)
1000a4bc:	18001c26 	beq	r3,zero,1000a530 <__swsetup_r+0xd4>
1000a4c0:	0005883a 	mov	r2,zero
1000a4c4:	dfc00217 	ldw	ra,8(sp)
1000a4c8:	dc400117 	ldw	r17,4(sp)
1000a4cc:	dc000017 	ldw	r16,0(sp)
1000a4d0:	dec00304 	addi	sp,sp,12
1000a4d4:	f800283a 	ret
1000a4d8:	2080040c 	andi	r2,r4,16
1000a4dc:	10002e26 	beq	r2,zero,1000a598 <__swsetup_r+0x13c>
1000a4e0:	2080010c 	andi	r2,r4,4
1000a4e4:	10001e1e 	bne	r2,zero,1000a560 <__swsetup_r+0x104>
1000a4e8:	80c00417 	ldw	r3,16(r16)
1000a4ec:	20800214 	ori	r2,r4,8
1000a4f0:	8080030d 	sth	r2,12(r16)
1000a4f4:	183feb1e 	bne	r3,zero,1000a4a4 <__alt_data_end+0xf800a4a4>
1000a4f8:	1100a00c 	andi	r4,r2,640
1000a4fc:	01408004 	movi	r5,512
1000a500:	217fe826 	beq	r4,r5,1000a4a4 <__alt_data_end+0xf800a4a4>
1000a504:	800b883a 	mov	r5,r16
1000a508:	8809883a 	mov	r4,r17
1000a50c:	000d0180 	call	1000d018 <__smakebuf_r>
1000a510:	8080030b 	ldhu	r2,12(r16)
1000a514:	80c00417 	ldw	r3,16(r16)
1000a518:	003fe206 	br	1000a4a4 <__alt_data_end+0xf800a4a4>
1000a51c:	80800517 	ldw	r2,20(r16)
1000a520:	80000215 	stw	zero,8(r16)
1000a524:	0085c83a 	sub	r2,zero,r2
1000a528:	80800615 	stw	r2,24(r16)
1000a52c:	183fe41e 	bne	r3,zero,1000a4c0 <__alt_data_end+0xf800a4c0>
1000a530:	80c0030b 	ldhu	r3,12(r16)
1000a534:	0005883a 	mov	r2,zero
1000a538:	1900200c 	andi	r4,r3,128
1000a53c:	203fe126 	beq	r4,zero,1000a4c4 <__alt_data_end+0xf800a4c4>
1000a540:	18c01014 	ori	r3,r3,64
1000a544:	80c0030d 	sth	r3,12(r16)
1000a548:	00bfffc4 	movi	r2,-1
1000a54c:	003fdd06 	br	1000a4c4 <__alt_data_end+0xf800a4c4>
1000a550:	000c4680 	call	1000c468 <__sinit>
1000a554:	003fcd06 	br	1000a48c <__alt_data_end+0xf800a48c>
1000a558:	0005883a 	mov	r2,zero
1000a55c:	003fd606 	br	1000a4b8 <__alt_data_end+0xf800a4b8>
1000a560:	81400c17 	ldw	r5,48(r16)
1000a564:	28000626 	beq	r5,zero,1000a580 <__swsetup_r+0x124>
1000a568:	80801004 	addi	r2,r16,64
1000a56c:	28800326 	beq	r5,r2,1000a57c <__swsetup_r+0x120>
1000a570:	8809883a 	mov	r4,r17
1000a574:	000c5dc0 	call	1000c5dc <_free_r>
1000a578:	8100030b 	ldhu	r4,12(r16)
1000a57c:	80000c15 	stw	zero,48(r16)
1000a580:	80c00417 	ldw	r3,16(r16)
1000a584:	00bff6c4 	movi	r2,-37
1000a588:	1108703a 	and	r4,r2,r4
1000a58c:	80000115 	stw	zero,4(r16)
1000a590:	80c00015 	stw	r3,0(r16)
1000a594:	003fd506 	br	1000a4ec <__alt_data_end+0xf800a4ec>
1000a598:	00800244 	movi	r2,9
1000a59c:	88800015 	stw	r2,0(r17)
1000a5a0:	20801014 	ori	r2,r4,64
1000a5a4:	8080030d 	sth	r2,12(r16)
1000a5a8:	00bfffc4 	movi	r2,-1
1000a5ac:	003fc506 	br	1000a4c4 <__alt_data_end+0xf800a4c4>

1000a5b0 <quorem>:
1000a5b0:	defff204 	addi	sp,sp,-56
1000a5b4:	ddc00b15 	stw	r23,44(sp)
1000a5b8:	20800417 	ldw	r2,16(r4)
1000a5bc:	2dc00417 	ldw	r23,16(r5)
1000a5c0:	dfc00d15 	stw	ra,52(sp)
1000a5c4:	df000c15 	stw	fp,48(sp)
1000a5c8:	dd800a15 	stw	r22,40(sp)
1000a5cc:	dd400915 	stw	r21,36(sp)
1000a5d0:	dd000815 	stw	r20,32(sp)
1000a5d4:	dcc00715 	stw	r19,28(sp)
1000a5d8:	dc800615 	stw	r18,24(sp)
1000a5dc:	dc400515 	stw	r17,20(sp)
1000a5e0:	dc000415 	stw	r16,16(sp)
1000a5e4:	15c07a16 	blt	r2,r23,1000a7d0 <quorem+0x220>
1000a5e8:	bdffffc4 	addi	r23,r23,-1
1000a5ec:	bde9883a 	add	r20,r23,r23
1000a5f0:	28c00504 	addi	r3,r5,20
1000a5f4:	a529883a 	add	r20,r20,r20
1000a5f8:	1d39883a 	add	fp,r3,r20
1000a5fc:	24c00504 	addi	r19,r4,20
1000a600:	d9400215 	stw	r5,8(sp)
1000a604:	9d29883a 	add	r20,r19,r20
1000a608:	e1400017 	ldw	r5,0(fp)
1000a60c:	d9000015 	stw	r4,0(sp)
1000a610:	a1000017 	ldw	r4,0(r20)
1000a614:	29400044 	addi	r5,r5,1
1000a618:	d8c00115 	stw	r3,4(sp)
1000a61c:	dd000315 	stw	r20,12(sp)
1000a620:	0007c480 	call	10007c48 <__udivsi3>
1000a624:	1025883a 	mov	r18,r2
1000a628:	10003026 	beq	r2,zero,1000a6ec <quorem+0x13c>
1000a62c:	dc400117 	ldw	r17,4(sp)
1000a630:	9829883a 	mov	r20,r19
1000a634:	002d883a 	mov	r22,zero
1000a638:	0021883a 	mov	r16,zero
1000a63c:	8d400017 	ldw	r21,0(r17)
1000a640:	900b883a 	mov	r5,r18
1000a644:	8c400104 	addi	r17,r17,4
1000a648:	a93fffcc 	andi	r4,r21,65535
1000a64c:	0007d040 	call	10007d04 <__mulsi3>
1000a650:	a808d43a 	srli	r4,r21,16
1000a654:	900b883a 	mov	r5,r18
1000a658:	15ad883a 	add	r22,r2,r22
1000a65c:	0007d040 	call	10007d04 <__mulsi3>
1000a660:	a1000017 	ldw	r4,0(r20)
1000a664:	b00cd43a 	srli	r6,r22,16
1000a668:	b0ffffcc 	andi	r3,r22,65535
1000a66c:	217fffcc 	andi	r5,r4,65535
1000a670:	2c21883a 	add	r16,r5,r16
1000a674:	80c7c83a 	sub	r3,r16,r3
1000a678:	2008d43a 	srli	r4,r4,16
1000a67c:	1185883a 	add	r2,r2,r6
1000a680:	1821d43a 	srai	r16,r3,16
1000a684:	117fffcc 	andi	r5,r2,65535
1000a688:	2149c83a 	sub	r4,r4,r5
1000a68c:	2421883a 	add	r16,r4,r16
1000a690:	8008943a 	slli	r4,r16,16
1000a694:	18ffffcc 	andi	r3,r3,65535
1000a698:	102cd43a 	srli	r22,r2,16
1000a69c:	20c8b03a 	or	r4,r4,r3
1000a6a0:	a1000015 	stw	r4,0(r20)
1000a6a4:	8021d43a 	srai	r16,r16,16
1000a6a8:	a5000104 	addi	r20,r20,4
1000a6ac:	e47fe32e 	bgeu	fp,r17,1000a63c <__alt_data_end+0xf800a63c>
1000a6b0:	d8c00317 	ldw	r3,12(sp)
1000a6b4:	18800017 	ldw	r2,0(r3)
1000a6b8:	10000c1e 	bne	r2,zero,1000a6ec <quorem+0x13c>
1000a6bc:	18bfff04 	addi	r2,r3,-4
1000a6c0:	9880082e 	bgeu	r19,r2,1000a6e4 <quorem+0x134>
1000a6c4:	18ffff17 	ldw	r3,-4(r3)
1000a6c8:	18000326 	beq	r3,zero,1000a6d8 <quorem+0x128>
1000a6cc:	00000506 	br	1000a6e4 <quorem+0x134>
1000a6d0:	10c00017 	ldw	r3,0(r2)
1000a6d4:	1800031e 	bne	r3,zero,1000a6e4 <quorem+0x134>
1000a6d8:	10bfff04 	addi	r2,r2,-4
1000a6dc:	bdffffc4 	addi	r23,r23,-1
1000a6e0:	98bffb36 	bltu	r19,r2,1000a6d0 <__alt_data_end+0xf800a6d0>
1000a6e4:	d8c00017 	ldw	r3,0(sp)
1000a6e8:	1dc00415 	stw	r23,16(r3)
1000a6ec:	d9400217 	ldw	r5,8(sp)
1000a6f0:	d9000017 	ldw	r4,0(sp)
1000a6f4:	000e6ec0 	call	1000e6ec <__mcmp>
1000a6f8:	10002816 	blt	r2,zero,1000a79c <quorem+0x1ec>
1000a6fc:	dc400117 	ldw	r17,4(sp)
1000a700:	94800044 	addi	r18,r18,1
1000a704:	980d883a 	mov	r6,r19
1000a708:	0007883a 	mov	r3,zero
1000a70c:	31000017 	ldw	r4,0(r6)
1000a710:	89400017 	ldw	r5,0(r17)
1000a714:	31800104 	addi	r6,r6,4
1000a718:	20bfffcc 	andi	r2,r4,65535
1000a71c:	10c7883a 	add	r3,r2,r3
1000a720:	28bfffcc 	andi	r2,r5,65535
1000a724:	1885c83a 	sub	r2,r3,r2
1000a728:	280ad43a 	srli	r5,r5,16
1000a72c:	2008d43a 	srli	r4,r4,16
1000a730:	1007d43a 	srai	r3,r2,16
1000a734:	10bfffcc 	andi	r2,r2,65535
1000a738:	2149c83a 	sub	r4,r4,r5
1000a73c:	20c9883a 	add	r4,r4,r3
1000a740:	200a943a 	slli	r5,r4,16
1000a744:	8c400104 	addi	r17,r17,4
1000a748:	2007d43a 	srai	r3,r4,16
1000a74c:	2884b03a 	or	r2,r5,r2
1000a750:	30bfff15 	stw	r2,-4(r6)
1000a754:	e47fed2e 	bgeu	fp,r17,1000a70c <__alt_data_end+0xf800a70c>
1000a758:	bdc5883a 	add	r2,r23,r23
1000a75c:	1085883a 	add	r2,r2,r2
1000a760:	9887883a 	add	r3,r19,r2
1000a764:	18800017 	ldw	r2,0(r3)
1000a768:	10000c1e 	bne	r2,zero,1000a79c <quorem+0x1ec>
1000a76c:	18bfff04 	addi	r2,r3,-4
1000a770:	9880082e 	bgeu	r19,r2,1000a794 <quorem+0x1e4>
1000a774:	18ffff17 	ldw	r3,-4(r3)
1000a778:	18000326 	beq	r3,zero,1000a788 <quorem+0x1d8>
1000a77c:	00000506 	br	1000a794 <quorem+0x1e4>
1000a780:	10c00017 	ldw	r3,0(r2)
1000a784:	1800031e 	bne	r3,zero,1000a794 <quorem+0x1e4>
1000a788:	10bfff04 	addi	r2,r2,-4
1000a78c:	bdffffc4 	addi	r23,r23,-1
1000a790:	98bffb36 	bltu	r19,r2,1000a780 <__alt_data_end+0xf800a780>
1000a794:	d8c00017 	ldw	r3,0(sp)
1000a798:	1dc00415 	stw	r23,16(r3)
1000a79c:	9005883a 	mov	r2,r18
1000a7a0:	dfc00d17 	ldw	ra,52(sp)
1000a7a4:	df000c17 	ldw	fp,48(sp)
1000a7a8:	ddc00b17 	ldw	r23,44(sp)
1000a7ac:	dd800a17 	ldw	r22,40(sp)
1000a7b0:	dd400917 	ldw	r21,36(sp)
1000a7b4:	dd000817 	ldw	r20,32(sp)
1000a7b8:	dcc00717 	ldw	r19,28(sp)
1000a7bc:	dc800617 	ldw	r18,24(sp)
1000a7c0:	dc400517 	ldw	r17,20(sp)
1000a7c4:	dc000417 	ldw	r16,16(sp)
1000a7c8:	dec00e04 	addi	sp,sp,56
1000a7cc:	f800283a 	ret
1000a7d0:	0005883a 	mov	r2,zero
1000a7d4:	003ff206 	br	1000a7a0 <__alt_data_end+0xf800a7a0>

1000a7d8 <_dtoa_r>:
1000a7d8:	20801017 	ldw	r2,64(r4)
1000a7dc:	deffde04 	addi	sp,sp,-136
1000a7e0:	df002015 	stw	fp,128(sp)
1000a7e4:	dcc01b15 	stw	r19,108(sp)
1000a7e8:	dc801a15 	stw	r18,104(sp)
1000a7ec:	dc401915 	stw	r17,100(sp)
1000a7f0:	dc001815 	stw	r16,96(sp)
1000a7f4:	dfc02115 	stw	ra,132(sp)
1000a7f8:	ddc01f15 	stw	r23,124(sp)
1000a7fc:	dd801e15 	stw	r22,120(sp)
1000a800:	dd401d15 	stw	r21,116(sp)
1000a804:	dd001c15 	stw	r20,112(sp)
1000a808:	d9c00315 	stw	r7,12(sp)
1000a80c:	2039883a 	mov	fp,r4
1000a810:	3023883a 	mov	r17,r6
1000a814:	2825883a 	mov	r18,r5
1000a818:	dc002417 	ldw	r16,144(sp)
1000a81c:	3027883a 	mov	r19,r6
1000a820:	10000826 	beq	r2,zero,1000a844 <_dtoa_r+0x6c>
1000a824:	21801117 	ldw	r6,68(r4)
1000a828:	00c00044 	movi	r3,1
1000a82c:	100b883a 	mov	r5,r2
1000a830:	1986983a 	sll	r3,r3,r6
1000a834:	11800115 	stw	r6,4(r2)
1000a838:	10c00215 	stw	r3,8(r2)
1000a83c:	000de100 	call	1000de10 <_Bfree>
1000a840:	e0001015 	stw	zero,64(fp)
1000a844:	88002e16 	blt	r17,zero,1000a900 <_dtoa_r+0x128>
1000a848:	80000015 	stw	zero,0(r16)
1000a84c:	889ffc2c 	andhi	r2,r17,32752
1000a850:	00dffc34 	movhi	r3,32752
1000a854:	10c01c26 	beq	r2,r3,1000a8c8 <_dtoa_r+0xf0>
1000a858:	000d883a 	mov	r6,zero
1000a85c:	000f883a 	mov	r7,zero
1000a860:	9009883a 	mov	r4,r18
1000a864:	980b883a 	mov	r5,r19
1000a868:	00135f00 	call	100135f0 <__eqdf2>
1000a86c:	10002b1e 	bne	r2,zero,1000a91c <_dtoa_r+0x144>
1000a870:	d9c02317 	ldw	r7,140(sp)
1000a874:	00800044 	movi	r2,1
1000a878:	38800015 	stw	r2,0(r7)
1000a87c:	d8802517 	ldw	r2,148(sp)
1000a880:	10019e26 	beq	r2,zero,1000aefc <_dtoa_r+0x724>
1000a884:	d8c02517 	ldw	r3,148(sp)
1000a888:	008400b4 	movhi	r2,4098
1000a88c:	10a1f144 	addi	r2,r2,-30779
1000a890:	18800015 	stw	r2,0(r3)
1000a894:	10bfffc4 	addi	r2,r2,-1
1000a898:	dfc02117 	ldw	ra,132(sp)
1000a89c:	df002017 	ldw	fp,128(sp)
1000a8a0:	ddc01f17 	ldw	r23,124(sp)
1000a8a4:	dd801e17 	ldw	r22,120(sp)
1000a8a8:	dd401d17 	ldw	r21,116(sp)
1000a8ac:	dd001c17 	ldw	r20,112(sp)
1000a8b0:	dcc01b17 	ldw	r19,108(sp)
1000a8b4:	dc801a17 	ldw	r18,104(sp)
1000a8b8:	dc401917 	ldw	r17,100(sp)
1000a8bc:	dc001817 	ldw	r16,96(sp)
1000a8c0:	dec02204 	addi	sp,sp,136
1000a8c4:	f800283a 	ret
1000a8c8:	d8c02317 	ldw	r3,140(sp)
1000a8cc:	0089c3c4 	movi	r2,9999
1000a8d0:	18800015 	stw	r2,0(r3)
1000a8d4:	90017726 	beq	r18,zero,1000aeb4 <_dtoa_r+0x6dc>
1000a8d8:	008400b4 	movhi	r2,4098
1000a8dc:	10a1fd04 	addi	r2,r2,-30732
1000a8e0:	d9002517 	ldw	r4,148(sp)
1000a8e4:	203fec26 	beq	r4,zero,1000a898 <__alt_data_end+0xf800a898>
1000a8e8:	10c000c7 	ldb	r3,3(r2)
1000a8ec:	1801781e 	bne	r3,zero,1000aed0 <_dtoa_r+0x6f8>
1000a8f0:	10c000c4 	addi	r3,r2,3
1000a8f4:	d9802517 	ldw	r6,148(sp)
1000a8f8:	30c00015 	stw	r3,0(r6)
1000a8fc:	003fe606 	br	1000a898 <__alt_data_end+0xf800a898>
1000a900:	04e00034 	movhi	r19,32768
1000a904:	9cffffc4 	addi	r19,r19,-1
1000a908:	00800044 	movi	r2,1
1000a90c:	8ce6703a 	and	r19,r17,r19
1000a910:	80800015 	stw	r2,0(r16)
1000a914:	9823883a 	mov	r17,r19
1000a918:	003fcc06 	br	1000a84c <__alt_data_end+0xf800a84c>
1000a91c:	d8800204 	addi	r2,sp,8
1000a920:	d8800015 	stw	r2,0(sp)
1000a924:	d9c00104 	addi	r7,sp,4
1000a928:	900b883a 	mov	r5,r18
1000a92c:	980d883a 	mov	r6,r19
1000a930:	e009883a 	mov	r4,fp
1000a934:	8820d53a 	srli	r16,r17,20
1000a938:	000eab80 	call	1000eab8 <__d2b>
1000a93c:	d8800915 	stw	r2,36(sp)
1000a940:	8001651e 	bne	r16,zero,1000aed8 <_dtoa_r+0x700>
1000a944:	dd800217 	ldw	r22,8(sp)
1000a948:	dc000117 	ldw	r16,4(sp)
1000a94c:	00800804 	movi	r2,32
1000a950:	b421883a 	add	r16,r22,r16
1000a954:	80c10c84 	addi	r3,r16,1074
1000a958:	10c2d10e 	bge	r2,r3,1000b4a0 <_dtoa_r+0xcc8>
1000a95c:	00801004 	movi	r2,64
1000a960:	81010484 	addi	r4,r16,1042
1000a964:	10c7c83a 	sub	r3,r2,r3
1000a968:	9108d83a 	srl	r4,r18,r4
1000a96c:	88e2983a 	sll	r17,r17,r3
1000a970:	2448b03a 	or	r4,r4,r17
1000a974:	0014b0c0 	call	10014b0c <__floatunsidf>
1000a978:	017f8434 	movhi	r5,65040
1000a97c:	01800044 	movi	r6,1
1000a980:	1009883a 	mov	r4,r2
1000a984:	194b883a 	add	r5,r3,r5
1000a988:	843fffc4 	addi	r16,r16,-1
1000a98c:	d9801115 	stw	r6,68(sp)
1000a990:	000d883a 	mov	r6,zero
1000a994:	01cffe34 	movhi	r7,16376
1000a998:	00140b40 	call	100140b4 <__subdf3>
1000a99c:	0198dbf4 	movhi	r6,25455
1000a9a0:	01cff4f4 	movhi	r7,16339
1000a9a4:	3190d844 	addi	r6,r6,17249
1000a9a8:	39e1e9c4 	addi	r7,r7,-30809
1000a9ac:	1009883a 	mov	r4,r2
1000a9b0:	180b883a 	mov	r5,r3
1000a9b4:	00138480 	call	10013848 <__muldf3>
1000a9b8:	01a2d874 	movhi	r6,35681
1000a9bc:	01cff1f4 	movhi	r7,16327
1000a9c0:	31b22cc4 	addi	r6,r6,-14157
1000a9c4:	39e28a04 	addi	r7,r7,-30168
1000a9c8:	180b883a 	mov	r5,r3
1000a9cc:	1009883a 	mov	r4,r2
1000a9d0:	00123740 	call	10012374 <__adddf3>
1000a9d4:	8009883a 	mov	r4,r16
1000a9d8:	1029883a 	mov	r20,r2
1000a9dc:	1823883a 	mov	r17,r3
1000a9e0:	0014a300 	call	10014a30 <__floatsidf>
1000a9e4:	019427f4 	movhi	r6,20639
1000a9e8:	01cff4f4 	movhi	r7,16339
1000a9ec:	319e7ec4 	addi	r6,r6,31227
1000a9f0:	39d104c4 	addi	r7,r7,17427
1000a9f4:	1009883a 	mov	r4,r2
1000a9f8:	180b883a 	mov	r5,r3
1000a9fc:	00138480 	call	10013848 <__muldf3>
1000aa00:	100d883a 	mov	r6,r2
1000aa04:	180f883a 	mov	r7,r3
1000aa08:	a009883a 	mov	r4,r20
1000aa0c:	880b883a 	mov	r5,r17
1000aa10:	00123740 	call	10012374 <__adddf3>
1000aa14:	1009883a 	mov	r4,r2
1000aa18:	180b883a 	mov	r5,r3
1000aa1c:	1029883a 	mov	r20,r2
1000aa20:	1823883a 	mov	r17,r3
1000aa24:	00149b00 	call	100149b0 <__fixdfsi>
1000aa28:	000d883a 	mov	r6,zero
1000aa2c:	000f883a 	mov	r7,zero
1000aa30:	a009883a 	mov	r4,r20
1000aa34:	880b883a 	mov	r5,r17
1000aa38:	d8800515 	stw	r2,20(sp)
1000aa3c:	00137540 	call	10013754 <__ledf2>
1000aa40:	10028716 	blt	r2,zero,1000b460 <_dtoa_r+0xc88>
1000aa44:	d8c00517 	ldw	r3,20(sp)
1000aa48:	00800584 	movi	r2,22
1000aa4c:	10c27536 	bltu	r2,r3,1000b424 <_dtoa_r+0xc4c>
1000aa50:	180490fa 	slli	r2,r3,3
1000aa54:	00c400b4 	movhi	r3,4098
1000aa58:	18e21904 	addi	r3,r3,-30620
1000aa5c:	1885883a 	add	r2,r3,r2
1000aa60:	11000017 	ldw	r4,0(r2)
1000aa64:	11400117 	ldw	r5,4(r2)
1000aa68:	900d883a 	mov	r6,r18
1000aa6c:	980f883a 	mov	r7,r19
1000aa70:	00136780 	call	10013678 <__gedf2>
1000aa74:	00828d0e 	bge	zero,r2,1000b4ac <_dtoa_r+0xcd4>
1000aa78:	d9000517 	ldw	r4,20(sp)
1000aa7c:	d8000e15 	stw	zero,56(sp)
1000aa80:	213fffc4 	addi	r4,r4,-1
1000aa84:	d9000515 	stw	r4,20(sp)
1000aa88:	b42dc83a 	sub	r22,r22,r16
1000aa8c:	b5bfffc4 	addi	r22,r22,-1
1000aa90:	b0026f16 	blt	r22,zero,1000b450 <_dtoa_r+0xc78>
1000aa94:	d8000815 	stw	zero,32(sp)
1000aa98:	d9c00517 	ldw	r7,20(sp)
1000aa9c:	38026416 	blt	r7,zero,1000b430 <_dtoa_r+0xc58>
1000aaa0:	b1ed883a 	add	r22,r22,r7
1000aaa4:	d9c00d15 	stw	r7,52(sp)
1000aaa8:	d8000a15 	stw	zero,40(sp)
1000aaac:	d9800317 	ldw	r6,12(sp)
1000aab0:	00800244 	movi	r2,9
1000aab4:	11811436 	bltu	r2,r6,1000af08 <_dtoa_r+0x730>
1000aab8:	00800144 	movi	r2,5
1000aabc:	1184e10e 	bge	r2,r6,1000be44 <_dtoa_r+0x166c>
1000aac0:	31bfff04 	addi	r6,r6,-4
1000aac4:	d9800315 	stw	r6,12(sp)
1000aac8:	0023883a 	mov	r17,zero
1000aacc:	d9800317 	ldw	r6,12(sp)
1000aad0:	008000c4 	movi	r2,3
1000aad4:	30836726 	beq	r6,r2,1000b874 <_dtoa_r+0x109c>
1000aad8:	1183410e 	bge	r2,r6,1000b7e0 <_dtoa_r+0x1008>
1000aadc:	d9c00317 	ldw	r7,12(sp)
1000aae0:	00800104 	movi	r2,4
1000aae4:	38827c26 	beq	r7,r2,1000b4d8 <_dtoa_r+0xd00>
1000aae8:	00800144 	movi	r2,5
1000aaec:	3884c41e 	bne	r7,r2,1000be00 <_dtoa_r+0x1628>
1000aaf0:	00800044 	movi	r2,1
1000aaf4:	d8800b15 	stw	r2,44(sp)
1000aaf8:	d8c00517 	ldw	r3,20(sp)
1000aafc:	d9002217 	ldw	r4,136(sp)
1000ab00:	1907883a 	add	r3,r3,r4
1000ab04:	19800044 	addi	r6,r3,1
1000ab08:	d8c00c15 	stw	r3,48(sp)
1000ab0c:	d9800615 	stw	r6,24(sp)
1000ab10:	0183a40e 	bge	zero,r6,1000b9a4 <_dtoa_r+0x11cc>
1000ab14:	d9800617 	ldw	r6,24(sp)
1000ab18:	3021883a 	mov	r16,r6
1000ab1c:	e0001115 	stw	zero,68(fp)
1000ab20:	008005c4 	movi	r2,23
1000ab24:	1184c92e 	bgeu	r2,r6,1000be4c <_dtoa_r+0x1674>
1000ab28:	00c00044 	movi	r3,1
1000ab2c:	00800104 	movi	r2,4
1000ab30:	1085883a 	add	r2,r2,r2
1000ab34:	11000504 	addi	r4,r2,20
1000ab38:	180b883a 	mov	r5,r3
1000ab3c:	18c00044 	addi	r3,r3,1
1000ab40:	313ffb2e 	bgeu	r6,r4,1000ab30 <__alt_data_end+0xf800ab30>
1000ab44:	e1401115 	stw	r5,68(fp)
1000ab48:	e009883a 	mov	r4,fp
1000ab4c:	000dd680 	call	1000dd68 <_Balloc>
1000ab50:	d8800715 	stw	r2,28(sp)
1000ab54:	e0801015 	stw	r2,64(fp)
1000ab58:	00800384 	movi	r2,14
1000ab5c:	1400f736 	bltu	r2,r16,1000af3c <_dtoa_r+0x764>
1000ab60:	8800f626 	beq	r17,zero,1000af3c <_dtoa_r+0x764>
1000ab64:	d9c00517 	ldw	r7,20(sp)
1000ab68:	01c39a0e 	bge	zero,r7,1000b9d4 <_dtoa_r+0x11fc>
1000ab6c:	388003cc 	andi	r2,r7,15
1000ab70:	100490fa 	slli	r2,r2,3
1000ab74:	382bd13a 	srai	r21,r7,4
1000ab78:	00c400b4 	movhi	r3,4098
1000ab7c:	18e21904 	addi	r3,r3,-30620
1000ab80:	1885883a 	add	r2,r3,r2
1000ab84:	a8c0040c 	andi	r3,r21,16
1000ab88:	12400017 	ldw	r9,0(r2)
1000ab8c:	12000117 	ldw	r8,4(r2)
1000ab90:	18037926 	beq	r3,zero,1000b978 <_dtoa_r+0x11a0>
1000ab94:	008400b4 	movhi	r2,4098
1000ab98:	10a20f04 	addi	r2,r2,-30660
1000ab9c:	11800817 	ldw	r6,32(r2)
1000aba0:	11c00917 	ldw	r7,36(r2)
1000aba4:	9009883a 	mov	r4,r18
1000aba8:	980b883a 	mov	r5,r19
1000abac:	da001715 	stw	r8,92(sp)
1000abb0:	da401615 	stw	r9,88(sp)
1000abb4:	0012c200 	call	10012c20 <__divdf3>
1000abb8:	da001717 	ldw	r8,92(sp)
1000abbc:	da401617 	ldw	r9,88(sp)
1000abc0:	ad4003cc 	andi	r21,r21,15
1000abc4:	040000c4 	movi	r16,3
1000abc8:	1023883a 	mov	r17,r2
1000abcc:	1829883a 	mov	r20,r3
1000abd0:	a8001126 	beq	r21,zero,1000ac18 <_dtoa_r+0x440>
1000abd4:	05c400b4 	movhi	r23,4098
1000abd8:	bde20f04 	addi	r23,r23,-30660
1000abdc:	4805883a 	mov	r2,r9
1000abe0:	4007883a 	mov	r3,r8
1000abe4:	a980004c 	andi	r6,r21,1
1000abe8:	1009883a 	mov	r4,r2
1000abec:	a82bd07a 	srai	r21,r21,1
1000abf0:	180b883a 	mov	r5,r3
1000abf4:	30000426 	beq	r6,zero,1000ac08 <_dtoa_r+0x430>
1000abf8:	b9800017 	ldw	r6,0(r23)
1000abfc:	b9c00117 	ldw	r7,4(r23)
1000ac00:	84000044 	addi	r16,r16,1
1000ac04:	00138480 	call	10013848 <__muldf3>
1000ac08:	bdc00204 	addi	r23,r23,8
1000ac0c:	a83ff51e 	bne	r21,zero,1000abe4 <__alt_data_end+0xf800abe4>
1000ac10:	1013883a 	mov	r9,r2
1000ac14:	1811883a 	mov	r8,r3
1000ac18:	480d883a 	mov	r6,r9
1000ac1c:	400f883a 	mov	r7,r8
1000ac20:	8809883a 	mov	r4,r17
1000ac24:	a00b883a 	mov	r5,r20
1000ac28:	0012c200 	call	10012c20 <__divdf3>
1000ac2c:	d8800f15 	stw	r2,60(sp)
1000ac30:	d8c01015 	stw	r3,64(sp)
1000ac34:	d8c00e17 	ldw	r3,56(sp)
1000ac38:	18000626 	beq	r3,zero,1000ac54 <_dtoa_r+0x47c>
1000ac3c:	d9000f17 	ldw	r4,60(sp)
1000ac40:	d9401017 	ldw	r5,64(sp)
1000ac44:	000d883a 	mov	r6,zero
1000ac48:	01cffc34 	movhi	r7,16368
1000ac4c:	00137540 	call	10013754 <__ledf2>
1000ac50:	10040b16 	blt	r2,zero,1000bc80 <_dtoa_r+0x14a8>
1000ac54:	8009883a 	mov	r4,r16
1000ac58:	0014a300 	call	10014a30 <__floatsidf>
1000ac5c:	d9800f17 	ldw	r6,60(sp)
1000ac60:	d9c01017 	ldw	r7,64(sp)
1000ac64:	1009883a 	mov	r4,r2
1000ac68:	180b883a 	mov	r5,r3
1000ac6c:	00138480 	call	10013848 <__muldf3>
1000ac70:	000d883a 	mov	r6,zero
1000ac74:	01d00734 	movhi	r7,16412
1000ac78:	1009883a 	mov	r4,r2
1000ac7c:	180b883a 	mov	r5,r3
1000ac80:	00123740 	call	10012374 <__adddf3>
1000ac84:	1021883a 	mov	r16,r2
1000ac88:	d8800617 	ldw	r2,24(sp)
1000ac8c:	047f3034 	movhi	r17,64704
1000ac90:	1c63883a 	add	r17,r3,r17
1000ac94:	10031826 	beq	r2,zero,1000b8f8 <_dtoa_r+0x1120>
1000ac98:	d8c00517 	ldw	r3,20(sp)
1000ac9c:	db000617 	ldw	r12,24(sp)
1000aca0:	d8c01315 	stw	r3,76(sp)
1000aca4:	d9000b17 	ldw	r4,44(sp)
1000aca8:	20038f26 	beq	r4,zero,1000bae8 <_dtoa_r+0x1310>
1000acac:	60bfffc4 	addi	r2,r12,-1
1000acb0:	100490fa 	slli	r2,r2,3
1000acb4:	00c400b4 	movhi	r3,4098
1000acb8:	18e21904 	addi	r3,r3,-30620
1000acbc:	1885883a 	add	r2,r3,r2
1000acc0:	11800017 	ldw	r6,0(r2)
1000acc4:	11c00117 	ldw	r7,4(r2)
1000acc8:	d8800717 	ldw	r2,28(sp)
1000accc:	0009883a 	mov	r4,zero
1000acd0:	014ff834 	movhi	r5,16352
1000acd4:	db001615 	stw	r12,88(sp)
1000acd8:	15c00044 	addi	r23,r2,1
1000acdc:	0012c200 	call	10012c20 <__divdf3>
1000ace0:	800d883a 	mov	r6,r16
1000ace4:	880f883a 	mov	r7,r17
1000ace8:	1009883a 	mov	r4,r2
1000acec:	180b883a 	mov	r5,r3
1000acf0:	00140b40 	call	100140b4 <__subdf3>
1000acf4:	d9401017 	ldw	r5,64(sp)
1000acf8:	d9000f17 	ldw	r4,60(sp)
1000acfc:	102b883a 	mov	r21,r2
1000ad00:	d8c01215 	stw	r3,72(sp)
1000ad04:	00149b00 	call	100149b0 <__fixdfsi>
1000ad08:	1009883a 	mov	r4,r2
1000ad0c:	1029883a 	mov	r20,r2
1000ad10:	0014a300 	call	10014a30 <__floatsidf>
1000ad14:	d9000f17 	ldw	r4,60(sp)
1000ad18:	d9401017 	ldw	r5,64(sp)
1000ad1c:	100d883a 	mov	r6,r2
1000ad20:	180f883a 	mov	r7,r3
1000ad24:	00140b40 	call	100140b4 <__subdf3>
1000ad28:	1823883a 	mov	r17,r3
1000ad2c:	d8c00717 	ldw	r3,28(sp)
1000ad30:	d9401217 	ldw	r5,72(sp)
1000ad34:	a2000c04 	addi	r8,r20,48
1000ad38:	1021883a 	mov	r16,r2
1000ad3c:	1a000005 	stb	r8,0(r3)
1000ad40:	800d883a 	mov	r6,r16
1000ad44:	880f883a 	mov	r7,r17
1000ad48:	a809883a 	mov	r4,r21
1000ad4c:	4029883a 	mov	r20,r8
1000ad50:	00136780 	call	10013678 <__gedf2>
1000ad54:	00841d16 	blt	zero,r2,1000bdcc <_dtoa_r+0x15f4>
1000ad58:	800d883a 	mov	r6,r16
1000ad5c:	880f883a 	mov	r7,r17
1000ad60:	0009883a 	mov	r4,zero
1000ad64:	014ffc34 	movhi	r5,16368
1000ad68:	00140b40 	call	100140b4 <__subdf3>
1000ad6c:	d9401217 	ldw	r5,72(sp)
1000ad70:	100d883a 	mov	r6,r2
1000ad74:	180f883a 	mov	r7,r3
1000ad78:	a809883a 	mov	r4,r21
1000ad7c:	00136780 	call	10013678 <__gedf2>
1000ad80:	db001617 	ldw	r12,88(sp)
1000ad84:	00840e16 	blt	zero,r2,1000bdc0 <_dtoa_r+0x15e8>
1000ad88:	00800044 	movi	r2,1
1000ad8c:	13006b0e 	bge	r2,r12,1000af3c <_dtoa_r+0x764>
1000ad90:	d9000717 	ldw	r4,28(sp)
1000ad94:	dd800f15 	stw	r22,60(sp)
1000ad98:	dcc01015 	stw	r19,64(sp)
1000ad9c:	2319883a 	add	r12,r4,r12
1000ada0:	dcc01217 	ldw	r19,72(sp)
1000ada4:	602d883a 	mov	r22,r12
1000ada8:	dc801215 	stw	r18,72(sp)
1000adac:	b825883a 	mov	r18,r23
1000adb0:	00000906 	br	1000add8 <_dtoa_r+0x600>
1000adb4:	00140b40 	call	100140b4 <__subdf3>
1000adb8:	a80d883a 	mov	r6,r21
1000adbc:	980f883a 	mov	r7,r19
1000adc0:	1009883a 	mov	r4,r2
1000adc4:	180b883a 	mov	r5,r3
1000adc8:	00137540 	call	10013754 <__ledf2>
1000adcc:	1003e816 	blt	r2,zero,1000bd70 <_dtoa_r+0x1598>
1000add0:	b825883a 	mov	r18,r23
1000add4:	bd83e926 	beq	r23,r22,1000bd7c <_dtoa_r+0x15a4>
1000add8:	a809883a 	mov	r4,r21
1000addc:	980b883a 	mov	r5,r19
1000ade0:	000d883a 	mov	r6,zero
1000ade4:	01d00934 	movhi	r7,16420
1000ade8:	00138480 	call	10013848 <__muldf3>
1000adec:	000d883a 	mov	r6,zero
1000adf0:	01d00934 	movhi	r7,16420
1000adf4:	8009883a 	mov	r4,r16
1000adf8:	880b883a 	mov	r5,r17
1000adfc:	102b883a 	mov	r21,r2
1000ae00:	1827883a 	mov	r19,r3
1000ae04:	00138480 	call	10013848 <__muldf3>
1000ae08:	180b883a 	mov	r5,r3
1000ae0c:	1009883a 	mov	r4,r2
1000ae10:	1821883a 	mov	r16,r3
1000ae14:	1023883a 	mov	r17,r2
1000ae18:	00149b00 	call	100149b0 <__fixdfsi>
1000ae1c:	1009883a 	mov	r4,r2
1000ae20:	1029883a 	mov	r20,r2
1000ae24:	0014a300 	call	10014a30 <__floatsidf>
1000ae28:	8809883a 	mov	r4,r17
1000ae2c:	800b883a 	mov	r5,r16
1000ae30:	100d883a 	mov	r6,r2
1000ae34:	180f883a 	mov	r7,r3
1000ae38:	00140b40 	call	100140b4 <__subdf3>
1000ae3c:	a5000c04 	addi	r20,r20,48
1000ae40:	a80d883a 	mov	r6,r21
1000ae44:	980f883a 	mov	r7,r19
1000ae48:	1009883a 	mov	r4,r2
1000ae4c:	180b883a 	mov	r5,r3
1000ae50:	95000005 	stb	r20,0(r18)
1000ae54:	1021883a 	mov	r16,r2
1000ae58:	1823883a 	mov	r17,r3
1000ae5c:	00137540 	call	10013754 <__ledf2>
1000ae60:	bdc00044 	addi	r23,r23,1
1000ae64:	800d883a 	mov	r6,r16
1000ae68:	880f883a 	mov	r7,r17
1000ae6c:	0009883a 	mov	r4,zero
1000ae70:	014ffc34 	movhi	r5,16368
1000ae74:	103fcf0e 	bge	r2,zero,1000adb4 <__alt_data_end+0xf800adb4>
1000ae78:	d8c01317 	ldw	r3,76(sp)
1000ae7c:	d8c00515 	stw	r3,20(sp)
1000ae80:	d9400917 	ldw	r5,36(sp)
1000ae84:	e009883a 	mov	r4,fp
1000ae88:	000de100 	call	1000de10 <_Bfree>
1000ae8c:	d9000517 	ldw	r4,20(sp)
1000ae90:	d9802317 	ldw	r6,140(sp)
1000ae94:	d9c02517 	ldw	r7,148(sp)
1000ae98:	b8000005 	stb	zero,0(r23)
1000ae9c:	20800044 	addi	r2,r4,1
1000aea0:	30800015 	stw	r2,0(r6)
1000aea4:	3802aa26 	beq	r7,zero,1000b950 <_dtoa_r+0x1178>
1000aea8:	3dc00015 	stw	r23,0(r7)
1000aeac:	d8800717 	ldw	r2,28(sp)
1000aeb0:	003e7906 	br	1000a898 <__alt_data_end+0xf800a898>
1000aeb4:	00800434 	movhi	r2,16
1000aeb8:	10bfffc4 	addi	r2,r2,-1
1000aebc:	88a2703a 	and	r17,r17,r2
1000aec0:	883e851e 	bne	r17,zero,1000a8d8 <__alt_data_end+0xf800a8d8>
1000aec4:	008400b4 	movhi	r2,4098
1000aec8:	10a1fa04 	addi	r2,r2,-30744
1000aecc:	003e8406 	br	1000a8e0 <__alt_data_end+0xf800a8e0>
1000aed0:	10c00204 	addi	r3,r2,8
1000aed4:	003e8706 	br	1000a8f4 <__alt_data_end+0xf800a8f4>
1000aed8:	01400434 	movhi	r5,16
1000aedc:	297fffc4 	addi	r5,r5,-1
1000aee0:	994a703a 	and	r5,r19,r5
1000aee4:	9009883a 	mov	r4,r18
1000aee8:	843f0044 	addi	r16,r16,-1023
1000aeec:	294ffc34 	orhi	r5,r5,16368
1000aef0:	dd800217 	ldw	r22,8(sp)
1000aef4:	d8001115 	stw	zero,68(sp)
1000aef8:	003ea506 	br	1000a990 <__alt_data_end+0xf800a990>
1000aefc:	008400b4 	movhi	r2,4098
1000af00:	10a1f104 	addi	r2,r2,-30780
1000af04:	003e6406 	br	1000a898 <__alt_data_end+0xf800a898>
1000af08:	e0001115 	stw	zero,68(fp)
1000af0c:	000b883a 	mov	r5,zero
1000af10:	e009883a 	mov	r4,fp
1000af14:	000dd680 	call	1000dd68 <_Balloc>
1000af18:	01bfffc4 	movi	r6,-1
1000af1c:	01c00044 	movi	r7,1
1000af20:	d8800715 	stw	r2,28(sp)
1000af24:	d9800c15 	stw	r6,48(sp)
1000af28:	e0801015 	stw	r2,64(fp)
1000af2c:	d8000315 	stw	zero,12(sp)
1000af30:	d9c00b15 	stw	r7,44(sp)
1000af34:	d9800615 	stw	r6,24(sp)
1000af38:	d8002215 	stw	zero,136(sp)
1000af3c:	d8800117 	ldw	r2,4(sp)
1000af40:	10008916 	blt	r2,zero,1000b168 <_dtoa_r+0x990>
1000af44:	d9000517 	ldw	r4,20(sp)
1000af48:	00c00384 	movi	r3,14
1000af4c:	19008616 	blt	r3,r4,1000b168 <_dtoa_r+0x990>
1000af50:	200490fa 	slli	r2,r4,3
1000af54:	00c400b4 	movhi	r3,4098
1000af58:	d9802217 	ldw	r6,136(sp)
1000af5c:	18e21904 	addi	r3,r3,-30620
1000af60:	1885883a 	add	r2,r3,r2
1000af64:	14000017 	ldw	r16,0(r2)
1000af68:	14400117 	ldw	r17,4(r2)
1000af6c:	30016316 	blt	r6,zero,1000b4fc <_dtoa_r+0xd24>
1000af70:	800d883a 	mov	r6,r16
1000af74:	880f883a 	mov	r7,r17
1000af78:	9009883a 	mov	r4,r18
1000af7c:	980b883a 	mov	r5,r19
1000af80:	0012c200 	call	10012c20 <__divdf3>
1000af84:	180b883a 	mov	r5,r3
1000af88:	1009883a 	mov	r4,r2
1000af8c:	00149b00 	call	100149b0 <__fixdfsi>
1000af90:	1009883a 	mov	r4,r2
1000af94:	102b883a 	mov	r21,r2
1000af98:	0014a300 	call	10014a30 <__floatsidf>
1000af9c:	800d883a 	mov	r6,r16
1000afa0:	880f883a 	mov	r7,r17
1000afa4:	1009883a 	mov	r4,r2
1000afa8:	180b883a 	mov	r5,r3
1000afac:	00138480 	call	10013848 <__muldf3>
1000afb0:	100d883a 	mov	r6,r2
1000afb4:	180f883a 	mov	r7,r3
1000afb8:	9009883a 	mov	r4,r18
1000afbc:	980b883a 	mov	r5,r19
1000afc0:	00140b40 	call	100140b4 <__subdf3>
1000afc4:	d9c00717 	ldw	r7,28(sp)
1000afc8:	1009883a 	mov	r4,r2
1000afcc:	a8800c04 	addi	r2,r21,48
1000afd0:	38800005 	stb	r2,0(r7)
1000afd4:	3dc00044 	addi	r23,r7,1
1000afd8:	d9c00617 	ldw	r7,24(sp)
1000afdc:	01800044 	movi	r6,1
1000afe0:	180b883a 	mov	r5,r3
1000afe4:	2005883a 	mov	r2,r4
1000afe8:	39803826 	beq	r7,r6,1000b0cc <_dtoa_r+0x8f4>
1000afec:	000d883a 	mov	r6,zero
1000aff0:	01d00934 	movhi	r7,16420
1000aff4:	00138480 	call	10013848 <__muldf3>
1000aff8:	000d883a 	mov	r6,zero
1000affc:	000f883a 	mov	r7,zero
1000b000:	1009883a 	mov	r4,r2
1000b004:	180b883a 	mov	r5,r3
1000b008:	1025883a 	mov	r18,r2
1000b00c:	1827883a 	mov	r19,r3
1000b010:	00135f00 	call	100135f0 <__eqdf2>
1000b014:	103f9a26 	beq	r2,zero,1000ae80 <__alt_data_end+0xf800ae80>
1000b018:	d9c00617 	ldw	r7,24(sp)
1000b01c:	d8c00717 	ldw	r3,28(sp)
1000b020:	b829883a 	mov	r20,r23
1000b024:	38bfffc4 	addi	r2,r7,-1
1000b028:	18ad883a 	add	r22,r3,r2
1000b02c:	00000a06 	br	1000b058 <_dtoa_r+0x880>
1000b030:	00138480 	call	10013848 <__muldf3>
1000b034:	000d883a 	mov	r6,zero
1000b038:	000f883a 	mov	r7,zero
1000b03c:	1009883a 	mov	r4,r2
1000b040:	180b883a 	mov	r5,r3
1000b044:	1025883a 	mov	r18,r2
1000b048:	1827883a 	mov	r19,r3
1000b04c:	b829883a 	mov	r20,r23
1000b050:	00135f00 	call	100135f0 <__eqdf2>
1000b054:	103f8a26 	beq	r2,zero,1000ae80 <__alt_data_end+0xf800ae80>
1000b058:	800d883a 	mov	r6,r16
1000b05c:	880f883a 	mov	r7,r17
1000b060:	9009883a 	mov	r4,r18
1000b064:	980b883a 	mov	r5,r19
1000b068:	0012c200 	call	10012c20 <__divdf3>
1000b06c:	180b883a 	mov	r5,r3
1000b070:	1009883a 	mov	r4,r2
1000b074:	00149b00 	call	100149b0 <__fixdfsi>
1000b078:	1009883a 	mov	r4,r2
1000b07c:	102b883a 	mov	r21,r2
1000b080:	0014a300 	call	10014a30 <__floatsidf>
1000b084:	800d883a 	mov	r6,r16
1000b088:	880f883a 	mov	r7,r17
1000b08c:	1009883a 	mov	r4,r2
1000b090:	180b883a 	mov	r5,r3
1000b094:	00138480 	call	10013848 <__muldf3>
1000b098:	100d883a 	mov	r6,r2
1000b09c:	180f883a 	mov	r7,r3
1000b0a0:	9009883a 	mov	r4,r18
1000b0a4:	980b883a 	mov	r5,r19
1000b0a8:	00140b40 	call	100140b4 <__subdf3>
1000b0ac:	aa000c04 	addi	r8,r21,48
1000b0b0:	a2000005 	stb	r8,0(r20)
1000b0b4:	000d883a 	mov	r6,zero
1000b0b8:	01d00934 	movhi	r7,16420
1000b0bc:	1009883a 	mov	r4,r2
1000b0c0:	180b883a 	mov	r5,r3
1000b0c4:	a5c00044 	addi	r23,r20,1
1000b0c8:	b53fd91e 	bne	r22,r20,1000b030 <__alt_data_end+0xf800b030>
1000b0cc:	100d883a 	mov	r6,r2
1000b0d0:	180f883a 	mov	r7,r3
1000b0d4:	1009883a 	mov	r4,r2
1000b0d8:	180b883a 	mov	r5,r3
1000b0dc:	00123740 	call	10012374 <__adddf3>
1000b0e0:	100d883a 	mov	r6,r2
1000b0e4:	180f883a 	mov	r7,r3
1000b0e8:	8009883a 	mov	r4,r16
1000b0ec:	880b883a 	mov	r5,r17
1000b0f0:	1027883a 	mov	r19,r2
1000b0f4:	1825883a 	mov	r18,r3
1000b0f8:	00137540 	call	10013754 <__ledf2>
1000b0fc:	10000816 	blt	r2,zero,1000b120 <_dtoa_r+0x948>
1000b100:	980d883a 	mov	r6,r19
1000b104:	900f883a 	mov	r7,r18
1000b108:	8009883a 	mov	r4,r16
1000b10c:	880b883a 	mov	r5,r17
1000b110:	00135f00 	call	100135f0 <__eqdf2>
1000b114:	103f5a1e 	bne	r2,zero,1000ae80 <__alt_data_end+0xf800ae80>
1000b118:	ad40004c 	andi	r21,r21,1
1000b11c:	a83f5826 	beq	r21,zero,1000ae80 <__alt_data_end+0xf800ae80>
1000b120:	bd3fffc3 	ldbu	r20,-1(r23)
1000b124:	b8bfffc4 	addi	r2,r23,-1
1000b128:	1007883a 	mov	r3,r2
1000b12c:	01400e44 	movi	r5,57
1000b130:	d9800717 	ldw	r6,28(sp)
1000b134:	00000506 	br	1000b14c <_dtoa_r+0x974>
1000b138:	18ffffc4 	addi	r3,r3,-1
1000b13c:	11824726 	beq	r2,r6,1000ba5c <_dtoa_r+0x1284>
1000b140:	1d000003 	ldbu	r20,0(r3)
1000b144:	102f883a 	mov	r23,r2
1000b148:	10bfffc4 	addi	r2,r2,-1
1000b14c:	a1003fcc 	andi	r4,r20,255
1000b150:	2100201c 	xori	r4,r4,128
1000b154:	213fe004 	addi	r4,r4,-128
1000b158:	217ff726 	beq	r4,r5,1000b138 <__alt_data_end+0xf800b138>
1000b15c:	a2000044 	addi	r8,r20,1
1000b160:	12000005 	stb	r8,0(r2)
1000b164:	003f4606 	br	1000ae80 <__alt_data_end+0xf800ae80>
1000b168:	d9000b17 	ldw	r4,44(sp)
1000b16c:	2000c826 	beq	r4,zero,1000b490 <_dtoa_r+0xcb8>
1000b170:	d9800317 	ldw	r6,12(sp)
1000b174:	00c00044 	movi	r3,1
1000b178:	1980f90e 	bge	r3,r6,1000b560 <_dtoa_r+0xd88>
1000b17c:	d8800617 	ldw	r2,24(sp)
1000b180:	d8c00a17 	ldw	r3,40(sp)
1000b184:	157fffc4 	addi	r21,r2,-1
1000b188:	1d41f316 	blt	r3,r21,1000b958 <_dtoa_r+0x1180>
1000b18c:	1d6bc83a 	sub	r21,r3,r21
1000b190:	d9c00617 	ldw	r7,24(sp)
1000b194:	3802aa16 	blt	r7,zero,1000bc40 <_dtoa_r+0x1468>
1000b198:	dd000817 	ldw	r20,32(sp)
1000b19c:	d8800617 	ldw	r2,24(sp)
1000b1a0:	d8c00817 	ldw	r3,32(sp)
1000b1a4:	01400044 	movi	r5,1
1000b1a8:	e009883a 	mov	r4,fp
1000b1ac:	1887883a 	add	r3,r3,r2
1000b1b0:	d8c00815 	stw	r3,32(sp)
1000b1b4:	b0ad883a 	add	r22,r22,r2
1000b1b8:	000e19c0 	call	1000e19c <__i2b>
1000b1bc:	1023883a 	mov	r17,r2
1000b1c0:	a0000826 	beq	r20,zero,1000b1e4 <_dtoa_r+0xa0c>
1000b1c4:	0580070e 	bge	zero,r22,1000b1e4 <_dtoa_r+0xa0c>
1000b1c8:	a005883a 	mov	r2,r20
1000b1cc:	b500b916 	blt	r22,r20,1000b4b4 <_dtoa_r+0xcdc>
1000b1d0:	d9000817 	ldw	r4,32(sp)
1000b1d4:	a0a9c83a 	sub	r20,r20,r2
1000b1d8:	b0adc83a 	sub	r22,r22,r2
1000b1dc:	2089c83a 	sub	r4,r4,r2
1000b1e0:	d9000815 	stw	r4,32(sp)
1000b1e4:	d9800a17 	ldw	r6,40(sp)
1000b1e8:	0181810e 	bge	zero,r6,1000b7f0 <_dtoa_r+0x1018>
1000b1ec:	d9c00b17 	ldw	r7,44(sp)
1000b1f0:	3800b326 	beq	r7,zero,1000b4c0 <_dtoa_r+0xce8>
1000b1f4:	a800b226 	beq	r21,zero,1000b4c0 <_dtoa_r+0xce8>
1000b1f8:	880b883a 	mov	r5,r17
1000b1fc:	a80d883a 	mov	r6,r21
1000b200:	e009883a 	mov	r4,fp
1000b204:	000e4640 	call	1000e464 <__pow5mult>
1000b208:	d9800917 	ldw	r6,36(sp)
1000b20c:	100b883a 	mov	r5,r2
1000b210:	e009883a 	mov	r4,fp
1000b214:	1023883a 	mov	r17,r2
1000b218:	000e1d80 	call	1000e1d8 <__multiply>
1000b21c:	1021883a 	mov	r16,r2
1000b220:	d8800a17 	ldw	r2,40(sp)
1000b224:	d9400917 	ldw	r5,36(sp)
1000b228:	e009883a 	mov	r4,fp
1000b22c:	1545c83a 	sub	r2,r2,r21
1000b230:	d8800a15 	stw	r2,40(sp)
1000b234:	000de100 	call	1000de10 <_Bfree>
1000b238:	d8c00a17 	ldw	r3,40(sp)
1000b23c:	18009f1e 	bne	r3,zero,1000b4bc <_dtoa_r+0xce4>
1000b240:	05c00044 	movi	r23,1
1000b244:	e009883a 	mov	r4,fp
1000b248:	b80b883a 	mov	r5,r23
1000b24c:	000e19c0 	call	1000e19c <__i2b>
1000b250:	d9000d17 	ldw	r4,52(sp)
1000b254:	102b883a 	mov	r21,r2
1000b258:	2000ce26 	beq	r4,zero,1000b594 <_dtoa_r+0xdbc>
1000b25c:	200d883a 	mov	r6,r4
1000b260:	100b883a 	mov	r5,r2
1000b264:	e009883a 	mov	r4,fp
1000b268:	000e4640 	call	1000e464 <__pow5mult>
1000b26c:	d9800317 	ldw	r6,12(sp)
1000b270:	102b883a 	mov	r21,r2
1000b274:	b981810e 	bge	r23,r6,1000b87c <_dtoa_r+0x10a4>
1000b278:	0027883a 	mov	r19,zero
1000b27c:	a8800417 	ldw	r2,16(r21)
1000b280:	05c00804 	movi	r23,32
1000b284:	10800104 	addi	r2,r2,4
1000b288:	1085883a 	add	r2,r2,r2
1000b28c:	1085883a 	add	r2,r2,r2
1000b290:	a885883a 	add	r2,r21,r2
1000b294:	11000017 	ldw	r4,0(r2)
1000b298:	000e0840 	call	1000e084 <__hi0bits>
1000b29c:	b885c83a 	sub	r2,r23,r2
1000b2a0:	1585883a 	add	r2,r2,r22
1000b2a4:	108007cc 	andi	r2,r2,31
1000b2a8:	1000b326 	beq	r2,zero,1000b578 <_dtoa_r+0xda0>
1000b2ac:	00c00804 	movi	r3,32
1000b2b0:	1887c83a 	sub	r3,r3,r2
1000b2b4:	01000104 	movi	r4,4
1000b2b8:	20c2cd0e 	bge	r4,r3,1000bdf0 <_dtoa_r+0x1618>
1000b2bc:	00c00704 	movi	r3,28
1000b2c0:	1885c83a 	sub	r2,r3,r2
1000b2c4:	d8c00817 	ldw	r3,32(sp)
1000b2c8:	a0a9883a 	add	r20,r20,r2
1000b2cc:	b0ad883a 	add	r22,r22,r2
1000b2d0:	1887883a 	add	r3,r3,r2
1000b2d4:	d8c00815 	stw	r3,32(sp)
1000b2d8:	d9800817 	ldw	r6,32(sp)
1000b2dc:	0180040e 	bge	zero,r6,1000b2f0 <_dtoa_r+0xb18>
1000b2e0:	800b883a 	mov	r5,r16
1000b2e4:	e009883a 	mov	r4,fp
1000b2e8:	000e5a40 	call	1000e5a4 <__lshift>
1000b2ec:	1021883a 	mov	r16,r2
1000b2f0:	0580050e 	bge	zero,r22,1000b308 <_dtoa_r+0xb30>
1000b2f4:	a80b883a 	mov	r5,r21
1000b2f8:	b00d883a 	mov	r6,r22
1000b2fc:	e009883a 	mov	r4,fp
1000b300:	000e5a40 	call	1000e5a4 <__lshift>
1000b304:	102b883a 	mov	r21,r2
1000b308:	d9c00e17 	ldw	r7,56(sp)
1000b30c:	3801211e 	bne	r7,zero,1000b794 <_dtoa_r+0xfbc>
1000b310:	d9800617 	ldw	r6,24(sp)
1000b314:	0181380e 	bge	zero,r6,1000b7f8 <_dtoa_r+0x1020>
1000b318:	d8c00b17 	ldw	r3,44(sp)
1000b31c:	1800ab1e 	bne	r3,zero,1000b5cc <_dtoa_r+0xdf4>
1000b320:	dc800717 	ldw	r18,28(sp)
1000b324:	dcc00617 	ldw	r19,24(sp)
1000b328:	9029883a 	mov	r20,r18
1000b32c:	00000206 	br	1000b338 <_dtoa_r+0xb60>
1000b330:	000de380 	call	1000de38 <__multadd>
1000b334:	1021883a 	mov	r16,r2
1000b338:	a80b883a 	mov	r5,r21
1000b33c:	8009883a 	mov	r4,r16
1000b340:	000a5b00 	call	1000a5b0 <quorem>
1000b344:	10800c04 	addi	r2,r2,48
1000b348:	90800005 	stb	r2,0(r18)
1000b34c:	94800044 	addi	r18,r18,1
1000b350:	9507c83a 	sub	r3,r18,r20
1000b354:	000f883a 	mov	r7,zero
1000b358:	01800284 	movi	r6,10
1000b35c:	800b883a 	mov	r5,r16
1000b360:	e009883a 	mov	r4,fp
1000b364:	1cfff216 	blt	r3,r19,1000b330 <__alt_data_end+0xf800b330>
1000b368:	1011883a 	mov	r8,r2
1000b36c:	d8800617 	ldw	r2,24(sp)
1000b370:	0082370e 	bge	zero,r2,1000bc50 <_dtoa_r+0x1478>
1000b374:	d9000717 	ldw	r4,28(sp)
1000b378:	0025883a 	mov	r18,zero
1000b37c:	20af883a 	add	r23,r4,r2
1000b380:	01800044 	movi	r6,1
1000b384:	800b883a 	mov	r5,r16
1000b388:	e009883a 	mov	r4,fp
1000b38c:	da001715 	stw	r8,92(sp)
1000b390:	000e5a40 	call	1000e5a4 <__lshift>
1000b394:	a80b883a 	mov	r5,r21
1000b398:	1009883a 	mov	r4,r2
1000b39c:	d8800915 	stw	r2,36(sp)
1000b3a0:	000e6ec0 	call	1000e6ec <__mcmp>
1000b3a4:	da001717 	ldw	r8,92(sp)
1000b3a8:	0081800e 	bge	zero,r2,1000b9ac <_dtoa_r+0x11d4>
1000b3ac:	b93fffc3 	ldbu	r4,-1(r23)
1000b3b0:	b8bfffc4 	addi	r2,r23,-1
1000b3b4:	1007883a 	mov	r3,r2
1000b3b8:	01800e44 	movi	r6,57
1000b3bc:	d9c00717 	ldw	r7,28(sp)
1000b3c0:	00000506 	br	1000b3d8 <_dtoa_r+0xc00>
1000b3c4:	18ffffc4 	addi	r3,r3,-1
1000b3c8:	11c12326 	beq	r2,r7,1000b858 <_dtoa_r+0x1080>
1000b3cc:	19000003 	ldbu	r4,0(r3)
1000b3d0:	102f883a 	mov	r23,r2
1000b3d4:	10bfffc4 	addi	r2,r2,-1
1000b3d8:	21403fcc 	andi	r5,r4,255
1000b3dc:	2940201c 	xori	r5,r5,128
1000b3e0:	297fe004 	addi	r5,r5,-128
1000b3e4:	29bff726 	beq	r5,r6,1000b3c4 <__alt_data_end+0xf800b3c4>
1000b3e8:	21000044 	addi	r4,r4,1
1000b3ec:	11000005 	stb	r4,0(r2)
1000b3f0:	a80b883a 	mov	r5,r21
1000b3f4:	e009883a 	mov	r4,fp
1000b3f8:	000de100 	call	1000de10 <_Bfree>
1000b3fc:	883ea026 	beq	r17,zero,1000ae80 <__alt_data_end+0xf800ae80>
1000b400:	90000426 	beq	r18,zero,1000b414 <_dtoa_r+0xc3c>
1000b404:	94400326 	beq	r18,r17,1000b414 <_dtoa_r+0xc3c>
1000b408:	900b883a 	mov	r5,r18
1000b40c:	e009883a 	mov	r4,fp
1000b410:	000de100 	call	1000de10 <_Bfree>
1000b414:	880b883a 	mov	r5,r17
1000b418:	e009883a 	mov	r4,fp
1000b41c:	000de100 	call	1000de10 <_Bfree>
1000b420:	003e9706 	br	1000ae80 <__alt_data_end+0xf800ae80>
1000b424:	01800044 	movi	r6,1
1000b428:	d9800e15 	stw	r6,56(sp)
1000b42c:	003d9606 	br	1000aa88 <__alt_data_end+0xf800aa88>
1000b430:	d8800817 	ldw	r2,32(sp)
1000b434:	d8c00517 	ldw	r3,20(sp)
1000b438:	d8000d15 	stw	zero,52(sp)
1000b43c:	10c5c83a 	sub	r2,r2,r3
1000b440:	00c9c83a 	sub	r4,zero,r3
1000b444:	d8800815 	stw	r2,32(sp)
1000b448:	d9000a15 	stw	r4,40(sp)
1000b44c:	003d9706 	br	1000aaac <__alt_data_end+0xf800aaac>
1000b450:	05adc83a 	sub	r22,zero,r22
1000b454:	dd800815 	stw	r22,32(sp)
1000b458:	002d883a 	mov	r22,zero
1000b45c:	003d8e06 	br	1000aa98 <__alt_data_end+0xf800aa98>
1000b460:	d9000517 	ldw	r4,20(sp)
1000b464:	0014a300 	call	10014a30 <__floatsidf>
1000b468:	100d883a 	mov	r6,r2
1000b46c:	180f883a 	mov	r7,r3
1000b470:	a009883a 	mov	r4,r20
1000b474:	880b883a 	mov	r5,r17
1000b478:	00135f00 	call	100135f0 <__eqdf2>
1000b47c:	103d7126 	beq	r2,zero,1000aa44 <__alt_data_end+0xf800aa44>
1000b480:	d9c00517 	ldw	r7,20(sp)
1000b484:	39ffffc4 	addi	r7,r7,-1
1000b488:	d9c00515 	stw	r7,20(sp)
1000b48c:	003d6d06 	br	1000aa44 <__alt_data_end+0xf800aa44>
1000b490:	dd400a17 	ldw	r21,40(sp)
1000b494:	dd000817 	ldw	r20,32(sp)
1000b498:	0023883a 	mov	r17,zero
1000b49c:	003f4806 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000b4a0:	10e3c83a 	sub	r17,r2,r3
1000b4a4:	9448983a 	sll	r4,r18,r17
1000b4a8:	003d3206 	br	1000a974 <__alt_data_end+0xf800a974>
1000b4ac:	d8000e15 	stw	zero,56(sp)
1000b4b0:	003d7506 	br	1000aa88 <__alt_data_end+0xf800aa88>
1000b4b4:	b005883a 	mov	r2,r22
1000b4b8:	003f4506 	br	1000b1d0 <__alt_data_end+0xf800b1d0>
1000b4bc:	dc000915 	stw	r16,36(sp)
1000b4c0:	d9800a17 	ldw	r6,40(sp)
1000b4c4:	d9400917 	ldw	r5,36(sp)
1000b4c8:	e009883a 	mov	r4,fp
1000b4cc:	000e4640 	call	1000e464 <__pow5mult>
1000b4d0:	1021883a 	mov	r16,r2
1000b4d4:	003f5a06 	br	1000b240 <__alt_data_end+0xf800b240>
1000b4d8:	01c00044 	movi	r7,1
1000b4dc:	d9c00b15 	stw	r7,44(sp)
1000b4e0:	d8802217 	ldw	r2,136(sp)
1000b4e4:	0081280e 	bge	zero,r2,1000b988 <_dtoa_r+0x11b0>
1000b4e8:	100d883a 	mov	r6,r2
1000b4ec:	1021883a 	mov	r16,r2
1000b4f0:	d8800c15 	stw	r2,48(sp)
1000b4f4:	d8800615 	stw	r2,24(sp)
1000b4f8:	003d8806 	br	1000ab1c <__alt_data_end+0xf800ab1c>
1000b4fc:	d8800617 	ldw	r2,24(sp)
1000b500:	00be9b16 	blt	zero,r2,1000af70 <__alt_data_end+0xf800af70>
1000b504:	10010f1e 	bne	r2,zero,1000b944 <_dtoa_r+0x116c>
1000b508:	880b883a 	mov	r5,r17
1000b50c:	000d883a 	mov	r6,zero
1000b510:	01d00534 	movhi	r7,16404
1000b514:	8009883a 	mov	r4,r16
1000b518:	00138480 	call	10013848 <__muldf3>
1000b51c:	900d883a 	mov	r6,r18
1000b520:	980f883a 	mov	r7,r19
1000b524:	1009883a 	mov	r4,r2
1000b528:	180b883a 	mov	r5,r3
1000b52c:	00136780 	call	10013678 <__gedf2>
1000b530:	002b883a 	mov	r21,zero
1000b534:	0023883a 	mov	r17,zero
1000b538:	1000bf16 	blt	r2,zero,1000b838 <_dtoa_r+0x1060>
1000b53c:	d9802217 	ldw	r6,136(sp)
1000b540:	ddc00717 	ldw	r23,28(sp)
1000b544:	018c303a 	nor	r6,zero,r6
1000b548:	d9800515 	stw	r6,20(sp)
1000b54c:	a80b883a 	mov	r5,r21
1000b550:	e009883a 	mov	r4,fp
1000b554:	000de100 	call	1000de10 <_Bfree>
1000b558:	883e4926 	beq	r17,zero,1000ae80 <__alt_data_end+0xf800ae80>
1000b55c:	003fad06 	br	1000b414 <__alt_data_end+0xf800b414>
1000b560:	d9c01117 	ldw	r7,68(sp)
1000b564:	3801bc26 	beq	r7,zero,1000bc58 <_dtoa_r+0x1480>
1000b568:	10810cc4 	addi	r2,r2,1075
1000b56c:	dd400a17 	ldw	r21,40(sp)
1000b570:	dd000817 	ldw	r20,32(sp)
1000b574:	003f0a06 	br	1000b1a0 <__alt_data_end+0xf800b1a0>
1000b578:	00800704 	movi	r2,28
1000b57c:	d9000817 	ldw	r4,32(sp)
1000b580:	a0a9883a 	add	r20,r20,r2
1000b584:	b0ad883a 	add	r22,r22,r2
1000b588:	2089883a 	add	r4,r4,r2
1000b58c:	d9000815 	stw	r4,32(sp)
1000b590:	003f5106 	br	1000b2d8 <__alt_data_end+0xf800b2d8>
1000b594:	d8c00317 	ldw	r3,12(sp)
1000b598:	b8c1fc0e 	bge	r23,r3,1000bd8c <_dtoa_r+0x15b4>
1000b59c:	0027883a 	mov	r19,zero
1000b5a0:	b805883a 	mov	r2,r23
1000b5a4:	003f3e06 	br	1000b2a0 <__alt_data_end+0xf800b2a0>
1000b5a8:	880b883a 	mov	r5,r17
1000b5ac:	e009883a 	mov	r4,fp
1000b5b0:	000f883a 	mov	r7,zero
1000b5b4:	01800284 	movi	r6,10
1000b5b8:	000de380 	call	1000de38 <__multadd>
1000b5bc:	d9000c17 	ldw	r4,48(sp)
1000b5c0:	1023883a 	mov	r17,r2
1000b5c4:	0102040e 	bge	zero,r4,1000bdd8 <_dtoa_r+0x1600>
1000b5c8:	d9000615 	stw	r4,24(sp)
1000b5cc:	0500050e 	bge	zero,r20,1000b5e4 <_dtoa_r+0xe0c>
1000b5d0:	880b883a 	mov	r5,r17
1000b5d4:	a00d883a 	mov	r6,r20
1000b5d8:	e009883a 	mov	r4,fp
1000b5dc:	000e5a40 	call	1000e5a4 <__lshift>
1000b5e0:	1023883a 	mov	r17,r2
1000b5e4:	9801241e 	bne	r19,zero,1000ba78 <_dtoa_r+0x12a0>
1000b5e8:	8829883a 	mov	r20,r17
1000b5ec:	d9000617 	ldw	r4,24(sp)
1000b5f0:	dcc00717 	ldw	r19,28(sp)
1000b5f4:	9480004c 	andi	r18,r18,1
1000b5f8:	20bfffc4 	addi	r2,r4,-1
1000b5fc:	9885883a 	add	r2,r19,r2
1000b600:	d8800415 	stw	r2,16(sp)
1000b604:	dc800615 	stw	r18,24(sp)
1000b608:	a80b883a 	mov	r5,r21
1000b60c:	8009883a 	mov	r4,r16
1000b610:	000a5b00 	call	1000a5b0 <quorem>
1000b614:	880b883a 	mov	r5,r17
1000b618:	8009883a 	mov	r4,r16
1000b61c:	102f883a 	mov	r23,r2
1000b620:	000e6ec0 	call	1000e6ec <__mcmp>
1000b624:	a80b883a 	mov	r5,r21
1000b628:	a00d883a 	mov	r6,r20
1000b62c:	e009883a 	mov	r4,fp
1000b630:	102d883a 	mov	r22,r2
1000b634:	000e74c0 	call	1000e74c <__mdiff>
1000b638:	1007883a 	mov	r3,r2
1000b63c:	10800317 	ldw	r2,12(r2)
1000b640:	bc800c04 	addi	r18,r23,48
1000b644:	180b883a 	mov	r5,r3
1000b648:	10004e1e 	bne	r2,zero,1000b784 <_dtoa_r+0xfac>
1000b64c:	8009883a 	mov	r4,r16
1000b650:	d8c01615 	stw	r3,88(sp)
1000b654:	000e6ec0 	call	1000e6ec <__mcmp>
1000b658:	d8c01617 	ldw	r3,88(sp)
1000b65c:	e009883a 	mov	r4,fp
1000b660:	d8801615 	stw	r2,88(sp)
1000b664:	180b883a 	mov	r5,r3
1000b668:	000de100 	call	1000de10 <_Bfree>
1000b66c:	d8801617 	ldw	r2,88(sp)
1000b670:	1000041e 	bne	r2,zero,1000b684 <_dtoa_r+0xeac>
1000b674:	d9800317 	ldw	r6,12(sp)
1000b678:	3000021e 	bne	r6,zero,1000b684 <_dtoa_r+0xeac>
1000b67c:	d8c00617 	ldw	r3,24(sp)
1000b680:	18003726 	beq	r3,zero,1000b760 <_dtoa_r+0xf88>
1000b684:	b0002016 	blt	r22,zero,1000b708 <_dtoa_r+0xf30>
1000b688:	b000041e 	bne	r22,zero,1000b69c <_dtoa_r+0xec4>
1000b68c:	d9000317 	ldw	r4,12(sp)
1000b690:	2000021e 	bne	r4,zero,1000b69c <_dtoa_r+0xec4>
1000b694:	d8c00617 	ldw	r3,24(sp)
1000b698:	18001b26 	beq	r3,zero,1000b708 <_dtoa_r+0xf30>
1000b69c:	00810716 	blt	zero,r2,1000babc <_dtoa_r+0x12e4>
1000b6a0:	d8c00417 	ldw	r3,16(sp)
1000b6a4:	9d800044 	addi	r22,r19,1
1000b6a8:	9c800005 	stb	r18,0(r19)
1000b6ac:	b02f883a 	mov	r23,r22
1000b6b0:	98c10626 	beq	r19,r3,1000bacc <_dtoa_r+0x12f4>
1000b6b4:	800b883a 	mov	r5,r16
1000b6b8:	000f883a 	mov	r7,zero
1000b6bc:	01800284 	movi	r6,10
1000b6c0:	e009883a 	mov	r4,fp
1000b6c4:	000de380 	call	1000de38 <__multadd>
1000b6c8:	1021883a 	mov	r16,r2
1000b6cc:	000f883a 	mov	r7,zero
1000b6d0:	01800284 	movi	r6,10
1000b6d4:	880b883a 	mov	r5,r17
1000b6d8:	e009883a 	mov	r4,fp
1000b6dc:	8d002526 	beq	r17,r20,1000b774 <_dtoa_r+0xf9c>
1000b6e0:	000de380 	call	1000de38 <__multadd>
1000b6e4:	a00b883a 	mov	r5,r20
1000b6e8:	000f883a 	mov	r7,zero
1000b6ec:	01800284 	movi	r6,10
1000b6f0:	e009883a 	mov	r4,fp
1000b6f4:	1023883a 	mov	r17,r2
1000b6f8:	000de380 	call	1000de38 <__multadd>
1000b6fc:	1029883a 	mov	r20,r2
1000b700:	b027883a 	mov	r19,r22
1000b704:	003fc006 	br	1000b608 <__alt_data_end+0xf800b608>
1000b708:	9011883a 	mov	r8,r18
1000b70c:	00800e0e 	bge	zero,r2,1000b748 <_dtoa_r+0xf70>
1000b710:	800b883a 	mov	r5,r16
1000b714:	01800044 	movi	r6,1
1000b718:	e009883a 	mov	r4,fp
1000b71c:	da001715 	stw	r8,92(sp)
1000b720:	000e5a40 	call	1000e5a4 <__lshift>
1000b724:	a80b883a 	mov	r5,r21
1000b728:	1009883a 	mov	r4,r2
1000b72c:	1021883a 	mov	r16,r2
1000b730:	000e6ec0 	call	1000e6ec <__mcmp>
1000b734:	da001717 	ldw	r8,92(sp)
1000b738:	0081960e 	bge	zero,r2,1000bd94 <_dtoa_r+0x15bc>
1000b73c:	00800e44 	movi	r2,57
1000b740:	40817026 	beq	r8,r2,1000bd04 <_dtoa_r+0x152c>
1000b744:	ba000c44 	addi	r8,r23,49
1000b748:	8825883a 	mov	r18,r17
1000b74c:	9dc00044 	addi	r23,r19,1
1000b750:	9a000005 	stb	r8,0(r19)
1000b754:	a023883a 	mov	r17,r20
1000b758:	dc000915 	stw	r16,36(sp)
1000b75c:	003f2406 	br	1000b3f0 <__alt_data_end+0xf800b3f0>
1000b760:	00800e44 	movi	r2,57
1000b764:	9011883a 	mov	r8,r18
1000b768:	90816626 	beq	r18,r2,1000bd04 <_dtoa_r+0x152c>
1000b76c:	05bff516 	blt	zero,r22,1000b744 <__alt_data_end+0xf800b744>
1000b770:	003ff506 	br	1000b748 <__alt_data_end+0xf800b748>
1000b774:	000de380 	call	1000de38 <__multadd>
1000b778:	1023883a 	mov	r17,r2
1000b77c:	1029883a 	mov	r20,r2
1000b780:	003fdf06 	br	1000b700 <__alt_data_end+0xf800b700>
1000b784:	e009883a 	mov	r4,fp
1000b788:	000de100 	call	1000de10 <_Bfree>
1000b78c:	00800044 	movi	r2,1
1000b790:	003fbc06 	br	1000b684 <__alt_data_end+0xf800b684>
1000b794:	a80b883a 	mov	r5,r21
1000b798:	8009883a 	mov	r4,r16
1000b79c:	000e6ec0 	call	1000e6ec <__mcmp>
1000b7a0:	103edb0e 	bge	r2,zero,1000b310 <__alt_data_end+0xf800b310>
1000b7a4:	800b883a 	mov	r5,r16
1000b7a8:	000f883a 	mov	r7,zero
1000b7ac:	01800284 	movi	r6,10
1000b7b0:	e009883a 	mov	r4,fp
1000b7b4:	000de380 	call	1000de38 <__multadd>
1000b7b8:	1021883a 	mov	r16,r2
1000b7bc:	d8800517 	ldw	r2,20(sp)
1000b7c0:	d8c00b17 	ldw	r3,44(sp)
1000b7c4:	10bfffc4 	addi	r2,r2,-1
1000b7c8:	d8800515 	stw	r2,20(sp)
1000b7cc:	183f761e 	bne	r3,zero,1000b5a8 <__alt_data_end+0xf800b5a8>
1000b7d0:	d9000c17 	ldw	r4,48(sp)
1000b7d4:	0101730e 	bge	zero,r4,1000bda4 <_dtoa_r+0x15cc>
1000b7d8:	d9000615 	stw	r4,24(sp)
1000b7dc:	003ed006 	br	1000b320 <__alt_data_end+0xf800b320>
1000b7e0:	00800084 	movi	r2,2
1000b7e4:	3081861e 	bne	r6,r2,1000be00 <_dtoa_r+0x1628>
1000b7e8:	d8000b15 	stw	zero,44(sp)
1000b7ec:	003f3c06 	br	1000b4e0 <__alt_data_end+0xf800b4e0>
1000b7f0:	dc000917 	ldw	r16,36(sp)
1000b7f4:	003e9206 	br	1000b240 <__alt_data_end+0xf800b240>
1000b7f8:	d9c00317 	ldw	r7,12(sp)
1000b7fc:	00800084 	movi	r2,2
1000b800:	11fec50e 	bge	r2,r7,1000b318 <__alt_data_end+0xf800b318>
1000b804:	d9000617 	ldw	r4,24(sp)
1000b808:	20013c1e 	bne	r4,zero,1000bcfc <_dtoa_r+0x1524>
1000b80c:	a80b883a 	mov	r5,r21
1000b810:	000f883a 	mov	r7,zero
1000b814:	01800144 	movi	r6,5
1000b818:	e009883a 	mov	r4,fp
1000b81c:	000de380 	call	1000de38 <__multadd>
1000b820:	100b883a 	mov	r5,r2
1000b824:	8009883a 	mov	r4,r16
1000b828:	102b883a 	mov	r21,r2
1000b82c:	000e6ec0 	call	1000e6ec <__mcmp>
1000b830:	dc000915 	stw	r16,36(sp)
1000b834:	00bf410e 	bge	zero,r2,1000b53c <__alt_data_end+0xf800b53c>
1000b838:	d9c00717 	ldw	r7,28(sp)
1000b83c:	00800c44 	movi	r2,49
1000b840:	38800005 	stb	r2,0(r7)
1000b844:	d8800517 	ldw	r2,20(sp)
1000b848:	3dc00044 	addi	r23,r7,1
1000b84c:	10800044 	addi	r2,r2,1
1000b850:	d8800515 	stw	r2,20(sp)
1000b854:	003f3d06 	br	1000b54c <__alt_data_end+0xf800b54c>
1000b858:	d9800517 	ldw	r6,20(sp)
1000b85c:	d9c00717 	ldw	r7,28(sp)
1000b860:	00800c44 	movi	r2,49
1000b864:	31800044 	addi	r6,r6,1
1000b868:	d9800515 	stw	r6,20(sp)
1000b86c:	38800005 	stb	r2,0(r7)
1000b870:	003edf06 	br	1000b3f0 <__alt_data_end+0xf800b3f0>
1000b874:	d8000b15 	stw	zero,44(sp)
1000b878:	003c9f06 	br	1000aaf8 <__alt_data_end+0xf800aaf8>
1000b87c:	903e7e1e 	bne	r18,zero,1000b278 <__alt_data_end+0xf800b278>
1000b880:	00800434 	movhi	r2,16
1000b884:	10bfffc4 	addi	r2,r2,-1
1000b888:	9884703a 	and	r2,r19,r2
1000b88c:	1000ea1e 	bne	r2,zero,1000bc38 <_dtoa_r+0x1460>
1000b890:	9cdffc2c 	andhi	r19,r19,32752
1000b894:	9800e826 	beq	r19,zero,1000bc38 <_dtoa_r+0x1460>
1000b898:	d9c00817 	ldw	r7,32(sp)
1000b89c:	b5800044 	addi	r22,r22,1
1000b8a0:	04c00044 	movi	r19,1
1000b8a4:	39c00044 	addi	r7,r7,1
1000b8a8:	d9c00815 	stw	r7,32(sp)
1000b8ac:	d8800d17 	ldw	r2,52(sp)
1000b8b0:	103e721e 	bne	r2,zero,1000b27c <__alt_data_end+0xf800b27c>
1000b8b4:	00800044 	movi	r2,1
1000b8b8:	003e7906 	br	1000b2a0 <__alt_data_end+0xf800b2a0>
1000b8bc:	8009883a 	mov	r4,r16
1000b8c0:	0014a300 	call	10014a30 <__floatsidf>
1000b8c4:	d9800f17 	ldw	r6,60(sp)
1000b8c8:	d9c01017 	ldw	r7,64(sp)
1000b8cc:	1009883a 	mov	r4,r2
1000b8d0:	180b883a 	mov	r5,r3
1000b8d4:	00138480 	call	10013848 <__muldf3>
1000b8d8:	000d883a 	mov	r6,zero
1000b8dc:	01d00734 	movhi	r7,16412
1000b8e0:	1009883a 	mov	r4,r2
1000b8e4:	180b883a 	mov	r5,r3
1000b8e8:	00123740 	call	10012374 <__adddf3>
1000b8ec:	047f3034 	movhi	r17,64704
1000b8f0:	1021883a 	mov	r16,r2
1000b8f4:	1c63883a 	add	r17,r3,r17
1000b8f8:	d9000f17 	ldw	r4,60(sp)
1000b8fc:	d9401017 	ldw	r5,64(sp)
1000b900:	000d883a 	mov	r6,zero
1000b904:	01d00534 	movhi	r7,16404
1000b908:	00140b40 	call	100140b4 <__subdf3>
1000b90c:	800d883a 	mov	r6,r16
1000b910:	880f883a 	mov	r7,r17
1000b914:	1009883a 	mov	r4,r2
1000b918:	180b883a 	mov	r5,r3
1000b91c:	102b883a 	mov	r21,r2
1000b920:	1829883a 	mov	r20,r3
1000b924:	00136780 	call	10013678 <__gedf2>
1000b928:	00806c16 	blt	zero,r2,1000badc <_dtoa_r+0x1304>
1000b92c:	89e0003c 	xorhi	r7,r17,32768
1000b930:	800d883a 	mov	r6,r16
1000b934:	a809883a 	mov	r4,r21
1000b938:	a00b883a 	mov	r5,r20
1000b93c:	00137540 	call	10013754 <__ledf2>
1000b940:	103d7e0e 	bge	r2,zero,1000af3c <__alt_data_end+0xf800af3c>
1000b944:	002b883a 	mov	r21,zero
1000b948:	0023883a 	mov	r17,zero
1000b94c:	003efb06 	br	1000b53c <__alt_data_end+0xf800b53c>
1000b950:	d8800717 	ldw	r2,28(sp)
1000b954:	003bd006 	br	1000a898 <__alt_data_end+0xf800a898>
1000b958:	d9000a17 	ldw	r4,40(sp)
1000b95c:	d9800d17 	ldw	r6,52(sp)
1000b960:	dd400a15 	stw	r21,40(sp)
1000b964:	a905c83a 	sub	r2,r21,r4
1000b968:	308d883a 	add	r6,r6,r2
1000b96c:	d9800d15 	stw	r6,52(sp)
1000b970:	002b883a 	mov	r21,zero
1000b974:	003e0606 	br	1000b190 <__alt_data_end+0xf800b190>
1000b978:	9023883a 	mov	r17,r18
1000b97c:	9829883a 	mov	r20,r19
1000b980:	04000084 	movi	r16,2
1000b984:	003c9206 	br	1000abd0 <__alt_data_end+0xf800abd0>
1000b988:	04000044 	movi	r16,1
1000b98c:	dc000c15 	stw	r16,48(sp)
1000b990:	dc000615 	stw	r16,24(sp)
1000b994:	dc002215 	stw	r16,136(sp)
1000b998:	e0001115 	stw	zero,68(fp)
1000b99c:	000b883a 	mov	r5,zero
1000b9a0:	003c6906 	br	1000ab48 <__alt_data_end+0xf800ab48>
1000b9a4:	3021883a 	mov	r16,r6
1000b9a8:	003ffb06 	br	1000b998 <__alt_data_end+0xf800b998>
1000b9ac:	1000021e 	bne	r2,zero,1000b9b8 <_dtoa_r+0x11e0>
1000b9b0:	4200004c 	andi	r8,r8,1
1000b9b4:	403e7d1e 	bne	r8,zero,1000b3ac <__alt_data_end+0xf800b3ac>
1000b9b8:	01000c04 	movi	r4,48
1000b9bc:	00000106 	br	1000b9c4 <_dtoa_r+0x11ec>
1000b9c0:	102f883a 	mov	r23,r2
1000b9c4:	b8bfffc4 	addi	r2,r23,-1
1000b9c8:	10c00007 	ldb	r3,0(r2)
1000b9cc:	193ffc26 	beq	r3,r4,1000b9c0 <__alt_data_end+0xf800b9c0>
1000b9d0:	003e8706 	br	1000b3f0 <__alt_data_end+0xf800b3f0>
1000b9d4:	d8800517 	ldw	r2,20(sp)
1000b9d8:	00a3c83a 	sub	r17,zero,r2
1000b9dc:	8800a426 	beq	r17,zero,1000bc70 <_dtoa_r+0x1498>
1000b9e0:	888003cc 	andi	r2,r17,15
1000b9e4:	100490fa 	slli	r2,r2,3
1000b9e8:	00c400b4 	movhi	r3,4098
1000b9ec:	18e21904 	addi	r3,r3,-30620
1000b9f0:	1885883a 	add	r2,r3,r2
1000b9f4:	11800017 	ldw	r6,0(r2)
1000b9f8:	11c00117 	ldw	r7,4(r2)
1000b9fc:	9009883a 	mov	r4,r18
1000ba00:	980b883a 	mov	r5,r19
1000ba04:	8823d13a 	srai	r17,r17,4
1000ba08:	00138480 	call	10013848 <__muldf3>
1000ba0c:	d8800f15 	stw	r2,60(sp)
1000ba10:	d8c01015 	stw	r3,64(sp)
1000ba14:	8800e826 	beq	r17,zero,1000bdb8 <_dtoa_r+0x15e0>
1000ba18:	050400b4 	movhi	r20,4098
1000ba1c:	a5220f04 	addi	r20,r20,-30660
1000ba20:	04000084 	movi	r16,2
1000ba24:	8980004c 	andi	r6,r17,1
1000ba28:	1009883a 	mov	r4,r2
1000ba2c:	8823d07a 	srai	r17,r17,1
1000ba30:	180b883a 	mov	r5,r3
1000ba34:	30000426 	beq	r6,zero,1000ba48 <_dtoa_r+0x1270>
1000ba38:	a1800017 	ldw	r6,0(r20)
1000ba3c:	a1c00117 	ldw	r7,4(r20)
1000ba40:	84000044 	addi	r16,r16,1
1000ba44:	00138480 	call	10013848 <__muldf3>
1000ba48:	a5000204 	addi	r20,r20,8
1000ba4c:	883ff51e 	bne	r17,zero,1000ba24 <__alt_data_end+0xf800ba24>
1000ba50:	d8800f15 	stw	r2,60(sp)
1000ba54:	d8c01015 	stw	r3,64(sp)
1000ba58:	003c7606 	br	1000ac34 <__alt_data_end+0xf800ac34>
1000ba5c:	00c00c04 	movi	r3,48
1000ba60:	10c00005 	stb	r3,0(r2)
1000ba64:	d8c00517 	ldw	r3,20(sp)
1000ba68:	bd3fffc3 	ldbu	r20,-1(r23)
1000ba6c:	18c00044 	addi	r3,r3,1
1000ba70:	d8c00515 	stw	r3,20(sp)
1000ba74:	003db906 	br	1000b15c <__alt_data_end+0xf800b15c>
1000ba78:	89400117 	ldw	r5,4(r17)
1000ba7c:	e009883a 	mov	r4,fp
1000ba80:	000dd680 	call	1000dd68 <_Balloc>
1000ba84:	89800417 	ldw	r6,16(r17)
1000ba88:	89400304 	addi	r5,r17,12
1000ba8c:	11000304 	addi	r4,r2,12
1000ba90:	31800084 	addi	r6,r6,2
1000ba94:	318d883a 	add	r6,r6,r6
1000ba98:	318d883a 	add	r6,r6,r6
1000ba9c:	1027883a 	mov	r19,r2
1000baa0:	000dac40 	call	1000dac4 <memcpy>
1000baa4:	01800044 	movi	r6,1
1000baa8:	980b883a 	mov	r5,r19
1000baac:	e009883a 	mov	r4,fp
1000bab0:	000e5a40 	call	1000e5a4 <__lshift>
1000bab4:	1029883a 	mov	r20,r2
1000bab8:	003ecc06 	br	1000b5ec <__alt_data_end+0xf800b5ec>
1000babc:	00800e44 	movi	r2,57
1000bac0:	90809026 	beq	r18,r2,1000bd04 <_dtoa_r+0x152c>
1000bac4:	92000044 	addi	r8,r18,1
1000bac8:	003f1f06 	br	1000b748 <__alt_data_end+0xf800b748>
1000bacc:	9011883a 	mov	r8,r18
1000bad0:	8825883a 	mov	r18,r17
1000bad4:	a023883a 	mov	r17,r20
1000bad8:	003e2906 	br	1000b380 <__alt_data_end+0xf800b380>
1000badc:	002b883a 	mov	r21,zero
1000bae0:	0023883a 	mov	r17,zero
1000bae4:	003f5406 	br	1000b838 <__alt_data_end+0xf800b838>
1000bae8:	61bfffc4 	addi	r6,r12,-1
1000baec:	300490fa 	slli	r2,r6,3
1000baf0:	00c400b4 	movhi	r3,4098
1000baf4:	18e21904 	addi	r3,r3,-30620
1000baf8:	1885883a 	add	r2,r3,r2
1000bafc:	11000017 	ldw	r4,0(r2)
1000bb00:	11400117 	ldw	r5,4(r2)
1000bb04:	d8800717 	ldw	r2,28(sp)
1000bb08:	880f883a 	mov	r7,r17
1000bb0c:	d9801215 	stw	r6,72(sp)
1000bb10:	800d883a 	mov	r6,r16
1000bb14:	db001615 	stw	r12,88(sp)
1000bb18:	15c00044 	addi	r23,r2,1
1000bb1c:	00138480 	call	10013848 <__muldf3>
1000bb20:	d9401017 	ldw	r5,64(sp)
1000bb24:	d9000f17 	ldw	r4,60(sp)
1000bb28:	d8c01515 	stw	r3,84(sp)
1000bb2c:	d8801415 	stw	r2,80(sp)
1000bb30:	00149b00 	call	100149b0 <__fixdfsi>
1000bb34:	1009883a 	mov	r4,r2
1000bb38:	1021883a 	mov	r16,r2
1000bb3c:	0014a300 	call	10014a30 <__floatsidf>
1000bb40:	d9000f17 	ldw	r4,60(sp)
1000bb44:	d9401017 	ldw	r5,64(sp)
1000bb48:	100d883a 	mov	r6,r2
1000bb4c:	180f883a 	mov	r7,r3
1000bb50:	00140b40 	call	100140b4 <__subdf3>
1000bb54:	1829883a 	mov	r20,r3
1000bb58:	d8c00717 	ldw	r3,28(sp)
1000bb5c:	84000c04 	addi	r16,r16,48
1000bb60:	1023883a 	mov	r17,r2
1000bb64:	1c000005 	stb	r16,0(r3)
1000bb68:	db001617 	ldw	r12,88(sp)
1000bb6c:	00800044 	movi	r2,1
1000bb70:	60802226 	beq	r12,r2,1000bbfc <_dtoa_r+0x1424>
1000bb74:	d9c00717 	ldw	r7,28(sp)
1000bb78:	8805883a 	mov	r2,r17
1000bb7c:	b82b883a 	mov	r21,r23
1000bb80:	3b19883a 	add	r12,r7,r12
1000bb84:	6023883a 	mov	r17,r12
1000bb88:	a007883a 	mov	r3,r20
1000bb8c:	dc800f15 	stw	r18,60(sp)
1000bb90:	000d883a 	mov	r6,zero
1000bb94:	01d00934 	movhi	r7,16420
1000bb98:	1009883a 	mov	r4,r2
1000bb9c:	180b883a 	mov	r5,r3
1000bba0:	00138480 	call	10013848 <__muldf3>
1000bba4:	180b883a 	mov	r5,r3
1000bba8:	1009883a 	mov	r4,r2
1000bbac:	1829883a 	mov	r20,r3
1000bbb0:	1025883a 	mov	r18,r2
1000bbb4:	00149b00 	call	100149b0 <__fixdfsi>
1000bbb8:	1009883a 	mov	r4,r2
1000bbbc:	1021883a 	mov	r16,r2
1000bbc0:	0014a300 	call	10014a30 <__floatsidf>
1000bbc4:	100d883a 	mov	r6,r2
1000bbc8:	180f883a 	mov	r7,r3
1000bbcc:	9009883a 	mov	r4,r18
1000bbd0:	a00b883a 	mov	r5,r20
1000bbd4:	84000c04 	addi	r16,r16,48
1000bbd8:	00140b40 	call	100140b4 <__subdf3>
1000bbdc:	ad400044 	addi	r21,r21,1
1000bbe0:	ac3fffc5 	stb	r16,-1(r21)
1000bbe4:	ac7fea1e 	bne	r21,r17,1000bb90 <__alt_data_end+0xf800bb90>
1000bbe8:	1023883a 	mov	r17,r2
1000bbec:	d8801217 	ldw	r2,72(sp)
1000bbf0:	dc800f17 	ldw	r18,60(sp)
1000bbf4:	1829883a 	mov	r20,r3
1000bbf8:	b8af883a 	add	r23,r23,r2
1000bbfc:	d9001417 	ldw	r4,80(sp)
1000bc00:	d9401517 	ldw	r5,84(sp)
1000bc04:	000d883a 	mov	r6,zero
1000bc08:	01cff834 	movhi	r7,16352
1000bc0c:	00123740 	call	10012374 <__adddf3>
1000bc10:	880d883a 	mov	r6,r17
1000bc14:	a00f883a 	mov	r7,r20
1000bc18:	1009883a 	mov	r4,r2
1000bc1c:	180b883a 	mov	r5,r3
1000bc20:	00137540 	call	10013754 <__ledf2>
1000bc24:	10003e0e 	bge	r2,zero,1000bd20 <_dtoa_r+0x1548>
1000bc28:	d9001317 	ldw	r4,76(sp)
1000bc2c:	bd3fffc3 	ldbu	r20,-1(r23)
1000bc30:	d9000515 	stw	r4,20(sp)
1000bc34:	003d3b06 	br	1000b124 <__alt_data_end+0xf800b124>
1000bc38:	0027883a 	mov	r19,zero
1000bc3c:	003f1b06 	br	1000b8ac <__alt_data_end+0xf800b8ac>
1000bc40:	d8800817 	ldw	r2,32(sp)
1000bc44:	11e9c83a 	sub	r20,r2,r7
1000bc48:	0005883a 	mov	r2,zero
1000bc4c:	003d5406 	br	1000b1a0 <__alt_data_end+0xf800b1a0>
1000bc50:	00800044 	movi	r2,1
1000bc54:	003dc706 	br	1000b374 <__alt_data_end+0xf800b374>
1000bc58:	d8c00217 	ldw	r3,8(sp)
1000bc5c:	00800d84 	movi	r2,54
1000bc60:	dd400a17 	ldw	r21,40(sp)
1000bc64:	10c5c83a 	sub	r2,r2,r3
1000bc68:	dd000817 	ldw	r20,32(sp)
1000bc6c:	003d4c06 	br	1000b1a0 <__alt_data_end+0xf800b1a0>
1000bc70:	dc800f15 	stw	r18,60(sp)
1000bc74:	dcc01015 	stw	r19,64(sp)
1000bc78:	04000084 	movi	r16,2
1000bc7c:	003bed06 	br	1000ac34 <__alt_data_end+0xf800ac34>
1000bc80:	d9000617 	ldw	r4,24(sp)
1000bc84:	203f0d26 	beq	r4,zero,1000b8bc <__alt_data_end+0xf800b8bc>
1000bc88:	d9800c17 	ldw	r6,48(sp)
1000bc8c:	01bcab0e 	bge	zero,r6,1000af3c <__alt_data_end+0xf800af3c>
1000bc90:	d9401017 	ldw	r5,64(sp)
1000bc94:	d9000f17 	ldw	r4,60(sp)
1000bc98:	000d883a 	mov	r6,zero
1000bc9c:	01d00934 	movhi	r7,16420
1000bca0:	00138480 	call	10013848 <__muldf3>
1000bca4:	81000044 	addi	r4,r16,1
1000bca8:	d8800f15 	stw	r2,60(sp)
1000bcac:	d8c01015 	stw	r3,64(sp)
1000bcb0:	0014a300 	call	10014a30 <__floatsidf>
1000bcb4:	d9800f17 	ldw	r6,60(sp)
1000bcb8:	d9c01017 	ldw	r7,64(sp)
1000bcbc:	1009883a 	mov	r4,r2
1000bcc0:	180b883a 	mov	r5,r3
1000bcc4:	00138480 	call	10013848 <__muldf3>
1000bcc8:	01d00734 	movhi	r7,16412
1000bccc:	000d883a 	mov	r6,zero
1000bcd0:	1009883a 	mov	r4,r2
1000bcd4:	180b883a 	mov	r5,r3
1000bcd8:	00123740 	call	10012374 <__adddf3>
1000bcdc:	d9c00517 	ldw	r7,20(sp)
1000bce0:	047f3034 	movhi	r17,64704
1000bce4:	1021883a 	mov	r16,r2
1000bce8:	39ffffc4 	addi	r7,r7,-1
1000bcec:	d9c01315 	stw	r7,76(sp)
1000bcf0:	1c63883a 	add	r17,r3,r17
1000bcf4:	db000c17 	ldw	r12,48(sp)
1000bcf8:	003bea06 	br	1000aca4 <__alt_data_end+0xf800aca4>
1000bcfc:	dc000915 	stw	r16,36(sp)
1000bd00:	003e0e06 	br	1000b53c <__alt_data_end+0xf800b53c>
1000bd04:	01000e44 	movi	r4,57
1000bd08:	8825883a 	mov	r18,r17
1000bd0c:	9dc00044 	addi	r23,r19,1
1000bd10:	99000005 	stb	r4,0(r19)
1000bd14:	a023883a 	mov	r17,r20
1000bd18:	dc000915 	stw	r16,36(sp)
1000bd1c:	003da406 	br	1000b3b0 <__alt_data_end+0xf800b3b0>
1000bd20:	d9801417 	ldw	r6,80(sp)
1000bd24:	d9c01517 	ldw	r7,84(sp)
1000bd28:	0009883a 	mov	r4,zero
1000bd2c:	014ff834 	movhi	r5,16352
1000bd30:	00140b40 	call	100140b4 <__subdf3>
1000bd34:	880d883a 	mov	r6,r17
1000bd38:	a00f883a 	mov	r7,r20
1000bd3c:	1009883a 	mov	r4,r2
1000bd40:	180b883a 	mov	r5,r3
1000bd44:	00136780 	call	10013678 <__gedf2>
1000bd48:	00bc7c0e 	bge	zero,r2,1000af3c <__alt_data_end+0xf800af3c>
1000bd4c:	01000c04 	movi	r4,48
1000bd50:	00000106 	br	1000bd58 <_dtoa_r+0x1580>
1000bd54:	102f883a 	mov	r23,r2
1000bd58:	b8bfffc4 	addi	r2,r23,-1
1000bd5c:	10c00007 	ldb	r3,0(r2)
1000bd60:	193ffc26 	beq	r3,r4,1000bd54 <__alt_data_end+0xf800bd54>
1000bd64:	d9801317 	ldw	r6,76(sp)
1000bd68:	d9800515 	stw	r6,20(sp)
1000bd6c:	003c4406 	br	1000ae80 <__alt_data_end+0xf800ae80>
1000bd70:	d9801317 	ldw	r6,76(sp)
1000bd74:	d9800515 	stw	r6,20(sp)
1000bd78:	003cea06 	br	1000b124 <__alt_data_end+0xf800b124>
1000bd7c:	dd800f17 	ldw	r22,60(sp)
1000bd80:	dcc01017 	ldw	r19,64(sp)
1000bd84:	dc801217 	ldw	r18,72(sp)
1000bd88:	003c6c06 	br	1000af3c <__alt_data_end+0xf800af3c>
1000bd8c:	903e031e 	bne	r18,zero,1000b59c <__alt_data_end+0xf800b59c>
1000bd90:	003ebb06 	br	1000b880 <__alt_data_end+0xf800b880>
1000bd94:	103e6c1e 	bne	r2,zero,1000b748 <__alt_data_end+0xf800b748>
1000bd98:	4080004c 	andi	r2,r8,1
1000bd9c:	103e6a26 	beq	r2,zero,1000b748 <__alt_data_end+0xf800b748>
1000bda0:	003e6606 	br	1000b73c <__alt_data_end+0xf800b73c>
1000bda4:	d8c00317 	ldw	r3,12(sp)
1000bda8:	00800084 	movi	r2,2
1000bdac:	10c02916 	blt	r2,r3,1000be54 <_dtoa_r+0x167c>
1000bdb0:	d9000c17 	ldw	r4,48(sp)
1000bdb4:	003e8806 	br	1000b7d8 <__alt_data_end+0xf800b7d8>
1000bdb8:	04000084 	movi	r16,2
1000bdbc:	003b9d06 	br	1000ac34 <__alt_data_end+0xf800ac34>
1000bdc0:	d9001317 	ldw	r4,76(sp)
1000bdc4:	d9000515 	stw	r4,20(sp)
1000bdc8:	003cd606 	br	1000b124 <__alt_data_end+0xf800b124>
1000bdcc:	d8801317 	ldw	r2,76(sp)
1000bdd0:	d8800515 	stw	r2,20(sp)
1000bdd4:	003c2a06 	br	1000ae80 <__alt_data_end+0xf800ae80>
1000bdd8:	d9800317 	ldw	r6,12(sp)
1000bddc:	00800084 	movi	r2,2
1000bde0:	11801516 	blt	r2,r6,1000be38 <_dtoa_r+0x1660>
1000bde4:	d9c00c17 	ldw	r7,48(sp)
1000bde8:	d9c00615 	stw	r7,24(sp)
1000bdec:	003df706 	br	1000b5cc <__alt_data_end+0xf800b5cc>
1000bdf0:	193d3926 	beq	r3,r4,1000b2d8 <__alt_data_end+0xf800b2d8>
1000bdf4:	00c00f04 	movi	r3,60
1000bdf8:	1885c83a 	sub	r2,r3,r2
1000bdfc:	003ddf06 	br	1000b57c <__alt_data_end+0xf800b57c>
1000be00:	e009883a 	mov	r4,fp
1000be04:	e0001115 	stw	zero,68(fp)
1000be08:	000b883a 	mov	r5,zero
1000be0c:	000dd680 	call	1000dd68 <_Balloc>
1000be10:	d8800715 	stw	r2,28(sp)
1000be14:	d8c00717 	ldw	r3,28(sp)
1000be18:	00bfffc4 	movi	r2,-1
1000be1c:	01000044 	movi	r4,1
1000be20:	d8800c15 	stw	r2,48(sp)
1000be24:	e0c01015 	stw	r3,64(fp)
1000be28:	d9000b15 	stw	r4,44(sp)
1000be2c:	d8800615 	stw	r2,24(sp)
1000be30:	d8002215 	stw	zero,136(sp)
1000be34:	003c4106 	br	1000af3c <__alt_data_end+0xf800af3c>
1000be38:	d8c00c17 	ldw	r3,48(sp)
1000be3c:	d8c00615 	stw	r3,24(sp)
1000be40:	003e7006 	br	1000b804 <__alt_data_end+0xf800b804>
1000be44:	04400044 	movi	r17,1
1000be48:	003b2006 	br	1000aacc <__alt_data_end+0xf800aacc>
1000be4c:	000b883a 	mov	r5,zero
1000be50:	003b3d06 	br	1000ab48 <__alt_data_end+0xf800ab48>
1000be54:	d8800c17 	ldw	r2,48(sp)
1000be58:	d8800615 	stw	r2,24(sp)
1000be5c:	003e6906 	br	1000b804 <__alt_data_end+0xf800b804>

1000be60 <__sflush_r>:
1000be60:	2880030b 	ldhu	r2,12(r5)
1000be64:	defffb04 	addi	sp,sp,-20
1000be68:	dcc00315 	stw	r19,12(sp)
1000be6c:	dc400115 	stw	r17,4(sp)
1000be70:	dfc00415 	stw	ra,16(sp)
1000be74:	dc800215 	stw	r18,8(sp)
1000be78:	dc000015 	stw	r16,0(sp)
1000be7c:	10c0020c 	andi	r3,r2,8
1000be80:	2823883a 	mov	r17,r5
1000be84:	2027883a 	mov	r19,r4
1000be88:	1800311e 	bne	r3,zero,1000bf50 <__sflush_r+0xf0>
1000be8c:	28c00117 	ldw	r3,4(r5)
1000be90:	10820014 	ori	r2,r2,2048
1000be94:	2880030d 	sth	r2,12(r5)
1000be98:	00c04b0e 	bge	zero,r3,1000bfc8 <__sflush_r+0x168>
1000be9c:	8a000a17 	ldw	r8,40(r17)
1000bea0:	40002326 	beq	r8,zero,1000bf30 <__sflush_r+0xd0>
1000bea4:	9c000017 	ldw	r16,0(r19)
1000bea8:	10c4000c 	andi	r3,r2,4096
1000beac:	98000015 	stw	zero,0(r19)
1000beb0:	18004826 	beq	r3,zero,1000bfd4 <__sflush_r+0x174>
1000beb4:	89801417 	ldw	r6,80(r17)
1000beb8:	10c0010c 	andi	r3,r2,4
1000bebc:	18000626 	beq	r3,zero,1000bed8 <__sflush_r+0x78>
1000bec0:	88c00117 	ldw	r3,4(r17)
1000bec4:	88800c17 	ldw	r2,48(r17)
1000bec8:	30cdc83a 	sub	r6,r6,r3
1000becc:	10000226 	beq	r2,zero,1000bed8 <__sflush_r+0x78>
1000bed0:	88800f17 	ldw	r2,60(r17)
1000bed4:	308dc83a 	sub	r6,r6,r2
1000bed8:	89400717 	ldw	r5,28(r17)
1000bedc:	000f883a 	mov	r7,zero
1000bee0:	9809883a 	mov	r4,r19
1000bee4:	403ee83a 	callr	r8
1000bee8:	00ffffc4 	movi	r3,-1
1000beec:	10c04426 	beq	r2,r3,1000c000 <__sflush_r+0x1a0>
1000bef0:	88c0030b 	ldhu	r3,12(r17)
1000bef4:	89000417 	ldw	r4,16(r17)
1000bef8:	88000115 	stw	zero,4(r17)
1000befc:	197dffcc 	andi	r5,r3,63487
1000bf00:	8940030d 	sth	r5,12(r17)
1000bf04:	89000015 	stw	r4,0(r17)
1000bf08:	18c4000c 	andi	r3,r3,4096
1000bf0c:	18002c1e 	bne	r3,zero,1000bfc0 <__sflush_r+0x160>
1000bf10:	89400c17 	ldw	r5,48(r17)
1000bf14:	9c000015 	stw	r16,0(r19)
1000bf18:	28000526 	beq	r5,zero,1000bf30 <__sflush_r+0xd0>
1000bf1c:	88801004 	addi	r2,r17,64
1000bf20:	28800226 	beq	r5,r2,1000bf2c <__sflush_r+0xcc>
1000bf24:	9809883a 	mov	r4,r19
1000bf28:	000c5dc0 	call	1000c5dc <_free_r>
1000bf2c:	88000c15 	stw	zero,48(r17)
1000bf30:	0005883a 	mov	r2,zero
1000bf34:	dfc00417 	ldw	ra,16(sp)
1000bf38:	dcc00317 	ldw	r19,12(sp)
1000bf3c:	dc800217 	ldw	r18,8(sp)
1000bf40:	dc400117 	ldw	r17,4(sp)
1000bf44:	dc000017 	ldw	r16,0(sp)
1000bf48:	dec00504 	addi	sp,sp,20
1000bf4c:	f800283a 	ret
1000bf50:	2c800417 	ldw	r18,16(r5)
1000bf54:	903ff626 	beq	r18,zero,1000bf30 <__alt_data_end+0xf800bf30>
1000bf58:	2c000017 	ldw	r16,0(r5)
1000bf5c:	108000cc 	andi	r2,r2,3
1000bf60:	2c800015 	stw	r18,0(r5)
1000bf64:	84a1c83a 	sub	r16,r16,r18
1000bf68:	1000131e 	bne	r2,zero,1000bfb8 <__sflush_r+0x158>
1000bf6c:	28800517 	ldw	r2,20(r5)
1000bf70:	88800215 	stw	r2,8(r17)
1000bf74:	04000316 	blt	zero,r16,1000bf84 <__sflush_r+0x124>
1000bf78:	003fed06 	br	1000bf30 <__alt_data_end+0xf800bf30>
1000bf7c:	90a5883a 	add	r18,r18,r2
1000bf80:	043feb0e 	bge	zero,r16,1000bf30 <__alt_data_end+0xf800bf30>
1000bf84:	88800917 	ldw	r2,36(r17)
1000bf88:	89400717 	ldw	r5,28(r17)
1000bf8c:	800f883a 	mov	r7,r16
1000bf90:	900d883a 	mov	r6,r18
1000bf94:	9809883a 	mov	r4,r19
1000bf98:	103ee83a 	callr	r2
1000bf9c:	80a1c83a 	sub	r16,r16,r2
1000bfa0:	00bff616 	blt	zero,r2,1000bf7c <__alt_data_end+0xf800bf7c>
1000bfa4:	88c0030b 	ldhu	r3,12(r17)
1000bfa8:	00bfffc4 	movi	r2,-1
1000bfac:	18c01014 	ori	r3,r3,64
1000bfb0:	88c0030d 	sth	r3,12(r17)
1000bfb4:	003fdf06 	br	1000bf34 <__alt_data_end+0xf800bf34>
1000bfb8:	0005883a 	mov	r2,zero
1000bfbc:	003fec06 	br	1000bf70 <__alt_data_end+0xf800bf70>
1000bfc0:	88801415 	stw	r2,80(r17)
1000bfc4:	003fd206 	br	1000bf10 <__alt_data_end+0xf800bf10>
1000bfc8:	28c00f17 	ldw	r3,60(r5)
1000bfcc:	00ffb316 	blt	zero,r3,1000be9c <__alt_data_end+0xf800be9c>
1000bfd0:	003fd706 	br	1000bf30 <__alt_data_end+0xf800bf30>
1000bfd4:	89400717 	ldw	r5,28(r17)
1000bfd8:	000d883a 	mov	r6,zero
1000bfdc:	01c00044 	movi	r7,1
1000bfe0:	9809883a 	mov	r4,r19
1000bfe4:	403ee83a 	callr	r8
1000bfe8:	100d883a 	mov	r6,r2
1000bfec:	00bfffc4 	movi	r2,-1
1000bff0:	30801426 	beq	r6,r2,1000c044 <__sflush_r+0x1e4>
1000bff4:	8880030b 	ldhu	r2,12(r17)
1000bff8:	8a000a17 	ldw	r8,40(r17)
1000bffc:	003fae06 	br	1000beb8 <__alt_data_end+0xf800beb8>
1000c000:	98c00017 	ldw	r3,0(r19)
1000c004:	183fba26 	beq	r3,zero,1000bef0 <__alt_data_end+0xf800bef0>
1000c008:	01000744 	movi	r4,29
1000c00c:	19000626 	beq	r3,r4,1000c028 <__sflush_r+0x1c8>
1000c010:	01000584 	movi	r4,22
1000c014:	19000426 	beq	r3,r4,1000c028 <__sflush_r+0x1c8>
1000c018:	88c0030b 	ldhu	r3,12(r17)
1000c01c:	18c01014 	ori	r3,r3,64
1000c020:	88c0030d 	sth	r3,12(r17)
1000c024:	003fc306 	br	1000bf34 <__alt_data_end+0xf800bf34>
1000c028:	8880030b 	ldhu	r2,12(r17)
1000c02c:	88c00417 	ldw	r3,16(r17)
1000c030:	88000115 	stw	zero,4(r17)
1000c034:	10bdffcc 	andi	r2,r2,63487
1000c038:	8880030d 	sth	r2,12(r17)
1000c03c:	88c00015 	stw	r3,0(r17)
1000c040:	003fb306 	br	1000bf10 <__alt_data_end+0xf800bf10>
1000c044:	98800017 	ldw	r2,0(r19)
1000c048:	103fea26 	beq	r2,zero,1000bff4 <__alt_data_end+0xf800bff4>
1000c04c:	00c00744 	movi	r3,29
1000c050:	10c00226 	beq	r2,r3,1000c05c <__sflush_r+0x1fc>
1000c054:	00c00584 	movi	r3,22
1000c058:	10c0031e 	bne	r2,r3,1000c068 <__sflush_r+0x208>
1000c05c:	9c000015 	stw	r16,0(r19)
1000c060:	0005883a 	mov	r2,zero
1000c064:	003fb306 	br	1000bf34 <__alt_data_end+0xf800bf34>
1000c068:	88c0030b 	ldhu	r3,12(r17)
1000c06c:	3005883a 	mov	r2,r6
1000c070:	18c01014 	ori	r3,r3,64
1000c074:	88c0030d 	sth	r3,12(r17)
1000c078:	003fae06 	br	1000bf34 <__alt_data_end+0xf800bf34>

1000c07c <_fflush_r>:
1000c07c:	defffd04 	addi	sp,sp,-12
1000c080:	dc000115 	stw	r16,4(sp)
1000c084:	dfc00215 	stw	ra,8(sp)
1000c088:	2021883a 	mov	r16,r4
1000c08c:	20000226 	beq	r4,zero,1000c098 <_fflush_r+0x1c>
1000c090:	20800e17 	ldw	r2,56(r4)
1000c094:	10000c26 	beq	r2,zero,1000c0c8 <_fflush_r+0x4c>
1000c098:	2880030f 	ldh	r2,12(r5)
1000c09c:	1000051e 	bne	r2,zero,1000c0b4 <_fflush_r+0x38>
1000c0a0:	0005883a 	mov	r2,zero
1000c0a4:	dfc00217 	ldw	ra,8(sp)
1000c0a8:	dc000117 	ldw	r16,4(sp)
1000c0ac:	dec00304 	addi	sp,sp,12
1000c0b0:	f800283a 	ret
1000c0b4:	8009883a 	mov	r4,r16
1000c0b8:	dfc00217 	ldw	ra,8(sp)
1000c0bc:	dc000117 	ldw	r16,4(sp)
1000c0c0:	dec00304 	addi	sp,sp,12
1000c0c4:	000be601 	jmpi	1000be60 <__sflush_r>
1000c0c8:	d9400015 	stw	r5,0(sp)
1000c0cc:	000c4680 	call	1000c468 <__sinit>
1000c0d0:	d9400017 	ldw	r5,0(sp)
1000c0d4:	003ff006 	br	1000c098 <__alt_data_end+0xf800c098>

1000c0d8 <fflush>:
1000c0d8:	20000526 	beq	r4,zero,1000c0f0 <fflush+0x18>
1000c0dc:	008400b4 	movhi	r2,4098
1000c0e0:	10a99504 	addi	r2,r2,-22956
1000c0e4:	200b883a 	mov	r5,r4
1000c0e8:	11000017 	ldw	r4,0(r2)
1000c0ec:	000c07c1 	jmpi	1000c07c <_fflush_r>
1000c0f0:	008400b4 	movhi	r2,4098
1000c0f4:	10a99404 	addi	r2,r2,-22960
1000c0f8:	11000017 	ldw	r4,0(r2)
1000c0fc:	01440074 	movhi	r5,4097
1000c100:	29701f04 	addi	r5,r5,-16260
1000c104:	000ce781 	jmpi	1000ce78 <_fwalk_reent>

1000c108 <__fp_unlock>:
1000c108:	0005883a 	mov	r2,zero
1000c10c:	f800283a 	ret

1000c110 <_cleanup_r>:
1000c110:	01440074 	movhi	r5,4097
1000c114:	2943bb04 	addi	r5,r5,3820
1000c118:	000ce781 	jmpi	1000ce78 <_fwalk_reent>

1000c11c <__sinit.part.1>:
1000c11c:	defff704 	addi	sp,sp,-36
1000c120:	00c40074 	movhi	r3,4097
1000c124:	dfc00815 	stw	ra,32(sp)
1000c128:	ddc00715 	stw	r23,28(sp)
1000c12c:	dd800615 	stw	r22,24(sp)
1000c130:	dd400515 	stw	r21,20(sp)
1000c134:	dd000415 	stw	r20,16(sp)
1000c138:	dcc00315 	stw	r19,12(sp)
1000c13c:	dc800215 	stw	r18,8(sp)
1000c140:	dc400115 	stw	r17,4(sp)
1000c144:	dc000015 	stw	r16,0(sp)
1000c148:	18f04404 	addi	r3,r3,-16112
1000c14c:	24000117 	ldw	r16,4(r4)
1000c150:	20c00f15 	stw	r3,60(r4)
1000c154:	2080bb04 	addi	r2,r4,748
1000c158:	00c000c4 	movi	r3,3
1000c15c:	20c0b915 	stw	r3,740(r4)
1000c160:	2080ba15 	stw	r2,744(r4)
1000c164:	2000b815 	stw	zero,736(r4)
1000c168:	05c00204 	movi	r23,8
1000c16c:	00800104 	movi	r2,4
1000c170:	2025883a 	mov	r18,r4
1000c174:	b80d883a 	mov	r6,r23
1000c178:	81001704 	addi	r4,r16,92
1000c17c:	000b883a 	mov	r5,zero
1000c180:	80000015 	stw	zero,0(r16)
1000c184:	80000115 	stw	zero,4(r16)
1000c188:	80000215 	stw	zero,8(r16)
1000c18c:	8080030d 	sth	r2,12(r16)
1000c190:	80001915 	stw	zero,100(r16)
1000c194:	8000038d 	sth	zero,14(r16)
1000c198:	80000415 	stw	zero,16(r16)
1000c19c:	80000515 	stw	zero,20(r16)
1000c1a0:	80000615 	stw	zero,24(r16)
1000c1a4:	0007d2c0 	call	10007d2c <memset>
1000c1a8:	05840074 	movhi	r22,4097
1000c1ac:	94400217 	ldw	r17,8(r18)
1000c1b0:	05440074 	movhi	r21,4097
1000c1b4:	05040074 	movhi	r20,4097
1000c1b8:	04c40074 	movhi	r19,4097
1000c1bc:	b5bd1304 	addi	r22,r22,-2996
1000c1c0:	ad7d2a04 	addi	r21,r21,-2904
1000c1c4:	a53d4904 	addi	r20,r20,-2780
1000c1c8:	9cfd6004 	addi	r19,r19,-2688
1000c1cc:	85800815 	stw	r22,32(r16)
1000c1d0:	85400915 	stw	r21,36(r16)
1000c1d4:	85000a15 	stw	r20,40(r16)
1000c1d8:	84c00b15 	stw	r19,44(r16)
1000c1dc:	84000715 	stw	r16,28(r16)
1000c1e0:	00800284 	movi	r2,10
1000c1e4:	8880030d 	sth	r2,12(r17)
1000c1e8:	00800044 	movi	r2,1
1000c1ec:	b80d883a 	mov	r6,r23
1000c1f0:	89001704 	addi	r4,r17,92
1000c1f4:	000b883a 	mov	r5,zero
1000c1f8:	88000015 	stw	zero,0(r17)
1000c1fc:	88000115 	stw	zero,4(r17)
1000c200:	88000215 	stw	zero,8(r17)
1000c204:	88001915 	stw	zero,100(r17)
1000c208:	8880038d 	sth	r2,14(r17)
1000c20c:	88000415 	stw	zero,16(r17)
1000c210:	88000515 	stw	zero,20(r17)
1000c214:	88000615 	stw	zero,24(r17)
1000c218:	0007d2c0 	call	10007d2c <memset>
1000c21c:	94000317 	ldw	r16,12(r18)
1000c220:	00800484 	movi	r2,18
1000c224:	8c400715 	stw	r17,28(r17)
1000c228:	8d800815 	stw	r22,32(r17)
1000c22c:	8d400915 	stw	r21,36(r17)
1000c230:	8d000a15 	stw	r20,40(r17)
1000c234:	8cc00b15 	stw	r19,44(r17)
1000c238:	8080030d 	sth	r2,12(r16)
1000c23c:	00800084 	movi	r2,2
1000c240:	80000015 	stw	zero,0(r16)
1000c244:	80000115 	stw	zero,4(r16)
1000c248:	80000215 	stw	zero,8(r16)
1000c24c:	80001915 	stw	zero,100(r16)
1000c250:	8080038d 	sth	r2,14(r16)
1000c254:	80000415 	stw	zero,16(r16)
1000c258:	80000515 	stw	zero,20(r16)
1000c25c:	80000615 	stw	zero,24(r16)
1000c260:	b80d883a 	mov	r6,r23
1000c264:	000b883a 	mov	r5,zero
1000c268:	81001704 	addi	r4,r16,92
1000c26c:	0007d2c0 	call	10007d2c <memset>
1000c270:	00800044 	movi	r2,1
1000c274:	84000715 	stw	r16,28(r16)
1000c278:	85800815 	stw	r22,32(r16)
1000c27c:	85400915 	stw	r21,36(r16)
1000c280:	85000a15 	stw	r20,40(r16)
1000c284:	84c00b15 	stw	r19,44(r16)
1000c288:	90800e15 	stw	r2,56(r18)
1000c28c:	dfc00817 	ldw	ra,32(sp)
1000c290:	ddc00717 	ldw	r23,28(sp)
1000c294:	dd800617 	ldw	r22,24(sp)
1000c298:	dd400517 	ldw	r21,20(sp)
1000c29c:	dd000417 	ldw	r20,16(sp)
1000c2a0:	dcc00317 	ldw	r19,12(sp)
1000c2a4:	dc800217 	ldw	r18,8(sp)
1000c2a8:	dc400117 	ldw	r17,4(sp)
1000c2ac:	dc000017 	ldw	r16,0(sp)
1000c2b0:	dec00904 	addi	sp,sp,36
1000c2b4:	f800283a 	ret

1000c2b8 <__fp_lock>:
1000c2b8:	0005883a 	mov	r2,zero
1000c2bc:	f800283a 	ret

1000c2c0 <__sfmoreglue>:
1000c2c0:	defffc04 	addi	sp,sp,-16
1000c2c4:	dc800215 	stw	r18,8(sp)
1000c2c8:	2825883a 	mov	r18,r5
1000c2cc:	dc000015 	stw	r16,0(sp)
1000c2d0:	01401a04 	movi	r5,104
1000c2d4:	2021883a 	mov	r16,r4
1000c2d8:	913fffc4 	addi	r4,r18,-1
1000c2dc:	dfc00315 	stw	ra,12(sp)
1000c2e0:	dc400115 	stw	r17,4(sp)
1000c2e4:	0007d040 	call	10007d04 <__mulsi3>
1000c2e8:	8009883a 	mov	r4,r16
1000c2ec:	11401d04 	addi	r5,r2,116
1000c2f0:	1023883a 	mov	r17,r2
1000c2f4:	000d1d40 	call	1000d1d4 <_malloc_r>
1000c2f8:	1021883a 	mov	r16,r2
1000c2fc:	10000726 	beq	r2,zero,1000c31c <__sfmoreglue+0x5c>
1000c300:	11000304 	addi	r4,r2,12
1000c304:	10000015 	stw	zero,0(r2)
1000c308:	14800115 	stw	r18,4(r2)
1000c30c:	11000215 	stw	r4,8(r2)
1000c310:	89801a04 	addi	r6,r17,104
1000c314:	000b883a 	mov	r5,zero
1000c318:	0007d2c0 	call	10007d2c <memset>
1000c31c:	8005883a 	mov	r2,r16
1000c320:	dfc00317 	ldw	ra,12(sp)
1000c324:	dc800217 	ldw	r18,8(sp)
1000c328:	dc400117 	ldw	r17,4(sp)
1000c32c:	dc000017 	ldw	r16,0(sp)
1000c330:	dec00404 	addi	sp,sp,16
1000c334:	f800283a 	ret

1000c338 <__sfp>:
1000c338:	defffb04 	addi	sp,sp,-20
1000c33c:	dc000015 	stw	r16,0(sp)
1000c340:	040400b4 	movhi	r16,4098
1000c344:	84299404 	addi	r16,r16,-22960
1000c348:	dcc00315 	stw	r19,12(sp)
1000c34c:	2027883a 	mov	r19,r4
1000c350:	81000017 	ldw	r4,0(r16)
1000c354:	dfc00415 	stw	ra,16(sp)
1000c358:	dc800215 	stw	r18,8(sp)
1000c35c:	20800e17 	ldw	r2,56(r4)
1000c360:	dc400115 	stw	r17,4(sp)
1000c364:	1000021e 	bne	r2,zero,1000c370 <__sfp+0x38>
1000c368:	000c11c0 	call	1000c11c <__sinit.part.1>
1000c36c:	81000017 	ldw	r4,0(r16)
1000c370:	2480b804 	addi	r18,r4,736
1000c374:	047fffc4 	movi	r17,-1
1000c378:	91000117 	ldw	r4,4(r18)
1000c37c:	94000217 	ldw	r16,8(r18)
1000c380:	213fffc4 	addi	r4,r4,-1
1000c384:	20000a16 	blt	r4,zero,1000c3b0 <__sfp+0x78>
1000c388:	8080030f 	ldh	r2,12(r16)
1000c38c:	10000c26 	beq	r2,zero,1000c3c0 <__sfp+0x88>
1000c390:	80c01d04 	addi	r3,r16,116
1000c394:	00000206 	br	1000c3a0 <__sfp+0x68>
1000c398:	18bfe60f 	ldh	r2,-104(r3)
1000c39c:	10000826 	beq	r2,zero,1000c3c0 <__sfp+0x88>
1000c3a0:	213fffc4 	addi	r4,r4,-1
1000c3a4:	1c3ffd04 	addi	r16,r3,-12
1000c3a8:	18c01a04 	addi	r3,r3,104
1000c3ac:	247ffa1e 	bne	r4,r17,1000c398 <__alt_data_end+0xf800c398>
1000c3b0:	90800017 	ldw	r2,0(r18)
1000c3b4:	10001d26 	beq	r2,zero,1000c42c <__sfp+0xf4>
1000c3b8:	1025883a 	mov	r18,r2
1000c3bc:	003fee06 	br	1000c378 <__alt_data_end+0xf800c378>
1000c3c0:	00bfffc4 	movi	r2,-1
1000c3c4:	8080038d 	sth	r2,14(r16)
1000c3c8:	00800044 	movi	r2,1
1000c3cc:	8080030d 	sth	r2,12(r16)
1000c3d0:	80001915 	stw	zero,100(r16)
1000c3d4:	80000015 	stw	zero,0(r16)
1000c3d8:	80000215 	stw	zero,8(r16)
1000c3dc:	80000115 	stw	zero,4(r16)
1000c3e0:	80000415 	stw	zero,16(r16)
1000c3e4:	80000515 	stw	zero,20(r16)
1000c3e8:	80000615 	stw	zero,24(r16)
1000c3ec:	01800204 	movi	r6,8
1000c3f0:	000b883a 	mov	r5,zero
1000c3f4:	81001704 	addi	r4,r16,92
1000c3f8:	0007d2c0 	call	10007d2c <memset>
1000c3fc:	8005883a 	mov	r2,r16
1000c400:	80000c15 	stw	zero,48(r16)
1000c404:	80000d15 	stw	zero,52(r16)
1000c408:	80001115 	stw	zero,68(r16)
1000c40c:	80001215 	stw	zero,72(r16)
1000c410:	dfc00417 	ldw	ra,16(sp)
1000c414:	dcc00317 	ldw	r19,12(sp)
1000c418:	dc800217 	ldw	r18,8(sp)
1000c41c:	dc400117 	ldw	r17,4(sp)
1000c420:	dc000017 	ldw	r16,0(sp)
1000c424:	dec00504 	addi	sp,sp,20
1000c428:	f800283a 	ret
1000c42c:	01400104 	movi	r5,4
1000c430:	9809883a 	mov	r4,r19
1000c434:	000c2c00 	call	1000c2c0 <__sfmoreglue>
1000c438:	90800015 	stw	r2,0(r18)
1000c43c:	103fde1e 	bne	r2,zero,1000c3b8 <__alt_data_end+0xf800c3b8>
1000c440:	00800304 	movi	r2,12
1000c444:	98800015 	stw	r2,0(r19)
1000c448:	0005883a 	mov	r2,zero
1000c44c:	003ff006 	br	1000c410 <__alt_data_end+0xf800c410>

1000c450 <_cleanup>:
1000c450:	008400b4 	movhi	r2,4098
1000c454:	10a99404 	addi	r2,r2,-22960
1000c458:	11000017 	ldw	r4,0(r2)
1000c45c:	01440074 	movhi	r5,4097
1000c460:	2943bb04 	addi	r5,r5,3820
1000c464:	000ce781 	jmpi	1000ce78 <_fwalk_reent>

1000c468 <__sinit>:
1000c468:	20800e17 	ldw	r2,56(r4)
1000c46c:	10000126 	beq	r2,zero,1000c474 <__sinit+0xc>
1000c470:	f800283a 	ret
1000c474:	000c11c1 	jmpi	1000c11c <__sinit.part.1>

1000c478 <__sfp_lock_acquire>:
1000c478:	f800283a 	ret

1000c47c <__sfp_lock_release>:
1000c47c:	f800283a 	ret

1000c480 <__sinit_lock_acquire>:
1000c480:	f800283a 	ret

1000c484 <__sinit_lock_release>:
1000c484:	f800283a 	ret

1000c488 <__fp_lock_all>:
1000c488:	008400b4 	movhi	r2,4098
1000c48c:	10a99504 	addi	r2,r2,-22956
1000c490:	11000017 	ldw	r4,0(r2)
1000c494:	01440074 	movhi	r5,4097
1000c498:	2970ae04 	addi	r5,r5,-15688
1000c49c:	000cdb41 	jmpi	1000cdb4 <_fwalk>

1000c4a0 <__fp_unlock_all>:
1000c4a0:	008400b4 	movhi	r2,4098
1000c4a4:	10a99504 	addi	r2,r2,-22956
1000c4a8:	11000017 	ldw	r4,0(r2)
1000c4ac:	01440074 	movhi	r5,4097
1000c4b0:	29704204 	addi	r5,r5,-16120
1000c4b4:	000cdb41 	jmpi	1000cdb4 <_fwalk>

1000c4b8 <_malloc_trim_r>:
1000c4b8:	defffb04 	addi	sp,sp,-20
1000c4bc:	dcc00315 	stw	r19,12(sp)
1000c4c0:	04c400b4 	movhi	r19,4098
1000c4c4:	dc800215 	stw	r18,8(sp)
1000c4c8:	dc400115 	stw	r17,4(sp)
1000c4cc:	dc000015 	stw	r16,0(sp)
1000c4d0:	dfc00415 	stw	ra,16(sp)
1000c4d4:	2821883a 	mov	r16,r5
1000c4d8:	9ce3c704 	addi	r19,r19,-28900
1000c4dc:	2025883a 	mov	r18,r4
1000c4e0:	00151b40 	call	100151b4 <__malloc_lock>
1000c4e4:	98800217 	ldw	r2,8(r19)
1000c4e8:	14400117 	ldw	r17,4(r2)
1000c4ec:	00bfff04 	movi	r2,-4
1000c4f0:	88a2703a 	and	r17,r17,r2
1000c4f4:	8c21c83a 	sub	r16,r17,r16
1000c4f8:	8403fbc4 	addi	r16,r16,4079
1000c4fc:	8020d33a 	srli	r16,r16,12
1000c500:	0083ffc4 	movi	r2,4095
1000c504:	843fffc4 	addi	r16,r16,-1
1000c508:	8020933a 	slli	r16,r16,12
1000c50c:	1400060e 	bge	r2,r16,1000c528 <_malloc_trim_r+0x70>
1000c510:	000b883a 	mov	r5,zero
1000c514:	9009883a 	mov	r4,r18
1000c518:	000f3f80 	call	1000f3f8 <_sbrk_r>
1000c51c:	98c00217 	ldw	r3,8(r19)
1000c520:	1c47883a 	add	r3,r3,r17
1000c524:	10c00a26 	beq	r2,r3,1000c550 <_malloc_trim_r+0x98>
1000c528:	9009883a 	mov	r4,r18
1000c52c:	00151d80 	call	100151d8 <__malloc_unlock>
1000c530:	0005883a 	mov	r2,zero
1000c534:	dfc00417 	ldw	ra,16(sp)
1000c538:	dcc00317 	ldw	r19,12(sp)
1000c53c:	dc800217 	ldw	r18,8(sp)
1000c540:	dc400117 	ldw	r17,4(sp)
1000c544:	dc000017 	ldw	r16,0(sp)
1000c548:	dec00504 	addi	sp,sp,20
1000c54c:	f800283a 	ret
1000c550:	040bc83a 	sub	r5,zero,r16
1000c554:	9009883a 	mov	r4,r18
1000c558:	000f3f80 	call	1000f3f8 <_sbrk_r>
1000c55c:	00ffffc4 	movi	r3,-1
1000c560:	10c00d26 	beq	r2,r3,1000c598 <_malloc_trim_r+0xe0>
1000c564:	00c400b4 	movhi	r3,4098
1000c568:	18f0b704 	addi	r3,r3,-15652
1000c56c:	18800017 	ldw	r2,0(r3)
1000c570:	99000217 	ldw	r4,8(r19)
1000c574:	8c23c83a 	sub	r17,r17,r16
1000c578:	8c400054 	ori	r17,r17,1
1000c57c:	1421c83a 	sub	r16,r2,r16
1000c580:	24400115 	stw	r17,4(r4)
1000c584:	9009883a 	mov	r4,r18
1000c588:	1c000015 	stw	r16,0(r3)
1000c58c:	00151d80 	call	100151d8 <__malloc_unlock>
1000c590:	00800044 	movi	r2,1
1000c594:	003fe706 	br	1000c534 <__alt_data_end+0xf800c534>
1000c598:	000b883a 	mov	r5,zero
1000c59c:	9009883a 	mov	r4,r18
1000c5a0:	000f3f80 	call	1000f3f8 <_sbrk_r>
1000c5a4:	99000217 	ldw	r4,8(r19)
1000c5a8:	014003c4 	movi	r5,15
1000c5ac:	1107c83a 	sub	r3,r2,r4
1000c5b0:	28ffdd0e 	bge	r5,r3,1000c528 <__alt_data_end+0xf800c528>
1000c5b4:	014400b4 	movhi	r5,4098
1000c5b8:	29699704 	addi	r5,r5,-22948
1000c5bc:	29400017 	ldw	r5,0(r5)
1000c5c0:	18c00054 	ori	r3,r3,1
1000c5c4:	20c00115 	stw	r3,4(r4)
1000c5c8:	00c400b4 	movhi	r3,4098
1000c5cc:	1145c83a 	sub	r2,r2,r5
1000c5d0:	18f0b704 	addi	r3,r3,-15652
1000c5d4:	18800015 	stw	r2,0(r3)
1000c5d8:	003fd306 	br	1000c528 <__alt_data_end+0xf800c528>

1000c5dc <_free_r>:
1000c5dc:	28004126 	beq	r5,zero,1000c6e4 <_free_r+0x108>
1000c5e0:	defffd04 	addi	sp,sp,-12
1000c5e4:	dc400115 	stw	r17,4(sp)
1000c5e8:	dc000015 	stw	r16,0(sp)
1000c5ec:	2023883a 	mov	r17,r4
1000c5f0:	2821883a 	mov	r16,r5
1000c5f4:	dfc00215 	stw	ra,8(sp)
1000c5f8:	00151b40 	call	100151b4 <__malloc_lock>
1000c5fc:	81ffff17 	ldw	r7,-4(r16)
1000c600:	00bfff84 	movi	r2,-2
1000c604:	010400b4 	movhi	r4,4098
1000c608:	81bffe04 	addi	r6,r16,-8
1000c60c:	3884703a 	and	r2,r7,r2
1000c610:	2123c704 	addi	r4,r4,-28900
1000c614:	308b883a 	add	r5,r6,r2
1000c618:	2a400117 	ldw	r9,4(r5)
1000c61c:	22000217 	ldw	r8,8(r4)
1000c620:	00ffff04 	movi	r3,-4
1000c624:	48c6703a 	and	r3,r9,r3
1000c628:	2a005726 	beq	r5,r8,1000c788 <_free_r+0x1ac>
1000c62c:	28c00115 	stw	r3,4(r5)
1000c630:	39c0004c 	andi	r7,r7,1
1000c634:	3800091e 	bne	r7,zero,1000c65c <_free_r+0x80>
1000c638:	823ffe17 	ldw	r8,-8(r16)
1000c63c:	22400204 	addi	r9,r4,8
1000c640:	320dc83a 	sub	r6,r6,r8
1000c644:	31c00217 	ldw	r7,8(r6)
1000c648:	1205883a 	add	r2,r2,r8
1000c64c:	3a406526 	beq	r7,r9,1000c7e4 <_free_r+0x208>
1000c650:	32000317 	ldw	r8,12(r6)
1000c654:	3a000315 	stw	r8,12(r7)
1000c658:	41c00215 	stw	r7,8(r8)
1000c65c:	28cf883a 	add	r7,r5,r3
1000c660:	39c00117 	ldw	r7,4(r7)
1000c664:	39c0004c 	andi	r7,r7,1
1000c668:	38003a26 	beq	r7,zero,1000c754 <_free_r+0x178>
1000c66c:	10c00054 	ori	r3,r2,1
1000c670:	30c00115 	stw	r3,4(r6)
1000c674:	3087883a 	add	r3,r6,r2
1000c678:	18800015 	stw	r2,0(r3)
1000c67c:	00c07fc4 	movi	r3,511
1000c680:	18801936 	bltu	r3,r2,1000c6e8 <_free_r+0x10c>
1000c684:	1004d0fa 	srli	r2,r2,3
1000c688:	01c00044 	movi	r7,1
1000c68c:	21400117 	ldw	r5,4(r4)
1000c690:	10c00044 	addi	r3,r2,1
1000c694:	18c7883a 	add	r3,r3,r3
1000c698:	1005d0ba 	srai	r2,r2,2
1000c69c:	18c7883a 	add	r3,r3,r3
1000c6a0:	18c7883a 	add	r3,r3,r3
1000c6a4:	1907883a 	add	r3,r3,r4
1000c6a8:	3884983a 	sll	r2,r7,r2
1000c6ac:	19c00017 	ldw	r7,0(r3)
1000c6b0:	1a3ffe04 	addi	r8,r3,-8
1000c6b4:	1144b03a 	or	r2,r2,r5
1000c6b8:	32000315 	stw	r8,12(r6)
1000c6bc:	31c00215 	stw	r7,8(r6)
1000c6c0:	20800115 	stw	r2,4(r4)
1000c6c4:	19800015 	stw	r6,0(r3)
1000c6c8:	39800315 	stw	r6,12(r7)
1000c6cc:	8809883a 	mov	r4,r17
1000c6d0:	dfc00217 	ldw	ra,8(sp)
1000c6d4:	dc400117 	ldw	r17,4(sp)
1000c6d8:	dc000017 	ldw	r16,0(sp)
1000c6dc:	dec00304 	addi	sp,sp,12
1000c6e0:	00151d81 	jmpi	100151d8 <__malloc_unlock>
1000c6e4:	f800283a 	ret
1000c6e8:	100ad27a 	srli	r5,r2,9
1000c6ec:	00c00104 	movi	r3,4
1000c6f0:	19404a36 	bltu	r3,r5,1000c81c <_free_r+0x240>
1000c6f4:	100ad1ba 	srli	r5,r2,6
1000c6f8:	28c00e44 	addi	r3,r5,57
1000c6fc:	18c7883a 	add	r3,r3,r3
1000c700:	29400e04 	addi	r5,r5,56
1000c704:	18c7883a 	add	r3,r3,r3
1000c708:	18c7883a 	add	r3,r3,r3
1000c70c:	1909883a 	add	r4,r3,r4
1000c710:	20c00017 	ldw	r3,0(r4)
1000c714:	01c400b4 	movhi	r7,4098
1000c718:	213ffe04 	addi	r4,r4,-8
1000c71c:	39e3c704 	addi	r7,r7,-28900
1000c720:	20c04426 	beq	r4,r3,1000c834 <_free_r+0x258>
1000c724:	01ffff04 	movi	r7,-4
1000c728:	19400117 	ldw	r5,4(r3)
1000c72c:	29ca703a 	and	r5,r5,r7
1000c730:	1140022e 	bgeu	r2,r5,1000c73c <_free_r+0x160>
1000c734:	18c00217 	ldw	r3,8(r3)
1000c738:	20fffb1e 	bne	r4,r3,1000c728 <__alt_data_end+0xf800c728>
1000c73c:	19000317 	ldw	r4,12(r3)
1000c740:	31000315 	stw	r4,12(r6)
1000c744:	30c00215 	stw	r3,8(r6)
1000c748:	21800215 	stw	r6,8(r4)
1000c74c:	19800315 	stw	r6,12(r3)
1000c750:	003fde06 	br	1000c6cc <__alt_data_end+0xf800c6cc>
1000c754:	29c00217 	ldw	r7,8(r5)
1000c758:	10c5883a 	add	r2,r2,r3
1000c75c:	00c400b4 	movhi	r3,4098
1000c760:	18e3c904 	addi	r3,r3,-28892
1000c764:	38c03b26 	beq	r7,r3,1000c854 <_free_r+0x278>
1000c768:	2a000317 	ldw	r8,12(r5)
1000c76c:	11400054 	ori	r5,r2,1
1000c770:	3087883a 	add	r3,r6,r2
1000c774:	3a000315 	stw	r8,12(r7)
1000c778:	41c00215 	stw	r7,8(r8)
1000c77c:	31400115 	stw	r5,4(r6)
1000c780:	18800015 	stw	r2,0(r3)
1000c784:	003fbd06 	br	1000c67c <__alt_data_end+0xf800c67c>
1000c788:	39c0004c 	andi	r7,r7,1
1000c78c:	10c5883a 	add	r2,r2,r3
1000c790:	3800071e 	bne	r7,zero,1000c7b0 <_free_r+0x1d4>
1000c794:	81fffe17 	ldw	r7,-8(r16)
1000c798:	31cdc83a 	sub	r6,r6,r7
1000c79c:	30c00317 	ldw	r3,12(r6)
1000c7a0:	31400217 	ldw	r5,8(r6)
1000c7a4:	11c5883a 	add	r2,r2,r7
1000c7a8:	28c00315 	stw	r3,12(r5)
1000c7ac:	19400215 	stw	r5,8(r3)
1000c7b0:	10c00054 	ori	r3,r2,1
1000c7b4:	30c00115 	stw	r3,4(r6)
1000c7b8:	00c400b4 	movhi	r3,4098
1000c7bc:	18e99804 	addi	r3,r3,-22944
1000c7c0:	18c00017 	ldw	r3,0(r3)
1000c7c4:	21800215 	stw	r6,8(r4)
1000c7c8:	10ffc036 	bltu	r2,r3,1000c6cc <__alt_data_end+0xf800c6cc>
1000c7cc:	008400b4 	movhi	r2,4098
1000c7d0:	10b0ae04 	addi	r2,r2,-15688
1000c7d4:	11400017 	ldw	r5,0(r2)
1000c7d8:	8809883a 	mov	r4,r17
1000c7dc:	000c4b80 	call	1000c4b8 <_malloc_trim_r>
1000c7e0:	003fba06 	br	1000c6cc <__alt_data_end+0xf800c6cc>
1000c7e4:	28c9883a 	add	r4,r5,r3
1000c7e8:	21000117 	ldw	r4,4(r4)
1000c7ec:	2100004c 	andi	r4,r4,1
1000c7f0:	2000391e 	bne	r4,zero,1000c8d8 <_free_r+0x2fc>
1000c7f4:	29c00217 	ldw	r7,8(r5)
1000c7f8:	29000317 	ldw	r4,12(r5)
1000c7fc:	1885883a 	add	r2,r3,r2
1000c800:	10c00054 	ori	r3,r2,1
1000c804:	39000315 	stw	r4,12(r7)
1000c808:	21c00215 	stw	r7,8(r4)
1000c80c:	30c00115 	stw	r3,4(r6)
1000c810:	308d883a 	add	r6,r6,r2
1000c814:	30800015 	stw	r2,0(r6)
1000c818:	003fac06 	br	1000c6cc <__alt_data_end+0xf800c6cc>
1000c81c:	00c00504 	movi	r3,20
1000c820:	19401536 	bltu	r3,r5,1000c878 <_free_r+0x29c>
1000c824:	28c01704 	addi	r3,r5,92
1000c828:	18c7883a 	add	r3,r3,r3
1000c82c:	294016c4 	addi	r5,r5,91
1000c830:	003fb406 	br	1000c704 <__alt_data_end+0xf800c704>
1000c834:	280bd0ba 	srai	r5,r5,2
1000c838:	00c00044 	movi	r3,1
1000c83c:	38800117 	ldw	r2,4(r7)
1000c840:	194a983a 	sll	r5,r3,r5
1000c844:	2007883a 	mov	r3,r4
1000c848:	2884b03a 	or	r2,r5,r2
1000c84c:	38800115 	stw	r2,4(r7)
1000c850:	003fbb06 	br	1000c740 <__alt_data_end+0xf800c740>
1000c854:	21800515 	stw	r6,20(r4)
1000c858:	21800415 	stw	r6,16(r4)
1000c85c:	10c00054 	ori	r3,r2,1
1000c860:	31c00315 	stw	r7,12(r6)
1000c864:	31c00215 	stw	r7,8(r6)
1000c868:	30c00115 	stw	r3,4(r6)
1000c86c:	308d883a 	add	r6,r6,r2
1000c870:	30800015 	stw	r2,0(r6)
1000c874:	003f9506 	br	1000c6cc <__alt_data_end+0xf800c6cc>
1000c878:	00c01504 	movi	r3,84
1000c87c:	19400536 	bltu	r3,r5,1000c894 <_free_r+0x2b8>
1000c880:	100ad33a 	srli	r5,r2,12
1000c884:	28c01bc4 	addi	r3,r5,111
1000c888:	18c7883a 	add	r3,r3,r3
1000c88c:	29401b84 	addi	r5,r5,110
1000c890:	003f9c06 	br	1000c704 <__alt_data_end+0xf800c704>
1000c894:	00c05504 	movi	r3,340
1000c898:	19400536 	bltu	r3,r5,1000c8b0 <_free_r+0x2d4>
1000c89c:	100ad3fa 	srli	r5,r2,15
1000c8a0:	28c01e04 	addi	r3,r5,120
1000c8a4:	18c7883a 	add	r3,r3,r3
1000c8a8:	29401dc4 	addi	r5,r5,119
1000c8ac:	003f9506 	br	1000c704 <__alt_data_end+0xf800c704>
1000c8b0:	00c15504 	movi	r3,1364
1000c8b4:	19400536 	bltu	r3,r5,1000c8cc <_free_r+0x2f0>
1000c8b8:	100ad4ba 	srli	r5,r2,18
1000c8bc:	28c01f44 	addi	r3,r5,125
1000c8c0:	18c7883a 	add	r3,r3,r3
1000c8c4:	29401f04 	addi	r5,r5,124
1000c8c8:	003f8e06 	br	1000c704 <__alt_data_end+0xf800c704>
1000c8cc:	00c03f84 	movi	r3,254
1000c8d0:	01401f84 	movi	r5,126
1000c8d4:	003f8b06 	br	1000c704 <__alt_data_end+0xf800c704>
1000c8d8:	10c00054 	ori	r3,r2,1
1000c8dc:	30c00115 	stw	r3,4(r6)
1000c8e0:	308d883a 	add	r6,r6,r2
1000c8e4:	30800015 	stw	r2,0(r6)
1000c8e8:	003f7806 	br	1000c6cc <__alt_data_end+0xf800c6cc>

1000c8ec <__sfvwrite_r>:
1000c8ec:	30800217 	ldw	r2,8(r6)
1000c8f0:	10006726 	beq	r2,zero,1000ca90 <__sfvwrite_r+0x1a4>
1000c8f4:	28c0030b 	ldhu	r3,12(r5)
1000c8f8:	defff404 	addi	sp,sp,-48
1000c8fc:	dd400715 	stw	r21,28(sp)
1000c900:	dd000615 	stw	r20,24(sp)
1000c904:	dc000215 	stw	r16,8(sp)
1000c908:	dfc00b15 	stw	ra,44(sp)
1000c90c:	df000a15 	stw	fp,40(sp)
1000c910:	ddc00915 	stw	r23,36(sp)
1000c914:	dd800815 	stw	r22,32(sp)
1000c918:	dcc00515 	stw	r19,20(sp)
1000c91c:	dc800415 	stw	r18,16(sp)
1000c920:	dc400315 	stw	r17,12(sp)
1000c924:	1880020c 	andi	r2,r3,8
1000c928:	2821883a 	mov	r16,r5
1000c92c:	202b883a 	mov	r21,r4
1000c930:	3029883a 	mov	r20,r6
1000c934:	10002726 	beq	r2,zero,1000c9d4 <__sfvwrite_r+0xe8>
1000c938:	28800417 	ldw	r2,16(r5)
1000c93c:	10002526 	beq	r2,zero,1000c9d4 <__sfvwrite_r+0xe8>
1000c940:	1880008c 	andi	r2,r3,2
1000c944:	a4400017 	ldw	r17,0(r20)
1000c948:	10002a26 	beq	r2,zero,1000c9f4 <__sfvwrite_r+0x108>
1000c94c:	05a00034 	movhi	r22,32768
1000c950:	0027883a 	mov	r19,zero
1000c954:	0025883a 	mov	r18,zero
1000c958:	b5bf0004 	addi	r22,r22,-1024
1000c95c:	980d883a 	mov	r6,r19
1000c960:	a809883a 	mov	r4,r21
1000c964:	90004626 	beq	r18,zero,1000ca80 <__sfvwrite_r+0x194>
1000c968:	900f883a 	mov	r7,r18
1000c96c:	b480022e 	bgeu	r22,r18,1000c978 <__sfvwrite_r+0x8c>
1000c970:	01e00034 	movhi	r7,32768
1000c974:	39ff0004 	addi	r7,r7,-1024
1000c978:	80800917 	ldw	r2,36(r16)
1000c97c:	81400717 	ldw	r5,28(r16)
1000c980:	103ee83a 	callr	r2
1000c984:	00805a0e 	bge	zero,r2,1000caf0 <__sfvwrite_r+0x204>
1000c988:	a0c00217 	ldw	r3,8(r20)
1000c98c:	98a7883a 	add	r19,r19,r2
1000c990:	90a5c83a 	sub	r18,r18,r2
1000c994:	1885c83a 	sub	r2,r3,r2
1000c998:	a0800215 	stw	r2,8(r20)
1000c99c:	103fef1e 	bne	r2,zero,1000c95c <__alt_data_end+0xf800c95c>
1000c9a0:	0005883a 	mov	r2,zero
1000c9a4:	dfc00b17 	ldw	ra,44(sp)
1000c9a8:	df000a17 	ldw	fp,40(sp)
1000c9ac:	ddc00917 	ldw	r23,36(sp)
1000c9b0:	dd800817 	ldw	r22,32(sp)
1000c9b4:	dd400717 	ldw	r21,28(sp)
1000c9b8:	dd000617 	ldw	r20,24(sp)
1000c9bc:	dcc00517 	ldw	r19,20(sp)
1000c9c0:	dc800417 	ldw	r18,16(sp)
1000c9c4:	dc400317 	ldw	r17,12(sp)
1000c9c8:	dc000217 	ldw	r16,8(sp)
1000c9cc:	dec00c04 	addi	sp,sp,48
1000c9d0:	f800283a 	ret
1000c9d4:	800b883a 	mov	r5,r16
1000c9d8:	a809883a 	mov	r4,r21
1000c9dc:	000a45c0 	call	1000a45c <__swsetup_r>
1000c9e0:	1000ee1e 	bne	r2,zero,1000cd9c <__sfvwrite_r+0x4b0>
1000c9e4:	80c0030b 	ldhu	r3,12(r16)
1000c9e8:	a4400017 	ldw	r17,0(r20)
1000c9ec:	1880008c 	andi	r2,r3,2
1000c9f0:	103fd61e 	bne	r2,zero,1000c94c <__alt_data_end+0xf800c94c>
1000c9f4:	1880004c 	andi	r2,r3,1
1000c9f8:	1000421e 	bne	r2,zero,1000cb04 <__sfvwrite_r+0x218>
1000c9fc:	0039883a 	mov	fp,zero
1000ca00:	0025883a 	mov	r18,zero
1000ca04:	90001a26 	beq	r18,zero,1000ca70 <__sfvwrite_r+0x184>
1000ca08:	1880800c 	andi	r2,r3,512
1000ca0c:	84c00217 	ldw	r19,8(r16)
1000ca10:	10002126 	beq	r2,zero,1000ca98 <__sfvwrite_r+0x1ac>
1000ca14:	982f883a 	mov	r23,r19
1000ca18:	94c09636 	bltu	r18,r19,1000cc74 <__sfvwrite_r+0x388>
1000ca1c:	1881200c 	andi	r2,r3,1152
1000ca20:	1000a11e 	bne	r2,zero,1000cca8 <__sfvwrite_r+0x3bc>
1000ca24:	81000017 	ldw	r4,0(r16)
1000ca28:	b80d883a 	mov	r6,r23
1000ca2c:	e00b883a 	mov	r5,fp
1000ca30:	000dc0c0 	call	1000dc0c <memmove>
1000ca34:	80c00217 	ldw	r3,8(r16)
1000ca38:	81000017 	ldw	r4,0(r16)
1000ca3c:	9005883a 	mov	r2,r18
1000ca40:	1ce7c83a 	sub	r19,r3,r19
1000ca44:	25cf883a 	add	r7,r4,r23
1000ca48:	84c00215 	stw	r19,8(r16)
1000ca4c:	81c00015 	stw	r7,0(r16)
1000ca50:	a0c00217 	ldw	r3,8(r20)
1000ca54:	e0b9883a 	add	fp,fp,r2
1000ca58:	90a5c83a 	sub	r18,r18,r2
1000ca5c:	18a7c83a 	sub	r19,r3,r2
1000ca60:	a4c00215 	stw	r19,8(r20)
1000ca64:	983fce26 	beq	r19,zero,1000c9a0 <__alt_data_end+0xf800c9a0>
1000ca68:	80c0030b 	ldhu	r3,12(r16)
1000ca6c:	903fe61e 	bne	r18,zero,1000ca08 <__alt_data_end+0xf800ca08>
1000ca70:	8f000017 	ldw	fp,0(r17)
1000ca74:	8c800117 	ldw	r18,4(r17)
1000ca78:	8c400204 	addi	r17,r17,8
1000ca7c:	003fe106 	br	1000ca04 <__alt_data_end+0xf800ca04>
1000ca80:	8cc00017 	ldw	r19,0(r17)
1000ca84:	8c800117 	ldw	r18,4(r17)
1000ca88:	8c400204 	addi	r17,r17,8
1000ca8c:	003fb306 	br	1000c95c <__alt_data_end+0xf800c95c>
1000ca90:	0005883a 	mov	r2,zero
1000ca94:	f800283a 	ret
1000ca98:	81000017 	ldw	r4,0(r16)
1000ca9c:	80800417 	ldw	r2,16(r16)
1000caa0:	11005a36 	bltu	r2,r4,1000cc0c <__sfvwrite_r+0x320>
1000caa4:	85c00517 	ldw	r23,20(r16)
1000caa8:	95c05836 	bltu	r18,r23,1000cc0c <__sfvwrite_r+0x320>
1000caac:	00a00034 	movhi	r2,32768
1000cab0:	10bfffc4 	addi	r2,r2,-1
1000cab4:	9009883a 	mov	r4,r18
1000cab8:	1480012e 	bgeu	r2,r18,1000cac0 <__sfvwrite_r+0x1d4>
1000cabc:	1009883a 	mov	r4,r2
1000cac0:	b80b883a 	mov	r5,r23
1000cac4:	0007b500 	call	10007b50 <__divsi3>
1000cac8:	b80b883a 	mov	r5,r23
1000cacc:	1009883a 	mov	r4,r2
1000cad0:	0007d040 	call	10007d04 <__mulsi3>
1000cad4:	81400717 	ldw	r5,28(r16)
1000cad8:	80c00917 	ldw	r3,36(r16)
1000cadc:	100f883a 	mov	r7,r2
1000cae0:	e00d883a 	mov	r6,fp
1000cae4:	a809883a 	mov	r4,r21
1000cae8:	183ee83a 	callr	r3
1000caec:	00bfd816 	blt	zero,r2,1000ca50 <__alt_data_end+0xf800ca50>
1000caf0:	8080030b 	ldhu	r2,12(r16)
1000caf4:	10801014 	ori	r2,r2,64
1000caf8:	8080030d 	sth	r2,12(r16)
1000cafc:	00bfffc4 	movi	r2,-1
1000cb00:	003fa806 	br	1000c9a4 <__alt_data_end+0xf800c9a4>
1000cb04:	0027883a 	mov	r19,zero
1000cb08:	0011883a 	mov	r8,zero
1000cb0c:	0039883a 	mov	fp,zero
1000cb10:	0025883a 	mov	r18,zero
1000cb14:	90001f26 	beq	r18,zero,1000cb94 <__sfvwrite_r+0x2a8>
1000cb18:	40005a26 	beq	r8,zero,1000cc84 <__sfvwrite_r+0x398>
1000cb1c:	982d883a 	mov	r22,r19
1000cb20:	94c0012e 	bgeu	r18,r19,1000cb28 <__sfvwrite_r+0x23c>
1000cb24:	902d883a 	mov	r22,r18
1000cb28:	81000017 	ldw	r4,0(r16)
1000cb2c:	80800417 	ldw	r2,16(r16)
1000cb30:	b02f883a 	mov	r23,r22
1000cb34:	81c00517 	ldw	r7,20(r16)
1000cb38:	1100032e 	bgeu	r2,r4,1000cb48 <__sfvwrite_r+0x25c>
1000cb3c:	80c00217 	ldw	r3,8(r16)
1000cb40:	38c7883a 	add	r3,r7,r3
1000cb44:	1d801816 	blt	r3,r22,1000cba8 <__sfvwrite_r+0x2bc>
1000cb48:	b1c03e16 	blt	r22,r7,1000cc44 <__sfvwrite_r+0x358>
1000cb4c:	80800917 	ldw	r2,36(r16)
1000cb50:	81400717 	ldw	r5,28(r16)
1000cb54:	e00d883a 	mov	r6,fp
1000cb58:	da000115 	stw	r8,4(sp)
1000cb5c:	a809883a 	mov	r4,r21
1000cb60:	103ee83a 	callr	r2
1000cb64:	102f883a 	mov	r23,r2
1000cb68:	da000117 	ldw	r8,4(sp)
1000cb6c:	00bfe00e 	bge	zero,r2,1000caf0 <__alt_data_end+0xf800caf0>
1000cb70:	9de7c83a 	sub	r19,r19,r23
1000cb74:	98001f26 	beq	r19,zero,1000cbf4 <__sfvwrite_r+0x308>
1000cb78:	a0800217 	ldw	r2,8(r20)
1000cb7c:	e5f9883a 	add	fp,fp,r23
1000cb80:	95e5c83a 	sub	r18,r18,r23
1000cb84:	15efc83a 	sub	r23,r2,r23
1000cb88:	a5c00215 	stw	r23,8(r20)
1000cb8c:	b83f8426 	beq	r23,zero,1000c9a0 <__alt_data_end+0xf800c9a0>
1000cb90:	903fe11e 	bne	r18,zero,1000cb18 <__alt_data_end+0xf800cb18>
1000cb94:	8f000017 	ldw	fp,0(r17)
1000cb98:	8c800117 	ldw	r18,4(r17)
1000cb9c:	0011883a 	mov	r8,zero
1000cba0:	8c400204 	addi	r17,r17,8
1000cba4:	003fdb06 	br	1000cb14 <__alt_data_end+0xf800cb14>
1000cba8:	180d883a 	mov	r6,r3
1000cbac:	e00b883a 	mov	r5,fp
1000cbb0:	da000115 	stw	r8,4(sp)
1000cbb4:	d8c00015 	stw	r3,0(sp)
1000cbb8:	000dc0c0 	call	1000dc0c <memmove>
1000cbbc:	d8c00017 	ldw	r3,0(sp)
1000cbc0:	80800017 	ldw	r2,0(r16)
1000cbc4:	800b883a 	mov	r5,r16
1000cbc8:	a809883a 	mov	r4,r21
1000cbcc:	10c5883a 	add	r2,r2,r3
1000cbd0:	80800015 	stw	r2,0(r16)
1000cbd4:	d8c00015 	stw	r3,0(sp)
1000cbd8:	000c07c0 	call	1000c07c <_fflush_r>
1000cbdc:	d8c00017 	ldw	r3,0(sp)
1000cbe0:	da000117 	ldw	r8,4(sp)
1000cbe4:	103fc21e 	bne	r2,zero,1000caf0 <__alt_data_end+0xf800caf0>
1000cbe8:	182f883a 	mov	r23,r3
1000cbec:	9de7c83a 	sub	r19,r19,r23
1000cbf0:	983fe11e 	bne	r19,zero,1000cb78 <__alt_data_end+0xf800cb78>
1000cbf4:	800b883a 	mov	r5,r16
1000cbf8:	a809883a 	mov	r4,r21
1000cbfc:	000c07c0 	call	1000c07c <_fflush_r>
1000cc00:	103fbb1e 	bne	r2,zero,1000caf0 <__alt_data_end+0xf800caf0>
1000cc04:	0011883a 	mov	r8,zero
1000cc08:	003fdb06 	br	1000cb78 <__alt_data_end+0xf800cb78>
1000cc0c:	94c0012e 	bgeu	r18,r19,1000cc14 <__sfvwrite_r+0x328>
1000cc10:	9027883a 	mov	r19,r18
1000cc14:	980d883a 	mov	r6,r19
1000cc18:	e00b883a 	mov	r5,fp
1000cc1c:	000dc0c0 	call	1000dc0c <memmove>
1000cc20:	80800217 	ldw	r2,8(r16)
1000cc24:	80c00017 	ldw	r3,0(r16)
1000cc28:	14c5c83a 	sub	r2,r2,r19
1000cc2c:	1cc7883a 	add	r3,r3,r19
1000cc30:	80800215 	stw	r2,8(r16)
1000cc34:	80c00015 	stw	r3,0(r16)
1000cc38:	10004326 	beq	r2,zero,1000cd48 <__sfvwrite_r+0x45c>
1000cc3c:	9805883a 	mov	r2,r19
1000cc40:	003f8306 	br	1000ca50 <__alt_data_end+0xf800ca50>
1000cc44:	b00d883a 	mov	r6,r22
1000cc48:	e00b883a 	mov	r5,fp
1000cc4c:	da000115 	stw	r8,4(sp)
1000cc50:	000dc0c0 	call	1000dc0c <memmove>
1000cc54:	80800217 	ldw	r2,8(r16)
1000cc58:	80c00017 	ldw	r3,0(r16)
1000cc5c:	da000117 	ldw	r8,4(sp)
1000cc60:	1585c83a 	sub	r2,r2,r22
1000cc64:	1dad883a 	add	r22,r3,r22
1000cc68:	80800215 	stw	r2,8(r16)
1000cc6c:	85800015 	stw	r22,0(r16)
1000cc70:	003fbf06 	br	1000cb70 <__alt_data_end+0xf800cb70>
1000cc74:	81000017 	ldw	r4,0(r16)
1000cc78:	9027883a 	mov	r19,r18
1000cc7c:	902f883a 	mov	r23,r18
1000cc80:	003f6906 	br	1000ca28 <__alt_data_end+0xf800ca28>
1000cc84:	900d883a 	mov	r6,r18
1000cc88:	01400284 	movi	r5,10
1000cc8c:	e009883a 	mov	r4,fp
1000cc90:	000d9e00 	call	1000d9e0 <memchr>
1000cc94:	10003e26 	beq	r2,zero,1000cd90 <__sfvwrite_r+0x4a4>
1000cc98:	10800044 	addi	r2,r2,1
1000cc9c:	1727c83a 	sub	r19,r2,fp
1000cca0:	02000044 	movi	r8,1
1000cca4:	003f9d06 	br	1000cb1c <__alt_data_end+0xf800cb1c>
1000cca8:	80800517 	ldw	r2,20(r16)
1000ccac:	81400417 	ldw	r5,16(r16)
1000ccb0:	81c00017 	ldw	r7,0(r16)
1000ccb4:	10a7883a 	add	r19,r2,r2
1000ccb8:	9885883a 	add	r2,r19,r2
1000ccbc:	1026d7fa 	srli	r19,r2,31
1000ccc0:	396dc83a 	sub	r22,r7,r5
1000ccc4:	b1000044 	addi	r4,r22,1
1000ccc8:	9885883a 	add	r2,r19,r2
1000cccc:	1027d07a 	srai	r19,r2,1
1000ccd0:	2485883a 	add	r2,r4,r18
1000ccd4:	980d883a 	mov	r6,r19
1000ccd8:	9880022e 	bgeu	r19,r2,1000cce4 <__sfvwrite_r+0x3f8>
1000ccdc:	1027883a 	mov	r19,r2
1000cce0:	100d883a 	mov	r6,r2
1000cce4:	18c1000c 	andi	r3,r3,1024
1000cce8:	18001c26 	beq	r3,zero,1000cd5c <__sfvwrite_r+0x470>
1000ccec:	300b883a 	mov	r5,r6
1000ccf0:	a809883a 	mov	r4,r21
1000ccf4:	000d1d40 	call	1000d1d4 <_malloc_r>
1000ccf8:	102f883a 	mov	r23,r2
1000ccfc:	10002926 	beq	r2,zero,1000cda4 <__sfvwrite_r+0x4b8>
1000cd00:	81400417 	ldw	r5,16(r16)
1000cd04:	b00d883a 	mov	r6,r22
1000cd08:	1009883a 	mov	r4,r2
1000cd0c:	000dac40 	call	1000dac4 <memcpy>
1000cd10:	8080030b 	ldhu	r2,12(r16)
1000cd14:	00fedfc4 	movi	r3,-1153
1000cd18:	10c4703a 	and	r2,r2,r3
1000cd1c:	10802014 	ori	r2,r2,128
1000cd20:	8080030d 	sth	r2,12(r16)
1000cd24:	bd89883a 	add	r4,r23,r22
1000cd28:	9d8fc83a 	sub	r7,r19,r22
1000cd2c:	85c00415 	stw	r23,16(r16)
1000cd30:	84c00515 	stw	r19,20(r16)
1000cd34:	81000015 	stw	r4,0(r16)
1000cd38:	9027883a 	mov	r19,r18
1000cd3c:	81c00215 	stw	r7,8(r16)
1000cd40:	902f883a 	mov	r23,r18
1000cd44:	003f3806 	br	1000ca28 <__alt_data_end+0xf800ca28>
1000cd48:	800b883a 	mov	r5,r16
1000cd4c:	a809883a 	mov	r4,r21
1000cd50:	000c07c0 	call	1000c07c <_fflush_r>
1000cd54:	103fb926 	beq	r2,zero,1000cc3c <__alt_data_end+0xf800cc3c>
1000cd58:	003f6506 	br	1000caf0 <__alt_data_end+0xf800caf0>
1000cd5c:	a809883a 	mov	r4,r21
1000cd60:	000ee200 	call	1000ee20 <_realloc_r>
1000cd64:	102f883a 	mov	r23,r2
1000cd68:	103fee1e 	bne	r2,zero,1000cd24 <__alt_data_end+0xf800cd24>
1000cd6c:	81400417 	ldw	r5,16(r16)
1000cd70:	a809883a 	mov	r4,r21
1000cd74:	000c5dc0 	call	1000c5dc <_free_r>
1000cd78:	8080030b 	ldhu	r2,12(r16)
1000cd7c:	00ffdfc4 	movi	r3,-129
1000cd80:	1884703a 	and	r2,r3,r2
1000cd84:	00c00304 	movi	r3,12
1000cd88:	a8c00015 	stw	r3,0(r21)
1000cd8c:	003f5906 	br	1000caf4 <__alt_data_end+0xf800caf4>
1000cd90:	94c00044 	addi	r19,r18,1
1000cd94:	02000044 	movi	r8,1
1000cd98:	003f6006 	br	1000cb1c <__alt_data_end+0xf800cb1c>
1000cd9c:	00bfffc4 	movi	r2,-1
1000cda0:	003f0006 	br	1000c9a4 <__alt_data_end+0xf800c9a4>
1000cda4:	00800304 	movi	r2,12
1000cda8:	a8800015 	stw	r2,0(r21)
1000cdac:	8080030b 	ldhu	r2,12(r16)
1000cdb0:	003f5006 	br	1000caf4 <__alt_data_end+0xf800caf4>

1000cdb4 <_fwalk>:
1000cdb4:	defff704 	addi	sp,sp,-36
1000cdb8:	dd000415 	stw	r20,16(sp)
1000cdbc:	dfc00815 	stw	ra,32(sp)
1000cdc0:	ddc00715 	stw	r23,28(sp)
1000cdc4:	dd800615 	stw	r22,24(sp)
1000cdc8:	dd400515 	stw	r21,20(sp)
1000cdcc:	dcc00315 	stw	r19,12(sp)
1000cdd0:	dc800215 	stw	r18,8(sp)
1000cdd4:	dc400115 	stw	r17,4(sp)
1000cdd8:	dc000015 	stw	r16,0(sp)
1000cddc:	2500b804 	addi	r20,r4,736
1000cde0:	a0002326 	beq	r20,zero,1000ce70 <_fwalk+0xbc>
1000cde4:	282b883a 	mov	r21,r5
1000cde8:	002f883a 	mov	r23,zero
1000cdec:	05800044 	movi	r22,1
1000cdf0:	04ffffc4 	movi	r19,-1
1000cdf4:	a4400117 	ldw	r17,4(r20)
1000cdf8:	a4800217 	ldw	r18,8(r20)
1000cdfc:	8c7fffc4 	addi	r17,r17,-1
1000ce00:	88000d16 	blt	r17,zero,1000ce38 <_fwalk+0x84>
1000ce04:	94000304 	addi	r16,r18,12
1000ce08:	94800384 	addi	r18,r18,14
1000ce0c:	8080000b 	ldhu	r2,0(r16)
1000ce10:	8c7fffc4 	addi	r17,r17,-1
1000ce14:	813ffd04 	addi	r4,r16,-12
1000ce18:	b080042e 	bgeu	r22,r2,1000ce2c <_fwalk+0x78>
1000ce1c:	9080000f 	ldh	r2,0(r18)
1000ce20:	14c00226 	beq	r2,r19,1000ce2c <_fwalk+0x78>
1000ce24:	a83ee83a 	callr	r21
1000ce28:	b8aeb03a 	or	r23,r23,r2
1000ce2c:	84001a04 	addi	r16,r16,104
1000ce30:	94801a04 	addi	r18,r18,104
1000ce34:	8cfff51e 	bne	r17,r19,1000ce0c <__alt_data_end+0xf800ce0c>
1000ce38:	a5000017 	ldw	r20,0(r20)
1000ce3c:	a03fed1e 	bne	r20,zero,1000cdf4 <__alt_data_end+0xf800cdf4>
1000ce40:	b805883a 	mov	r2,r23
1000ce44:	dfc00817 	ldw	ra,32(sp)
1000ce48:	ddc00717 	ldw	r23,28(sp)
1000ce4c:	dd800617 	ldw	r22,24(sp)
1000ce50:	dd400517 	ldw	r21,20(sp)
1000ce54:	dd000417 	ldw	r20,16(sp)
1000ce58:	dcc00317 	ldw	r19,12(sp)
1000ce5c:	dc800217 	ldw	r18,8(sp)
1000ce60:	dc400117 	ldw	r17,4(sp)
1000ce64:	dc000017 	ldw	r16,0(sp)
1000ce68:	dec00904 	addi	sp,sp,36
1000ce6c:	f800283a 	ret
1000ce70:	002f883a 	mov	r23,zero
1000ce74:	003ff206 	br	1000ce40 <__alt_data_end+0xf800ce40>

1000ce78 <_fwalk_reent>:
1000ce78:	defff704 	addi	sp,sp,-36
1000ce7c:	dd000415 	stw	r20,16(sp)
1000ce80:	dfc00815 	stw	ra,32(sp)
1000ce84:	ddc00715 	stw	r23,28(sp)
1000ce88:	dd800615 	stw	r22,24(sp)
1000ce8c:	dd400515 	stw	r21,20(sp)
1000ce90:	dcc00315 	stw	r19,12(sp)
1000ce94:	dc800215 	stw	r18,8(sp)
1000ce98:	dc400115 	stw	r17,4(sp)
1000ce9c:	dc000015 	stw	r16,0(sp)
1000cea0:	2500b804 	addi	r20,r4,736
1000cea4:	a0002326 	beq	r20,zero,1000cf34 <_fwalk_reent+0xbc>
1000cea8:	282b883a 	mov	r21,r5
1000ceac:	2027883a 	mov	r19,r4
1000ceb0:	002f883a 	mov	r23,zero
1000ceb4:	05800044 	movi	r22,1
1000ceb8:	04bfffc4 	movi	r18,-1
1000cebc:	a4400117 	ldw	r17,4(r20)
1000cec0:	a4000217 	ldw	r16,8(r20)
1000cec4:	8c7fffc4 	addi	r17,r17,-1
1000cec8:	88000c16 	blt	r17,zero,1000cefc <_fwalk_reent+0x84>
1000cecc:	84000304 	addi	r16,r16,12
1000ced0:	8080000b 	ldhu	r2,0(r16)
1000ced4:	8c7fffc4 	addi	r17,r17,-1
1000ced8:	817ffd04 	addi	r5,r16,-12
1000cedc:	b080052e 	bgeu	r22,r2,1000cef4 <_fwalk_reent+0x7c>
1000cee0:	8080008f 	ldh	r2,2(r16)
1000cee4:	9809883a 	mov	r4,r19
1000cee8:	14800226 	beq	r2,r18,1000cef4 <_fwalk_reent+0x7c>
1000ceec:	a83ee83a 	callr	r21
1000cef0:	b8aeb03a 	or	r23,r23,r2
1000cef4:	84001a04 	addi	r16,r16,104
1000cef8:	8cbff51e 	bne	r17,r18,1000ced0 <__alt_data_end+0xf800ced0>
1000cefc:	a5000017 	ldw	r20,0(r20)
1000cf00:	a03fee1e 	bne	r20,zero,1000cebc <__alt_data_end+0xf800cebc>
1000cf04:	b805883a 	mov	r2,r23
1000cf08:	dfc00817 	ldw	ra,32(sp)
1000cf0c:	ddc00717 	ldw	r23,28(sp)
1000cf10:	dd800617 	ldw	r22,24(sp)
1000cf14:	dd400517 	ldw	r21,20(sp)
1000cf18:	dd000417 	ldw	r20,16(sp)
1000cf1c:	dcc00317 	ldw	r19,12(sp)
1000cf20:	dc800217 	ldw	r18,8(sp)
1000cf24:	dc400117 	ldw	r17,4(sp)
1000cf28:	dc000017 	ldw	r16,0(sp)
1000cf2c:	dec00904 	addi	sp,sp,36
1000cf30:	f800283a 	ret
1000cf34:	002f883a 	mov	r23,zero
1000cf38:	003ff206 	br	1000cf04 <__alt_data_end+0xf800cf04>

1000cf3c <_setlocale_r>:
1000cf3c:	30001b26 	beq	r6,zero,1000cfac <_setlocale_r+0x70>
1000cf40:	014400b4 	movhi	r5,4098
1000cf44:	defffe04 	addi	sp,sp,-8
1000cf48:	2961ff04 	addi	r5,r5,-30724
1000cf4c:	3009883a 	mov	r4,r6
1000cf50:	dc000015 	stw	r16,0(sp)
1000cf54:	dfc00115 	stw	ra,4(sp)
1000cf58:	3021883a 	mov	r16,r6
1000cf5c:	000f5880 	call	1000f588 <strcmp>
1000cf60:	1000061e 	bne	r2,zero,1000cf7c <_setlocale_r+0x40>
1000cf64:	008400b4 	movhi	r2,4098
1000cf68:	10a1fe04 	addi	r2,r2,-30728
1000cf6c:	dfc00117 	ldw	ra,4(sp)
1000cf70:	dc000017 	ldw	r16,0(sp)
1000cf74:	dec00204 	addi	sp,sp,8
1000cf78:	f800283a 	ret
1000cf7c:	014400b4 	movhi	r5,4098
1000cf80:	2961fe04 	addi	r5,r5,-30728
1000cf84:	8009883a 	mov	r4,r16
1000cf88:	000f5880 	call	1000f588 <strcmp>
1000cf8c:	103ff526 	beq	r2,zero,1000cf64 <__alt_data_end+0xf800cf64>
1000cf90:	014400b4 	movhi	r5,4098
1000cf94:	2961e904 	addi	r5,r5,-30812
1000cf98:	8009883a 	mov	r4,r16
1000cf9c:	000f5880 	call	1000f588 <strcmp>
1000cfa0:	103ff026 	beq	r2,zero,1000cf64 <__alt_data_end+0xf800cf64>
1000cfa4:	0005883a 	mov	r2,zero
1000cfa8:	003ff006 	br	1000cf6c <__alt_data_end+0xf800cf6c>
1000cfac:	008400b4 	movhi	r2,4098
1000cfb0:	10a1fe04 	addi	r2,r2,-30728
1000cfb4:	f800283a 	ret

1000cfb8 <__locale_charset>:
1000cfb8:	008400b4 	movhi	r2,4098
1000cfbc:	10a3b104 	addi	r2,r2,-28988
1000cfc0:	f800283a 	ret

1000cfc4 <__locale_mb_cur_max>:
1000cfc4:	008400b4 	movhi	r2,4098
1000cfc8:	10a99604 	addi	r2,r2,-22952
1000cfcc:	10800017 	ldw	r2,0(r2)
1000cfd0:	f800283a 	ret

1000cfd4 <__locale_msgcharset>:
1000cfd4:	008400b4 	movhi	r2,4098
1000cfd8:	10a3a904 	addi	r2,r2,-29020
1000cfdc:	f800283a 	ret

1000cfe0 <__locale_cjk_lang>:
1000cfe0:	0005883a 	mov	r2,zero
1000cfe4:	f800283a 	ret

1000cfe8 <_localeconv_r>:
1000cfe8:	008400b4 	movhi	r2,4098
1000cfec:	10a3b904 	addi	r2,r2,-28956
1000cff0:	f800283a 	ret

1000cff4 <setlocale>:
1000cff4:	008400b4 	movhi	r2,4098
1000cff8:	10a99504 	addi	r2,r2,-22956
1000cffc:	280d883a 	mov	r6,r5
1000d000:	200b883a 	mov	r5,r4
1000d004:	11000017 	ldw	r4,0(r2)
1000d008:	000cf3c1 	jmpi	1000cf3c <_setlocale_r>

1000d00c <localeconv>:
1000d00c:	008400b4 	movhi	r2,4098
1000d010:	10a3b904 	addi	r2,r2,-28956
1000d014:	f800283a 	ret

1000d018 <__smakebuf_r>:
1000d018:	2880030b 	ldhu	r2,12(r5)
1000d01c:	10c0008c 	andi	r3,r2,2
1000d020:	1800411e 	bne	r3,zero,1000d128 <__smakebuf_r+0x110>
1000d024:	deffec04 	addi	sp,sp,-80
1000d028:	dc000f15 	stw	r16,60(sp)
1000d02c:	2821883a 	mov	r16,r5
1000d030:	2940038f 	ldh	r5,14(r5)
1000d034:	dc401015 	stw	r17,64(sp)
1000d038:	dfc01315 	stw	ra,76(sp)
1000d03c:	dcc01215 	stw	r19,72(sp)
1000d040:	dc801115 	stw	r18,68(sp)
1000d044:	2023883a 	mov	r17,r4
1000d048:	28001c16 	blt	r5,zero,1000d0bc <__smakebuf_r+0xa4>
1000d04c:	d80d883a 	mov	r6,sp
1000d050:	00111f80 	call	100111f8 <_fstat_r>
1000d054:	10001816 	blt	r2,zero,1000d0b8 <__smakebuf_r+0xa0>
1000d058:	d8800117 	ldw	r2,4(sp)
1000d05c:	00e00014 	movui	r3,32768
1000d060:	10bc000c 	andi	r2,r2,61440
1000d064:	14c80020 	cmpeqi	r19,r2,8192
1000d068:	10c03726 	beq	r2,r3,1000d148 <__smakebuf_r+0x130>
1000d06c:	80c0030b 	ldhu	r3,12(r16)
1000d070:	18c20014 	ori	r3,r3,2048
1000d074:	80c0030d 	sth	r3,12(r16)
1000d078:	00c80004 	movi	r3,8192
1000d07c:	10c0521e 	bne	r2,r3,1000d1c8 <__smakebuf_r+0x1b0>
1000d080:	8140038f 	ldh	r5,14(r16)
1000d084:	8809883a 	mov	r4,r17
1000d088:	00112540 	call	10011254 <_isatty_r>
1000d08c:	10004c26 	beq	r2,zero,1000d1c0 <__smakebuf_r+0x1a8>
1000d090:	8080030b 	ldhu	r2,12(r16)
1000d094:	80c010c4 	addi	r3,r16,67
1000d098:	80c00015 	stw	r3,0(r16)
1000d09c:	10800054 	ori	r2,r2,1
1000d0a0:	8080030d 	sth	r2,12(r16)
1000d0a4:	00800044 	movi	r2,1
1000d0a8:	80c00415 	stw	r3,16(r16)
1000d0ac:	80800515 	stw	r2,20(r16)
1000d0b0:	04810004 	movi	r18,1024
1000d0b4:	00000706 	br	1000d0d4 <__smakebuf_r+0xbc>
1000d0b8:	8080030b 	ldhu	r2,12(r16)
1000d0bc:	10c0200c 	andi	r3,r2,128
1000d0c0:	18001f1e 	bne	r3,zero,1000d140 <__smakebuf_r+0x128>
1000d0c4:	04810004 	movi	r18,1024
1000d0c8:	10820014 	ori	r2,r2,2048
1000d0cc:	8080030d 	sth	r2,12(r16)
1000d0d0:	0027883a 	mov	r19,zero
1000d0d4:	900b883a 	mov	r5,r18
1000d0d8:	8809883a 	mov	r4,r17
1000d0dc:	000d1d40 	call	1000d1d4 <_malloc_r>
1000d0e0:	10002c26 	beq	r2,zero,1000d194 <__smakebuf_r+0x17c>
1000d0e4:	80c0030b 	ldhu	r3,12(r16)
1000d0e8:	01040074 	movhi	r4,4097
1000d0ec:	21304404 	addi	r4,r4,-16112
1000d0f0:	89000f15 	stw	r4,60(r17)
1000d0f4:	18c02014 	ori	r3,r3,128
1000d0f8:	80c0030d 	sth	r3,12(r16)
1000d0fc:	80800015 	stw	r2,0(r16)
1000d100:	80800415 	stw	r2,16(r16)
1000d104:	84800515 	stw	r18,20(r16)
1000d108:	98001a1e 	bne	r19,zero,1000d174 <__smakebuf_r+0x15c>
1000d10c:	dfc01317 	ldw	ra,76(sp)
1000d110:	dcc01217 	ldw	r19,72(sp)
1000d114:	dc801117 	ldw	r18,68(sp)
1000d118:	dc401017 	ldw	r17,64(sp)
1000d11c:	dc000f17 	ldw	r16,60(sp)
1000d120:	dec01404 	addi	sp,sp,80
1000d124:	f800283a 	ret
1000d128:	288010c4 	addi	r2,r5,67
1000d12c:	28800015 	stw	r2,0(r5)
1000d130:	28800415 	stw	r2,16(r5)
1000d134:	00800044 	movi	r2,1
1000d138:	28800515 	stw	r2,20(r5)
1000d13c:	f800283a 	ret
1000d140:	04801004 	movi	r18,64
1000d144:	003fe006 	br	1000d0c8 <__alt_data_end+0xf800d0c8>
1000d148:	81000a17 	ldw	r4,40(r16)
1000d14c:	00c40074 	movhi	r3,4097
1000d150:	18fd4904 	addi	r3,r3,-2780
1000d154:	20ffc51e 	bne	r4,r3,1000d06c <__alt_data_end+0xf800d06c>
1000d158:	8080030b 	ldhu	r2,12(r16)
1000d15c:	04810004 	movi	r18,1024
1000d160:	84801315 	stw	r18,76(r16)
1000d164:	1484b03a 	or	r2,r2,r18
1000d168:	8080030d 	sth	r2,12(r16)
1000d16c:	0027883a 	mov	r19,zero
1000d170:	003fd806 	br	1000d0d4 <__alt_data_end+0xf800d0d4>
1000d174:	8140038f 	ldh	r5,14(r16)
1000d178:	8809883a 	mov	r4,r17
1000d17c:	00112540 	call	10011254 <_isatty_r>
1000d180:	103fe226 	beq	r2,zero,1000d10c <__alt_data_end+0xf800d10c>
1000d184:	8080030b 	ldhu	r2,12(r16)
1000d188:	10800054 	ori	r2,r2,1
1000d18c:	8080030d 	sth	r2,12(r16)
1000d190:	003fde06 	br	1000d10c <__alt_data_end+0xf800d10c>
1000d194:	8080030b 	ldhu	r2,12(r16)
1000d198:	10c0800c 	andi	r3,r2,512
1000d19c:	183fdb1e 	bne	r3,zero,1000d10c <__alt_data_end+0xf800d10c>
1000d1a0:	10800094 	ori	r2,r2,2
1000d1a4:	80c010c4 	addi	r3,r16,67
1000d1a8:	8080030d 	sth	r2,12(r16)
1000d1ac:	00800044 	movi	r2,1
1000d1b0:	80c00015 	stw	r3,0(r16)
1000d1b4:	80c00415 	stw	r3,16(r16)
1000d1b8:	80800515 	stw	r2,20(r16)
1000d1bc:	003fd306 	br	1000d10c <__alt_data_end+0xf800d10c>
1000d1c0:	04810004 	movi	r18,1024
1000d1c4:	003fc306 	br	1000d0d4 <__alt_data_end+0xf800d0d4>
1000d1c8:	0027883a 	mov	r19,zero
1000d1cc:	04810004 	movi	r18,1024
1000d1d0:	003fc006 	br	1000d0d4 <__alt_data_end+0xf800d0d4>

1000d1d4 <_malloc_r>:
1000d1d4:	defff504 	addi	sp,sp,-44
1000d1d8:	dc800315 	stw	r18,12(sp)
1000d1dc:	dfc00a15 	stw	ra,40(sp)
1000d1e0:	df000915 	stw	fp,36(sp)
1000d1e4:	ddc00815 	stw	r23,32(sp)
1000d1e8:	dd800715 	stw	r22,28(sp)
1000d1ec:	dd400615 	stw	r21,24(sp)
1000d1f0:	dd000515 	stw	r20,20(sp)
1000d1f4:	dcc00415 	stw	r19,16(sp)
1000d1f8:	dc400215 	stw	r17,8(sp)
1000d1fc:	dc000115 	stw	r16,4(sp)
1000d200:	288002c4 	addi	r2,r5,11
1000d204:	00c00584 	movi	r3,22
1000d208:	2025883a 	mov	r18,r4
1000d20c:	18807f2e 	bgeu	r3,r2,1000d40c <_malloc_r+0x238>
1000d210:	047ffe04 	movi	r17,-8
1000d214:	1462703a 	and	r17,r2,r17
1000d218:	8800a316 	blt	r17,zero,1000d4a8 <_malloc_r+0x2d4>
1000d21c:	8940a236 	bltu	r17,r5,1000d4a8 <_malloc_r+0x2d4>
1000d220:	00151b40 	call	100151b4 <__malloc_lock>
1000d224:	00807dc4 	movi	r2,503
1000d228:	1441e92e 	bgeu	r2,r17,1000d9d0 <_malloc_r+0x7fc>
1000d22c:	8804d27a 	srli	r2,r17,9
1000d230:	1000a126 	beq	r2,zero,1000d4b8 <_malloc_r+0x2e4>
1000d234:	00c00104 	movi	r3,4
1000d238:	18811e36 	bltu	r3,r2,1000d6b4 <_malloc_r+0x4e0>
1000d23c:	8804d1ba 	srli	r2,r17,6
1000d240:	12000e44 	addi	r8,r2,57
1000d244:	11c00e04 	addi	r7,r2,56
1000d248:	4209883a 	add	r4,r8,r8
1000d24c:	04c400b4 	movhi	r19,4098
1000d250:	2109883a 	add	r4,r4,r4
1000d254:	9ce3c704 	addi	r19,r19,-28900
1000d258:	2109883a 	add	r4,r4,r4
1000d25c:	9909883a 	add	r4,r19,r4
1000d260:	24000117 	ldw	r16,4(r4)
1000d264:	213ffe04 	addi	r4,r4,-8
1000d268:	24009726 	beq	r4,r16,1000d4c8 <_malloc_r+0x2f4>
1000d26c:	80800117 	ldw	r2,4(r16)
1000d270:	01bfff04 	movi	r6,-4
1000d274:	014003c4 	movi	r5,15
1000d278:	1184703a 	and	r2,r2,r6
1000d27c:	1447c83a 	sub	r3,r2,r17
1000d280:	28c00716 	blt	r5,r3,1000d2a0 <_malloc_r+0xcc>
1000d284:	1800920e 	bge	r3,zero,1000d4d0 <_malloc_r+0x2fc>
1000d288:	84000317 	ldw	r16,12(r16)
1000d28c:	24008e26 	beq	r4,r16,1000d4c8 <_malloc_r+0x2f4>
1000d290:	80800117 	ldw	r2,4(r16)
1000d294:	1184703a 	and	r2,r2,r6
1000d298:	1447c83a 	sub	r3,r2,r17
1000d29c:	28fff90e 	bge	r5,r3,1000d284 <__alt_data_end+0xf800d284>
1000d2a0:	3809883a 	mov	r4,r7
1000d2a4:	018400b4 	movhi	r6,4098
1000d2a8:	9c000417 	ldw	r16,16(r19)
1000d2ac:	31a3c704 	addi	r6,r6,-28900
1000d2b0:	32000204 	addi	r8,r6,8
1000d2b4:	82013426 	beq	r16,r8,1000d788 <_malloc_r+0x5b4>
1000d2b8:	80c00117 	ldw	r3,4(r16)
1000d2bc:	00bfff04 	movi	r2,-4
1000d2c0:	188e703a 	and	r7,r3,r2
1000d2c4:	3c45c83a 	sub	r2,r7,r17
1000d2c8:	00c003c4 	movi	r3,15
1000d2cc:	18811f16 	blt	r3,r2,1000d74c <_malloc_r+0x578>
1000d2d0:	32000515 	stw	r8,20(r6)
1000d2d4:	32000415 	stw	r8,16(r6)
1000d2d8:	10007f0e 	bge	r2,zero,1000d4d8 <_malloc_r+0x304>
1000d2dc:	00807fc4 	movi	r2,511
1000d2e0:	11c0fd36 	bltu	r2,r7,1000d6d8 <_malloc_r+0x504>
1000d2e4:	3806d0fa 	srli	r3,r7,3
1000d2e8:	01c00044 	movi	r7,1
1000d2ec:	30800117 	ldw	r2,4(r6)
1000d2f0:	19400044 	addi	r5,r3,1
1000d2f4:	294b883a 	add	r5,r5,r5
1000d2f8:	1807d0ba 	srai	r3,r3,2
1000d2fc:	294b883a 	add	r5,r5,r5
1000d300:	294b883a 	add	r5,r5,r5
1000d304:	298b883a 	add	r5,r5,r6
1000d308:	38c6983a 	sll	r3,r7,r3
1000d30c:	29c00017 	ldw	r7,0(r5)
1000d310:	2a7ffe04 	addi	r9,r5,-8
1000d314:	1886b03a 	or	r3,r3,r2
1000d318:	82400315 	stw	r9,12(r16)
1000d31c:	81c00215 	stw	r7,8(r16)
1000d320:	30c00115 	stw	r3,4(r6)
1000d324:	2c000015 	stw	r16,0(r5)
1000d328:	3c000315 	stw	r16,12(r7)
1000d32c:	2005d0ba 	srai	r2,r4,2
1000d330:	01400044 	movi	r5,1
1000d334:	288a983a 	sll	r5,r5,r2
1000d338:	19406f36 	bltu	r3,r5,1000d4f8 <_malloc_r+0x324>
1000d33c:	28c4703a 	and	r2,r5,r3
1000d340:	10000a1e 	bne	r2,zero,1000d36c <_malloc_r+0x198>
1000d344:	00bfff04 	movi	r2,-4
1000d348:	294b883a 	add	r5,r5,r5
1000d34c:	2088703a 	and	r4,r4,r2
1000d350:	28c4703a 	and	r2,r5,r3
1000d354:	21000104 	addi	r4,r4,4
1000d358:	1000041e 	bne	r2,zero,1000d36c <_malloc_r+0x198>
1000d35c:	294b883a 	add	r5,r5,r5
1000d360:	28c4703a 	and	r2,r5,r3
1000d364:	21000104 	addi	r4,r4,4
1000d368:	103ffc26 	beq	r2,zero,1000d35c <__alt_data_end+0xf800d35c>
1000d36c:	02bfff04 	movi	r10,-4
1000d370:	024003c4 	movi	r9,15
1000d374:	21800044 	addi	r6,r4,1
1000d378:	318d883a 	add	r6,r6,r6
1000d37c:	318d883a 	add	r6,r6,r6
1000d380:	318d883a 	add	r6,r6,r6
1000d384:	998d883a 	add	r6,r19,r6
1000d388:	333ffe04 	addi	r12,r6,-8
1000d38c:	2017883a 	mov	r11,r4
1000d390:	31800104 	addi	r6,r6,4
1000d394:	34000017 	ldw	r16,0(r6)
1000d398:	31fffd04 	addi	r7,r6,-12
1000d39c:	81c0041e 	bne	r16,r7,1000d3b0 <_malloc_r+0x1dc>
1000d3a0:	0000fb06 	br	1000d790 <_malloc_r+0x5bc>
1000d3a4:	1801030e 	bge	r3,zero,1000d7b4 <_malloc_r+0x5e0>
1000d3a8:	84000317 	ldw	r16,12(r16)
1000d3ac:	81c0f826 	beq	r16,r7,1000d790 <_malloc_r+0x5bc>
1000d3b0:	80800117 	ldw	r2,4(r16)
1000d3b4:	1284703a 	and	r2,r2,r10
1000d3b8:	1447c83a 	sub	r3,r2,r17
1000d3bc:	48fff90e 	bge	r9,r3,1000d3a4 <__alt_data_end+0xf800d3a4>
1000d3c0:	80800317 	ldw	r2,12(r16)
1000d3c4:	81000217 	ldw	r4,8(r16)
1000d3c8:	89400054 	ori	r5,r17,1
1000d3cc:	81400115 	stw	r5,4(r16)
1000d3d0:	20800315 	stw	r2,12(r4)
1000d3d4:	11000215 	stw	r4,8(r2)
1000d3d8:	8463883a 	add	r17,r16,r17
1000d3dc:	9c400515 	stw	r17,20(r19)
1000d3e0:	9c400415 	stw	r17,16(r19)
1000d3e4:	18800054 	ori	r2,r3,1
1000d3e8:	88800115 	stw	r2,4(r17)
1000d3ec:	8a000315 	stw	r8,12(r17)
1000d3f0:	8a000215 	stw	r8,8(r17)
1000d3f4:	88e3883a 	add	r17,r17,r3
1000d3f8:	88c00015 	stw	r3,0(r17)
1000d3fc:	9009883a 	mov	r4,r18
1000d400:	00151d80 	call	100151d8 <__malloc_unlock>
1000d404:	80800204 	addi	r2,r16,8
1000d408:	00001b06 	br	1000d478 <_malloc_r+0x2a4>
1000d40c:	04400404 	movi	r17,16
1000d410:	89402536 	bltu	r17,r5,1000d4a8 <_malloc_r+0x2d4>
1000d414:	00151b40 	call	100151b4 <__malloc_lock>
1000d418:	00800184 	movi	r2,6
1000d41c:	01000084 	movi	r4,2
1000d420:	04c400b4 	movhi	r19,4098
1000d424:	1085883a 	add	r2,r2,r2
1000d428:	9ce3c704 	addi	r19,r19,-28900
1000d42c:	1085883a 	add	r2,r2,r2
1000d430:	9885883a 	add	r2,r19,r2
1000d434:	14000117 	ldw	r16,4(r2)
1000d438:	10fffe04 	addi	r3,r2,-8
1000d43c:	80c0d926 	beq	r16,r3,1000d7a4 <_malloc_r+0x5d0>
1000d440:	80c00117 	ldw	r3,4(r16)
1000d444:	81000317 	ldw	r4,12(r16)
1000d448:	00bfff04 	movi	r2,-4
1000d44c:	1884703a 	and	r2,r3,r2
1000d450:	81400217 	ldw	r5,8(r16)
1000d454:	8085883a 	add	r2,r16,r2
1000d458:	10c00117 	ldw	r3,4(r2)
1000d45c:	29000315 	stw	r4,12(r5)
1000d460:	21400215 	stw	r5,8(r4)
1000d464:	18c00054 	ori	r3,r3,1
1000d468:	10c00115 	stw	r3,4(r2)
1000d46c:	9009883a 	mov	r4,r18
1000d470:	00151d80 	call	100151d8 <__malloc_unlock>
1000d474:	80800204 	addi	r2,r16,8
1000d478:	dfc00a17 	ldw	ra,40(sp)
1000d47c:	df000917 	ldw	fp,36(sp)
1000d480:	ddc00817 	ldw	r23,32(sp)
1000d484:	dd800717 	ldw	r22,28(sp)
1000d488:	dd400617 	ldw	r21,24(sp)
1000d48c:	dd000517 	ldw	r20,20(sp)
1000d490:	dcc00417 	ldw	r19,16(sp)
1000d494:	dc800317 	ldw	r18,12(sp)
1000d498:	dc400217 	ldw	r17,8(sp)
1000d49c:	dc000117 	ldw	r16,4(sp)
1000d4a0:	dec00b04 	addi	sp,sp,44
1000d4a4:	f800283a 	ret
1000d4a8:	00800304 	movi	r2,12
1000d4ac:	90800015 	stw	r2,0(r18)
1000d4b0:	0005883a 	mov	r2,zero
1000d4b4:	003ff006 	br	1000d478 <__alt_data_end+0xf800d478>
1000d4b8:	01002004 	movi	r4,128
1000d4bc:	02001004 	movi	r8,64
1000d4c0:	01c00fc4 	movi	r7,63
1000d4c4:	003f6106 	br	1000d24c <__alt_data_end+0xf800d24c>
1000d4c8:	4009883a 	mov	r4,r8
1000d4cc:	003f7506 	br	1000d2a4 <__alt_data_end+0xf800d2a4>
1000d4d0:	81000317 	ldw	r4,12(r16)
1000d4d4:	003fde06 	br	1000d450 <__alt_data_end+0xf800d450>
1000d4d8:	81c5883a 	add	r2,r16,r7
1000d4dc:	11400117 	ldw	r5,4(r2)
1000d4e0:	9009883a 	mov	r4,r18
1000d4e4:	29400054 	ori	r5,r5,1
1000d4e8:	11400115 	stw	r5,4(r2)
1000d4ec:	00151d80 	call	100151d8 <__malloc_unlock>
1000d4f0:	80800204 	addi	r2,r16,8
1000d4f4:	003fe006 	br	1000d478 <__alt_data_end+0xf800d478>
1000d4f8:	9c000217 	ldw	r16,8(r19)
1000d4fc:	00bfff04 	movi	r2,-4
1000d500:	85800117 	ldw	r22,4(r16)
1000d504:	b0ac703a 	and	r22,r22,r2
1000d508:	b4400336 	bltu	r22,r17,1000d518 <_malloc_r+0x344>
1000d50c:	b445c83a 	sub	r2,r22,r17
1000d510:	00c003c4 	movi	r3,15
1000d514:	18805d16 	blt	r3,r2,1000d68c <_malloc_r+0x4b8>
1000d518:	05c400b4 	movhi	r23,4098
1000d51c:	008400b4 	movhi	r2,4098
1000d520:	10b0ae04 	addi	r2,r2,-15688
1000d524:	bde99704 	addi	r23,r23,-22948
1000d528:	15400017 	ldw	r21,0(r2)
1000d52c:	b8c00017 	ldw	r3,0(r23)
1000d530:	00bfffc4 	movi	r2,-1
1000d534:	858d883a 	add	r6,r16,r22
1000d538:	8d6b883a 	add	r21,r17,r21
1000d53c:	1880ea26 	beq	r3,r2,1000d8e8 <_malloc_r+0x714>
1000d540:	ad4403c4 	addi	r21,r21,4111
1000d544:	00bc0004 	movi	r2,-4096
1000d548:	a8aa703a 	and	r21,r21,r2
1000d54c:	a80b883a 	mov	r5,r21
1000d550:	9009883a 	mov	r4,r18
1000d554:	d9800015 	stw	r6,0(sp)
1000d558:	000f3f80 	call	1000f3f8 <_sbrk_r>
1000d55c:	1029883a 	mov	r20,r2
1000d560:	00bfffc4 	movi	r2,-1
1000d564:	d9800017 	ldw	r6,0(sp)
1000d568:	a080e826 	beq	r20,r2,1000d90c <_malloc_r+0x738>
1000d56c:	a180a636 	bltu	r20,r6,1000d808 <_malloc_r+0x634>
1000d570:	070400b4 	movhi	fp,4098
1000d574:	e730b704 	addi	fp,fp,-15652
1000d578:	e0800017 	ldw	r2,0(fp)
1000d57c:	a887883a 	add	r3,r21,r2
1000d580:	e0c00015 	stw	r3,0(fp)
1000d584:	3500e626 	beq	r6,r20,1000d920 <_malloc_r+0x74c>
1000d588:	b9000017 	ldw	r4,0(r23)
1000d58c:	00bfffc4 	movi	r2,-1
1000d590:	2080ee26 	beq	r4,r2,1000d94c <_malloc_r+0x778>
1000d594:	a185c83a 	sub	r2,r20,r6
1000d598:	10c5883a 	add	r2,r2,r3
1000d59c:	e0800015 	stw	r2,0(fp)
1000d5a0:	a0c001cc 	andi	r3,r20,7
1000d5a4:	1800bc26 	beq	r3,zero,1000d898 <_malloc_r+0x6c4>
1000d5a8:	a0e9c83a 	sub	r20,r20,r3
1000d5ac:	00840204 	movi	r2,4104
1000d5b0:	a5000204 	addi	r20,r20,8
1000d5b4:	10c7c83a 	sub	r3,r2,r3
1000d5b8:	a545883a 	add	r2,r20,r21
1000d5bc:	1083ffcc 	andi	r2,r2,4095
1000d5c0:	18abc83a 	sub	r21,r3,r2
1000d5c4:	a80b883a 	mov	r5,r21
1000d5c8:	9009883a 	mov	r4,r18
1000d5cc:	000f3f80 	call	1000f3f8 <_sbrk_r>
1000d5d0:	00ffffc4 	movi	r3,-1
1000d5d4:	10c0e126 	beq	r2,r3,1000d95c <_malloc_r+0x788>
1000d5d8:	1505c83a 	sub	r2,r2,r20
1000d5dc:	1545883a 	add	r2,r2,r21
1000d5e0:	10800054 	ori	r2,r2,1
1000d5e4:	e0c00017 	ldw	r3,0(fp)
1000d5e8:	9d000215 	stw	r20,8(r19)
1000d5ec:	a0800115 	stw	r2,4(r20)
1000d5f0:	a8c7883a 	add	r3,r21,r3
1000d5f4:	e0c00015 	stw	r3,0(fp)
1000d5f8:	84c00e26 	beq	r16,r19,1000d634 <_malloc_r+0x460>
1000d5fc:	018003c4 	movi	r6,15
1000d600:	3580a72e 	bgeu	r6,r22,1000d8a0 <_malloc_r+0x6cc>
1000d604:	81400117 	ldw	r5,4(r16)
1000d608:	013ffe04 	movi	r4,-8
1000d60c:	b0bffd04 	addi	r2,r22,-12
1000d610:	1104703a 	and	r2,r2,r4
1000d614:	2900004c 	andi	r4,r5,1
1000d618:	2088b03a 	or	r4,r4,r2
1000d61c:	81000115 	stw	r4,4(r16)
1000d620:	01400144 	movi	r5,5
1000d624:	8089883a 	add	r4,r16,r2
1000d628:	21400115 	stw	r5,4(r4)
1000d62c:	21400215 	stw	r5,8(r4)
1000d630:	3080cd36 	bltu	r6,r2,1000d968 <_malloc_r+0x794>
1000d634:	008400b4 	movhi	r2,4098
1000d638:	10b0ad04 	addi	r2,r2,-15692
1000d63c:	11000017 	ldw	r4,0(r2)
1000d640:	20c0012e 	bgeu	r4,r3,1000d648 <_malloc_r+0x474>
1000d644:	10c00015 	stw	r3,0(r2)
1000d648:	008400b4 	movhi	r2,4098
1000d64c:	10b0ac04 	addi	r2,r2,-15696
1000d650:	11000017 	ldw	r4,0(r2)
1000d654:	9c000217 	ldw	r16,8(r19)
1000d658:	20c0012e 	bgeu	r4,r3,1000d660 <_malloc_r+0x48c>
1000d65c:	10c00015 	stw	r3,0(r2)
1000d660:	80c00117 	ldw	r3,4(r16)
1000d664:	00bfff04 	movi	r2,-4
1000d668:	1886703a 	and	r3,r3,r2
1000d66c:	1c45c83a 	sub	r2,r3,r17
1000d670:	1c400236 	bltu	r3,r17,1000d67c <_malloc_r+0x4a8>
1000d674:	00c003c4 	movi	r3,15
1000d678:	18800416 	blt	r3,r2,1000d68c <_malloc_r+0x4b8>
1000d67c:	9009883a 	mov	r4,r18
1000d680:	00151d80 	call	100151d8 <__malloc_unlock>
1000d684:	0005883a 	mov	r2,zero
1000d688:	003f7b06 	br	1000d478 <__alt_data_end+0xf800d478>
1000d68c:	88c00054 	ori	r3,r17,1
1000d690:	80c00115 	stw	r3,4(r16)
1000d694:	8463883a 	add	r17,r16,r17
1000d698:	10800054 	ori	r2,r2,1
1000d69c:	9c400215 	stw	r17,8(r19)
1000d6a0:	88800115 	stw	r2,4(r17)
1000d6a4:	9009883a 	mov	r4,r18
1000d6a8:	00151d80 	call	100151d8 <__malloc_unlock>
1000d6ac:	80800204 	addi	r2,r16,8
1000d6b0:	003f7106 	br	1000d478 <__alt_data_end+0xf800d478>
1000d6b4:	00c00504 	movi	r3,20
1000d6b8:	18804a2e 	bgeu	r3,r2,1000d7e4 <_malloc_r+0x610>
1000d6bc:	00c01504 	movi	r3,84
1000d6c0:	18806e36 	bltu	r3,r2,1000d87c <_malloc_r+0x6a8>
1000d6c4:	8804d33a 	srli	r2,r17,12
1000d6c8:	12001bc4 	addi	r8,r2,111
1000d6cc:	11c01b84 	addi	r7,r2,110
1000d6d0:	4209883a 	add	r4,r8,r8
1000d6d4:	003edd06 	br	1000d24c <__alt_data_end+0xf800d24c>
1000d6d8:	3804d27a 	srli	r2,r7,9
1000d6dc:	00c00104 	movi	r3,4
1000d6e0:	1880442e 	bgeu	r3,r2,1000d7f4 <_malloc_r+0x620>
1000d6e4:	00c00504 	movi	r3,20
1000d6e8:	18808136 	bltu	r3,r2,1000d8f0 <_malloc_r+0x71c>
1000d6ec:	11401704 	addi	r5,r2,92
1000d6f0:	10c016c4 	addi	r3,r2,91
1000d6f4:	294b883a 	add	r5,r5,r5
1000d6f8:	294b883a 	add	r5,r5,r5
1000d6fc:	294b883a 	add	r5,r5,r5
1000d700:	994b883a 	add	r5,r19,r5
1000d704:	28800017 	ldw	r2,0(r5)
1000d708:	018400b4 	movhi	r6,4098
1000d70c:	297ffe04 	addi	r5,r5,-8
1000d710:	31a3c704 	addi	r6,r6,-28900
1000d714:	28806526 	beq	r5,r2,1000d8ac <_malloc_r+0x6d8>
1000d718:	01bfff04 	movi	r6,-4
1000d71c:	10c00117 	ldw	r3,4(r2)
1000d720:	1986703a 	and	r3,r3,r6
1000d724:	38c0022e 	bgeu	r7,r3,1000d730 <_malloc_r+0x55c>
1000d728:	10800217 	ldw	r2,8(r2)
1000d72c:	28bffb1e 	bne	r5,r2,1000d71c <__alt_data_end+0xf800d71c>
1000d730:	11400317 	ldw	r5,12(r2)
1000d734:	98c00117 	ldw	r3,4(r19)
1000d738:	81400315 	stw	r5,12(r16)
1000d73c:	80800215 	stw	r2,8(r16)
1000d740:	2c000215 	stw	r16,8(r5)
1000d744:	14000315 	stw	r16,12(r2)
1000d748:	003ef806 	br	1000d32c <__alt_data_end+0xf800d32c>
1000d74c:	88c00054 	ori	r3,r17,1
1000d750:	80c00115 	stw	r3,4(r16)
1000d754:	8463883a 	add	r17,r16,r17
1000d758:	34400515 	stw	r17,20(r6)
1000d75c:	34400415 	stw	r17,16(r6)
1000d760:	10c00054 	ori	r3,r2,1
1000d764:	8a000315 	stw	r8,12(r17)
1000d768:	8a000215 	stw	r8,8(r17)
1000d76c:	88c00115 	stw	r3,4(r17)
1000d770:	88a3883a 	add	r17,r17,r2
1000d774:	88800015 	stw	r2,0(r17)
1000d778:	9009883a 	mov	r4,r18
1000d77c:	00151d80 	call	100151d8 <__malloc_unlock>
1000d780:	80800204 	addi	r2,r16,8
1000d784:	003f3c06 	br	1000d478 <__alt_data_end+0xf800d478>
1000d788:	30c00117 	ldw	r3,4(r6)
1000d78c:	003ee706 	br	1000d32c <__alt_data_end+0xf800d32c>
1000d790:	5ac00044 	addi	r11,r11,1
1000d794:	588000cc 	andi	r2,r11,3
1000d798:	31800204 	addi	r6,r6,8
1000d79c:	103efd1e 	bne	r2,zero,1000d394 <__alt_data_end+0xf800d394>
1000d7a0:	00002406 	br	1000d834 <_malloc_r+0x660>
1000d7a4:	14000317 	ldw	r16,12(r2)
1000d7a8:	143f251e 	bne	r2,r16,1000d440 <__alt_data_end+0xf800d440>
1000d7ac:	21000084 	addi	r4,r4,2
1000d7b0:	003ebc06 	br	1000d2a4 <__alt_data_end+0xf800d2a4>
1000d7b4:	8085883a 	add	r2,r16,r2
1000d7b8:	10c00117 	ldw	r3,4(r2)
1000d7bc:	81000317 	ldw	r4,12(r16)
1000d7c0:	81400217 	ldw	r5,8(r16)
1000d7c4:	18c00054 	ori	r3,r3,1
1000d7c8:	10c00115 	stw	r3,4(r2)
1000d7cc:	29000315 	stw	r4,12(r5)
1000d7d0:	21400215 	stw	r5,8(r4)
1000d7d4:	9009883a 	mov	r4,r18
1000d7d8:	00151d80 	call	100151d8 <__malloc_unlock>
1000d7dc:	80800204 	addi	r2,r16,8
1000d7e0:	003f2506 	br	1000d478 <__alt_data_end+0xf800d478>
1000d7e4:	12001704 	addi	r8,r2,92
1000d7e8:	11c016c4 	addi	r7,r2,91
1000d7ec:	4209883a 	add	r4,r8,r8
1000d7f0:	003e9606 	br	1000d24c <__alt_data_end+0xf800d24c>
1000d7f4:	3804d1ba 	srli	r2,r7,6
1000d7f8:	11400e44 	addi	r5,r2,57
1000d7fc:	10c00e04 	addi	r3,r2,56
1000d800:	294b883a 	add	r5,r5,r5
1000d804:	003fbc06 	br	1000d6f8 <__alt_data_end+0xf800d6f8>
1000d808:	84ff5926 	beq	r16,r19,1000d570 <__alt_data_end+0xf800d570>
1000d80c:	008400b4 	movhi	r2,4098
1000d810:	10a3c704 	addi	r2,r2,-28900
1000d814:	14000217 	ldw	r16,8(r2)
1000d818:	00bfff04 	movi	r2,-4
1000d81c:	80c00117 	ldw	r3,4(r16)
1000d820:	1886703a 	and	r3,r3,r2
1000d824:	003f9106 	br	1000d66c <__alt_data_end+0xf800d66c>
1000d828:	60800217 	ldw	r2,8(r12)
1000d82c:	213fffc4 	addi	r4,r4,-1
1000d830:	1300651e 	bne	r2,r12,1000d9c8 <_malloc_r+0x7f4>
1000d834:	208000cc 	andi	r2,r4,3
1000d838:	633ffe04 	addi	r12,r12,-8
1000d83c:	103ffa1e 	bne	r2,zero,1000d828 <__alt_data_end+0xf800d828>
1000d840:	98800117 	ldw	r2,4(r19)
1000d844:	0146303a 	nor	r3,zero,r5
1000d848:	1884703a 	and	r2,r3,r2
1000d84c:	98800115 	stw	r2,4(r19)
1000d850:	294b883a 	add	r5,r5,r5
1000d854:	117f2836 	bltu	r2,r5,1000d4f8 <__alt_data_end+0xf800d4f8>
1000d858:	283f2726 	beq	r5,zero,1000d4f8 <__alt_data_end+0xf800d4f8>
1000d85c:	2886703a 	and	r3,r5,r2
1000d860:	5809883a 	mov	r4,r11
1000d864:	183ec31e 	bne	r3,zero,1000d374 <__alt_data_end+0xf800d374>
1000d868:	294b883a 	add	r5,r5,r5
1000d86c:	2886703a 	and	r3,r5,r2
1000d870:	21000104 	addi	r4,r4,4
1000d874:	183ffc26 	beq	r3,zero,1000d868 <__alt_data_end+0xf800d868>
1000d878:	003ebe06 	br	1000d374 <__alt_data_end+0xf800d374>
1000d87c:	00c05504 	movi	r3,340
1000d880:	18801236 	bltu	r3,r2,1000d8cc <_malloc_r+0x6f8>
1000d884:	8804d3fa 	srli	r2,r17,15
1000d888:	12001e04 	addi	r8,r2,120
1000d88c:	11c01dc4 	addi	r7,r2,119
1000d890:	4209883a 	add	r4,r8,r8
1000d894:	003e6d06 	br	1000d24c <__alt_data_end+0xf800d24c>
1000d898:	00c40004 	movi	r3,4096
1000d89c:	003f4606 	br	1000d5b8 <__alt_data_end+0xf800d5b8>
1000d8a0:	00800044 	movi	r2,1
1000d8a4:	a0800115 	stw	r2,4(r20)
1000d8a8:	003f7406 	br	1000d67c <__alt_data_end+0xf800d67c>
1000d8ac:	1805d0ba 	srai	r2,r3,2
1000d8b0:	01c00044 	movi	r7,1
1000d8b4:	30c00117 	ldw	r3,4(r6)
1000d8b8:	388e983a 	sll	r7,r7,r2
1000d8bc:	2805883a 	mov	r2,r5
1000d8c0:	38c6b03a 	or	r3,r7,r3
1000d8c4:	30c00115 	stw	r3,4(r6)
1000d8c8:	003f9b06 	br	1000d738 <__alt_data_end+0xf800d738>
1000d8cc:	00c15504 	movi	r3,1364
1000d8d0:	18801a36 	bltu	r3,r2,1000d93c <_malloc_r+0x768>
1000d8d4:	8804d4ba 	srli	r2,r17,18
1000d8d8:	12001f44 	addi	r8,r2,125
1000d8dc:	11c01f04 	addi	r7,r2,124
1000d8e0:	4209883a 	add	r4,r8,r8
1000d8e4:	003e5906 	br	1000d24c <__alt_data_end+0xf800d24c>
1000d8e8:	ad400404 	addi	r21,r21,16
1000d8ec:	003f1706 	br	1000d54c <__alt_data_end+0xf800d54c>
1000d8f0:	00c01504 	movi	r3,84
1000d8f4:	18802336 	bltu	r3,r2,1000d984 <_malloc_r+0x7b0>
1000d8f8:	3804d33a 	srli	r2,r7,12
1000d8fc:	11401bc4 	addi	r5,r2,111
1000d900:	10c01b84 	addi	r3,r2,110
1000d904:	294b883a 	add	r5,r5,r5
1000d908:	003f7b06 	br	1000d6f8 <__alt_data_end+0xf800d6f8>
1000d90c:	9c000217 	ldw	r16,8(r19)
1000d910:	00bfff04 	movi	r2,-4
1000d914:	80c00117 	ldw	r3,4(r16)
1000d918:	1886703a 	and	r3,r3,r2
1000d91c:	003f5306 	br	1000d66c <__alt_data_end+0xf800d66c>
1000d920:	3083ffcc 	andi	r2,r6,4095
1000d924:	103f181e 	bne	r2,zero,1000d588 <__alt_data_end+0xf800d588>
1000d928:	99000217 	ldw	r4,8(r19)
1000d92c:	b545883a 	add	r2,r22,r21
1000d930:	10800054 	ori	r2,r2,1
1000d934:	20800115 	stw	r2,4(r4)
1000d938:	003f3e06 	br	1000d634 <__alt_data_end+0xf800d634>
1000d93c:	01003f84 	movi	r4,254
1000d940:	02001fc4 	movi	r8,127
1000d944:	01c01f84 	movi	r7,126
1000d948:	003e4006 	br	1000d24c <__alt_data_end+0xf800d24c>
1000d94c:	008400b4 	movhi	r2,4098
1000d950:	10a99704 	addi	r2,r2,-22948
1000d954:	15000015 	stw	r20,0(r2)
1000d958:	003f1106 	br	1000d5a0 <__alt_data_end+0xf800d5a0>
1000d95c:	00800044 	movi	r2,1
1000d960:	002b883a 	mov	r21,zero
1000d964:	003f1f06 	br	1000d5e4 <__alt_data_end+0xf800d5e4>
1000d968:	81400204 	addi	r5,r16,8
1000d96c:	9009883a 	mov	r4,r18
1000d970:	000c5dc0 	call	1000c5dc <_free_r>
1000d974:	008400b4 	movhi	r2,4098
1000d978:	10b0b704 	addi	r2,r2,-15652
1000d97c:	10c00017 	ldw	r3,0(r2)
1000d980:	003f2c06 	br	1000d634 <__alt_data_end+0xf800d634>
1000d984:	00c05504 	movi	r3,340
1000d988:	18800536 	bltu	r3,r2,1000d9a0 <_malloc_r+0x7cc>
1000d98c:	3804d3fa 	srli	r2,r7,15
1000d990:	11401e04 	addi	r5,r2,120
1000d994:	10c01dc4 	addi	r3,r2,119
1000d998:	294b883a 	add	r5,r5,r5
1000d99c:	003f5606 	br	1000d6f8 <__alt_data_end+0xf800d6f8>
1000d9a0:	00c15504 	movi	r3,1364
1000d9a4:	18800536 	bltu	r3,r2,1000d9bc <_malloc_r+0x7e8>
1000d9a8:	3804d4ba 	srli	r2,r7,18
1000d9ac:	11401f44 	addi	r5,r2,125
1000d9b0:	10c01f04 	addi	r3,r2,124
1000d9b4:	294b883a 	add	r5,r5,r5
1000d9b8:	003f4f06 	br	1000d6f8 <__alt_data_end+0xf800d6f8>
1000d9bc:	01403f84 	movi	r5,254
1000d9c0:	00c01f84 	movi	r3,126
1000d9c4:	003f4c06 	br	1000d6f8 <__alt_data_end+0xf800d6f8>
1000d9c8:	98800117 	ldw	r2,4(r19)
1000d9cc:	003fa006 	br	1000d850 <__alt_data_end+0xf800d850>
1000d9d0:	8808d0fa 	srli	r4,r17,3
1000d9d4:	20800044 	addi	r2,r4,1
1000d9d8:	1085883a 	add	r2,r2,r2
1000d9dc:	003e9006 	br	1000d420 <__alt_data_end+0xf800d420>

1000d9e0 <memchr>:
1000d9e0:	208000cc 	andi	r2,r4,3
1000d9e4:	280f883a 	mov	r7,r5
1000d9e8:	10003426 	beq	r2,zero,1000dabc <memchr+0xdc>
1000d9ec:	30bfffc4 	addi	r2,r6,-1
1000d9f0:	30001a26 	beq	r6,zero,1000da5c <memchr+0x7c>
1000d9f4:	20c00003 	ldbu	r3,0(r4)
1000d9f8:	29803fcc 	andi	r6,r5,255
1000d9fc:	30c0051e 	bne	r6,r3,1000da14 <memchr+0x34>
1000da00:	00001806 	br	1000da64 <memchr+0x84>
1000da04:	10001526 	beq	r2,zero,1000da5c <memchr+0x7c>
1000da08:	20c00003 	ldbu	r3,0(r4)
1000da0c:	10bfffc4 	addi	r2,r2,-1
1000da10:	30c01426 	beq	r6,r3,1000da64 <memchr+0x84>
1000da14:	21000044 	addi	r4,r4,1
1000da18:	20c000cc 	andi	r3,r4,3
1000da1c:	183ff91e 	bne	r3,zero,1000da04 <__alt_data_end+0xf800da04>
1000da20:	020000c4 	movi	r8,3
1000da24:	40801136 	bltu	r8,r2,1000da6c <memchr+0x8c>
1000da28:	10000c26 	beq	r2,zero,1000da5c <memchr+0x7c>
1000da2c:	20c00003 	ldbu	r3,0(r4)
1000da30:	29403fcc 	andi	r5,r5,255
1000da34:	28c00b26 	beq	r5,r3,1000da64 <memchr+0x84>
1000da38:	20c00044 	addi	r3,r4,1
1000da3c:	39803fcc 	andi	r6,r7,255
1000da40:	2089883a 	add	r4,r4,r2
1000da44:	00000306 	br	1000da54 <memchr+0x74>
1000da48:	18c00044 	addi	r3,r3,1
1000da4c:	197fffc3 	ldbu	r5,-1(r3)
1000da50:	31400526 	beq	r6,r5,1000da68 <memchr+0x88>
1000da54:	1805883a 	mov	r2,r3
1000da58:	20fffb1e 	bne	r4,r3,1000da48 <__alt_data_end+0xf800da48>
1000da5c:	0005883a 	mov	r2,zero
1000da60:	f800283a 	ret
1000da64:	2005883a 	mov	r2,r4
1000da68:	f800283a 	ret
1000da6c:	28c03fcc 	andi	r3,r5,255
1000da70:	1812923a 	slli	r9,r3,8
1000da74:	02ffbff4 	movhi	r11,65279
1000da78:	02a02074 	movhi	r10,32897
1000da7c:	48d2b03a 	or	r9,r9,r3
1000da80:	4806943a 	slli	r3,r9,16
1000da84:	5affbfc4 	addi	r11,r11,-257
1000da88:	52a02004 	addi	r10,r10,-32640
1000da8c:	48d2b03a 	or	r9,r9,r3
1000da90:	20c00017 	ldw	r3,0(r4)
1000da94:	48c6f03a 	xor	r3,r9,r3
1000da98:	1acd883a 	add	r6,r3,r11
1000da9c:	00c6303a 	nor	r3,zero,r3
1000daa0:	30c6703a 	and	r3,r6,r3
1000daa4:	1a86703a 	and	r3,r3,r10
1000daa8:	183fe01e 	bne	r3,zero,1000da2c <__alt_data_end+0xf800da2c>
1000daac:	10bfff04 	addi	r2,r2,-4
1000dab0:	21000104 	addi	r4,r4,4
1000dab4:	40bff636 	bltu	r8,r2,1000da90 <__alt_data_end+0xf800da90>
1000dab8:	003fdb06 	br	1000da28 <__alt_data_end+0xf800da28>
1000dabc:	3005883a 	mov	r2,r6
1000dac0:	003fd706 	br	1000da20 <__alt_data_end+0xf800da20>

1000dac4 <memcpy>:
1000dac4:	defffd04 	addi	sp,sp,-12
1000dac8:	dfc00215 	stw	ra,8(sp)
1000dacc:	dc400115 	stw	r17,4(sp)
1000dad0:	dc000015 	stw	r16,0(sp)
1000dad4:	00c003c4 	movi	r3,15
1000dad8:	2005883a 	mov	r2,r4
1000dadc:	1980452e 	bgeu	r3,r6,1000dbf4 <memcpy+0x130>
1000dae0:	2906b03a 	or	r3,r5,r4
1000dae4:	18c000cc 	andi	r3,r3,3
1000dae8:	1800441e 	bne	r3,zero,1000dbfc <memcpy+0x138>
1000daec:	347ffc04 	addi	r17,r6,-16
1000daf0:	8822d13a 	srli	r17,r17,4
1000daf4:	28c00104 	addi	r3,r5,4
1000daf8:	23400104 	addi	r13,r4,4
1000dafc:	8820913a 	slli	r16,r17,4
1000db00:	2b000204 	addi	r12,r5,8
1000db04:	22c00204 	addi	r11,r4,8
1000db08:	84000504 	addi	r16,r16,20
1000db0c:	2a800304 	addi	r10,r5,12
1000db10:	22400304 	addi	r9,r4,12
1000db14:	2c21883a 	add	r16,r5,r16
1000db18:	2811883a 	mov	r8,r5
1000db1c:	200f883a 	mov	r7,r4
1000db20:	41000017 	ldw	r4,0(r8)
1000db24:	1fc00017 	ldw	ra,0(r3)
1000db28:	63c00017 	ldw	r15,0(r12)
1000db2c:	39000015 	stw	r4,0(r7)
1000db30:	53800017 	ldw	r14,0(r10)
1000db34:	6fc00015 	stw	ra,0(r13)
1000db38:	5bc00015 	stw	r15,0(r11)
1000db3c:	4b800015 	stw	r14,0(r9)
1000db40:	18c00404 	addi	r3,r3,16
1000db44:	39c00404 	addi	r7,r7,16
1000db48:	42000404 	addi	r8,r8,16
1000db4c:	6b400404 	addi	r13,r13,16
1000db50:	63000404 	addi	r12,r12,16
1000db54:	5ac00404 	addi	r11,r11,16
1000db58:	52800404 	addi	r10,r10,16
1000db5c:	4a400404 	addi	r9,r9,16
1000db60:	1c3fef1e 	bne	r3,r16,1000db20 <__alt_data_end+0xf800db20>
1000db64:	89c00044 	addi	r7,r17,1
1000db68:	380e913a 	slli	r7,r7,4
1000db6c:	310003cc 	andi	r4,r6,15
1000db70:	02c000c4 	movi	r11,3
1000db74:	11c7883a 	add	r3,r2,r7
1000db78:	29cb883a 	add	r5,r5,r7
1000db7c:	5900212e 	bgeu	r11,r4,1000dc04 <memcpy+0x140>
1000db80:	1813883a 	mov	r9,r3
1000db84:	2811883a 	mov	r8,r5
1000db88:	200f883a 	mov	r7,r4
1000db8c:	42800017 	ldw	r10,0(r8)
1000db90:	4a400104 	addi	r9,r9,4
1000db94:	39ffff04 	addi	r7,r7,-4
1000db98:	4abfff15 	stw	r10,-4(r9)
1000db9c:	42000104 	addi	r8,r8,4
1000dba0:	59fffa36 	bltu	r11,r7,1000db8c <__alt_data_end+0xf800db8c>
1000dba4:	213fff04 	addi	r4,r4,-4
1000dba8:	2008d0ba 	srli	r4,r4,2
1000dbac:	318000cc 	andi	r6,r6,3
1000dbb0:	21000044 	addi	r4,r4,1
1000dbb4:	2109883a 	add	r4,r4,r4
1000dbb8:	2109883a 	add	r4,r4,r4
1000dbbc:	1907883a 	add	r3,r3,r4
1000dbc0:	290b883a 	add	r5,r5,r4
1000dbc4:	30000626 	beq	r6,zero,1000dbe0 <memcpy+0x11c>
1000dbc8:	198d883a 	add	r6,r3,r6
1000dbcc:	29c00003 	ldbu	r7,0(r5)
1000dbd0:	18c00044 	addi	r3,r3,1
1000dbd4:	29400044 	addi	r5,r5,1
1000dbd8:	19ffffc5 	stb	r7,-1(r3)
1000dbdc:	19bffb1e 	bne	r3,r6,1000dbcc <__alt_data_end+0xf800dbcc>
1000dbe0:	dfc00217 	ldw	ra,8(sp)
1000dbe4:	dc400117 	ldw	r17,4(sp)
1000dbe8:	dc000017 	ldw	r16,0(sp)
1000dbec:	dec00304 	addi	sp,sp,12
1000dbf0:	f800283a 	ret
1000dbf4:	2007883a 	mov	r3,r4
1000dbf8:	003ff206 	br	1000dbc4 <__alt_data_end+0xf800dbc4>
1000dbfc:	2007883a 	mov	r3,r4
1000dc00:	003ff106 	br	1000dbc8 <__alt_data_end+0xf800dbc8>
1000dc04:	200d883a 	mov	r6,r4
1000dc08:	003fee06 	br	1000dbc4 <__alt_data_end+0xf800dbc4>

1000dc0c <memmove>:
1000dc0c:	2005883a 	mov	r2,r4
1000dc10:	29000b2e 	bgeu	r5,r4,1000dc40 <memmove+0x34>
1000dc14:	298f883a 	add	r7,r5,r6
1000dc18:	21c0092e 	bgeu	r4,r7,1000dc40 <memmove+0x34>
1000dc1c:	2187883a 	add	r3,r4,r6
1000dc20:	198bc83a 	sub	r5,r3,r6
1000dc24:	30004826 	beq	r6,zero,1000dd48 <memmove+0x13c>
1000dc28:	39ffffc4 	addi	r7,r7,-1
1000dc2c:	39000003 	ldbu	r4,0(r7)
1000dc30:	18ffffc4 	addi	r3,r3,-1
1000dc34:	19000005 	stb	r4,0(r3)
1000dc38:	28fffb1e 	bne	r5,r3,1000dc28 <__alt_data_end+0xf800dc28>
1000dc3c:	f800283a 	ret
1000dc40:	00c003c4 	movi	r3,15
1000dc44:	1980412e 	bgeu	r3,r6,1000dd4c <memmove+0x140>
1000dc48:	2886b03a 	or	r3,r5,r2
1000dc4c:	18c000cc 	andi	r3,r3,3
1000dc50:	1800401e 	bne	r3,zero,1000dd54 <memmove+0x148>
1000dc54:	33fffc04 	addi	r15,r6,-16
1000dc58:	781ed13a 	srli	r15,r15,4
1000dc5c:	28c00104 	addi	r3,r5,4
1000dc60:	13400104 	addi	r13,r2,4
1000dc64:	781c913a 	slli	r14,r15,4
1000dc68:	2b000204 	addi	r12,r5,8
1000dc6c:	12c00204 	addi	r11,r2,8
1000dc70:	73800504 	addi	r14,r14,20
1000dc74:	2a800304 	addi	r10,r5,12
1000dc78:	12400304 	addi	r9,r2,12
1000dc7c:	2b9d883a 	add	r14,r5,r14
1000dc80:	2811883a 	mov	r8,r5
1000dc84:	100f883a 	mov	r7,r2
1000dc88:	41000017 	ldw	r4,0(r8)
1000dc8c:	39c00404 	addi	r7,r7,16
1000dc90:	18c00404 	addi	r3,r3,16
1000dc94:	393ffc15 	stw	r4,-16(r7)
1000dc98:	193ffc17 	ldw	r4,-16(r3)
1000dc9c:	6b400404 	addi	r13,r13,16
1000dca0:	5ac00404 	addi	r11,r11,16
1000dca4:	693ffc15 	stw	r4,-16(r13)
1000dca8:	61000017 	ldw	r4,0(r12)
1000dcac:	4a400404 	addi	r9,r9,16
1000dcb0:	42000404 	addi	r8,r8,16
1000dcb4:	593ffc15 	stw	r4,-16(r11)
1000dcb8:	51000017 	ldw	r4,0(r10)
1000dcbc:	63000404 	addi	r12,r12,16
1000dcc0:	52800404 	addi	r10,r10,16
1000dcc4:	493ffc15 	stw	r4,-16(r9)
1000dcc8:	1bbfef1e 	bne	r3,r14,1000dc88 <__alt_data_end+0xf800dc88>
1000dccc:	79000044 	addi	r4,r15,1
1000dcd0:	2008913a 	slli	r4,r4,4
1000dcd4:	328003cc 	andi	r10,r6,15
1000dcd8:	02c000c4 	movi	r11,3
1000dcdc:	1107883a 	add	r3,r2,r4
1000dce0:	290b883a 	add	r5,r5,r4
1000dce4:	5a801e2e 	bgeu	r11,r10,1000dd60 <memmove+0x154>
1000dce8:	1813883a 	mov	r9,r3
1000dcec:	2811883a 	mov	r8,r5
1000dcf0:	500f883a 	mov	r7,r10
1000dcf4:	41000017 	ldw	r4,0(r8)
1000dcf8:	4a400104 	addi	r9,r9,4
1000dcfc:	39ffff04 	addi	r7,r7,-4
1000dd00:	493fff15 	stw	r4,-4(r9)
1000dd04:	42000104 	addi	r8,r8,4
1000dd08:	59fffa36 	bltu	r11,r7,1000dcf4 <__alt_data_end+0xf800dcf4>
1000dd0c:	513fff04 	addi	r4,r10,-4
1000dd10:	2008d0ba 	srli	r4,r4,2
1000dd14:	318000cc 	andi	r6,r6,3
1000dd18:	21000044 	addi	r4,r4,1
1000dd1c:	2109883a 	add	r4,r4,r4
1000dd20:	2109883a 	add	r4,r4,r4
1000dd24:	1907883a 	add	r3,r3,r4
1000dd28:	290b883a 	add	r5,r5,r4
1000dd2c:	30000b26 	beq	r6,zero,1000dd5c <memmove+0x150>
1000dd30:	198d883a 	add	r6,r3,r6
1000dd34:	29c00003 	ldbu	r7,0(r5)
1000dd38:	18c00044 	addi	r3,r3,1
1000dd3c:	29400044 	addi	r5,r5,1
1000dd40:	19ffffc5 	stb	r7,-1(r3)
1000dd44:	19bffb1e 	bne	r3,r6,1000dd34 <__alt_data_end+0xf800dd34>
1000dd48:	f800283a 	ret
1000dd4c:	1007883a 	mov	r3,r2
1000dd50:	003ff606 	br	1000dd2c <__alt_data_end+0xf800dd2c>
1000dd54:	1007883a 	mov	r3,r2
1000dd58:	003ff506 	br	1000dd30 <__alt_data_end+0xf800dd30>
1000dd5c:	f800283a 	ret
1000dd60:	500d883a 	mov	r6,r10
1000dd64:	003ff106 	br	1000dd2c <__alt_data_end+0xf800dd2c>

1000dd68 <_Balloc>:
1000dd68:	20801317 	ldw	r2,76(r4)
1000dd6c:	defffc04 	addi	sp,sp,-16
1000dd70:	dc400115 	stw	r17,4(sp)
1000dd74:	dc000015 	stw	r16,0(sp)
1000dd78:	dfc00315 	stw	ra,12(sp)
1000dd7c:	dc800215 	stw	r18,8(sp)
1000dd80:	2023883a 	mov	r17,r4
1000dd84:	2821883a 	mov	r16,r5
1000dd88:	10000f26 	beq	r2,zero,1000ddc8 <_Balloc+0x60>
1000dd8c:	8407883a 	add	r3,r16,r16
1000dd90:	18c7883a 	add	r3,r3,r3
1000dd94:	10c7883a 	add	r3,r2,r3
1000dd98:	18800017 	ldw	r2,0(r3)
1000dd9c:	10001126 	beq	r2,zero,1000dde4 <_Balloc+0x7c>
1000dda0:	11000017 	ldw	r4,0(r2)
1000dda4:	19000015 	stw	r4,0(r3)
1000dda8:	10000415 	stw	zero,16(r2)
1000ddac:	10000315 	stw	zero,12(r2)
1000ddb0:	dfc00317 	ldw	ra,12(sp)
1000ddb4:	dc800217 	ldw	r18,8(sp)
1000ddb8:	dc400117 	ldw	r17,4(sp)
1000ddbc:	dc000017 	ldw	r16,0(sp)
1000ddc0:	dec00404 	addi	sp,sp,16
1000ddc4:	f800283a 	ret
1000ddc8:	01800844 	movi	r6,33
1000ddcc:	01400104 	movi	r5,4
1000ddd0:	0010e100 	call	10010e10 <_calloc_r>
1000ddd4:	88801315 	stw	r2,76(r17)
1000ddd8:	103fec1e 	bne	r2,zero,1000dd8c <__alt_data_end+0xf800dd8c>
1000dddc:	0005883a 	mov	r2,zero
1000dde0:	003ff306 	br	1000ddb0 <__alt_data_end+0xf800ddb0>
1000dde4:	01400044 	movi	r5,1
1000dde8:	2c24983a 	sll	r18,r5,r16
1000ddec:	8809883a 	mov	r4,r17
1000ddf0:	91800144 	addi	r6,r18,5
1000ddf4:	318d883a 	add	r6,r6,r6
1000ddf8:	318d883a 	add	r6,r6,r6
1000ddfc:	0010e100 	call	10010e10 <_calloc_r>
1000de00:	103ff626 	beq	r2,zero,1000dddc <__alt_data_end+0xf800dddc>
1000de04:	14000115 	stw	r16,4(r2)
1000de08:	14800215 	stw	r18,8(r2)
1000de0c:	003fe606 	br	1000dda8 <__alt_data_end+0xf800dda8>

1000de10 <_Bfree>:
1000de10:	28000826 	beq	r5,zero,1000de34 <_Bfree+0x24>
1000de14:	28c00117 	ldw	r3,4(r5)
1000de18:	20801317 	ldw	r2,76(r4)
1000de1c:	18c7883a 	add	r3,r3,r3
1000de20:	18c7883a 	add	r3,r3,r3
1000de24:	10c5883a 	add	r2,r2,r3
1000de28:	10c00017 	ldw	r3,0(r2)
1000de2c:	28c00015 	stw	r3,0(r5)
1000de30:	11400015 	stw	r5,0(r2)
1000de34:	f800283a 	ret

1000de38 <__multadd>:
1000de38:	defff704 	addi	sp,sp,-36
1000de3c:	dc800215 	stw	r18,8(sp)
1000de40:	2c800417 	ldw	r18,16(r5)
1000de44:	dd800615 	stw	r22,24(sp)
1000de48:	dd400515 	stw	r21,20(sp)
1000de4c:	dd000415 	stw	r20,16(sp)
1000de50:	dcc00315 	stw	r19,12(sp)
1000de54:	dc400115 	stw	r17,4(sp)
1000de58:	dc000015 	stw	r16,0(sp)
1000de5c:	dfc00815 	stw	ra,32(sp)
1000de60:	ddc00715 	stw	r23,28(sp)
1000de64:	2827883a 	mov	r19,r5
1000de68:	2029883a 	mov	r20,r4
1000de6c:	3023883a 	mov	r17,r6
1000de70:	3821883a 	mov	r16,r7
1000de74:	2d400504 	addi	r21,r5,20
1000de78:	002d883a 	mov	r22,zero
1000de7c:	adc00017 	ldw	r23,0(r21)
1000de80:	880b883a 	mov	r5,r17
1000de84:	ad400104 	addi	r21,r21,4
1000de88:	b93fffcc 	andi	r4,r23,65535
1000de8c:	0007d040 	call	10007d04 <__mulsi3>
1000de90:	b808d43a 	srli	r4,r23,16
1000de94:	880b883a 	mov	r5,r17
1000de98:	1421883a 	add	r16,r2,r16
1000de9c:	0007d040 	call	10007d04 <__mulsi3>
1000dea0:	800ed43a 	srli	r7,r16,16
1000dea4:	80ffffcc 	andi	r3,r16,65535
1000dea8:	b5800044 	addi	r22,r22,1
1000deac:	11c5883a 	add	r2,r2,r7
1000deb0:	100e943a 	slli	r7,r2,16
1000deb4:	1020d43a 	srli	r16,r2,16
1000deb8:	38c7883a 	add	r3,r7,r3
1000debc:	a8ffff15 	stw	r3,-4(r21)
1000dec0:	b4bfee16 	blt	r22,r18,1000de7c <__alt_data_end+0xf800de7c>
1000dec4:	80000926 	beq	r16,zero,1000deec <__multadd+0xb4>
1000dec8:	98800217 	ldw	r2,8(r19)
1000decc:	9080130e 	bge	r18,r2,1000df1c <__multadd+0xe4>
1000ded0:	90800144 	addi	r2,r18,5
1000ded4:	1085883a 	add	r2,r2,r2
1000ded8:	1085883a 	add	r2,r2,r2
1000dedc:	9885883a 	add	r2,r19,r2
1000dee0:	14000015 	stw	r16,0(r2)
1000dee4:	94800044 	addi	r18,r18,1
1000dee8:	9c800415 	stw	r18,16(r19)
1000deec:	9805883a 	mov	r2,r19
1000def0:	dfc00817 	ldw	ra,32(sp)
1000def4:	ddc00717 	ldw	r23,28(sp)
1000def8:	dd800617 	ldw	r22,24(sp)
1000defc:	dd400517 	ldw	r21,20(sp)
1000df00:	dd000417 	ldw	r20,16(sp)
1000df04:	dcc00317 	ldw	r19,12(sp)
1000df08:	dc800217 	ldw	r18,8(sp)
1000df0c:	dc400117 	ldw	r17,4(sp)
1000df10:	dc000017 	ldw	r16,0(sp)
1000df14:	dec00904 	addi	sp,sp,36
1000df18:	f800283a 	ret
1000df1c:	99400117 	ldw	r5,4(r19)
1000df20:	a009883a 	mov	r4,r20
1000df24:	29400044 	addi	r5,r5,1
1000df28:	000dd680 	call	1000dd68 <_Balloc>
1000df2c:	99800417 	ldw	r6,16(r19)
1000df30:	99400304 	addi	r5,r19,12
1000df34:	11000304 	addi	r4,r2,12
1000df38:	31800084 	addi	r6,r6,2
1000df3c:	318d883a 	add	r6,r6,r6
1000df40:	318d883a 	add	r6,r6,r6
1000df44:	1023883a 	mov	r17,r2
1000df48:	000dac40 	call	1000dac4 <memcpy>
1000df4c:	98000a26 	beq	r19,zero,1000df78 <__multadd+0x140>
1000df50:	98c00117 	ldw	r3,4(r19)
1000df54:	a0801317 	ldw	r2,76(r20)
1000df58:	18c7883a 	add	r3,r3,r3
1000df5c:	18c7883a 	add	r3,r3,r3
1000df60:	10c5883a 	add	r2,r2,r3
1000df64:	10c00017 	ldw	r3,0(r2)
1000df68:	98c00015 	stw	r3,0(r19)
1000df6c:	14c00015 	stw	r19,0(r2)
1000df70:	8827883a 	mov	r19,r17
1000df74:	003fd606 	br	1000ded0 <__alt_data_end+0xf800ded0>
1000df78:	8827883a 	mov	r19,r17
1000df7c:	003fd406 	br	1000ded0 <__alt_data_end+0xf800ded0>

1000df80 <__s2b>:
1000df80:	defff904 	addi	sp,sp,-28
1000df84:	dc400115 	stw	r17,4(sp)
1000df88:	dc000015 	stw	r16,0(sp)
1000df8c:	2023883a 	mov	r17,r4
1000df90:	2821883a 	mov	r16,r5
1000df94:	39000204 	addi	r4,r7,8
1000df98:	01400244 	movi	r5,9
1000df9c:	dcc00315 	stw	r19,12(sp)
1000dfa0:	dc800215 	stw	r18,8(sp)
1000dfa4:	dfc00615 	stw	ra,24(sp)
1000dfa8:	dd400515 	stw	r21,20(sp)
1000dfac:	dd000415 	stw	r20,16(sp)
1000dfb0:	3825883a 	mov	r18,r7
1000dfb4:	3027883a 	mov	r19,r6
1000dfb8:	0007b500 	call	10007b50 <__divsi3>
1000dfbc:	00c00044 	movi	r3,1
1000dfc0:	000b883a 	mov	r5,zero
1000dfc4:	1880030e 	bge	r3,r2,1000dfd4 <__s2b+0x54>
1000dfc8:	18c7883a 	add	r3,r3,r3
1000dfcc:	29400044 	addi	r5,r5,1
1000dfd0:	18bffd16 	blt	r3,r2,1000dfc8 <__alt_data_end+0xf800dfc8>
1000dfd4:	8809883a 	mov	r4,r17
1000dfd8:	000dd680 	call	1000dd68 <_Balloc>
1000dfdc:	d8c00717 	ldw	r3,28(sp)
1000dfe0:	10c00515 	stw	r3,20(r2)
1000dfe4:	00c00044 	movi	r3,1
1000dfe8:	10c00415 	stw	r3,16(r2)
1000dfec:	00c00244 	movi	r3,9
1000dff0:	1cc0210e 	bge	r3,r19,1000e078 <__s2b+0xf8>
1000dff4:	80eb883a 	add	r21,r16,r3
1000dff8:	a829883a 	mov	r20,r21
1000dffc:	84e1883a 	add	r16,r16,r19
1000e000:	a1c00007 	ldb	r7,0(r20)
1000e004:	01800284 	movi	r6,10
1000e008:	a5000044 	addi	r20,r20,1
1000e00c:	100b883a 	mov	r5,r2
1000e010:	39fff404 	addi	r7,r7,-48
1000e014:	8809883a 	mov	r4,r17
1000e018:	000de380 	call	1000de38 <__multadd>
1000e01c:	a43ff81e 	bne	r20,r16,1000e000 <__alt_data_end+0xf800e000>
1000e020:	ace1883a 	add	r16,r21,r19
1000e024:	843ffe04 	addi	r16,r16,-8
1000e028:	9c800a0e 	bge	r19,r18,1000e054 <__s2b+0xd4>
1000e02c:	94e5c83a 	sub	r18,r18,r19
1000e030:	84a5883a 	add	r18,r16,r18
1000e034:	81c00007 	ldb	r7,0(r16)
1000e038:	01800284 	movi	r6,10
1000e03c:	84000044 	addi	r16,r16,1
1000e040:	100b883a 	mov	r5,r2
1000e044:	39fff404 	addi	r7,r7,-48
1000e048:	8809883a 	mov	r4,r17
1000e04c:	000de380 	call	1000de38 <__multadd>
1000e050:	84bff81e 	bne	r16,r18,1000e034 <__alt_data_end+0xf800e034>
1000e054:	dfc00617 	ldw	ra,24(sp)
1000e058:	dd400517 	ldw	r21,20(sp)
1000e05c:	dd000417 	ldw	r20,16(sp)
1000e060:	dcc00317 	ldw	r19,12(sp)
1000e064:	dc800217 	ldw	r18,8(sp)
1000e068:	dc400117 	ldw	r17,4(sp)
1000e06c:	dc000017 	ldw	r16,0(sp)
1000e070:	dec00704 	addi	sp,sp,28
1000e074:	f800283a 	ret
1000e078:	84000284 	addi	r16,r16,10
1000e07c:	1827883a 	mov	r19,r3
1000e080:	003fe906 	br	1000e028 <__alt_data_end+0xf800e028>

1000e084 <__hi0bits>:
1000e084:	20bfffec 	andhi	r2,r4,65535
1000e088:	1000141e 	bne	r2,zero,1000e0dc <__hi0bits+0x58>
1000e08c:	2008943a 	slli	r4,r4,16
1000e090:	00800404 	movi	r2,16
1000e094:	20ffc02c 	andhi	r3,r4,65280
1000e098:	1800021e 	bne	r3,zero,1000e0a4 <__hi0bits+0x20>
1000e09c:	2008923a 	slli	r4,r4,8
1000e0a0:	10800204 	addi	r2,r2,8
1000e0a4:	20fc002c 	andhi	r3,r4,61440
1000e0a8:	1800021e 	bne	r3,zero,1000e0b4 <__hi0bits+0x30>
1000e0ac:	2008913a 	slli	r4,r4,4
1000e0b0:	10800104 	addi	r2,r2,4
1000e0b4:	20f0002c 	andhi	r3,r4,49152
1000e0b8:	1800031e 	bne	r3,zero,1000e0c8 <__hi0bits+0x44>
1000e0bc:	2109883a 	add	r4,r4,r4
1000e0c0:	10800084 	addi	r2,r2,2
1000e0c4:	2109883a 	add	r4,r4,r4
1000e0c8:	20000316 	blt	r4,zero,1000e0d8 <__hi0bits+0x54>
1000e0cc:	2110002c 	andhi	r4,r4,16384
1000e0d0:	2000041e 	bne	r4,zero,1000e0e4 <__hi0bits+0x60>
1000e0d4:	00800804 	movi	r2,32
1000e0d8:	f800283a 	ret
1000e0dc:	0005883a 	mov	r2,zero
1000e0e0:	003fec06 	br	1000e094 <__alt_data_end+0xf800e094>
1000e0e4:	10800044 	addi	r2,r2,1
1000e0e8:	f800283a 	ret

1000e0ec <__lo0bits>:
1000e0ec:	20c00017 	ldw	r3,0(r4)
1000e0f0:	188001cc 	andi	r2,r3,7
1000e0f4:	10000826 	beq	r2,zero,1000e118 <__lo0bits+0x2c>
1000e0f8:	1880004c 	andi	r2,r3,1
1000e0fc:	1000211e 	bne	r2,zero,1000e184 <__lo0bits+0x98>
1000e100:	1880008c 	andi	r2,r3,2
1000e104:	1000211e 	bne	r2,zero,1000e18c <__lo0bits+0xa0>
1000e108:	1806d0ba 	srli	r3,r3,2
1000e10c:	00800084 	movi	r2,2
1000e110:	20c00015 	stw	r3,0(r4)
1000e114:	f800283a 	ret
1000e118:	18bfffcc 	andi	r2,r3,65535
1000e11c:	10001326 	beq	r2,zero,1000e16c <__lo0bits+0x80>
1000e120:	0005883a 	mov	r2,zero
1000e124:	19403fcc 	andi	r5,r3,255
1000e128:	2800021e 	bne	r5,zero,1000e134 <__lo0bits+0x48>
1000e12c:	1806d23a 	srli	r3,r3,8
1000e130:	10800204 	addi	r2,r2,8
1000e134:	194003cc 	andi	r5,r3,15
1000e138:	2800021e 	bne	r5,zero,1000e144 <__lo0bits+0x58>
1000e13c:	1806d13a 	srli	r3,r3,4
1000e140:	10800104 	addi	r2,r2,4
1000e144:	194000cc 	andi	r5,r3,3
1000e148:	2800021e 	bne	r5,zero,1000e154 <__lo0bits+0x68>
1000e14c:	1806d0ba 	srli	r3,r3,2
1000e150:	10800084 	addi	r2,r2,2
1000e154:	1940004c 	andi	r5,r3,1
1000e158:	2800081e 	bne	r5,zero,1000e17c <__lo0bits+0x90>
1000e15c:	1806d07a 	srli	r3,r3,1
1000e160:	1800051e 	bne	r3,zero,1000e178 <__lo0bits+0x8c>
1000e164:	00800804 	movi	r2,32
1000e168:	f800283a 	ret
1000e16c:	1806d43a 	srli	r3,r3,16
1000e170:	00800404 	movi	r2,16
1000e174:	003feb06 	br	1000e124 <__alt_data_end+0xf800e124>
1000e178:	10800044 	addi	r2,r2,1
1000e17c:	20c00015 	stw	r3,0(r4)
1000e180:	f800283a 	ret
1000e184:	0005883a 	mov	r2,zero
1000e188:	f800283a 	ret
1000e18c:	1806d07a 	srli	r3,r3,1
1000e190:	00800044 	movi	r2,1
1000e194:	20c00015 	stw	r3,0(r4)
1000e198:	f800283a 	ret

1000e19c <__i2b>:
1000e19c:	defffd04 	addi	sp,sp,-12
1000e1a0:	dc000015 	stw	r16,0(sp)
1000e1a4:	04000044 	movi	r16,1
1000e1a8:	dc400115 	stw	r17,4(sp)
1000e1ac:	2823883a 	mov	r17,r5
1000e1b0:	800b883a 	mov	r5,r16
1000e1b4:	dfc00215 	stw	ra,8(sp)
1000e1b8:	000dd680 	call	1000dd68 <_Balloc>
1000e1bc:	14400515 	stw	r17,20(r2)
1000e1c0:	14000415 	stw	r16,16(r2)
1000e1c4:	dfc00217 	ldw	ra,8(sp)
1000e1c8:	dc400117 	ldw	r17,4(sp)
1000e1cc:	dc000017 	ldw	r16,0(sp)
1000e1d0:	dec00304 	addi	sp,sp,12
1000e1d4:	f800283a 	ret

1000e1d8 <__multiply>:
1000e1d8:	deffef04 	addi	sp,sp,-68
1000e1dc:	dc400815 	stw	r17,32(sp)
1000e1e0:	dc000715 	stw	r16,28(sp)
1000e1e4:	34400417 	ldw	r17,16(r6)
1000e1e8:	2c000417 	ldw	r16,16(r5)
1000e1ec:	dd800d15 	stw	r22,52(sp)
1000e1f0:	dc800915 	stw	r18,36(sp)
1000e1f4:	dfc01015 	stw	ra,64(sp)
1000e1f8:	df000f15 	stw	fp,60(sp)
1000e1fc:	ddc00e15 	stw	r23,56(sp)
1000e200:	dd400c15 	stw	r21,48(sp)
1000e204:	dd000b15 	stw	r20,44(sp)
1000e208:	dcc00a15 	stw	r19,40(sp)
1000e20c:	2825883a 	mov	r18,r5
1000e210:	302d883a 	mov	r22,r6
1000e214:	8440050e 	bge	r16,r17,1000e22c <__multiply+0x54>
1000e218:	8007883a 	mov	r3,r16
1000e21c:	3025883a 	mov	r18,r6
1000e220:	8821883a 	mov	r16,r17
1000e224:	282d883a 	mov	r22,r5
1000e228:	1823883a 	mov	r17,r3
1000e22c:	90800217 	ldw	r2,8(r18)
1000e230:	8447883a 	add	r3,r16,r17
1000e234:	d8c00215 	stw	r3,8(sp)
1000e238:	91400117 	ldw	r5,4(r18)
1000e23c:	10c0010e 	bge	r2,r3,1000e244 <__multiply+0x6c>
1000e240:	29400044 	addi	r5,r5,1
1000e244:	000dd680 	call	1000dd68 <_Balloc>
1000e248:	d8c00217 	ldw	r3,8(sp)
1000e24c:	d8800615 	stw	r2,24(sp)
1000e250:	18eb883a 	add	r21,r3,r3
1000e254:	ad6b883a 	add	r21,r21,r21
1000e258:	10c00504 	addi	r3,r2,20
1000e25c:	1d6b883a 	add	r21,r3,r21
1000e260:	d8c00115 	stw	r3,4(sp)
1000e264:	dd400315 	stw	r21,12(sp)
1000e268:	1805883a 	mov	r2,r3
1000e26c:	1d40042e 	bgeu	r3,r21,1000e280 <__multiply+0xa8>
1000e270:	d8c00317 	ldw	r3,12(sp)
1000e274:	10000015 	stw	zero,0(r2)
1000e278:	10800104 	addi	r2,r2,4
1000e27c:	10fffc36 	bltu	r2,r3,1000e270 <__alt_data_end+0xf800e270>
1000e280:	8c63883a 	add	r17,r17,r17
1000e284:	b5800504 	addi	r22,r22,20
1000e288:	8c63883a 	add	r17,r17,r17
1000e28c:	94800504 	addi	r18,r18,20
1000e290:	8421883a 	add	r16,r16,r16
1000e294:	b463883a 	add	r17,r22,r17
1000e298:	8421883a 	add	r16,r16,r16
1000e29c:	dd800015 	stw	r22,0(sp)
1000e2a0:	dc800415 	stw	r18,16(sp)
1000e2a4:	dc400515 	stw	r17,20(sp)
1000e2a8:	9429883a 	add	r20,r18,r16
1000e2ac:	b4404f2e 	bgeu	r22,r17,1000e3ec <__multiply+0x214>
1000e2b0:	d8c00017 	ldw	r3,0(sp)
1000e2b4:	1c800017 	ldw	r18,0(r3)
1000e2b8:	947fffcc 	andi	r17,r18,65535
1000e2bc:	88001e26 	beq	r17,zero,1000e338 <__multiply+0x160>
1000e2c0:	dd800117 	ldw	r22,4(sp)
1000e2c4:	dd400417 	ldw	r21,16(sp)
1000e2c8:	0027883a 	mov	r19,zero
1000e2cc:	ac800017 	ldw	r18,0(r21)
1000e2d0:	b4000017 	ldw	r16,0(r22)
1000e2d4:	880b883a 	mov	r5,r17
1000e2d8:	913fffcc 	andi	r4,r18,65535
1000e2dc:	0007d040 	call	10007d04 <__mulsi3>
1000e2e0:	9008d43a 	srli	r4,r18,16
1000e2e4:	84bfffcc 	andi	r18,r16,65535
1000e2e8:	1485883a 	add	r2,r2,r18
1000e2ec:	14e5883a 	add	r18,r2,r19
1000e2f0:	8020d43a 	srli	r16,r16,16
1000e2f4:	9026d43a 	srli	r19,r18,16
1000e2f8:	880b883a 	mov	r5,r17
1000e2fc:	0007d040 	call	10007d04 <__mulsi3>
1000e300:	1405883a 	add	r2,r2,r16
1000e304:	14e1883a 	add	r16,r2,r19
1000e308:	90ffffcc 	andi	r3,r18,65535
1000e30c:	8024943a 	slli	r18,r16,16
1000e310:	ad400104 	addi	r21,r21,4
1000e314:	b005883a 	mov	r2,r22
1000e318:	90c6b03a 	or	r3,r18,r3
1000e31c:	b0c00015 	stw	r3,0(r22)
1000e320:	8026d43a 	srli	r19,r16,16
1000e324:	b5800104 	addi	r22,r22,4
1000e328:	ad3fe836 	bltu	r21,r20,1000e2cc <__alt_data_end+0xf800e2cc>
1000e32c:	d8c00017 	ldw	r3,0(sp)
1000e330:	14c00115 	stw	r19,4(r2)
1000e334:	1c800017 	ldw	r18,0(r3)
1000e338:	9024d43a 	srli	r18,r18,16
1000e33c:	90002226 	beq	r18,zero,1000e3c8 <__multiply+0x1f0>
1000e340:	d8c00117 	ldw	r3,4(sp)
1000e344:	dd800417 	ldw	r22,16(sp)
1000e348:	002f883a 	mov	r23,zero
1000e34c:	1f000017 	ldw	fp,0(r3)
1000e350:	1823883a 	mov	r17,r3
1000e354:	182b883a 	mov	r21,r3
1000e358:	e021883a 	mov	r16,fp
1000e35c:	00000106 	br	1000e364 <__multiply+0x18c>
1000e360:	982b883a 	mov	r21,r19
1000e364:	b100000b 	ldhu	r4,0(r22)
1000e368:	8020d43a 	srli	r16,r16,16
1000e36c:	900b883a 	mov	r5,r18
1000e370:	0007d040 	call	10007d04 <__mulsi3>
1000e374:	1405883a 	add	r2,r2,r16
1000e378:	15ef883a 	add	r23,r2,r23
1000e37c:	b804943a 	slli	r2,r23,16
1000e380:	e0ffffcc 	andi	r3,fp,65535
1000e384:	8c400104 	addi	r17,r17,4
1000e388:	10c6b03a 	or	r3,r2,r3
1000e38c:	88ffff15 	stw	r3,-4(r17)
1000e390:	b5800104 	addi	r22,r22,4
1000e394:	b13fff17 	ldw	r4,-4(r22)
1000e398:	acc00104 	addi	r19,r21,4
1000e39c:	900b883a 	mov	r5,r18
1000e3a0:	2008d43a 	srli	r4,r4,16
1000e3a4:	9c000017 	ldw	r16,0(r19)
1000e3a8:	0007d040 	call	10007d04 <__mulsi3>
1000e3ac:	b806d43a 	srli	r3,r23,16
1000e3b0:	813fffcc 	andi	r4,r16,65535
1000e3b4:	1105883a 	add	r2,r2,r4
1000e3b8:	10f9883a 	add	fp,r2,r3
1000e3bc:	e02ed43a 	srli	r23,fp,16
1000e3c0:	b53fe736 	bltu	r22,r20,1000e360 <__alt_data_end+0xf800e360>
1000e3c4:	af000115 	stw	fp,4(r21)
1000e3c8:	d8c00017 	ldw	r3,0(sp)
1000e3cc:	d9000517 	ldw	r4,20(sp)
1000e3d0:	18c00104 	addi	r3,r3,4
1000e3d4:	d8c00015 	stw	r3,0(sp)
1000e3d8:	d8c00117 	ldw	r3,4(sp)
1000e3dc:	18c00104 	addi	r3,r3,4
1000e3e0:	d8c00115 	stw	r3,4(sp)
1000e3e4:	d8c00017 	ldw	r3,0(sp)
1000e3e8:	193fb136 	bltu	r3,r4,1000e2b0 <__alt_data_end+0xf800e2b0>
1000e3ec:	d8c00217 	ldw	r3,8(sp)
1000e3f0:	00c00c0e 	bge	zero,r3,1000e424 <__multiply+0x24c>
1000e3f4:	d8c00317 	ldw	r3,12(sp)
1000e3f8:	18bfff17 	ldw	r2,-4(r3)
1000e3fc:	1d7fff04 	addi	r21,r3,-4
1000e400:	10000326 	beq	r2,zero,1000e410 <__multiply+0x238>
1000e404:	00000706 	br	1000e424 <__multiply+0x24c>
1000e408:	a8800017 	ldw	r2,0(r21)
1000e40c:	1000051e 	bne	r2,zero,1000e424 <__multiply+0x24c>
1000e410:	d8c00217 	ldw	r3,8(sp)
1000e414:	ad7fff04 	addi	r21,r21,-4
1000e418:	18ffffc4 	addi	r3,r3,-1
1000e41c:	d8c00215 	stw	r3,8(sp)
1000e420:	183ff91e 	bne	r3,zero,1000e408 <__alt_data_end+0xf800e408>
1000e424:	d8c00617 	ldw	r3,24(sp)
1000e428:	d9000217 	ldw	r4,8(sp)
1000e42c:	1805883a 	mov	r2,r3
1000e430:	19000415 	stw	r4,16(r3)
1000e434:	dfc01017 	ldw	ra,64(sp)
1000e438:	df000f17 	ldw	fp,60(sp)
1000e43c:	ddc00e17 	ldw	r23,56(sp)
1000e440:	dd800d17 	ldw	r22,52(sp)
1000e444:	dd400c17 	ldw	r21,48(sp)
1000e448:	dd000b17 	ldw	r20,44(sp)
1000e44c:	dcc00a17 	ldw	r19,40(sp)
1000e450:	dc800917 	ldw	r18,36(sp)
1000e454:	dc400817 	ldw	r17,32(sp)
1000e458:	dc000717 	ldw	r16,28(sp)
1000e45c:	dec01104 	addi	sp,sp,68
1000e460:	f800283a 	ret

1000e464 <__pow5mult>:
1000e464:	defffa04 	addi	sp,sp,-24
1000e468:	dcc00315 	stw	r19,12(sp)
1000e46c:	dc000015 	stw	r16,0(sp)
1000e470:	dfc00515 	stw	ra,20(sp)
1000e474:	dd000415 	stw	r20,16(sp)
1000e478:	dc800215 	stw	r18,8(sp)
1000e47c:	dc400115 	stw	r17,4(sp)
1000e480:	308000cc 	andi	r2,r6,3
1000e484:	3021883a 	mov	r16,r6
1000e488:	2027883a 	mov	r19,r4
1000e48c:	10002f1e 	bne	r2,zero,1000e54c <__pow5mult+0xe8>
1000e490:	2825883a 	mov	r18,r5
1000e494:	8021d0ba 	srai	r16,r16,2
1000e498:	80001a26 	beq	r16,zero,1000e504 <__pow5mult+0xa0>
1000e49c:	9c401217 	ldw	r17,72(r19)
1000e4a0:	8800061e 	bne	r17,zero,1000e4bc <__pow5mult+0x58>
1000e4a4:	00003406 	br	1000e578 <__pow5mult+0x114>
1000e4a8:	8021d07a 	srai	r16,r16,1
1000e4ac:	80001526 	beq	r16,zero,1000e504 <__pow5mult+0xa0>
1000e4b0:	88800017 	ldw	r2,0(r17)
1000e4b4:	10001c26 	beq	r2,zero,1000e528 <__pow5mult+0xc4>
1000e4b8:	1023883a 	mov	r17,r2
1000e4bc:	8080004c 	andi	r2,r16,1
1000e4c0:	103ff926 	beq	r2,zero,1000e4a8 <__alt_data_end+0xf800e4a8>
1000e4c4:	880d883a 	mov	r6,r17
1000e4c8:	900b883a 	mov	r5,r18
1000e4cc:	9809883a 	mov	r4,r19
1000e4d0:	000e1d80 	call	1000e1d8 <__multiply>
1000e4d4:	90001b26 	beq	r18,zero,1000e544 <__pow5mult+0xe0>
1000e4d8:	91000117 	ldw	r4,4(r18)
1000e4dc:	98c01317 	ldw	r3,76(r19)
1000e4e0:	8021d07a 	srai	r16,r16,1
1000e4e4:	2109883a 	add	r4,r4,r4
1000e4e8:	2109883a 	add	r4,r4,r4
1000e4ec:	1907883a 	add	r3,r3,r4
1000e4f0:	19000017 	ldw	r4,0(r3)
1000e4f4:	91000015 	stw	r4,0(r18)
1000e4f8:	1c800015 	stw	r18,0(r3)
1000e4fc:	1025883a 	mov	r18,r2
1000e500:	803feb1e 	bne	r16,zero,1000e4b0 <__alt_data_end+0xf800e4b0>
1000e504:	9005883a 	mov	r2,r18
1000e508:	dfc00517 	ldw	ra,20(sp)
1000e50c:	dd000417 	ldw	r20,16(sp)
1000e510:	dcc00317 	ldw	r19,12(sp)
1000e514:	dc800217 	ldw	r18,8(sp)
1000e518:	dc400117 	ldw	r17,4(sp)
1000e51c:	dc000017 	ldw	r16,0(sp)
1000e520:	dec00604 	addi	sp,sp,24
1000e524:	f800283a 	ret
1000e528:	880d883a 	mov	r6,r17
1000e52c:	880b883a 	mov	r5,r17
1000e530:	9809883a 	mov	r4,r19
1000e534:	000e1d80 	call	1000e1d8 <__multiply>
1000e538:	88800015 	stw	r2,0(r17)
1000e53c:	10000015 	stw	zero,0(r2)
1000e540:	003fdd06 	br	1000e4b8 <__alt_data_end+0xf800e4b8>
1000e544:	1025883a 	mov	r18,r2
1000e548:	003fd706 	br	1000e4a8 <__alt_data_end+0xf800e4a8>
1000e54c:	10bfffc4 	addi	r2,r2,-1
1000e550:	1085883a 	add	r2,r2,r2
1000e554:	00c400b4 	movhi	r3,4098
1000e558:	18e20204 	addi	r3,r3,-30712
1000e55c:	1085883a 	add	r2,r2,r2
1000e560:	1885883a 	add	r2,r3,r2
1000e564:	11800017 	ldw	r6,0(r2)
1000e568:	000f883a 	mov	r7,zero
1000e56c:	000de380 	call	1000de38 <__multadd>
1000e570:	1025883a 	mov	r18,r2
1000e574:	003fc706 	br	1000e494 <__alt_data_end+0xf800e494>
1000e578:	05000044 	movi	r20,1
1000e57c:	a00b883a 	mov	r5,r20
1000e580:	9809883a 	mov	r4,r19
1000e584:	000dd680 	call	1000dd68 <_Balloc>
1000e588:	1023883a 	mov	r17,r2
1000e58c:	00809c44 	movi	r2,625
1000e590:	88800515 	stw	r2,20(r17)
1000e594:	8d000415 	stw	r20,16(r17)
1000e598:	9c401215 	stw	r17,72(r19)
1000e59c:	88000015 	stw	zero,0(r17)
1000e5a0:	003fc606 	br	1000e4bc <__alt_data_end+0xf800e4bc>

1000e5a4 <__lshift>:
1000e5a4:	defff904 	addi	sp,sp,-28
1000e5a8:	dd400515 	stw	r21,20(sp)
1000e5ac:	dcc00315 	stw	r19,12(sp)
1000e5b0:	302bd17a 	srai	r21,r6,5
1000e5b4:	2cc00417 	ldw	r19,16(r5)
1000e5b8:	28800217 	ldw	r2,8(r5)
1000e5bc:	dd000415 	stw	r20,16(sp)
1000e5c0:	ace7883a 	add	r19,r21,r19
1000e5c4:	dc800215 	stw	r18,8(sp)
1000e5c8:	dc400115 	stw	r17,4(sp)
1000e5cc:	dc000015 	stw	r16,0(sp)
1000e5d0:	dfc00615 	stw	ra,24(sp)
1000e5d4:	9c000044 	addi	r16,r19,1
1000e5d8:	2823883a 	mov	r17,r5
1000e5dc:	3029883a 	mov	r20,r6
1000e5e0:	2025883a 	mov	r18,r4
1000e5e4:	29400117 	ldw	r5,4(r5)
1000e5e8:	1400030e 	bge	r2,r16,1000e5f8 <__lshift+0x54>
1000e5ec:	1085883a 	add	r2,r2,r2
1000e5f0:	29400044 	addi	r5,r5,1
1000e5f4:	143ffd16 	blt	r2,r16,1000e5ec <__alt_data_end+0xf800e5ec>
1000e5f8:	9009883a 	mov	r4,r18
1000e5fc:	000dd680 	call	1000dd68 <_Balloc>
1000e600:	10c00504 	addi	r3,r2,20
1000e604:	0540070e 	bge	zero,r21,1000e624 <__lshift+0x80>
1000e608:	ad6b883a 	add	r21,r21,r21
1000e60c:	ad6b883a 	add	r21,r21,r21
1000e610:	1809883a 	mov	r4,r3
1000e614:	1d47883a 	add	r3,r3,r21
1000e618:	20000015 	stw	zero,0(r4)
1000e61c:	21000104 	addi	r4,r4,4
1000e620:	193ffd1e 	bne	r3,r4,1000e618 <__alt_data_end+0xf800e618>
1000e624:	8a000417 	ldw	r8,16(r17)
1000e628:	89000504 	addi	r4,r17,20
1000e62c:	a18007cc 	andi	r6,r20,31
1000e630:	4211883a 	add	r8,r8,r8
1000e634:	4211883a 	add	r8,r8,r8
1000e638:	2211883a 	add	r8,r4,r8
1000e63c:	30002326 	beq	r6,zero,1000e6cc <__lshift+0x128>
1000e640:	02400804 	movi	r9,32
1000e644:	4993c83a 	sub	r9,r9,r6
1000e648:	000b883a 	mov	r5,zero
1000e64c:	21c00017 	ldw	r7,0(r4)
1000e650:	1815883a 	mov	r10,r3
1000e654:	18c00104 	addi	r3,r3,4
1000e658:	398e983a 	sll	r7,r7,r6
1000e65c:	21000104 	addi	r4,r4,4
1000e660:	394ab03a 	or	r5,r7,r5
1000e664:	197fff15 	stw	r5,-4(r3)
1000e668:	217fff17 	ldw	r5,-4(r4)
1000e66c:	2a4ad83a 	srl	r5,r5,r9
1000e670:	223ff636 	bltu	r4,r8,1000e64c <__alt_data_end+0xf800e64c>
1000e674:	51400115 	stw	r5,4(r10)
1000e678:	28001a1e 	bne	r5,zero,1000e6e4 <__lshift+0x140>
1000e67c:	843fffc4 	addi	r16,r16,-1
1000e680:	14000415 	stw	r16,16(r2)
1000e684:	88000826 	beq	r17,zero,1000e6a8 <__lshift+0x104>
1000e688:	89000117 	ldw	r4,4(r17)
1000e68c:	90c01317 	ldw	r3,76(r18)
1000e690:	2109883a 	add	r4,r4,r4
1000e694:	2109883a 	add	r4,r4,r4
1000e698:	1907883a 	add	r3,r3,r4
1000e69c:	19000017 	ldw	r4,0(r3)
1000e6a0:	89000015 	stw	r4,0(r17)
1000e6a4:	1c400015 	stw	r17,0(r3)
1000e6a8:	dfc00617 	ldw	ra,24(sp)
1000e6ac:	dd400517 	ldw	r21,20(sp)
1000e6b0:	dd000417 	ldw	r20,16(sp)
1000e6b4:	dcc00317 	ldw	r19,12(sp)
1000e6b8:	dc800217 	ldw	r18,8(sp)
1000e6bc:	dc400117 	ldw	r17,4(sp)
1000e6c0:	dc000017 	ldw	r16,0(sp)
1000e6c4:	dec00704 	addi	sp,sp,28
1000e6c8:	f800283a 	ret
1000e6cc:	21400017 	ldw	r5,0(r4)
1000e6d0:	18c00104 	addi	r3,r3,4
1000e6d4:	21000104 	addi	r4,r4,4
1000e6d8:	197fff15 	stw	r5,-4(r3)
1000e6dc:	223ffb36 	bltu	r4,r8,1000e6cc <__alt_data_end+0xf800e6cc>
1000e6e0:	003fe606 	br	1000e67c <__alt_data_end+0xf800e67c>
1000e6e4:	9c000084 	addi	r16,r19,2
1000e6e8:	003fe406 	br	1000e67c <__alt_data_end+0xf800e67c>

1000e6ec <__mcmp>:
1000e6ec:	20800417 	ldw	r2,16(r4)
1000e6f0:	28c00417 	ldw	r3,16(r5)
1000e6f4:	10c5c83a 	sub	r2,r2,r3
1000e6f8:	1000111e 	bne	r2,zero,1000e740 <__mcmp+0x54>
1000e6fc:	18c7883a 	add	r3,r3,r3
1000e700:	18c7883a 	add	r3,r3,r3
1000e704:	21000504 	addi	r4,r4,20
1000e708:	29400504 	addi	r5,r5,20
1000e70c:	20c5883a 	add	r2,r4,r3
1000e710:	28cb883a 	add	r5,r5,r3
1000e714:	00000106 	br	1000e71c <__mcmp+0x30>
1000e718:	20800a2e 	bgeu	r4,r2,1000e744 <__mcmp+0x58>
1000e71c:	10bfff04 	addi	r2,r2,-4
1000e720:	297fff04 	addi	r5,r5,-4
1000e724:	11800017 	ldw	r6,0(r2)
1000e728:	28c00017 	ldw	r3,0(r5)
1000e72c:	30fffa26 	beq	r6,r3,1000e718 <__alt_data_end+0xf800e718>
1000e730:	30c00236 	bltu	r6,r3,1000e73c <__mcmp+0x50>
1000e734:	00800044 	movi	r2,1
1000e738:	f800283a 	ret
1000e73c:	00bfffc4 	movi	r2,-1
1000e740:	f800283a 	ret
1000e744:	0005883a 	mov	r2,zero
1000e748:	f800283a 	ret

1000e74c <__mdiff>:
1000e74c:	28c00417 	ldw	r3,16(r5)
1000e750:	30800417 	ldw	r2,16(r6)
1000e754:	defffa04 	addi	sp,sp,-24
1000e758:	dcc00315 	stw	r19,12(sp)
1000e75c:	dc800215 	stw	r18,8(sp)
1000e760:	dfc00515 	stw	ra,20(sp)
1000e764:	dd000415 	stw	r20,16(sp)
1000e768:	dc400115 	stw	r17,4(sp)
1000e76c:	dc000015 	stw	r16,0(sp)
1000e770:	1887c83a 	sub	r3,r3,r2
1000e774:	2825883a 	mov	r18,r5
1000e778:	3027883a 	mov	r19,r6
1000e77c:	1800141e 	bne	r3,zero,1000e7d0 <__mdiff+0x84>
1000e780:	1085883a 	add	r2,r2,r2
1000e784:	1085883a 	add	r2,r2,r2
1000e788:	2a000504 	addi	r8,r5,20
1000e78c:	34000504 	addi	r16,r6,20
1000e790:	4087883a 	add	r3,r8,r2
1000e794:	8085883a 	add	r2,r16,r2
1000e798:	00000106 	br	1000e7a0 <__mdiff+0x54>
1000e79c:	40c0592e 	bgeu	r8,r3,1000e904 <__mdiff+0x1b8>
1000e7a0:	18ffff04 	addi	r3,r3,-4
1000e7a4:	10bfff04 	addi	r2,r2,-4
1000e7a8:	19c00017 	ldw	r7,0(r3)
1000e7ac:	11400017 	ldw	r5,0(r2)
1000e7b0:	397ffa26 	beq	r7,r5,1000e79c <__alt_data_end+0xf800e79c>
1000e7b4:	3940592e 	bgeu	r7,r5,1000e91c <__mdiff+0x1d0>
1000e7b8:	9005883a 	mov	r2,r18
1000e7bc:	4023883a 	mov	r17,r8
1000e7c0:	9825883a 	mov	r18,r19
1000e7c4:	05000044 	movi	r20,1
1000e7c8:	1027883a 	mov	r19,r2
1000e7cc:	00000406 	br	1000e7e0 <__mdiff+0x94>
1000e7d0:	18005616 	blt	r3,zero,1000e92c <__mdiff+0x1e0>
1000e7d4:	34400504 	addi	r17,r6,20
1000e7d8:	2c000504 	addi	r16,r5,20
1000e7dc:	0029883a 	mov	r20,zero
1000e7e0:	91400117 	ldw	r5,4(r18)
1000e7e4:	000dd680 	call	1000dd68 <_Balloc>
1000e7e8:	92400417 	ldw	r9,16(r18)
1000e7ec:	9b000417 	ldw	r12,16(r19)
1000e7f0:	12c00504 	addi	r11,r2,20
1000e7f4:	4a51883a 	add	r8,r9,r9
1000e7f8:	6319883a 	add	r12,r12,r12
1000e7fc:	4211883a 	add	r8,r8,r8
1000e800:	6319883a 	add	r12,r12,r12
1000e804:	15000315 	stw	r20,12(r2)
1000e808:	8211883a 	add	r8,r16,r8
1000e80c:	8b19883a 	add	r12,r17,r12
1000e810:	0007883a 	mov	r3,zero
1000e814:	81400017 	ldw	r5,0(r16)
1000e818:	89c00017 	ldw	r7,0(r17)
1000e81c:	59800104 	addi	r6,r11,4
1000e820:	293fffcc 	andi	r4,r5,65535
1000e824:	20c7883a 	add	r3,r4,r3
1000e828:	393fffcc 	andi	r4,r7,65535
1000e82c:	1909c83a 	sub	r4,r3,r4
1000e830:	280ad43a 	srli	r5,r5,16
1000e834:	380ed43a 	srli	r7,r7,16
1000e838:	2007d43a 	srai	r3,r4,16
1000e83c:	213fffcc 	andi	r4,r4,65535
1000e840:	29cbc83a 	sub	r5,r5,r7
1000e844:	28c7883a 	add	r3,r5,r3
1000e848:	180a943a 	slli	r5,r3,16
1000e84c:	8c400104 	addi	r17,r17,4
1000e850:	84000104 	addi	r16,r16,4
1000e854:	2908b03a 	or	r4,r5,r4
1000e858:	59000015 	stw	r4,0(r11)
1000e85c:	1807d43a 	srai	r3,r3,16
1000e860:	3015883a 	mov	r10,r6
1000e864:	3017883a 	mov	r11,r6
1000e868:	8b3fea36 	bltu	r17,r12,1000e814 <__alt_data_end+0xf800e814>
1000e86c:	8200162e 	bgeu	r16,r8,1000e8c8 <__mdiff+0x17c>
1000e870:	8017883a 	mov	r11,r16
1000e874:	59400017 	ldw	r5,0(r11)
1000e878:	31800104 	addi	r6,r6,4
1000e87c:	5ac00104 	addi	r11,r11,4
1000e880:	293fffcc 	andi	r4,r5,65535
1000e884:	20c7883a 	add	r3,r4,r3
1000e888:	280ed43a 	srli	r7,r5,16
1000e88c:	180bd43a 	srai	r5,r3,16
1000e890:	193fffcc 	andi	r4,r3,65535
1000e894:	3947883a 	add	r3,r7,r5
1000e898:	180a943a 	slli	r5,r3,16
1000e89c:	1807d43a 	srai	r3,r3,16
1000e8a0:	2908b03a 	or	r4,r5,r4
1000e8a4:	313fff15 	stw	r4,-4(r6)
1000e8a8:	5a3ff236 	bltu	r11,r8,1000e874 <__alt_data_end+0xf800e874>
1000e8ac:	0406303a 	nor	r3,zero,r16
1000e8b0:	1a07883a 	add	r3,r3,r8
1000e8b4:	1806d0ba 	srli	r3,r3,2
1000e8b8:	18c00044 	addi	r3,r3,1
1000e8bc:	18c7883a 	add	r3,r3,r3
1000e8c0:	18c7883a 	add	r3,r3,r3
1000e8c4:	50d5883a 	add	r10,r10,r3
1000e8c8:	50ffff04 	addi	r3,r10,-4
1000e8cc:	2000041e 	bne	r4,zero,1000e8e0 <__mdiff+0x194>
1000e8d0:	18ffff04 	addi	r3,r3,-4
1000e8d4:	19000017 	ldw	r4,0(r3)
1000e8d8:	4a7fffc4 	addi	r9,r9,-1
1000e8dc:	203ffc26 	beq	r4,zero,1000e8d0 <__alt_data_end+0xf800e8d0>
1000e8e0:	12400415 	stw	r9,16(r2)
1000e8e4:	dfc00517 	ldw	ra,20(sp)
1000e8e8:	dd000417 	ldw	r20,16(sp)
1000e8ec:	dcc00317 	ldw	r19,12(sp)
1000e8f0:	dc800217 	ldw	r18,8(sp)
1000e8f4:	dc400117 	ldw	r17,4(sp)
1000e8f8:	dc000017 	ldw	r16,0(sp)
1000e8fc:	dec00604 	addi	sp,sp,24
1000e900:	f800283a 	ret
1000e904:	000b883a 	mov	r5,zero
1000e908:	000dd680 	call	1000dd68 <_Balloc>
1000e90c:	00c00044 	movi	r3,1
1000e910:	10c00415 	stw	r3,16(r2)
1000e914:	10000515 	stw	zero,20(r2)
1000e918:	003ff206 	br	1000e8e4 <__alt_data_end+0xf800e8e4>
1000e91c:	8023883a 	mov	r17,r16
1000e920:	0029883a 	mov	r20,zero
1000e924:	4021883a 	mov	r16,r8
1000e928:	003fad06 	br	1000e7e0 <__alt_data_end+0xf800e7e0>
1000e92c:	9005883a 	mov	r2,r18
1000e930:	94400504 	addi	r17,r18,20
1000e934:	9c000504 	addi	r16,r19,20
1000e938:	9825883a 	mov	r18,r19
1000e93c:	05000044 	movi	r20,1
1000e940:	1027883a 	mov	r19,r2
1000e944:	003fa606 	br	1000e7e0 <__alt_data_end+0xf800e7e0>

1000e948 <__ulp>:
1000e948:	295ffc2c 	andhi	r5,r5,32752
1000e94c:	00bf3034 	movhi	r2,64704
1000e950:	2887883a 	add	r3,r5,r2
1000e954:	00c0020e 	bge	zero,r3,1000e960 <__ulp+0x18>
1000e958:	0005883a 	mov	r2,zero
1000e95c:	f800283a 	ret
1000e960:	00c7c83a 	sub	r3,zero,r3
1000e964:	1807d53a 	srai	r3,r3,20
1000e968:	008004c4 	movi	r2,19
1000e96c:	10c00b0e 	bge	r2,r3,1000e99c <__ulp+0x54>
1000e970:	18bffb04 	addi	r2,r3,-20
1000e974:	01000784 	movi	r4,30
1000e978:	0007883a 	mov	r3,zero
1000e97c:	20800516 	blt	r4,r2,1000e994 <__ulp+0x4c>
1000e980:	010007c4 	movi	r4,31
1000e984:	2089c83a 	sub	r4,r4,r2
1000e988:	00800044 	movi	r2,1
1000e98c:	1104983a 	sll	r2,r2,r4
1000e990:	f800283a 	ret
1000e994:	00800044 	movi	r2,1
1000e998:	f800283a 	ret
1000e99c:	01400234 	movhi	r5,8
1000e9a0:	28c7d83a 	sra	r3,r5,r3
1000e9a4:	0005883a 	mov	r2,zero
1000e9a8:	f800283a 	ret

1000e9ac <__b2d>:
1000e9ac:	defffa04 	addi	sp,sp,-24
1000e9b0:	dc000015 	stw	r16,0(sp)
1000e9b4:	24000417 	ldw	r16,16(r4)
1000e9b8:	dc400115 	stw	r17,4(sp)
1000e9bc:	24400504 	addi	r17,r4,20
1000e9c0:	8421883a 	add	r16,r16,r16
1000e9c4:	8421883a 	add	r16,r16,r16
1000e9c8:	8c21883a 	add	r16,r17,r16
1000e9cc:	dc800215 	stw	r18,8(sp)
1000e9d0:	84bfff17 	ldw	r18,-4(r16)
1000e9d4:	dd000415 	stw	r20,16(sp)
1000e9d8:	dcc00315 	stw	r19,12(sp)
1000e9dc:	9009883a 	mov	r4,r18
1000e9e0:	2829883a 	mov	r20,r5
1000e9e4:	dfc00515 	stw	ra,20(sp)
1000e9e8:	000e0840 	call	1000e084 <__hi0bits>
1000e9ec:	00c00804 	movi	r3,32
1000e9f0:	1889c83a 	sub	r4,r3,r2
1000e9f4:	a1000015 	stw	r4,0(r20)
1000e9f8:	01000284 	movi	r4,10
1000e9fc:	84ffff04 	addi	r19,r16,-4
1000ea00:	20801216 	blt	r4,r2,1000ea4c <__b2d+0xa0>
1000ea04:	018002c4 	movi	r6,11
1000ea08:	308dc83a 	sub	r6,r6,r2
1000ea0c:	9186d83a 	srl	r3,r18,r6
1000ea10:	18cffc34 	orhi	r3,r3,16368
1000ea14:	8cc0212e 	bgeu	r17,r19,1000ea9c <__b2d+0xf0>
1000ea18:	813ffe17 	ldw	r4,-8(r16)
1000ea1c:	218cd83a 	srl	r6,r4,r6
1000ea20:	10800544 	addi	r2,r2,21
1000ea24:	9084983a 	sll	r2,r18,r2
1000ea28:	1184b03a 	or	r2,r2,r6
1000ea2c:	dfc00517 	ldw	ra,20(sp)
1000ea30:	dd000417 	ldw	r20,16(sp)
1000ea34:	dcc00317 	ldw	r19,12(sp)
1000ea38:	dc800217 	ldw	r18,8(sp)
1000ea3c:	dc400117 	ldw	r17,4(sp)
1000ea40:	dc000017 	ldw	r16,0(sp)
1000ea44:	dec00604 	addi	sp,sp,24
1000ea48:	f800283a 	ret
1000ea4c:	8cc00f2e 	bgeu	r17,r19,1000ea8c <__b2d+0xe0>
1000ea50:	117ffd44 	addi	r5,r2,-11
1000ea54:	80bffe17 	ldw	r2,-8(r16)
1000ea58:	28000e26 	beq	r5,zero,1000ea94 <__b2d+0xe8>
1000ea5c:	1949c83a 	sub	r4,r3,r5
1000ea60:	9164983a 	sll	r18,r18,r5
1000ea64:	1106d83a 	srl	r3,r2,r4
1000ea68:	81bffe04 	addi	r6,r16,-8
1000ea6c:	948ffc34 	orhi	r18,r18,16368
1000ea70:	90c6b03a 	or	r3,r18,r3
1000ea74:	89800e2e 	bgeu	r17,r6,1000eab0 <__b2d+0x104>
1000ea78:	81bffd17 	ldw	r6,-12(r16)
1000ea7c:	1144983a 	sll	r2,r2,r5
1000ea80:	310ad83a 	srl	r5,r6,r4
1000ea84:	2884b03a 	or	r2,r5,r2
1000ea88:	003fe806 	br	1000ea2c <__alt_data_end+0xf800ea2c>
1000ea8c:	10bffd44 	addi	r2,r2,-11
1000ea90:	1000041e 	bne	r2,zero,1000eaa4 <__b2d+0xf8>
1000ea94:	90cffc34 	orhi	r3,r18,16368
1000ea98:	003fe406 	br	1000ea2c <__alt_data_end+0xf800ea2c>
1000ea9c:	000d883a 	mov	r6,zero
1000eaa0:	003fdf06 	br	1000ea20 <__alt_data_end+0xf800ea20>
1000eaa4:	90a4983a 	sll	r18,r18,r2
1000eaa8:	0005883a 	mov	r2,zero
1000eaac:	003ff906 	br	1000ea94 <__alt_data_end+0xf800ea94>
1000eab0:	1144983a 	sll	r2,r2,r5
1000eab4:	003fdd06 	br	1000ea2c <__alt_data_end+0xf800ea2c>

1000eab8 <__d2b>:
1000eab8:	defff804 	addi	sp,sp,-32
1000eabc:	dc000215 	stw	r16,8(sp)
1000eac0:	3021883a 	mov	r16,r6
1000eac4:	dc400315 	stw	r17,12(sp)
1000eac8:	8022907a 	slli	r17,r16,1
1000eacc:	dd000615 	stw	r20,24(sp)
1000ead0:	2829883a 	mov	r20,r5
1000ead4:	01400044 	movi	r5,1
1000ead8:	dcc00515 	stw	r19,20(sp)
1000eadc:	dc800415 	stw	r18,16(sp)
1000eae0:	dfc00715 	stw	ra,28(sp)
1000eae4:	3825883a 	mov	r18,r7
1000eae8:	8822d57a 	srli	r17,r17,21
1000eaec:	000dd680 	call	1000dd68 <_Balloc>
1000eaf0:	1027883a 	mov	r19,r2
1000eaf4:	00800434 	movhi	r2,16
1000eaf8:	10bfffc4 	addi	r2,r2,-1
1000eafc:	808c703a 	and	r6,r16,r2
1000eb00:	88000126 	beq	r17,zero,1000eb08 <__d2b+0x50>
1000eb04:	31800434 	orhi	r6,r6,16
1000eb08:	d9800015 	stw	r6,0(sp)
1000eb0c:	a0002426 	beq	r20,zero,1000eba0 <__d2b+0xe8>
1000eb10:	d9000104 	addi	r4,sp,4
1000eb14:	dd000115 	stw	r20,4(sp)
1000eb18:	000e0ec0 	call	1000e0ec <__lo0bits>
1000eb1c:	d8c00017 	ldw	r3,0(sp)
1000eb20:	10002f1e 	bne	r2,zero,1000ebe0 <__d2b+0x128>
1000eb24:	d9000117 	ldw	r4,4(sp)
1000eb28:	99000515 	stw	r4,20(r19)
1000eb2c:	1821003a 	cmpeq	r16,r3,zero
1000eb30:	01000084 	movi	r4,2
1000eb34:	2421c83a 	sub	r16,r4,r16
1000eb38:	98c00615 	stw	r3,24(r19)
1000eb3c:	9c000415 	stw	r16,16(r19)
1000eb40:	88001f1e 	bne	r17,zero,1000ebc0 <__d2b+0x108>
1000eb44:	10bef384 	addi	r2,r2,-1074
1000eb48:	90800015 	stw	r2,0(r18)
1000eb4c:	00900034 	movhi	r2,16384
1000eb50:	10bfffc4 	addi	r2,r2,-1
1000eb54:	8085883a 	add	r2,r16,r2
1000eb58:	1085883a 	add	r2,r2,r2
1000eb5c:	1085883a 	add	r2,r2,r2
1000eb60:	9885883a 	add	r2,r19,r2
1000eb64:	11000517 	ldw	r4,20(r2)
1000eb68:	8020917a 	slli	r16,r16,5
1000eb6c:	000e0840 	call	1000e084 <__hi0bits>
1000eb70:	d8c00817 	ldw	r3,32(sp)
1000eb74:	8085c83a 	sub	r2,r16,r2
1000eb78:	18800015 	stw	r2,0(r3)
1000eb7c:	9805883a 	mov	r2,r19
1000eb80:	dfc00717 	ldw	ra,28(sp)
1000eb84:	dd000617 	ldw	r20,24(sp)
1000eb88:	dcc00517 	ldw	r19,20(sp)
1000eb8c:	dc800417 	ldw	r18,16(sp)
1000eb90:	dc400317 	ldw	r17,12(sp)
1000eb94:	dc000217 	ldw	r16,8(sp)
1000eb98:	dec00804 	addi	sp,sp,32
1000eb9c:	f800283a 	ret
1000eba0:	d809883a 	mov	r4,sp
1000eba4:	000e0ec0 	call	1000e0ec <__lo0bits>
1000eba8:	d8c00017 	ldw	r3,0(sp)
1000ebac:	04000044 	movi	r16,1
1000ebb0:	9c000415 	stw	r16,16(r19)
1000ebb4:	98c00515 	stw	r3,20(r19)
1000ebb8:	10800804 	addi	r2,r2,32
1000ebbc:	883fe126 	beq	r17,zero,1000eb44 <__alt_data_end+0xf800eb44>
1000ebc0:	00c00d44 	movi	r3,53
1000ebc4:	8c7ef344 	addi	r17,r17,-1075
1000ebc8:	88a3883a 	add	r17,r17,r2
1000ebcc:	1885c83a 	sub	r2,r3,r2
1000ebd0:	d8c00817 	ldw	r3,32(sp)
1000ebd4:	94400015 	stw	r17,0(r18)
1000ebd8:	18800015 	stw	r2,0(r3)
1000ebdc:	003fe706 	br	1000eb7c <__alt_data_end+0xf800eb7c>
1000ebe0:	01000804 	movi	r4,32
1000ebe4:	2089c83a 	sub	r4,r4,r2
1000ebe8:	1908983a 	sll	r4,r3,r4
1000ebec:	d9400117 	ldw	r5,4(sp)
1000ebf0:	1886d83a 	srl	r3,r3,r2
1000ebf4:	2148b03a 	or	r4,r4,r5
1000ebf8:	99000515 	stw	r4,20(r19)
1000ebfc:	d8c00015 	stw	r3,0(sp)
1000ec00:	003fca06 	br	1000eb2c <__alt_data_end+0xf800eb2c>

1000ec04 <__ratio>:
1000ec04:	defff904 	addi	sp,sp,-28
1000ec08:	dc400315 	stw	r17,12(sp)
1000ec0c:	2823883a 	mov	r17,r5
1000ec10:	d9400104 	addi	r5,sp,4
1000ec14:	dfc00615 	stw	ra,24(sp)
1000ec18:	dcc00515 	stw	r19,20(sp)
1000ec1c:	dc800415 	stw	r18,16(sp)
1000ec20:	2027883a 	mov	r19,r4
1000ec24:	dc000215 	stw	r16,8(sp)
1000ec28:	000e9ac0 	call	1000e9ac <__b2d>
1000ec2c:	d80b883a 	mov	r5,sp
1000ec30:	8809883a 	mov	r4,r17
1000ec34:	1025883a 	mov	r18,r2
1000ec38:	1821883a 	mov	r16,r3
1000ec3c:	000e9ac0 	call	1000e9ac <__b2d>
1000ec40:	8a000417 	ldw	r8,16(r17)
1000ec44:	99000417 	ldw	r4,16(r19)
1000ec48:	d9400117 	ldw	r5,4(sp)
1000ec4c:	2209c83a 	sub	r4,r4,r8
1000ec50:	2010917a 	slli	r8,r4,5
1000ec54:	d9000017 	ldw	r4,0(sp)
1000ec58:	2909c83a 	sub	r4,r5,r4
1000ec5c:	4109883a 	add	r4,r8,r4
1000ec60:	01000e0e 	bge	zero,r4,1000ec9c <__ratio+0x98>
1000ec64:	2008953a 	slli	r4,r4,20
1000ec68:	2421883a 	add	r16,r4,r16
1000ec6c:	100d883a 	mov	r6,r2
1000ec70:	180f883a 	mov	r7,r3
1000ec74:	9009883a 	mov	r4,r18
1000ec78:	800b883a 	mov	r5,r16
1000ec7c:	0012c200 	call	10012c20 <__divdf3>
1000ec80:	dfc00617 	ldw	ra,24(sp)
1000ec84:	dcc00517 	ldw	r19,20(sp)
1000ec88:	dc800417 	ldw	r18,16(sp)
1000ec8c:	dc400317 	ldw	r17,12(sp)
1000ec90:	dc000217 	ldw	r16,8(sp)
1000ec94:	dec00704 	addi	sp,sp,28
1000ec98:	f800283a 	ret
1000ec9c:	2008953a 	slli	r4,r4,20
1000eca0:	1907c83a 	sub	r3,r3,r4
1000eca4:	003ff106 	br	1000ec6c <__alt_data_end+0xf800ec6c>

1000eca8 <_mprec_log10>:
1000eca8:	defffe04 	addi	sp,sp,-8
1000ecac:	dc000015 	stw	r16,0(sp)
1000ecb0:	dfc00115 	stw	ra,4(sp)
1000ecb4:	008005c4 	movi	r2,23
1000ecb8:	2021883a 	mov	r16,r4
1000ecbc:	11000d0e 	bge	r2,r4,1000ecf4 <_mprec_log10+0x4c>
1000ecc0:	0005883a 	mov	r2,zero
1000ecc4:	00cffc34 	movhi	r3,16368
1000ecc8:	843fffc4 	addi	r16,r16,-1
1000eccc:	000d883a 	mov	r6,zero
1000ecd0:	01d00934 	movhi	r7,16420
1000ecd4:	1009883a 	mov	r4,r2
1000ecd8:	180b883a 	mov	r5,r3
1000ecdc:	00138480 	call	10013848 <__muldf3>
1000ece0:	803ff91e 	bne	r16,zero,1000ecc8 <__alt_data_end+0xf800ecc8>
1000ece4:	dfc00117 	ldw	ra,4(sp)
1000ece8:	dc000017 	ldw	r16,0(sp)
1000ecec:	dec00204 	addi	sp,sp,8
1000ecf0:	f800283a 	ret
1000ecf4:	202090fa 	slli	r16,r4,3
1000ecf8:	008400b4 	movhi	r2,4098
1000ecfc:	10a21904 	addi	r2,r2,-30620
1000ed00:	1421883a 	add	r16,r2,r16
1000ed04:	80800017 	ldw	r2,0(r16)
1000ed08:	80c00117 	ldw	r3,4(r16)
1000ed0c:	dfc00117 	ldw	ra,4(sp)
1000ed10:	dc000017 	ldw	r16,0(sp)
1000ed14:	dec00204 	addi	sp,sp,8
1000ed18:	f800283a 	ret

1000ed1c <__copybits>:
1000ed1c:	297fffc4 	addi	r5,r5,-1
1000ed20:	280fd17a 	srai	r7,r5,5
1000ed24:	30c00417 	ldw	r3,16(r6)
1000ed28:	30800504 	addi	r2,r6,20
1000ed2c:	39c00044 	addi	r7,r7,1
1000ed30:	18c7883a 	add	r3,r3,r3
1000ed34:	39cf883a 	add	r7,r7,r7
1000ed38:	18c7883a 	add	r3,r3,r3
1000ed3c:	39cf883a 	add	r7,r7,r7
1000ed40:	10c7883a 	add	r3,r2,r3
1000ed44:	21cf883a 	add	r7,r4,r7
1000ed48:	10c00d2e 	bgeu	r2,r3,1000ed80 <__copybits+0x64>
1000ed4c:	200b883a 	mov	r5,r4
1000ed50:	12000017 	ldw	r8,0(r2)
1000ed54:	29400104 	addi	r5,r5,4
1000ed58:	10800104 	addi	r2,r2,4
1000ed5c:	2a3fff15 	stw	r8,-4(r5)
1000ed60:	10fffb36 	bltu	r2,r3,1000ed50 <__alt_data_end+0xf800ed50>
1000ed64:	1985c83a 	sub	r2,r3,r6
1000ed68:	10bffac4 	addi	r2,r2,-21
1000ed6c:	1004d0ba 	srli	r2,r2,2
1000ed70:	10800044 	addi	r2,r2,1
1000ed74:	1085883a 	add	r2,r2,r2
1000ed78:	1085883a 	add	r2,r2,r2
1000ed7c:	2089883a 	add	r4,r4,r2
1000ed80:	21c0032e 	bgeu	r4,r7,1000ed90 <__copybits+0x74>
1000ed84:	20000015 	stw	zero,0(r4)
1000ed88:	21000104 	addi	r4,r4,4
1000ed8c:	21fffd36 	bltu	r4,r7,1000ed84 <__alt_data_end+0xf800ed84>
1000ed90:	f800283a 	ret

1000ed94 <__any_on>:
1000ed94:	20c00417 	ldw	r3,16(r4)
1000ed98:	2805d17a 	srai	r2,r5,5
1000ed9c:	21000504 	addi	r4,r4,20
1000eda0:	18800d0e 	bge	r3,r2,1000edd8 <__any_on+0x44>
1000eda4:	18c7883a 	add	r3,r3,r3
1000eda8:	18c7883a 	add	r3,r3,r3
1000edac:	20c7883a 	add	r3,r4,r3
1000edb0:	20c0192e 	bgeu	r4,r3,1000ee18 <__any_on+0x84>
1000edb4:	18bfff17 	ldw	r2,-4(r3)
1000edb8:	18ffff04 	addi	r3,r3,-4
1000edbc:	1000041e 	bne	r2,zero,1000edd0 <__any_on+0x3c>
1000edc0:	20c0142e 	bgeu	r4,r3,1000ee14 <__any_on+0x80>
1000edc4:	18ffff04 	addi	r3,r3,-4
1000edc8:	19400017 	ldw	r5,0(r3)
1000edcc:	283ffc26 	beq	r5,zero,1000edc0 <__alt_data_end+0xf800edc0>
1000edd0:	00800044 	movi	r2,1
1000edd4:	f800283a 	ret
1000edd8:	10c00a0e 	bge	r2,r3,1000ee04 <__any_on+0x70>
1000eddc:	1085883a 	add	r2,r2,r2
1000ede0:	1085883a 	add	r2,r2,r2
1000ede4:	294007cc 	andi	r5,r5,31
1000ede8:	2087883a 	add	r3,r4,r2
1000edec:	283ff026 	beq	r5,zero,1000edb0 <__alt_data_end+0xf800edb0>
1000edf0:	19800017 	ldw	r6,0(r3)
1000edf4:	3144d83a 	srl	r2,r6,r5
1000edf8:	114a983a 	sll	r5,r2,r5
1000edfc:	317ff41e 	bne	r6,r5,1000edd0 <__alt_data_end+0xf800edd0>
1000ee00:	003feb06 	br	1000edb0 <__alt_data_end+0xf800edb0>
1000ee04:	1085883a 	add	r2,r2,r2
1000ee08:	1085883a 	add	r2,r2,r2
1000ee0c:	2087883a 	add	r3,r4,r2
1000ee10:	003fe706 	br	1000edb0 <__alt_data_end+0xf800edb0>
1000ee14:	f800283a 	ret
1000ee18:	0005883a 	mov	r2,zero
1000ee1c:	f800283a 	ret

1000ee20 <_realloc_r>:
1000ee20:	defff604 	addi	sp,sp,-40
1000ee24:	dc800215 	stw	r18,8(sp)
1000ee28:	dfc00915 	stw	ra,36(sp)
1000ee2c:	df000815 	stw	fp,32(sp)
1000ee30:	ddc00715 	stw	r23,28(sp)
1000ee34:	dd800615 	stw	r22,24(sp)
1000ee38:	dd400515 	stw	r21,20(sp)
1000ee3c:	dd000415 	stw	r20,16(sp)
1000ee40:	dcc00315 	stw	r19,12(sp)
1000ee44:	dc400115 	stw	r17,4(sp)
1000ee48:	dc000015 	stw	r16,0(sp)
1000ee4c:	3025883a 	mov	r18,r6
1000ee50:	2800b726 	beq	r5,zero,1000f130 <_realloc_r+0x310>
1000ee54:	282b883a 	mov	r21,r5
1000ee58:	2029883a 	mov	r20,r4
1000ee5c:	00151b40 	call	100151b4 <__malloc_lock>
1000ee60:	a8bfff17 	ldw	r2,-4(r21)
1000ee64:	043fff04 	movi	r16,-4
1000ee68:	90c002c4 	addi	r3,r18,11
1000ee6c:	01000584 	movi	r4,22
1000ee70:	acfffe04 	addi	r19,r21,-8
1000ee74:	1420703a 	and	r16,r2,r16
1000ee78:	20c0332e 	bgeu	r4,r3,1000ef48 <_realloc_r+0x128>
1000ee7c:	047ffe04 	movi	r17,-8
1000ee80:	1c62703a 	and	r17,r3,r17
1000ee84:	8807883a 	mov	r3,r17
1000ee88:	88005816 	blt	r17,zero,1000efec <_realloc_r+0x1cc>
1000ee8c:	8c805736 	bltu	r17,r18,1000efec <_realloc_r+0x1cc>
1000ee90:	80c0300e 	bge	r16,r3,1000ef54 <_realloc_r+0x134>
1000ee94:	070400b4 	movhi	fp,4098
1000ee98:	e723c704 	addi	fp,fp,-28900
1000ee9c:	e1c00217 	ldw	r7,8(fp)
1000eea0:	9c09883a 	add	r4,r19,r16
1000eea4:	22000117 	ldw	r8,4(r4)
1000eea8:	21c06326 	beq	r4,r7,1000f038 <_realloc_r+0x218>
1000eeac:	017fff84 	movi	r5,-2
1000eeb0:	414a703a 	and	r5,r8,r5
1000eeb4:	214b883a 	add	r5,r4,r5
1000eeb8:	29800117 	ldw	r6,4(r5)
1000eebc:	3180004c 	andi	r6,r6,1
1000eec0:	30003f26 	beq	r6,zero,1000efc0 <_realloc_r+0x1a0>
1000eec4:	1080004c 	andi	r2,r2,1
1000eec8:	10008326 	beq	r2,zero,1000f0d8 <_realloc_r+0x2b8>
1000eecc:	900b883a 	mov	r5,r18
1000eed0:	a009883a 	mov	r4,r20
1000eed4:	000d1d40 	call	1000d1d4 <_malloc_r>
1000eed8:	1025883a 	mov	r18,r2
1000eedc:	10011e26 	beq	r2,zero,1000f358 <_realloc_r+0x538>
1000eee0:	a93fff17 	ldw	r4,-4(r21)
1000eee4:	10fffe04 	addi	r3,r2,-8
1000eee8:	00bfff84 	movi	r2,-2
1000eeec:	2084703a 	and	r2,r4,r2
1000eef0:	9885883a 	add	r2,r19,r2
1000eef4:	1880ee26 	beq	r3,r2,1000f2b0 <_realloc_r+0x490>
1000eef8:	81bfff04 	addi	r6,r16,-4
1000eefc:	00800904 	movi	r2,36
1000ef00:	1180b836 	bltu	r2,r6,1000f1e4 <_realloc_r+0x3c4>
1000ef04:	00c004c4 	movi	r3,19
1000ef08:	19809636 	bltu	r3,r6,1000f164 <_realloc_r+0x344>
1000ef0c:	9005883a 	mov	r2,r18
1000ef10:	a807883a 	mov	r3,r21
1000ef14:	19000017 	ldw	r4,0(r3)
1000ef18:	11000015 	stw	r4,0(r2)
1000ef1c:	19000117 	ldw	r4,4(r3)
1000ef20:	11000115 	stw	r4,4(r2)
1000ef24:	18c00217 	ldw	r3,8(r3)
1000ef28:	10c00215 	stw	r3,8(r2)
1000ef2c:	a80b883a 	mov	r5,r21
1000ef30:	a009883a 	mov	r4,r20
1000ef34:	000c5dc0 	call	1000c5dc <_free_r>
1000ef38:	a009883a 	mov	r4,r20
1000ef3c:	00151d80 	call	100151d8 <__malloc_unlock>
1000ef40:	9005883a 	mov	r2,r18
1000ef44:	00001206 	br	1000ef90 <_realloc_r+0x170>
1000ef48:	00c00404 	movi	r3,16
1000ef4c:	1823883a 	mov	r17,r3
1000ef50:	003fce06 	br	1000ee8c <__alt_data_end+0xf800ee8c>
1000ef54:	a825883a 	mov	r18,r21
1000ef58:	8445c83a 	sub	r2,r16,r17
1000ef5c:	00c003c4 	movi	r3,15
1000ef60:	18802636 	bltu	r3,r2,1000effc <_realloc_r+0x1dc>
1000ef64:	99800117 	ldw	r6,4(r19)
1000ef68:	9c07883a 	add	r3,r19,r16
1000ef6c:	3180004c 	andi	r6,r6,1
1000ef70:	3420b03a 	or	r16,r6,r16
1000ef74:	9c000115 	stw	r16,4(r19)
1000ef78:	18800117 	ldw	r2,4(r3)
1000ef7c:	10800054 	ori	r2,r2,1
1000ef80:	18800115 	stw	r2,4(r3)
1000ef84:	a009883a 	mov	r4,r20
1000ef88:	00151d80 	call	100151d8 <__malloc_unlock>
1000ef8c:	9005883a 	mov	r2,r18
1000ef90:	dfc00917 	ldw	ra,36(sp)
1000ef94:	df000817 	ldw	fp,32(sp)
1000ef98:	ddc00717 	ldw	r23,28(sp)
1000ef9c:	dd800617 	ldw	r22,24(sp)
1000efa0:	dd400517 	ldw	r21,20(sp)
1000efa4:	dd000417 	ldw	r20,16(sp)
1000efa8:	dcc00317 	ldw	r19,12(sp)
1000efac:	dc800217 	ldw	r18,8(sp)
1000efb0:	dc400117 	ldw	r17,4(sp)
1000efb4:	dc000017 	ldw	r16,0(sp)
1000efb8:	dec00a04 	addi	sp,sp,40
1000efbc:	f800283a 	ret
1000efc0:	017fff04 	movi	r5,-4
1000efc4:	414a703a 	and	r5,r8,r5
1000efc8:	814d883a 	add	r6,r16,r5
1000efcc:	30c01f16 	blt	r6,r3,1000f04c <_realloc_r+0x22c>
1000efd0:	20800317 	ldw	r2,12(r4)
1000efd4:	20c00217 	ldw	r3,8(r4)
1000efd8:	a825883a 	mov	r18,r21
1000efdc:	3021883a 	mov	r16,r6
1000efe0:	18800315 	stw	r2,12(r3)
1000efe4:	10c00215 	stw	r3,8(r2)
1000efe8:	003fdb06 	br	1000ef58 <__alt_data_end+0xf800ef58>
1000efec:	00800304 	movi	r2,12
1000eff0:	a0800015 	stw	r2,0(r20)
1000eff4:	0005883a 	mov	r2,zero
1000eff8:	003fe506 	br	1000ef90 <__alt_data_end+0xf800ef90>
1000effc:	98c00117 	ldw	r3,4(r19)
1000f000:	9c4b883a 	add	r5,r19,r17
1000f004:	11000054 	ori	r4,r2,1
1000f008:	18c0004c 	andi	r3,r3,1
1000f00c:	1c62b03a 	or	r17,r3,r17
1000f010:	9c400115 	stw	r17,4(r19)
1000f014:	29000115 	stw	r4,4(r5)
1000f018:	2885883a 	add	r2,r5,r2
1000f01c:	10c00117 	ldw	r3,4(r2)
1000f020:	29400204 	addi	r5,r5,8
1000f024:	a009883a 	mov	r4,r20
1000f028:	18c00054 	ori	r3,r3,1
1000f02c:	10c00115 	stw	r3,4(r2)
1000f030:	000c5dc0 	call	1000c5dc <_free_r>
1000f034:	003fd306 	br	1000ef84 <__alt_data_end+0xf800ef84>
1000f038:	017fff04 	movi	r5,-4
1000f03c:	414a703a 	and	r5,r8,r5
1000f040:	89800404 	addi	r6,r17,16
1000f044:	8151883a 	add	r8,r16,r5
1000f048:	4180590e 	bge	r8,r6,1000f1b0 <_realloc_r+0x390>
1000f04c:	1080004c 	andi	r2,r2,1
1000f050:	103f9e1e 	bne	r2,zero,1000eecc <__alt_data_end+0xf800eecc>
1000f054:	adbffe17 	ldw	r22,-8(r21)
1000f058:	00bfff04 	movi	r2,-4
1000f05c:	9dadc83a 	sub	r22,r19,r22
1000f060:	b1800117 	ldw	r6,4(r22)
1000f064:	3084703a 	and	r2,r6,r2
1000f068:	20002026 	beq	r4,zero,1000f0ec <_realloc_r+0x2cc>
1000f06c:	80af883a 	add	r23,r16,r2
1000f070:	b96f883a 	add	r23,r23,r5
1000f074:	21c05f26 	beq	r4,r7,1000f1f4 <_realloc_r+0x3d4>
1000f078:	b8c01c16 	blt	r23,r3,1000f0ec <_realloc_r+0x2cc>
1000f07c:	20800317 	ldw	r2,12(r4)
1000f080:	20c00217 	ldw	r3,8(r4)
1000f084:	81bfff04 	addi	r6,r16,-4
1000f088:	01000904 	movi	r4,36
1000f08c:	18800315 	stw	r2,12(r3)
1000f090:	10c00215 	stw	r3,8(r2)
1000f094:	b0c00217 	ldw	r3,8(r22)
1000f098:	b0800317 	ldw	r2,12(r22)
1000f09c:	b4800204 	addi	r18,r22,8
1000f0a0:	18800315 	stw	r2,12(r3)
1000f0a4:	10c00215 	stw	r3,8(r2)
1000f0a8:	21801b36 	bltu	r4,r6,1000f118 <_realloc_r+0x2f8>
1000f0ac:	008004c4 	movi	r2,19
1000f0b0:	1180352e 	bgeu	r2,r6,1000f188 <_realloc_r+0x368>
1000f0b4:	a8800017 	ldw	r2,0(r21)
1000f0b8:	b0800215 	stw	r2,8(r22)
1000f0bc:	a8800117 	ldw	r2,4(r21)
1000f0c0:	b0800315 	stw	r2,12(r22)
1000f0c4:	008006c4 	movi	r2,27
1000f0c8:	11807f36 	bltu	r2,r6,1000f2c8 <_realloc_r+0x4a8>
1000f0cc:	b0800404 	addi	r2,r22,16
1000f0d0:	ad400204 	addi	r21,r21,8
1000f0d4:	00002d06 	br	1000f18c <_realloc_r+0x36c>
1000f0d8:	adbffe17 	ldw	r22,-8(r21)
1000f0dc:	00bfff04 	movi	r2,-4
1000f0e0:	9dadc83a 	sub	r22,r19,r22
1000f0e4:	b1000117 	ldw	r4,4(r22)
1000f0e8:	2084703a 	and	r2,r4,r2
1000f0ec:	b03f7726 	beq	r22,zero,1000eecc <__alt_data_end+0xf800eecc>
1000f0f0:	80af883a 	add	r23,r16,r2
1000f0f4:	b8ff7516 	blt	r23,r3,1000eecc <__alt_data_end+0xf800eecc>
1000f0f8:	b0800317 	ldw	r2,12(r22)
1000f0fc:	b0c00217 	ldw	r3,8(r22)
1000f100:	81bfff04 	addi	r6,r16,-4
1000f104:	01000904 	movi	r4,36
1000f108:	18800315 	stw	r2,12(r3)
1000f10c:	10c00215 	stw	r3,8(r2)
1000f110:	b4800204 	addi	r18,r22,8
1000f114:	21bfe52e 	bgeu	r4,r6,1000f0ac <__alt_data_end+0xf800f0ac>
1000f118:	a80b883a 	mov	r5,r21
1000f11c:	9009883a 	mov	r4,r18
1000f120:	000dc0c0 	call	1000dc0c <memmove>
1000f124:	b821883a 	mov	r16,r23
1000f128:	b027883a 	mov	r19,r22
1000f12c:	003f8a06 	br	1000ef58 <__alt_data_end+0xf800ef58>
1000f130:	300b883a 	mov	r5,r6
1000f134:	dfc00917 	ldw	ra,36(sp)
1000f138:	df000817 	ldw	fp,32(sp)
1000f13c:	ddc00717 	ldw	r23,28(sp)
1000f140:	dd800617 	ldw	r22,24(sp)
1000f144:	dd400517 	ldw	r21,20(sp)
1000f148:	dd000417 	ldw	r20,16(sp)
1000f14c:	dcc00317 	ldw	r19,12(sp)
1000f150:	dc800217 	ldw	r18,8(sp)
1000f154:	dc400117 	ldw	r17,4(sp)
1000f158:	dc000017 	ldw	r16,0(sp)
1000f15c:	dec00a04 	addi	sp,sp,40
1000f160:	000d1d41 	jmpi	1000d1d4 <_malloc_r>
1000f164:	a8c00017 	ldw	r3,0(r21)
1000f168:	90c00015 	stw	r3,0(r18)
1000f16c:	a8c00117 	ldw	r3,4(r21)
1000f170:	90c00115 	stw	r3,4(r18)
1000f174:	00c006c4 	movi	r3,27
1000f178:	19804536 	bltu	r3,r6,1000f290 <_realloc_r+0x470>
1000f17c:	90800204 	addi	r2,r18,8
1000f180:	a8c00204 	addi	r3,r21,8
1000f184:	003f6306 	br	1000ef14 <__alt_data_end+0xf800ef14>
1000f188:	9005883a 	mov	r2,r18
1000f18c:	a8c00017 	ldw	r3,0(r21)
1000f190:	b821883a 	mov	r16,r23
1000f194:	b027883a 	mov	r19,r22
1000f198:	10c00015 	stw	r3,0(r2)
1000f19c:	a8c00117 	ldw	r3,4(r21)
1000f1a0:	10c00115 	stw	r3,4(r2)
1000f1a4:	a8c00217 	ldw	r3,8(r21)
1000f1a8:	10c00215 	stw	r3,8(r2)
1000f1ac:	003f6a06 	br	1000ef58 <__alt_data_end+0xf800ef58>
1000f1b0:	9c67883a 	add	r19,r19,r17
1000f1b4:	4445c83a 	sub	r2,r8,r17
1000f1b8:	e4c00215 	stw	r19,8(fp)
1000f1bc:	10800054 	ori	r2,r2,1
1000f1c0:	98800115 	stw	r2,4(r19)
1000f1c4:	a8bfff17 	ldw	r2,-4(r21)
1000f1c8:	a009883a 	mov	r4,r20
1000f1cc:	1080004c 	andi	r2,r2,1
1000f1d0:	1462b03a 	or	r17,r2,r17
1000f1d4:	ac7fff15 	stw	r17,-4(r21)
1000f1d8:	00151d80 	call	100151d8 <__malloc_unlock>
1000f1dc:	a805883a 	mov	r2,r21
1000f1e0:	003f6b06 	br	1000ef90 <__alt_data_end+0xf800ef90>
1000f1e4:	a80b883a 	mov	r5,r21
1000f1e8:	9009883a 	mov	r4,r18
1000f1ec:	000dc0c0 	call	1000dc0c <memmove>
1000f1f0:	003f4e06 	br	1000ef2c <__alt_data_end+0xf800ef2c>
1000f1f4:	89000404 	addi	r4,r17,16
1000f1f8:	b93fbc16 	blt	r23,r4,1000f0ec <__alt_data_end+0xf800f0ec>
1000f1fc:	b0800317 	ldw	r2,12(r22)
1000f200:	b0c00217 	ldw	r3,8(r22)
1000f204:	81bfff04 	addi	r6,r16,-4
1000f208:	01000904 	movi	r4,36
1000f20c:	18800315 	stw	r2,12(r3)
1000f210:	10c00215 	stw	r3,8(r2)
1000f214:	b4800204 	addi	r18,r22,8
1000f218:	21804336 	bltu	r4,r6,1000f328 <_realloc_r+0x508>
1000f21c:	008004c4 	movi	r2,19
1000f220:	11803f2e 	bgeu	r2,r6,1000f320 <_realloc_r+0x500>
1000f224:	a8800017 	ldw	r2,0(r21)
1000f228:	b0800215 	stw	r2,8(r22)
1000f22c:	a8800117 	ldw	r2,4(r21)
1000f230:	b0800315 	stw	r2,12(r22)
1000f234:	008006c4 	movi	r2,27
1000f238:	11803f36 	bltu	r2,r6,1000f338 <_realloc_r+0x518>
1000f23c:	b0800404 	addi	r2,r22,16
1000f240:	ad400204 	addi	r21,r21,8
1000f244:	a8c00017 	ldw	r3,0(r21)
1000f248:	10c00015 	stw	r3,0(r2)
1000f24c:	a8c00117 	ldw	r3,4(r21)
1000f250:	10c00115 	stw	r3,4(r2)
1000f254:	a8c00217 	ldw	r3,8(r21)
1000f258:	10c00215 	stw	r3,8(r2)
1000f25c:	b447883a 	add	r3,r22,r17
1000f260:	bc45c83a 	sub	r2,r23,r17
1000f264:	e0c00215 	stw	r3,8(fp)
1000f268:	10800054 	ori	r2,r2,1
1000f26c:	18800115 	stw	r2,4(r3)
1000f270:	b0800117 	ldw	r2,4(r22)
1000f274:	a009883a 	mov	r4,r20
1000f278:	1080004c 	andi	r2,r2,1
1000f27c:	1462b03a 	or	r17,r2,r17
1000f280:	b4400115 	stw	r17,4(r22)
1000f284:	00151d80 	call	100151d8 <__malloc_unlock>
1000f288:	9005883a 	mov	r2,r18
1000f28c:	003f4006 	br	1000ef90 <__alt_data_end+0xf800ef90>
1000f290:	a8c00217 	ldw	r3,8(r21)
1000f294:	90c00215 	stw	r3,8(r18)
1000f298:	a8c00317 	ldw	r3,12(r21)
1000f29c:	90c00315 	stw	r3,12(r18)
1000f2a0:	30801126 	beq	r6,r2,1000f2e8 <_realloc_r+0x4c8>
1000f2a4:	90800404 	addi	r2,r18,16
1000f2a8:	a8c00404 	addi	r3,r21,16
1000f2ac:	003f1906 	br	1000ef14 <__alt_data_end+0xf800ef14>
1000f2b0:	90ffff17 	ldw	r3,-4(r18)
1000f2b4:	00bfff04 	movi	r2,-4
1000f2b8:	a825883a 	mov	r18,r21
1000f2bc:	1884703a 	and	r2,r3,r2
1000f2c0:	80a1883a 	add	r16,r16,r2
1000f2c4:	003f2406 	br	1000ef58 <__alt_data_end+0xf800ef58>
1000f2c8:	a8800217 	ldw	r2,8(r21)
1000f2cc:	b0800415 	stw	r2,16(r22)
1000f2d0:	a8800317 	ldw	r2,12(r21)
1000f2d4:	b0800515 	stw	r2,20(r22)
1000f2d8:	31000a26 	beq	r6,r4,1000f304 <_realloc_r+0x4e4>
1000f2dc:	b0800604 	addi	r2,r22,24
1000f2e0:	ad400404 	addi	r21,r21,16
1000f2e4:	003fa906 	br	1000f18c <__alt_data_end+0xf800f18c>
1000f2e8:	a9000417 	ldw	r4,16(r21)
1000f2ec:	90800604 	addi	r2,r18,24
1000f2f0:	a8c00604 	addi	r3,r21,24
1000f2f4:	91000415 	stw	r4,16(r18)
1000f2f8:	a9000517 	ldw	r4,20(r21)
1000f2fc:	91000515 	stw	r4,20(r18)
1000f300:	003f0406 	br	1000ef14 <__alt_data_end+0xf800ef14>
1000f304:	a8c00417 	ldw	r3,16(r21)
1000f308:	ad400604 	addi	r21,r21,24
1000f30c:	b0800804 	addi	r2,r22,32
1000f310:	b0c00615 	stw	r3,24(r22)
1000f314:	a8ffff17 	ldw	r3,-4(r21)
1000f318:	b0c00715 	stw	r3,28(r22)
1000f31c:	003f9b06 	br	1000f18c <__alt_data_end+0xf800f18c>
1000f320:	9005883a 	mov	r2,r18
1000f324:	003fc706 	br	1000f244 <__alt_data_end+0xf800f244>
1000f328:	a80b883a 	mov	r5,r21
1000f32c:	9009883a 	mov	r4,r18
1000f330:	000dc0c0 	call	1000dc0c <memmove>
1000f334:	003fc906 	br	1000f25c <__alt_data_end+0xf800f25c>
1000f338:	a8800217 	ldw	r2,8(r21)
1000f33c:	b0800415 	stw	r2,16(r22)
1000f340:	a8800317 	ldw	r2,12(r21)
1000f344:	b0800515 	stw	r2,20(r22)
1000f348:	31000726 	beq	r6,r4,1000f368 <_realloc_r+0x548>
1000f34c:	b0800604 	addi	r2,r22,24
1000f350:	ad400404 	addi	r21,r21,16
1000f354:	003fbb06 	br	1000f244 <__alt_data_end+0xf800f244>
1000f358:	a009883a 	mov	r4,r20
1000f35c:	00151d80 	call	100151d8 <__malloc_unlock>
1000f360:	0005883a 	mov	r2,zero
1000f364:	003f0a06 	br	1000ef90 <__alt_data_end+0xf800ef90>
1000f368:	a8c00417 	ldw	r3,16(r21)
1000f36c:	ad400604 	addi	r21,r21,24
1000f370:	b0800804 	addi	r2,r22,32
1000f374:	b0c00615 	stw	r3,24(r22)
1000f378:	a8ffff17 	ldw	r3,-4(r21)
1000f37c:	b0c00715 	stw	r3,28(r22)
1000f380:	003fb006 	br	1000f244 <__alt_data_end+0xf800f244>

1000f384 <__fpclassifyd>:
1000f384:	00a00034 	movhi	r2,32768
1000f388:	10bfffc4 	addi	r2,r2,-1
1000f38c:	2884703a 	and	r2,r5,r2
1000f390:	10000726 	beq	r2,zero,1000f3b0 <__fpclassifyd+0x2c>
1000f394:	00fffc34 	movhi	r3,65520
1000f398:	019ff834 	movhi	r6,32736
1000f39c:	28c7883a 	add	r3,r5,r3
1000f3a0:	31bfffc4 	addi	r6,r6,-1
1000f3a4:	30c00536 	bltu	r6,r3,1000f3bc <__fpclassifyd+0x38>
1000f3a8:	00800104 	movi	r2,4
1000f3ac:	f800283a 	ret
1000f3b0:	2000021e 	bne	r4,zero,1000f3bc <__fpclassifyd+0x38>
1000f3b4:	00800084 	movi	r2,2
1000f3b8:	f800283a 	ret
1000f3bc:	00dffc34 	movhi	r3,32752
1000f3c0:	019ff834 	movhi	r6,32736
1000f3c4:	28cb883a 	add	r5,r5,r3
1000f3c8:	31bfffc4 	addi	r6,r6,-1
1000f3cc:	317ff62e 	bgeu	r6,r5,1000f3a8 <__alt_data_end+0xf800f3a8>
1000f3d0:	01400434 	movhi	r5,16
1000f3d4:	297fffc4 	addi	r5,r5,-1
1000f3d8:	28800236 	bltu	r5,r2,1000f3e4 <__fpclassifyd+0x60>
1000f3dc:	008000c4 	movi	r2,3
1000f3e0:	f800283a 	ret
1000f3e4:	10c00226 	beq	r2,r3,1000f3f0 <__fpclassifyd+0x6c>
1000f3e8:	0005883a 	mov	r2,zero
1000f3ec:	f800283a 	ret
1000f3f0:	2005003a 	cmpeq	r2,r4,zero
1000f3f4:	f800283a 	ret

1000f3f8 <_sbrk_r>:
1000f3f8:	defffd04 	addi	sp,sp,-12
1000f3fc:	dc000015 	stw	r16,0(sp)
1000f400:	040400b4 	movhi	r16,4098
1000f404:	dc400115 	stw	r17,4(sp)
1000f408:	8430af04 	addi	r16,r16,-15684
1000f40c:	2023883a 	mov	r17,r4
1000f410:	2809883a 	mov	r4,r5
1000f414:	dfc00215 	stw	ra,8(sp)
1000f418:	80000015 	stw	zero,0(r16)
1000f41c:	00153c00 	call	100153c0 <sbrk>
1000f420:	00ffffc4 	movi	r3,-1
1000f424:	10c00526 	beq	r2,r3,1000f43c <_sbrk_r+0x44>
1000f428:	dfc00217 	ldw	ra,8(sp)
1000f42c:	dc400117 	ldw	r17,4(sp)
1000f430:	dc000017 	ldw	r16,0(sp)
1000f434:	dec00304 	addi	sp,sp,12
1000f438:	f800283a 	ret
1000f43c:	80c00017 	ldw	r3,0(r16)
1000f440:	183ff926 	beq	r3,zero,1000f428 <__alt_data_end+0xf800f428>
1000f444:	88c00015 	stw	r3,0(r17)
1000f448:	003ff706 	br	1000f428 <__alt_data_end+0xf800f428>

1000f44c <__sread>:
1000f44c:	defffe04 	addi	sp,sp,-8
1000f450:	dc000015 	stw	r16,0(sp)
1000f454:	2821883a 	mov	r16,r5
1000f458:	2940038f 	ldh	r5,14(r5)
1000f45c:	dfc00115 	stw	ra,4(sp)
1000f460:	00113080 	call	10011308 <_read_r>
1000f464:	10000716 	blt	r2,zero,1000f484 <__sread+0x38>
1000f468:	80c01417 	ldw	r3,80(r16)
1000f46c:	1887883a 	add	r3,r3,r2
1000f470:	80c01415 	stw	r3,80(r16)
1000f474:	dfc00117 	ldw	ra,4(sp)
1000f478:	dc000017 	ldw	r16,0(sp)
1000f47c:	dec00204 	addi	sp,sp,8
1000f480:	f800283a 	ret
1000f484:	80c0030b 	ldhu	r3,12(r16)
1000f488:	18fbffcc 	andi	r3,r3,61439
1000f48c:	80c0030d 	sth	r3,12(r16)
1000f490:	dfc00117 	ldw	ra,4(sp)
1000f494:	dc000017 	ldw	r16,0(sp)
1000f498:	dec00204 	addi	sp,sp,8
1000f49c:	f800283a 	ret

1000f4a0 <__seofread>:
1000f4a0:	0005883a 	mov	r2,zero
1000f4a4:	f800283a 	ret

1000f4a8 <__swrite>:
1000f4a8:	2880030b 	ldhu	r2,12(r5)
1000f4ac:	defffb04 	addi	sp,sp,-20
1000f4b0:	dcc00315 	stw	r19,12(sp)
1000f4b4:	dc800215 	stw	r18,8(sp)
1000f4b8:	dc400115 	stw	r17,4(sp)
1000f4bc:	dc000015 	stw	r16,0(sp)
1000f4c0:	dfc00415 	stw	ra,16(sp)
1000f4c4:	10c0400c 	andi	r3,r2,256
1000f4c8:	2821883a 	mov	r16,r5
1000f4cc:	2023883a 	mov	r17,r4
1000f4d0:	3025883a 	mov	r18,r6
1000f4d4:	3827883a 	mov	r19,r7
1000f4d8:	18000526 	beq	r3,zero,1000f4f0 <__swrite+0x48>
1000f4dc:	2940038f 	ldh	r5,14(r5)
1000f4e0:	01c00084 	movi	r7,2
1000f4e4:	000d883a 	mov	r6,zero
1000f4e8:	00112a80 	call	100112a8 <_lseek_r>
1000f4ec:	8080030b 	ldhu	r2,12(r16)
1000f4f0:	8140038f 	ldh	r5,14(r16)
1000f4f4:	10bbffcc 	andi	r2,r2,61439
1000f4f8:	980f883a 	mov	r7,r19
1000f4fc:	900d883a 	mov	r6,r18
1000f500:	8809883a 	mov	r4,r17
1000f504:	8080030d 	sth	r2,12(r16)
1000f508:	dfc00417 	ldw	ra,16(sp)
1000f50c:	dcc00317 	ldw	r19,12(sp)
1000f510:	dc800217 	ldw	r18,8(sp)
1000f514:	dc400117 	ldw	r17,4(sp)
1000f518:	dc000017 	ldw	r16,0(sp)
1000f51c:	dec00504 	addi	sp,sp,20
1000f520:	0010d5c1 	jmpi	10010d5c <_write_r>

1000f524 <__sseek>:
1000f524:	defffe04 	addi	sp,sp,-8
1000f528:	dc000015 	stw	r16,0(sp)
1000f52c:	2821883a 	mov	r16,r5
1000f530:	2940038f 	ldh	r5,14(r5)
1000f534:	dfc00115 	stw	ra,4(sp)
1000f538:	00112a80 	call	100112a8 <_lseek_r>
1000f53c:	00ffffc4 	movi	r3,-1
1000f540:	10c00826 	beq	r2,r3,1000f564 <__sseek+0x40>
1000f544:	80c0030b 	ldhu	r3,12(r16)
1000f548:	80801415 	stw	r2,80(r16)
1000f54c:	18c40014 	ori	r3,r3,4096
1000f550:	80c0030d 	sth	r3,12(r16)
1000f554:	dfc00117 	ldw	ra,4(sp)
1000f558:	dc000017 	ldw	r16,0(sp)
1000f55c:	dec00204 	addi	sp,sp,8
1000f560:	f800283a 	ret
1000f564:	80c0030b 	ldhu	r3,12(r16)
1000f568:	18fbffcc 	andi	r3,r3,61439
1000f56c:	80c0030d 	sth	r3,12(r16)
1000f570:	dfc00117 	ldw	ra,4(sp)
1000f574:	dc000017 	ldw	r16,0(sp)
1000f578:	dec00204 	addi	sp,sp,8
1000f57c:	f800283a 	ret

1000f580 <__sclose>:
1000f580:	2940038f 	ldh	r5,14(r5)
1000f584:	0010dbc1 	jmpi	10010dbc <_close_r>

1000f588 <strcmp>:
1000f588:	2144b03a 	or	r2,r4,r5
1000f58c:	108000cc 	andi	r2,r2,3
1000f590:	1000171e 	bne	r2,zero,1000f5f0 <strcmp+0x68>
1000f594:	20800017 	ldw	r2,0(r4)
1000f598:	28c00017 	ldw	r3,0(r5)
1000f59c:	10c0141e 	bne	r2,r3,1000f5f0 <strcmp+0x68>
1000f5a0:	027fbff4 	movhi	r9,65279
1000f5a4:	4a7fbfc4 	addi	r9,r9,-257
1000f5a8:	0086303a 	nor	r3,zero,r2
1000f5ac:	02202074 	movhi	r8,32897
1000f5b0:	1245883a 	add	r2,r2,r9
1000f5b4:	42202004 	addi	r8,r8,-32640
1000f5b8:	10c4703a 	and	r2,r2,r3
1000f5bc:	1204703a 	and	r2,r2,r8
1000f5c0:	10000226 	beq	r2,zero,1000f5cc <strcmp+0x44>
1000f5c4:	00002306 	br	1000f654 <strcmp+0xcc>
1000f5c8:	1000221e 	bne	r2,zero,1000f654 <strcmp+0xcc>
1000f5cc:	21000104 	addi	r4,r4,4
1000f5d0:	20c00017 	ldw	r3,0(r4)
1000f5d4:	29400104 	addi	r5,r5,4
1000f5d8:	29800017 	ldw	r6,0(r5)
1000f5dc:	1a4f883a 	add	r7,r3,r9
1000f5e0:	00c4303a 	nor	r2,zero,r3
1000f5e4:	3884703a 	and	r2,r7,r2
1000f5e8:	1204703a 	and	r2,r2,r8
1000f5ec:	19bff626 	beq	r3,r6,1000f5c8 <__alt_data_end+0xf800f5c8>
1000f5f0:	20800003 	ldbu	r2,0(r4)
1000f5f4:	10c03fcc 	andi	r3,r2,255
1000f5f8:	18c0201c 	xori	r3,r3,128
1000f5fc:	18ffe004 	addi	r3,r3,-128
1000f600:	18000c26 	beq	r3,zero,1000f634 <strcmp+0xac>
1000f604:	29800007 	ldb	r6,0(r5)
1000f608:	19800326 	beq	r3,r6,1000f618 <strcmp+0x90>
1000f60c:	00001306 	br	1000f65c <strcmp+0xd4>
1000f610:	29800007 	ldb	r6,0(r5)
1000f614:	11800b1e 	bne	r2,r6,1000f644 <strcmp+0xbc>
1000f618:	21000044 	addi	r4,r4,1
1000f61c:	20c00003 	ldbu	r3,0(r4)
1000f620:	29400044 	addi	r5,r5,1
1000f624:	18803fcc 	andi	r2,r3,255
1000f628:	1080201c 	xori	r2,r2,128
1000f62c:	10bfe004 	addi	r2,r2,-128
1000f630:	103ff71e 	bne	r2,zero,1000f610 <__alt_data_end+0xf800f610>
1000f634:	0007883a 	mov	r3,zero
1000f638:	28800003 	ldbu	r2,0(r5)
1000f63c:	1885c83a 	sub	r2,r3,r2
1000f640:	f800283a 	ret
1000f644:	28800003 	ldbu	r2,0(r5)
1000f648:	18c03fcc 	andi	r3,r3,255
1000f64c:	1885c83a 	sub	r2,r3,r2
1000f650:	f800283a 	ret
1000f654:	0005883a 	mov	r2,zero
1000f658:	f800283a 	ret
1000f65c:	10c03fcc 	andi	r3,r2,255
1000f660:	003ff506 	br	1000f638 <__alt_data_end+0xf800f638>

1000f664 <__sprint_r.part.0>:
1000f664:	28801917 	ldw	r2,100(r5)
1000f668:	defff604 	addi	sp,sp,-40
1000f66c:	dd400515 	stw	r21,20(sp)
1000f670:	dfc00915 	stw	ra,36(sp)
1000f674:	df000815 	stw	fp,32(sp)
1000f678:	ddc00715 	stw	r23,28(sp)
1000f67c:	dd800615 	stw	r22,24(sp)
1000f680:	dd000415 	stw	r20,16(sp)
1000f684:	dcc00315 	stw	r19,12(sp)
1000f688:	dc800215 	stw	r18,8(sp)
1000f68c:	dc400115 	stw	r17,4(sp)
1000f690:	dc000015 	stw	r16,0(sp)
1000f694:	1088000c 	andi	r2,r2,8192
1000f698:	302b883a 	mov	r21,r6
1000f69c:	10002e26 	beq	r2,zero,1000f758 <__sprint_r.part.0+0xf4>
1000f6a0:	30800217 	ldw	r2,8(r6)
1000f6a4:	35800017 	ldw	r22,0(r6)
1000f6a8:	10002926 	beq	r2,zero,1000f750 <__sprint_r.part.0+0xec>
1000f6ac:	2827883a 	mov	r19,r5
1000f6b0:	2029883a 	mov	r20,r4
1000f6b4:	b5c00104 	addi	r23,r22,4
1000f6b8:	04bfffc4 	movi	r18,-1
1000f6bc:	bc400017 	ldw	r17,0(r23)
1000f6c0:	b4000017 	ldw	r16,0(r22)
1000f6c4:	0039883a 	mov	fp,zero
1000f6c8:	8822d0ba 	srli	r17,r17,2
1000f6cc:	8800031e 	bne	r17,zero,1000f6dc <__sprint_r.part.0+0x78>
1000f6d0:	00001806 	br	1000f734 <__sprint_r.part.0+0xd0>
1000f6d4:	84000104 	addi	r16,r16,4
1000f6d8:	8f001526 	beq	r17,fp,1000f730 <__sprint_r.part.0+0xcc>
1000f6dc:	81400017 	ldw	r5,0(r16)
1000f6e0:	980d883a 	mov	r6,r19
1000f6e4:	a009883a 	mov	r4,r20
1000f6e8:	00111540 	call	10011154 <_fputwc_r>
1000f6ec:	e7000044 	addi	fp,fp,1
1000f6f0:	14bff81e 	bne	r2,r18,1000f6d4 <__alt_data_end+0xf800f6d4>
1000f6f4:	9005883a 	mov	r2,r18
1000f6f8:	a8000215 	stw	zero,8(r21)
1000f6fc:	a8000115 	stw	zero,4(r21)
1000f700:	dfc00917 	ldw	ra,36(sp)
1000f704:	df000817 	ldw	fp,32(sp)
1000f708:	ddc00717 	ldw	r23,28(sp)
1000f70c:	dd800617 	ldw	r22,24(sp)
1000f710:	dd400517 	ldw	r21,20(sp)
1000f714:	dd000417 	ldw	r20,16(sp)
1000f718:	dcc00317 	ldw	r19,12(sp)
1000f71c:	dc800217 	ldw	r18,8(sp)
1000f720:	dc400117 	ldw	r17,4(sp)
1000f724:	dc000017 	ldw	r16,0(sp)
1000f728:	dec00a04 	addi	sp,sp,40
1000f72c:	f800283a 	ret
1000f730:	a8800217 	ldw	r2,8(r21)
1000f734:	8c63883a 	add	r17,r17,r17
1000f738:	8c63883a 	add	r17,r17,r17
1000f73c:	1445c83a 	sub	r2,r2,r17
1000f740:	a8800215 	stw	r2,8(r21)
1000f744:	b5800204 	addi	r22,r22,8
1000f748:	bdc00204 	addi	r23,r23,8
1000f74c:	103fdb1e 	bne	r2,zero,1000f6bc <__alt_data_end+0xf800f6bc>
1000f750:	0005883a 	mov	r2,zero
1000f754:	003fe806 	br	1000f6f8 <__alt_data_end+0xf800f6f8>
1000f758:	000c8ec0 	call	1000c8ec <__sfvwrite_r>
1000f75c:	003fe606 	br	1000f6f8 <__alt_data_end+0xf800f6f8>

1000f760 <__sprint_r>:
1000f760:	30c00217 	ldw	r3,8(r6)
1000f764:	18000126 	beq	r3,zero,1000f76c <__sprint_r+0xc>
1000f768:	000f6641 	jmpi	1000f664 <__sprint_r.part.0>
1000f76c:	30000115 	stw	zero,4(r6)
1000f770:	0005883a 	mov	r2,zero
1000f774:	f800283a 	ret

1000f778 <___vfiprintf_internal_r>:
1000f778:	deffca04 	addi	sp,sp,-216
1000f77c:	dd403115 	stw	r21,196(sp)
1000f780:	dfc03515 	stw	ra,212(sp)
1000f784:	df003415 	stw	fp,208(sp)
1000f788:	ddc03315 	stw	r23,204(sp)
1000f78c:	dd803215 	stw	r22,200(sp)
1000f790:	dd003015 	stw	r20,192(sp)
1000f794:	dcc02f15 	stw	r19,188(sp)
1000f798:	dc802e15 	stw	r18,184(sp)
1000f79c:	dc402d15 	stw	r17,180(sp)
1000f7a0:	dc002c15 	stw	r16,176(sp)
1000f7a4:	d9002115 	stw	r4,132(sp)
1000f7a8:	d9402015 	stw	r5,128(sp)
1000f7ac:	d9c02215 	stw	r7,136(sp)
1000f7b0:	302b883a 	mov	r21,r6
1000f7b4:	20000226 	beq	r4,zero,1000f7c0 <___vfiprintf_internal_r+0x48>
1000f7b8:	20800e17 	ldw	r2,56(r4)
1000f7bc:	1000cf26 	beq	r2,zero,1000fafc <___vfiprintf_internal_r+0x384>
1000f7c0:	d8c02017 	ldw	r3,128(sp)
1000f7c4:	1880030b 	ldhu	r2,12(r3)
1000f7c8:	10c8000c 	andi	r3,r2,8192
1000f7cc:	1800071e 	bne	r3,zero,1000f7ec <___vfiprintf_internal_r+0x74>
1000f7d0:	d9402017 	ldw	r5,128(sp)
1000f7d4:	00f7ffc4 	movi	r3,-8193
1000f7d8:	10880014 	ori	r2,r2,8192
1000f7dc:	29001917 	ldw	r4,100(r5)
1000f7e0:	2880030d 	sth	r2,12(r5)
1000f7e4:	20c6703a 	and	r3,r4,r3
1000f7e8:	28c01915 	stw	r3,100(r5)
1000f7ec:	10c0020c 	andi	r3,r2,8
1000f7f0:	1800a526 	beq	r3,zero,1000fa88 <___vfiprintf_internal_r+0x310>
1000f7f4:	d9002017 	ldw	r4,128(sp)
1000f7f8:	20c00417 	ldw	r3,16(r4)
1000f7fc:	1800a226 	beq	r3,zero,1000fa88 <___vfiprintf_internal_r+0x310>
1000f800:	1080068c 	andi	r2,r2,26
1000f804:	00c00284 	movi	r3,10
1000f808:	10c0a826 	beq	r2,r3,1000faac <___vfiprintf_internal_r+0x334>
1000f80c:	d9001a04 	addi	r4,sp,104
1000f810:	d94019c4 	addi	r5,sp,103
1000f814:	048400b4 	movhi	r18,4098
1000f818:	2145c83a 	sub	r2,r4,r5
1000f81c:	94a24b04 	addi	r18,r18,-30420
1000f820:	d9001e15 	stw	r4,120(sp)
1000f824:	d9401f15 	stw	r5,124(sp)
1000f828:	dec01a15 	stw	sp,104(sp)
1000f82c:	d8001c15 	stw	zero,112(sp)
1000f830:	d8001b15 	stw	zero,108(sp)
1000f834:	d811883a 	mov	r8,sp
1000f838:	d8002615 	stw	zero,152(sp)
1000f83c:	d8002415 	stw	zero,144(sp)
1000f840:	d8802815 	stw	r2,160(sp)
1000f844:	a82d883a 	mov	r22,r21
1000f848:	b0800007 	ldb	r2,0(r22)
1000f84c:	10040d26 	beq	r2,zero,10010884 <___vfiprintf_internal_r+0x110c>
1000f850:	00c00944 	movi	r3,37
1000f854:	b029883a 	mov	r20,r22
1000f858:	10c0021e 	bne	r2,r3,1000f864 <___vfiprintf_internal_r+0xec>
1000f85c:	00001606 	br	1000f8b8 <___vfiprintf_internal_r+0x140>
1000f860:	10c00326 	beq	r2,r3,1000f870 <___vfiprintf_internal_r+0xf8>
1000f864:	a5000044 	addi	r20,r20,1
1000f868:	a0800007 	ldb	r2,0(r20)
1000f86c:	103ffc1e 	bne	r2,zero,1000f860 <__alt_data_end+0xf800f860>
1000f870:	a5a1c83a 	sub	r16,r20,r22
1000f874:	80001026 	beq	r16,zero,1000f8b8 <___vfiprintf_internal_r+0x140>
1000f878:	d8c01c17 	ldw	r3,112(sp)
1000f87c:	d8801b17 	ldw	r2,108(sp)
1000f880:	45800015 	stw	r22,0(r8)
1000f884:	80c7883a 	add	r3,r16,r3
1000f888:	10800044 	addi	r2,r2,1
1000f88c:	44000115 	stw	r16,4(r8)
1000f890:	d8c01c15 	stw	r3,112(sp)
1000f894:	d8801b15 	stw	r2,108(sp)
1000f898:	010001c4 	movi	r4,7
1000f89c:	2080750e 	bge	r4,r2,1000fa74 <___vfiprintf_internal_r+0x2fc>
1000f8a0:	1803951e 	bne	r3,zero,100106f8 <___vfiprintf_internal_r+0xf80>
1000f8a4:	d8c02417 	ldw	r3,144(sp)
1000f8a8:	d8001b15 	stw	zero,108(sp)
1000f8ac:	d811883a 	mov	r8,sp
1000f8b0:	1c07883a 	add	r3,r3,r16
1000f8b4:	d8c02415 	stw	r3,144(sp)
1000f8b8:	a0800007 	ldb	r2,0(r20)
1000f8bc:	1002e026 	beq	r2,zero,10010440 <___vfiprintf_internal_r+0xcc8>
1000f8c0:	a5800044 	addi	r22,r20,1
1000f8c4:	a0c00047 	ldb	r3,1(r20)
1000f8c8:	d8001d85 	stb	zero,118(sp)
1000f8cc:	0027883a 	mov	r19,zero
1000f8d0:	d8002305 	stb	zero,140(sp)
1000f8d4:	043fffc4 	movi	r16,-1
1000f8d8:	d8002515 	stw	zero,148(sp)
1000f8dc:	0023883a 	mov	r17,zero
1000f8e0:	05001604 	movi	r20,88
1000f8e4:	05400244 	movi	r21,9
1000f8e8:	402f883a 	mov	r23,r8
1000f8ec:	b5800044 	addi	r22,r22,1
1000f8f0:	18bff804 	addi	r2,r3,-32
1000f8f4:	a0827736 	bltu	r20,r2,100102d4 <___vfiprintf_internal_r+0xb5c>
1000f8f8:	100490ba 	slli	r2,r2,2
1000f8fc:	01040074 	movhi	r4,4097
1000f900:	213e4404 	addi	r4,r4,-1776
1000f904:	1105883a 	add	r2,r2,r4
1000f908:	10800017 	ldw	r2,0(r2)
1000f90c:	1000683a 	jmp	r2
1000f910:	1000ffd4 	ori	zero,r2,1023
1000f914:	100102d4 	ori	zero,r2,1035
1000f918:	100102d4 	ori	zero,r2,1035
1000f91c:	1000fff0 	cmpltui	zero,r2,1023
1000f920:	100102d4 	ori	zero,r2,1035
1000f924:	100102d4 	ori	zero,r2,1035
1000f928:	100102d4 	ori	zero,r2,1035
1000f92c:	100102d4 	ori	zero,r2,1035
1000f930:	100102d4 	ori	zero,r2,1035
1000f934:	100102d4 	ori	zero,r2,1035
1000f938:	100101f8 	rdprs	zero,r2,1031
1000f93c:	1001021c 	xori	zero,r2,1032
1000f940:	100102d4 	ori	zero,r2,1035
1000f944:	1000fb14 	ori	zero,r2,1004
1000f948:	10010230 	cmpltui	zero,r2,1032
1000f94c:	100102d4 	ori	zero,r2,1035
1000f950:	1000fffc 	xorhi	zero,r2,1023
1000f954:	10010008 	cmpgei	zero,r2,1024
1000f958:	10010008 	cmpgei	zero,r2,1024
1000f95c:	10010008 	cmpgei	zero,r2,1024
1000f960:	10010008 	cmpgei	zero,r2,1024
1000f964:	10010008 	cmpgei	zero,r2,1024
1000f968:	10010008 	cmpgei	zero,r2,1024
1000f96c:	10010008 	cmpgei	zero,r2,1024
1000f970:	10010008 	cmpgei	zero,r2,1024
1000f974:	10010008 	cmpgei	zero,r2,1024
1000f978:	100102d4 	ori	zero,r2,1035
1000f97c:	100102d4 	ori	zero,r2,1035
1000f980:	100102d4 	ori	zero,r2,1035
1000f984:	100102d4 	ori	zero,r2,1035
1000f988:	100102d4 	ori	zero,r2,1035
1000f98c:	100102d4 	ori	zero,r2,1035
1000f990:	100102d4 	ori	zero,r2,1035
1000f994:	100102d4 	ori	zero,r2,1035
1000f998:	100102d4 	ori	zero,r2,1035
1000f99c:	100102d4 	ori	zero,r2,1035
1000f9a0:	10010048 	cmpgei	zero,r2,1025
1000f9a4:	100102d4 	ori	zero,r2,1035
1000f9a8:	100102d4 	ori	zero,r2,1035
1000f9ac:	100102d4 	ori	zero,r2,1035
1000f9b0:	100102d4 	ori	zero,r2,1035
1000f9b4:	100102d4 	ori	zero,r2,1035
1000f9b8:	100102d4 	ori	zero,r2,1035
1000f9bc:	100102d4 	ori	zero,r2,1035
1000f9c0:	100102d4 	ori	zero,r2,1035
1000f9c4:	100102d4 	ori	zero,r2,1035
1000f9c8:	100102d4 	ori	zero,r2,1035
1000f9cc:	10010084 	addi	zero,r2,1026
1000f9d0:	100102d4 	ori	zero,r2,1035
1000f9d4:	100102d4 	ori	zero,r2,1035
1000f9d8:	100102d4 	ori	zero,r2,1035
1000f9dc:	100102d4 	ori	zero,r2,1035
1000f9e0:	100102d4 	ori	zero,r2,1035
1000f9e4:	100100e0 	cmpeqi	zero,r2,1027
1000f9e8:	100102d4 	ori	zero,r2,1035
1000f9ec:	100102d4 	ori	zero,r2,1035
1000f9f0:	10010154 	ori	zero,r2,1029
1000f9f4:	100102d4 	ori	zero,r2,1035
1000f9f8:	100102d4 	ori	zero,r2,1035
1000f9fc:	100102d4 	ori	zero,r2,1035
1000fa00:	100102d4 	ori	zero,r2,1035
1000fa04:	100102d4 	ori	zero,r2,1035
1000fa08:	100102d4 	ori	zero,r2,1035
1000fa0c:	100102d4 	ori	zero,r2,1035
1000fa10:	100102d4 	ori	zero,r2,1035
1000fa14:	100102d4 	ori	zero,r2,1035
1000fa18:	100102d4 	ori	zero,r2,1035
1000fa1c:	1000fefc 	xorhi	zero,r2,1019
1000fa20:	1000ff2c 	andhi	zero,r2,1020
1000fa24:	100102d4 	ori	zero,r2,1035
1000fa28:	100102d4 	ori	zero,r2,1035
1000fa2c:	100102d4 	ori	zero,r2,1035
1000fa30:	1001027c 	xorhi	zero,r2,1033
1000fa34:	1000ff2c 	andhi	zero,r2,1020
1000fa38:	100102d4 	ori	zero,r2,1035
1000fa3c:	100102d4 	ori	zero,r2,1035
1000fa40:	1000fdd4 	ori	zero,r2,1015
1000fa44:	100102d4 	ori	zero,r2,1035
1000fa48:	1000fde8 	cmpgeui	zero,r2,1015
1000fa4c:	1000fe20 	cmpeqi	zero,r2,1016
1000fa50:	1000fb20 	cmpeqi	zero,r2,1004
1000fa54:	1000fdc8 	cmpgei	zero,r2,1015
1000fa58:	100102d4 	ori	zero,r2,1035
1000fa5c:	10010194 	ori	zero,r2,1030
1000fa60:	100102d4 	ori	zero,r2,1035
1000fa64:	100101e0 	cmpeqi	zero,r2,1031
1000fa68:	100102d4 	ori	zero,r2,1035
1000fa6c:	100102d4 	ori	zero,r2,1035
1000fa70:	1000fea4 	muli	zero,r2,1018
1000fa74:	42000204 	addi	r8,r8,8
1000fa78:	d8c02417 	ldw	r3,144(sp)
1000fa7c:	1c07883a 	add	r3,r3,r16
1000fa80:	d8c02415 	stw	r3,144(sp)
1000fa84:	003f8c06 	br	1000f8b8 <__alt_data_end+0xf800f8b8>
1000fa88:	d9402017 	ldw	r5,128(sp)
1000fa8c:	d9002117 	ldw	r4,132(sp)
1000fa90:	000a45c0 	call	1000a45c <__swsetup_r>
1000fa94:	1003c11e 	bne	r2,zero,1001099c <___vfiprintf_internal_r+0x1224>
1000fa98:	d9402017 	ldw	r5,128(sp)
1000fa9c:	00c00284 	movi	r3,10
1000faa0:	2880030b 	ldhu	r2,12(r5)
1000faa4:	1080068c 	andi	r2,r2,26
1000faa8:	10ff581e 	bne	r2,r3,1000f80c <__alt_data_end+0xf800f80c>
1000faac:	d8c02017 	ldw	r3,128(sp)
1000fab0:	1880038f 	ldh	r2,14(r3)
1000fab4:	103f5516 	blt	r2,zero,1000f80c <__alt_data_end+0xf800f80c>
1000fab8:	d9c02217 	ldw	r7,136(sp)
1000fabc:	d9002117 	ldw	r4,132(sp)
1000fac0:	a80d883a 	mov	r6,r21
1000fac4:	180b883a 	mov	r5,r3
1000fac8:	0010ca00 	call	10010ca0 <__sbprintf>
1000facc:	dfc03517 	ldw	ra,212(sp)
1000fad0:	df003417 	ldw	fp,208(sp)
1000fad4:	ddc03317 	ldw	r23,204(sp)
1000fad8:	dd803217 	ldw	r22,200(sp)
1000fadc:	dd403117 	ldw	r21,196(sp)
1000fae0:	dd003017 	ldw	r20,192(sp)
1000fae4:	dcc02f17 	ldw	r19,188(sp)
1000fae8:	dc802e17 	ldw	r18,184(sp)
1000faec:	dc402d17 	ldw	r17,180(sp)
1000faf0:	dc002c17 	ldw	r16,176(sp)
1000faf4:	dec03604 	addi	sp,sp,216
1000faf8:	f800283a 	ret
1000fafc:	000c4680 	call	1000c468 <__sinit>
1000fb00:	003f2f06 	br	1000f7c0 <__alt_data_end+0xf800f7c0>
1000fb04:	d8c02517 	ldw	r3,148(sp)
1000fb08:	d8802215 	stw	r2,136(sp)
1000fb0c:	00c7c83a 	sub	r3,zero,r3
1000fb10:	d8c02515 	stw	r3,148(sp)
1000fb14:	8c400114 	ori	r17,r17,4
1000fb18:	b0c00007 	ldb	r3,0(r22)
1000fb1c:	003f7306 	br	1000f8ec <__alt_data_end+0xf800f8ec>
1000fb20:	00800c04 	movi	r2,48
1000fb24:	d9402217 	ldw	r5,136(sp)
1000fb28:	d8801d05 	stb	r2,116(sp)
1000fb2c:	00801e04 	movi	r2,120
1000fb30:	d8801d45 	stb	r2,117(sp)
1000fb34:	d8001d85 	stb	zero,118(sp)
1000fb38:	b811883a 	mov	r8,r23
1000fb3c:	28c00104 	addi	r3,r5,4
1000fb40:	2cc00017 	ldw	r19,0(r5)
1000fb44:	0029883a 	mov	r20,zero
1000fb48:	88800094 	ori	r2,r17,2
1000fb4c:	80032516 	blt	r16,zero,100107e4 <___vfiprintf_internal_r+0x106c>
1000fb50:	00bfdfc4 	movi	r2,-129
1000fb54:	88a2703a 	and	r17,r17,r2
1000fb58:	d8c02215 	stw	r3,136(sp)
1000fb5c:	8c400094 	ori	r17,r17,2
1000fb60:	98032a1e 	bne	r19,zero,1001080c <___vfiprintf_internal_r+0x1094>
1000fb64:	008400b4 	movhi	r2,4098
1000fb68:	10a1ea04 	addi	r2,r2,-30808
1000fb6c:	d8802615 	stw	r2,152(sp)
1000fb70:	002b883a 	mov	r21,zero
1000fb74:	8001741e 	bne	r16,zero,10010148 <___vfiprintf_internal_r+0x9d0>
1000fb78:	0021883a 	mov	r16,zero
1000fb7c:	0029883a 	mov	r20,zero
1000fb80:	ddc01a04 	addi	r23,sp,104
1000fb84:	8027883a 	mov	r19,r16
1000fb88:	8500010e 	bge	r16,r20,1000fb90 <___vfiprintf_internal_r+0x418>
1000fb8c:	a027883a 	mov	r19,r20
1000fb90:	ad403fcc 	andi	r21,r21,255
1000fb94:	ad40201c 	xori	r21,r21,128
1000fb98:	ad7fe004 	addi	r21,r21,-128
1000fb9c:	a8000126 	beq	r21,zero,1000fba4 <___vfiprintf_internal_r+0x42c>
1000fba0:	9cc00044 	addi	r19,r19,1
1000fba4:	89c0008c 	andi	r7,r17,2
1000fba8:	38000126 	beq	r7,zero,1000fbb0 <___vfiprintf_internal_r+0x438>
1000fbac:	9cc00084 	addi	r19,r19,2
1000fbb0:	88c0210c 	andi	r3,r17,132
1000fbb4:	1801dd1e 	bne	r3,zero,1001032c <___vfiprintf_internal_r+0xbb4>
1000fbb8:	d9402517 	ldw	r5,148(sp)
1000fbbc:	2cebc83a 	sub	r21,r5,r19
1000fbc0:	0541da0e 	bge	zero,r21,1001032c <___vfiprintf_internal_r+0xbb4>
1000fbc4:	07000404 	movi	fp,16
1000fbc8:	d8801c17 	ldw	r2,112(sp)
1000fbcc:	e543be0e 	bge	fp,r21,10010ac8 <___vfiprintf_internal_r+0x1350>
1000fbd0:	014400b4 	movhi	r5,4098
1000fbd4:	29624f04 	addi	r5,r5,-30404
1000fbd8:	dc002715 	stw	r16,156(sp)
1000fbdc:	d9801b17 	ldw	r6,108(sp)
1000fbe0:	a821883a 	mov	r16,r21
1000fbe4:	d9402315 	stw	r5,140(sp)
1000fbe8:	028001c4 	movi	r10,7
1000fbec:	d9c02915 	stw	r7,164(sp)
1000fbf0:	182b883a 	mov	r21,r3
1000fbf4:	00000506 	br	1000fc0c <___vfiprintf_internal_r+0x494>
1000fbf8:	31000084 	addi	r4,r6,2
1000fbfc:	42000204 	addi	r8,r8,8
1000fc00:	180d883a 	mov	r6,r3
1000fc04:	843ffc04 	addi	r16,r16,-16
1000fc08:	e4000f0e 	bge	fp,r16,1000fc48 <___vfiprintf_internal_r+0x4d0>
1000fc0c:	010400b4 	movhi	r4,4098
1000fc10:	10800404 	addi	r2,r2,16
1000fc14:	30c00044 	addi	r3,r6,1
1000fc18:	21224f04 	addi	r4,r4,-30404
1000fc1c:	41000015 	stw	r4,0(r8)
1000fc20:	47000115 	stw	fp,4(r8)
1000fc24:	d8801c15 	stw	r2,112(sp)
1000fc28:	d8c01b15 	stw	r3,108(sp)
1000fc2c:	50fff20e 	bge	r10,r3,1000fbf8 <__alt_data_end+0xf800fbf8>
1000fc30:	1001b21e 	bne	r2,zero,100102fc <___vfiprintf_internal_r+0xb84>
1000fc34:	843ffc04 	addi	r16,r16,-16
1000fc38:	000d883a 	mov	r6,zero
1000fc3c:	01000044 	movi	r4,1
1000fc40:	d811883a 	mov	r8,sp
1000fc44:	e43ff116 	blt	fp,r16,1000fc0c <__alt_data_end+0xf800fc0c>
1000fc48:	a807883a 	mov	r3,r21
1000fc4c:	d9c02917 	ldw	r7,164(sp)
1000fc50:	802b883a 	mov	r21,r16
1000fc54:	dc002717 	ldw	r16,156(sp)
1000fc58:	d9402317 	ldw	r5,140(sp)
1000fc5c:	a885883a 	add	r2,r21,r2
1000fc60:	45400115 	stw	r21,4(r8)
1000fc64:	41400015 	stw	r5,0(r8)
1000fc68:	d8801c15 	stw	r2,112(sp)
1000fc6c:	d9001b15 	stw	r4,108(sp)
1000fc70:	014001c4 	movi	r5,7
1000fc74:	29026216 	blt	r5,r4,10010600 <___vfiprintf_internal_r+0xe88>
1000fc78:	d9801d87 	ldb	r6,118(sp)
1000fc7c:	42000204 	addi	r8,r8,8
1000fc80:	21400044 	addi	r5,r4,1
1000fc84:	3001ae1e 	bne	r6,zero,10010340 <___vfiprintf_internal_r+0xbc8>
1000fc88:	3801bb26 	beq	r7,zero,10010378 <___vfiprintf_internal_r+0xc00>
1000fc8c:	d9001d04 	addi	r4,sp,116
1000fc90:	10800084 	addi	r2,r2,2
1000fc94:	41000015 	stw	r4,0(r8)
1000fc98:	01000084 	movi	r4,2
1000fc9c:	41000115 	stw	r4,4(r8)
1000fca0:	d8801c15 	stw	r2,112(sp)
1000fca4:	d9401b15 	stw	r5,108(sp)
1000fca8:	010001c4 	movi	r4,7
1000fcac:	2142680e 	bge	r4,r5,10010650 <___vfiprintf_internal_r+0xed8>
1000fcb0:	1002b11e 	bne	r2,zero,10010778 <___vfiprintf_internal_r+0x1000>
1000fcb4:	01802004 	movi	r6,128
1000fcb8:	01400044 	movi	r5,1
1000fcbc:	0009883a 	mov	r4,zero
1000fcc0:	d811883a 	mov	r8,sp
1000fcc4:	1981ae1e 	bne	r3,r6,10010380 <___vfiprintf_internal_r+0xc08>
1000fcc8:	d8c02517 	ldw	r3,148(sp)
1000fccc:	1cf9c83a 	sub	fp,r3,r19
1000fcd0:	0701ab0e 	bge	zero,fp,10010380 <___vfiprintf_internal_r+0xc08>
1000fcd4:	05400404 	movi	r21,16
1000fcd8:	af03a90e 	bge	r21,fp,10010b80 <___vfiprintf_internal_r+0x1408>
1000fcdc:	014400b4 	movhi	r5,4098
1000fce0:	29624b04 	addi	r5,r5,-30420
1000fce4:	d9402315 	stw	r5,140(sp)
1000fce8:	01c001c4 	movi	r7,7
1000fcec:	00000506 	br	1000fd04 <___vfiprintf_internal_r+0x58c>
1000fcf0:	21800084 	addi	r6,r4,2
1000fcf4:	42000204 	addi	r8,r8,8
1000fcf8:	1809883a 	mov	r4,r3
1000fcfc:	e73ffc04 	addi	fp,fp,-16
1000fd00:	af000d0e 	bge	r21,fp,1000fd38 <___vfiprintf_internal_r+0x5c0>
1000fd04:	10800404 	addi	r2,r2,16
1000fd08:	20c00044 	addi	r3,r4,1
1000fd0c:	44800015 	stw	r18,0(r8)
1000fd10:	45400115 	stw	r21,4(r8)
1000fd14:	d8801c15 	stw	r2,112(sp)
1000fd18:	d8c01b15 	stw	r3,108(sp)
1000fd1c:	38fff40e 	bge	r7,r3,1000fcf0 <__alt_data_end+0xf800fcf0>
1000fd20:	10022b1e 	bne	r2,zero,100105d0 <___vfiprintf_internal_r+0xe58>
1000fd24:	e73ffc04 	addi	fp,fp,-16
1000fd28:	01800044 	movi	r6,1
1000fd2c:	0009883a 	mov	r4,zero
1000fd30:	d811883a 	mov	r8,sp
1000fd34:	af3ff316 	blt	r21,fp,1000fd04 <__alt_data_end+0xf800fd04>
1000fd38:	d8c02317 	ldw	r3,140(sp)
1000fd3c:	1705883a 	add	r2,r2,fp
1000fd40:	47000115 	stw	fp,4(r8)
1000fd44:	40c00015 	stw	r3,0(r8)
1000fd48:	d8801c15 	stw	r2,112(sp)
1000fd4c:	d9801b15 	stw	r6,108(sp)
1000fd50:	00c001c4 	movi	r3,7
1000fd54:	19829416 	blt	r3,r6,100107a8 <___vfiprintf_internal_r+0x1030>
1000fd58:	8521c83a 	sub	r16,r16,r20
1000fd5c:	42000204 	addi	r8,r8,8
1000fd60:	31400044 	addi	r5,r6,1
1000fd64:	3009883a 	mov	r4,r6
1000fd68:	04018716 	blt	zero,r16,10010388 <___vfiprintf_internal_r+0xc10>
1000fd6c:	a085883a 	add	r2,r20,r2
1000fd70:	45c00015 	stw	r23,0(r8)
1000fd74:	45000115 	stw	r20,4(r8)
1000fd78:	d8801c15 	stw	r2,112(sp)
1000fd7c:	d9401b15 	stw	r5,108(sp)
1000fd80:	00c001c4 	movi	r3,7
1000fd84:	1941c20e 	bge	r3,r5,10010490 <___vfiprintf_internal_r+0xd18>
1000fd88:	1002531e 	bne	r2,zero,100106d8 <___vfiprintf_internal_r+0xf60>
1000fd8c:	d8001b15 	stw	zero,108(sp)
1000fd90:	8c40010c 	andi	r17,r17,4
1000fd94:	88023226 	beq	r17,zero,10010660 <___vfiprintf_internal_r+0xee8>
1000fd98:	d9002517 	ldw	r4,148(sp)
1000fd9c:	24e3c83a 	sub	r17,r4,r19
1000fda0:	04432916 	blt	zero,r17,10010a48 <___vfiprintf_internal_r+0x12d0>
1000fda4:	d8802517 	ldw	r2,148(sp)
1000fda8:	14c0010e 	bge	r2,r19,1000fdb0 <___vfiprintf_internal_r+0x638>
1000fdac:	9805883a 	mov	r2,r19
1000fdb0:	d8c02417 	ldw	r3,144(sp)
1000fdb4:	1887883a 	add	r3,r3,r2
1000fdb8:	d8c02415 	stw	r3,144(sp)
1000fdbc:	d8001b15 	stw	zero,108(sp)
1000fdc0:	d811883a 	mov	r8,sp
1000fdc4:	003ea006 	br	1000f848 <__alt_data_end+0xf800f848>
1000fdc8:	8c400814 	ori	r17,r17,32
1000fdcc:	b0c00007 	ldb	r3,0(r22)
1000fdd0:	003ec606 	br	1000f8ec <__alt_data_end+0xf800f8ec>
1000fdd4:	b0c00007 	ldb	r3,0(r22)
1000fdd8:	00801b04 	movi	r2,108
1000fddc:	18832026 	beq	r3,r2,10010a60 <___vfiprintf_internal_r+0x12e8>
1000fde0:	8c400414 	ori	r17,r17,16
1000fde4:	003ec106 	br	1000f8ec <__alt_data_end+0xf800f8ec>
1000fde8:	9cc03fcc 	andi	r19,r19,255
1000fdec:	b811883a 	mov	r8,r23
1000fdf0:	9803981e 	bne	r19,zero,10010c54 <___vfiprintf_internal_r+0x14dc>
1000fdf4:	8880080c 	andi	r2,r17,32
1000fdf8:	1002be26 	beq	r2,zero,100108f4 <___vfiprintf_internal_r+0x117c>
1000fdfc:	d9002217 	ldw	r4,136(sp)
1000fe00:	d9402417 	ldw	r5,144(sp)
1000fe04:	20800017 	ldw	r2,0(r4)
1000fe08:	2807d7fa 	srai	r3,r5,31
1000fe0c:	21000104 	addi	r4,r4,4
1000fe10:	d9002215 	stw	r4,136(sp)
1000fe14:	11400015 	stw	r5,0(r2)
1000fe18:	10c00115 	stw	r3,4(r2)
1000fe1c:	003e8a06 	br	1000f848 <__alt_data_end+0xf800f848>
1000fe20:	9cc03fcc 	andi	r19,r19,255
1000fe24:	b811883a 	mov	r8,r23
1000fe28:	9803871e 	bne	r19,zero,10010c48 <___vfiprintf_internal_r+0x14d0>
1000fe2c:	8880080c 	andi	r2,r17,32
1000fe30:	10009a26 	beq	r2,zero,1001009c <___vfiprintf_internal_r+0x924>
1000fe34:	d9002217 	ldw	r4,136(sp)
1000fe38:	d8001d85 	stb	zero,118(sp)
1000fe3c:	20800204 	addi	r2,r4,8
1000fe40:	24c00017 	ldw	r19,0(r4)
1000fe44:	25000117 	ldw	r20,4(r4)
1000fe48:	8002a416 	blt	r16,zero,100108dc <___vfiprintf_internal_r+0x1164>
1000fe4c:	013fdfc4 	movi	r4,-129
1000fe50:	9d06b03a 	or	r3,r19,r20
1000fe54:	d8802215 	stw	r2,136(sp)
1000fe58:	8922703a 	and	r17,r17,r4
1000fe5c:	18009b26 	beq	r3,zero,100100cc <___vfiprintf_internal_r+0x954>
1000fe60:	002b883a 	mov	r21,zero
1000fe64:	ddc01a04 	addi	r23,sp,104
1000fe68:	9806d0fa 	srli	r3,r19,3
1000fe6c:	a008977a 	slli	r4,r20,29
1000fe70:	a028d0fa 	srli	r20,r20,3
1000fe74:	9cc001cc 	andi	r19,r19,7
1000fe78:	98800c04 	addi	r2,r19,48
1000fe7c:	bdffffc4 	addi	r23,r23,-1
1000fe80:	20e6b03a 	or	r19,r4,r3
1000fe84:	b8800005 	stb	r2,0(r23)
1000fe88:	9d06b03a 	or	r3,r19,r20
1000fe8c:	183ff61e 	bne	r3,zero,1000fe68 <__alt_data_end+0xf800fe68>
1000fe90:	88c0004c 	andi	r3,r17,1
1000fe94:	18021f1e 	bne	r3,zero,10010714 <___vfiprintf_internal_r+0xf9c>
1000fe98:	d9401e17 	ldw	r5,120(sp)
1000fe9c:	2de9c83a 	sub	r20,r5,r23
1000fea0:	003f3806 	br	1000fb84 <__alt_data_end+0xf800fb84>
1000fea4:	9cc03fcc 	andi	r19,r19,255
1000fea8:	b811883a 	mov	r8,r23
1000feac:	98034f1e 	bne	r19,zero,10010bec <___vfiprintf_internal_r+0x1474>
1000feb0:	008400b4 	movhi	r2,4098
1000feb4:	10a1ea04 	addi	r2,r2,-30808
1000feb8:	d8802615 	stw	r2,152(sp)
1000febc:	8880080c 	andi	r2,r17,32
1000fec0:	1000ac26 	beq	r2,zero,10010174 <___vfiprintf_internal_r+0x9fc>
1000fec4:	d9002217 	ldw	r4,136(sp)
1000fec8:	24c00017 	ldw	r19,0(r4)
1000fecc:	25000117 	ldw	r20,4(r4)
1000fed0:	21000204 	addi	r4,r4,8
1000fed4:	d9002215 	stw	r4,136(sp)
1000fed8:	8880004c 	andi	r2,r17,1
1000fedc:	1001e726 	beq	r2,zero,1001067c <___vfiprintf_internal_r+0xf04>
1000fee0:	9d04b03a 	or	r2,r19,r20
1000fee4:	10025c1e 	bne	r2,zero,10010858 <___vfiprintf_internal_r+0x10e0>
1000fee8:	d8001d85 	stb	zero,118(sp)
1000feec:	80024416 	blt	r16,zero,10010800 <___vfiprintf_internal_r+0x1088>
1000fef0:	00bfdfc4 	movi	r2,-129
1000fef4:	88a2703a 	and	r17,r17,r2
1000fef8:	003f1d06 	br	1000fb70 <__alt_data_end+0xf800fb70>
1000fefc:	d8c02217 	ldw	r3,136(sp)
1000ff00:	04c00044 	movi	r19,1
1000ff04:	b811883a 	mov	r8,r23
1000ff08:	18800017 	ldw	r2,0(r3)
1000ff0c:	18c00104 	addi	r3,r3,4
1000ff10:	d8001d85 	stb	zero,118(sp)
1000ff14:	d8801005 	stb	r2,64(sp)
1000ff18:	d8c02215 	stw	r3,136(sp)
1000ff1c:	9829883a 	mov	r20,r19
1000ff20:	ddc01004 	addi	r23,sp,64
1000ff24:	0021883a 	mov	r16,zero
1000ff28:	003f1e06 	br	1000fba4 <__alt_data_end+0xf800fba4>
1000ff2c:	9cc03fcc 	andi	r19,r19,255
1000ff30:	b811883a 	mov	r8,r23
1000ff34:	9803331e 	bne	r19,zero,10010c04 <___vfiprintf_internal_r+0x148c>
1000ff38:	8880080c 	andi	r2,r17,32
1000ff3c:	10004826 	beq	r2,zero,10010060 <___vfiprintf_internal_r+0x8e8>
1000ff40:	d9002217 	ldw	r4,136(sp)
1000ff44:	20800117 	ldw	r2,4(r4)
1000ff48:	24c00017 	ldw	r19,0(r4)
1000ff4c:	21000204 	addi	r4,r4,8
1000ff50:	d9002215 	stw	r4,136(sp)
1000ff54:	1029883a 	mov	r20,r2
1000ff58:	10024c16 	blt	r2,zero,1001088c <___vfiprintf_internal_r+0x1114>
1000ff5c:	dd401d83 	ldbu	r21,118(sp)
1000ff60:	80007116 	blt	r16,zero,10010128 <___vfiprintf_internal_r+0x9b0>
1000ff64:	00ffdfc4 	movi	r3,-129
1000ff68:	9d04b03a 	or	r2,r19,r20
1000ff6c:	88e2703a 	and	r17,r17,r3
1000ff70:	1000d126 	beq	r2,zero,100102b8 <___vfiprintf_internal_r+0xb40>
1000ff74:	a0023526 	beq	r20,zero,1001084c <___vfiprintf_internal_r+0x10d4>
1000ff78:	ddc01a04 	addi	r23,sp,104
1000ff7c:	4039883a 	mov	fp,r8
1000ff80:	9809883a 	mov	r4,r19
1000ff84:	a00b883a 	mov	r5,r20
1000ff88:	01800284 	movi	r6,10
1000ff8c:	000f883a 	mov	r7,zero
1000ff90:	0011db00 	call	10011db0 <__umoddi3>
1000ff94:	10800c04 	addi	r2,r2,48
1000ff98:	bdffffc4 	addi	r23,r23,-1
1000ff9c:	9809883a 	mov	r4,r19
1000ffa0:	a00b883a 	mov	r5,r20
1000ffa4:	b8800005 	stb	r2,0(r23)
1000ffa8:	01800284 	movi	r6,10
1000ffac:	000f883a 	mov	r7,zero
1000ffb0:	00117b40 	call	100117b4 <__udivdi3>
1000ffb4:	1027883a 	mov	r19,r2
1000ffb8:	10c4b03a 	or	r2,r2,r3
1000ffbc:	1829883a 	mov	r20,r3
1000ffc0:	103fef1e 	bne	r2,zero,1000ff80 <__alt_data_end+0xf800ff80>
1000ffc4:	d9001e17 	ldw	r4,120(sp)
1000ffc8:	e011883a 	mov	r8,fp
1000ffcc:	25e9c83a 	sub	r20,r4,r23
1000ffd0:	003eec06 	br	1000fb84 <__alt_data_end+0xf800fb84>
1000ffd4:	d8802307 	ldb	r2,140(sp)
1000ffd8:	1002361e 	bne	r2,zero,100108b4 <___vfiprintf_internal_r+0x113c>
1000ffdc:	00c00804 	movi	r3,32
1000ffe0:	d8c02305 	stb	r3,140(sp)
1000ffe4:	04c00044 	movi	r19,1
1000ffe8:	b0c00007 	ldb	r3,0(r22)
1000ffec:	003e3f06 	br	1000f8ec <__alt_data_end+0xf800f8ec>
1000fff0:	8c400054 	ori	r17,r17,1
1000fff4:	b0c00007 	ldb	r3,0(r22)
1000fff8:	003e3c06 	br	1000f8ec <__alt_data_end+0xf800f8ec>
1000fffc:	8c402014 	ori	r17,r17,128
10010000:	b0c00007 	ldb	r3,0(r22)
10010004:	003e3906 	br	1000f8ec <__alt_data_end+0xf800f8ec>
10010008:	dc002715 	stw	r16,156(sp)
1001000c:	d8002515 	stw	zero,148(sp)
10010010:	1f3ff404 	addi	fp,r3,-48
10010014:	0009883a 	mov	r4,zero
10010018:	b021883a 	mov	r16,r22
1001001c:	01400284 	movi	r5,10
10010020:	0007d040 	call	10007d04 <__mulsi3>
10010024:	80c00007 	ldb	r3,0(r16)
10010028:	e089883a 	add	r4,fp,r2
1001002c:	b5800044 	addi	r22,r22,1
10010030:	1f3ff404 	addi	fp,r3,-48
10010034:	b021883a 	mov	r16,r22
10010038:	af3ff82e 	bgeu	r21,fp,1001001c <__alt_data_end+0xf801001c>
1001003c:	d9002515 	stw	r4,148(sp)
10010040:	dc002717 	ldw	r16,156(sp)
10010044:	003e2a06 	br	1000f8f0 <__alt_data_end+0xf800f8f0>
10010048:	9cc03fcc 	andi	r19,r19,255
1001004c:	b811883a 	mov	r8,r23
10010050:	9802e91e 	bne	r19,zero,10010bf8 <___vfiprintf_internal_r+0x1480>
10010054:	8c400414 	ori	r17,r17,16
10010058:	8880080c 	andi	r2,r17,32
1001005c:	103fb81e 	bne	r2,zero,1000ff40 <__alt_data_end+0xf800ff40>
10010060:	8880040c 	andi	r2,r17,16
10010064:	10022e26 	beq	r2,zero,10010920 <___vfiprintf_internal_r+0x11a8>
10010068:	d9402217 	ldw	r5,136(sp)
1001006c:	2cc00017 	ldw	r19,0(r5)
10010070:	29400104 	addi	r5,r5,4
10010074:	d9402215 	stw	r5,136(sp)
10010078:	9829d7fa 	srai	r20,r19,31
1001007c:	a005883a 	mov	r2,r20
10010080:	003fb506 	br	1000ff58 <__alt_data_end+0xf800ff58>
10010084:	9cc03fcc 	andi	r19,r19,255
10010088:	b811883a 	mov	r8,r23
1001008c:	9802fa1e 	bne	r19,zero,10010c78 <___vfiprintf_internal_r+0x1500>
10010090:	8c400414 	ori	r17,r17,16
10010094:	8880080c 	andi	r2,r17,32
10010098:	103f661e 	bne	r2,zero,1000fe34 <__alt_data_end+0xf800fe34>
1001009c:	8880040c 	andi	r2,r17,16
100100a0:	10020626 	beq	r2,zero,100108bc <___vfiprintf_internal_r+0x1144>
100100a4:	d9402217 	ldw	r5,136(sp)
100100a8:	d8001d85 	stb	zero,118(sp)
100100ac:	0029883a 	mov	r20,zero
100100b0:	28800104 	addi	r2,r5,4
100100b4:	2cc00017 	ldw	r19,0(r5)
100100b8:	80020816 	blt	r16,zero,100108dc <___vfiprintf_internal_r+0x1164>
100100bc:	00ffdfc4 	movi	r3,-129
100100c0:	d8802215 	stw	r2,136(sp)
100100c4:	88e2703a 	and	r17,r17,r3
100100c8:	983f651e 	bne	r19,zero,1000fe60 <__alt_data_end+0xf800fe60>
100100cc:	002b883a 	mov	r21,zero
100100d0:	8002cf26 	beq	r16,zero,10010c10 <___vfiprintf_internal_r+0x1498>
100100d4:	0027883a 	mov	r19,zero
100100d8:	0029883a 	mov	r20,zero
100100dc:	003f6106 	br	1000fe64 <__alt_data_end+0xf800fe64>
100100e0:	9cc03fcc 	andi	r19,r19,255
100100e4:	b811883a 	mov	r8,r23
100100e8:	9802e01e 	bne	r19,zero,10010c6c <___vfiprintf_internal_r+0x14f4>
100100ec:	8c400414 	ori	r17,r17,16
100100f0:	8880080c 	andi	r2,r17,32
100100f4:	1000641e 	bne	r2,zero,10010288 <___vfiprintf_internal_r+0xb10>
100100f8:	8880040c 	andi	r2,r17,16
100100fc:	1001c81e 	bne	r2,zero,10010820 <___vfiprintf_internal_r+0x10a8>
10010100:	8880100c 	andi	r2,r17,64
10010104:	d8001d85 	stb	zero,118(sp)
10010108:	1002281e 	bne	r2,zero,100109ac <___vfiprintf_internal_r+0x1234>
1001010c:	d9002217 	ldw	r4,136(sp)
10010110:	0029883a 	mov	r20,zero
10010114:	20800104 	addi	r2,r4,4
10010118:	24c00017 	ldw	r19,0(r4)
1001011c:	8001c60e 	bge	r16,zero,10010838 <___vfiprintf_internal_r+0x10c0>
10010120:	d8802215 	stw	r2,136(sp)
10010124:	002b883a 	mov	r21,zero
10010128:	9d04b03a 	or	r2,r19,r20
1001012c:	103f911e 	bne	r2,zero,1000ff74 <__alt_data_end+0xf800ff74>
10010130:	00800044 	movi	r2,1
10010134:	10803fcc 	andi	r2,r2,255
10010138:	00c00044 	movi	r3,1
1001013c:	10c05f26 	beq	r2,r3,100102bc <___vfiprintf_internal_r+0xb44>
10010140:	00c00084 	movi	r3,2
10010144:	10ffe31e 	bne	r2,r3,100100d4 <__alt_data_end+0xf80100d4>
10010148:	0027883a 	mov	r19,zero
1001014c:	0029883a 	mov	r20,zero
10010150:	00015106 	br	10010698 <___vfiprintf_internal_r+0xf20>
10010154:	9cc03fcc 	andi	r19,r19,255
10010158:	b811883a 	mov	r8,r23
1001015c:	9802c01e 	bne	r19,zero,10010c60 <___vfiprintf_internal_r+0x14e8>
10010160:	014400b4 	movhi	r5,4098
10010164:	2961e504 	addi	r5,r5,-30828
10010168:	d9402615 	stw	r5,152(sp)
1001016c:	8880080c 	andi	r2,r17,32
10010170:	103f541e 	bne	r2,zero,1000fec4 <__alt_data_end+0xf800fec4>
10010174:	8880040c 	andi	r2,r17,16
10010178:	1001f226 	beq	r2,zero,10010944 <___vfiprintf_internal_r+0x11cc>
1001017c:	d9402217 	ldw	r5,136(sp)
10010180:	0029883a 	mov	r20,zero
10010184:	2cc00017 	ldw	r19,0(r5)
10010188:	29400104 	addi	r5,r5,4
1001018c:	d9402215 	stw	r5,136(sp)
10010190:	003f5106 	br	1000fed8 <__alt_data_end+0xf800fed8>
10010194:	d8c02217 	ldw	r3,136(sp)
10010198:	b811883a 	mov	r8,r23
1001019c:	d8001d85 	stb	zero,118(sp)
100101a0:	1dc00017 	ldw	r23,0(r3)
100101a4:	1f000104 	addi	fp,r3,4
100101a8:	b8025926 	beq	r23,zero,10010b10 <___vfiprintf_internal_r+0x1398>
100101ac:	80023316 	blt	r16,zero,10010a7c <___vfiprintf_internal_r+0x1304>
100101b0:	800d883a 	mov	r6,r16
100101b4:	000b883a 	mov	r5,zero
100101b8:	b809883a 	mov	r4,r23
100101bc:	da002a15 	stw	r8,168(sp)
100101c0:	000d9e00 	call	1000d9e0 <memchr>
100101c4:	da002a17 	ldw	r8,168(sp)
100101c8:	10026826 	beq	r2,zero,10010b6c <___vfiprintf_internal_r+0x13f4>
100101cc:	15e9c83a 	sub	r20,r2,r23
100101d0:	dd401d83 	ldbu	r21,118(sp)
100101d4:	df002215 	stw	fp,136(sp)
100101d8:	0021883a 	mov	r16,zero
100101dc:	003e6906 	br	1000fb84 <__alt_data_end+0xf800fb84>
100101e0:	9cc03fcc 	andi	r19,r19,255
100101e4:	b811883a 	mov	r8,r23
100101e8:	983fc126 	beq	r19,zero,100100f0 <__alt_data_end+0xf80100f0>
100101ec:	d8c02303 	ldbu	r3,140(sp)
100101f0:	d8c01d85 	stb	r3,118(sp)
100101f4:	003fbe06 	br	100100f0 <__alt_data_end+0xf80100f0>
100101f8:	d9002217 	ldw	r4,136(sp)
100101fc:	d9402217 	ldw	r5,136(sp)
10010200:	21000017 	ldw	r4,0(r4)
10010204:	28800104 	addi	r2,r5,4
10010208:	d9002515 	stw	r4,148(sp)
1001020c:	203e3d16 	blt	r4,zero,1000fb04 <__alt_data_end+0xf800fb04>
10010210:	d8802215 	stw	r2,136(sp)
10010214:	b0c00007 	ldb	r3,0(r22)
10010218:	003db406 	br	1000f8ec <__alt_data_end+0xf800f8ec>
1001021c:	00c00ac4 	movi	r3,43
10010220:	d8c02305 	stb	r3,140(sp)
10010224:	04c00044 	movi	r19,1
10010228:	b0c00007 	ldb	r3,0(r22)
1001022c:	003daf06 	br	1000f8ec <__alt_data_end+0xf800f8ec>
10010230:	b0c00007 	ldb	r3,0(r22)
10010234:	01000a84 	movi	r4,42
10010238:	b4000044 	addi	r16,r22,1
1001023c:	19025e26 	beq	r3,r4,10010bb8 <___vfiprintf_internal_r+0x1440>
10010240:	1f3ff404 	addi	fp,r3,-48
10010244:	0009883a 	mov	r4,zero
10010248:	af025236 	bltu	r21,fp,10010b94 <___vfiprintf_internal_r+0x141c>
1001024c:	01400284 	movi	r5,10
10010250:	0007d040 	call	10007d04 <__mulsi3>
10010254:	80c00007 	ldb	r3,0(r16)
10010258:	1709883a 	add	r4,r2,fp
1001025c:	85800044 	addi	r22,r16,1
10010260:	1f3ff404 	addi	fp,r3,-48
10010264:	b021883a 	mov	r16,r22
10010268:	af3ff82e 	bgeu	r21,fp,1001024c <__alt_data_end+0xf801024c>
1001026c:	2021883a 	mov	r16,r4
10010270:	203d9f0e 	bge	r4,zero,1000f8f0 <__alt_data_end+0xf800f8f0>
10010274:	043fffc4 	movi	r16,-1
10010278:	003d9d06 	br	1000f8f0 <__alt_data_end+0xf800f8f0>
1001027c:	8c401014 	ori	r17,r17,64
10010280:	b0c00007 	ldb	r3,0(r22)
10010284:	003d9906 	br	1000f8ec <__alt_data_end+0xf800f8ec>
10010288:	d9002217 	ldw	r4,136(sp)
1001028c:	d8001d85 	stb	zero,118(sp)
10010290:	20c00204 	addi	r3,r4,8
10010294:	24c00017 	ldw	r19,0(r4)
10010298:	25000117 	ldw	r20,4(r4)
1001029c:	8001e716 	blt	r16,zero,10010a3c <___vfiprintf_internal_r+0x12c4>
100102a0:	013fdfc4 	movi	r4,-129
100102a4:	9d04b03a 	or	r2,r19,r20
100102a8:	d8c02215 	stw	r3,136(sp)
100102ac:	8922703a 	and	r17,r17,r4
100102b0:	002b883a 	mov	r21,zero
100102b4:	103f2f1e 	bne	r2,zero,1000ff74 <__alt_data_end+0xf800ff74>
100102b8:	803e2f26 	beq	r16,zero,1000fb78 <__alt_data_end+0xf800fb78>
100102bc:	0027883a 	mov	r19,zero
100102c0:	9cc00c04 	addi	r19,r19,48
100102c4:	dcc019c5 	stb	r19,103(sp)
100102c8:	dd002817 	ldw	r20,160(sp)
100102cc:	ddc019c4 	addi	r23,sp,103
100102d0:	003e2c06 	br	1000fb84 <__alt_data_end+0xf800fb84>
100102d4:	9cc03fcc 	andi	r19,r19,255
100102d8:	b811883a 	mov	r8,r23
100102dc:	9802571e 	bne	r19,zero,10010c3c <___vfiprintf_internal_r+0x14c4>
100102e0:	18005726 	beq	r3,zero,10010440 <___vfiprintf_internal_r+0xcc8>
100102e4:	04c00044 	movi	r19,1
100102e8:	d8c01005 	stb	r3,64(sp)
100102ec:	d8001d85 	stb	zero,118(sp)
100102f0:	9829883a 	mov	r20,r19
100102f4:	ddc01004 	addi	r23,sp,64
100102f8:	003f0a06 	br	1000ff24 <__alt_data_end+0xf800ff24>
100102fc:	d9402017 	ldw	r5,128(sp)
10010300:	d9002117 	ldw	r4,132(sp)
10010304:	d9801a04 	addi	r6,sp,104
10010308:	da802a15 	stw	r10,168(sp)
1001030c:	000f6640 	call	1000f664 <__sprint_r.part.0>
10010310:	da802a17 	ldw	r10,168(sp)
10010314:	1000501e 	bne	r2,zero,10010458 <___vfiprintf_internal_r+0xce0>
10010318:	d9801b17 	ldw	r6,108(sp)
1001031c:	d8801c17 	ldw	r2,112(sp)
10010320:	d811883a 	mov	r8,sp
10010324:	31000044 	addi	r4,r6,1
10010328:	003e3606 	br	1000fc04 <__alt_data_end+0xf800fc04>
1001032c:	d9001b17 	ldw	r4,108(sp)
10010330:	d8801c17 	ldw	r2,112(sp)
10010334:	21400044 	addi	r5,r4,1
10010338:	d9801d87 	ldb	r6,118(sp)
1001033c:	303e5226 	beq	r6,zero,1000fc88 <__alt_data_end+0xf800fc88>
10010340:	01800044 	movi	r6,1
10010344:	d9001d84 	addi	r4,sp,118
10010348:	1185883a 	add	r2,r2,r6
1001034c:	41000015 	stw	r4,0(r8)
10010350:	41800115 	stw	r6,4(r8)
10010354:	d8801c15 	stw	r2,112(sp)
10010358:	d9401b15 	stw	r5,108(sp)
1001035c:	010001c4 	movi	r4,7
10010360:	2140b00e 	bge	r4,r5,10010624 <___vfiprintf_internal_r+0xeac>
10010364:	1000f61e 	bne	r2,zero,10010740 <___vfiprintf_internal_r+0xfc8>
10010368:	3800b31e 	bne	r7,zero,10010638 <___vfiprintf_internal_r+0xec0>
1001036c:	0009883a 	mov	r4,zero
10010370:	300b883a 	mov	r5,r6
10010374:	d811883a 	mov	r8,sp
10010378:	01802004 	movi	r6,128
1001037c:	19be5226 	beq	r3,r6,1000fcc8 <__alt_data_end+0xf800fcc8>
10010380:	8521c83a 	sub	r16,r16,r20
10010384:	043e790e 	bge	zero,r16,1000fd6c <__alt_data_end+0xf800fd6c>
10010388:	05400404 	movi	r21,16
1001038c:	ac01b00e 	bge	r21,r16,10010a50 <___vfiprintf_internal_r+0x12d8>
10010390:	014400b4 	movhi	r5,4098
10010394:	29624b04 	addi	r5,r5,-30420
10010398:	d9402315 	stw	r5,140(sp)
1001039c:	070001c4 	movi	fp,7
100103a0:	00000506 	br	100103b8 <___vfiprintf_internal_r+0xc40>
100103a4:	21400084 	addi	r5,r4,2
100103a8:	42000204 	addi	r8,r8,8
100103ac:	1809883a 	mov	r4,r3
100103b0:	843ffc04 	addi	r16,r16,-16
100103b4:	ac000d0e 	bge	r21,r16,100103ec <___vfiprintf_internal_r+0xc74>
100103b8:	10800404 	addi	r2,r2,16
100103bc:	20c00044 	addi	r3,r4,1
100103c0:	44800015 	stw	r18,0(r8)
100103c4:	45400115 	stw	r21,4(r8)
100103c8:	d8801c15 	stw	r2,112(sp)
100103cc:	d8c01b15 	stw	r3,108(sp)
100103d0:	e0fff40e 	bge	fp,r3,100103a4 <__alt_data_end+0xf80103a4>
100103d4:	1000101e 	bne	r2,zero,10010418 <___vfiprintf_internal_r+0xca0>
100103d8:	843ffc04 	addi	r16,r16,-16
100103dc:	01400044 	movi	r5,1
100103e0:	0009883a 	mov	r4,zero
100103e4:	d811883a 	mov	r8,sp
100103e8:	ac3ff316 	blt	r21,r16,100103b8 <__alt_data_end+0xf80103b8>
100103ec:	d8c02317 	ldw	r3,140(sp)
100103f0:	1405883a 	add	r2,r2,r16
100103f4:	44000115 	stw	r16,4(r8)
100103f8:	40c00015 	stw	r3,0(r8)
100103fc:	d8801c15 	stw	r2,112(sp)
10010400:	d9401b15 	stw	r5,108(sp)
10010404:	00c001c4 	movi	r3,7
10010408:	19401916 	blt	r3,r5,10010470 <___vfiprintf_internal_r+0xcf8>
1001040c:	42000204 	addi	r8,r8,8
10010410:	29400044 	addi	r5,r5,1
10010414:	003e5506 	br	1000fd6c <__alt_data_end+0xf800fd6c>
10010418:	d9402017 	ldw	r5,128(sp)
1001041c:	d9002117 	ldw	r4,132(sp)
10010420:	d9801a04 	addi	r6,sp,104
10010424:	000f6640 	call	1000f664 <__sprint_r.part.0>
10010428:	10000b1e 	bne	r2,zero,10010458 <___vfiprintf_internal_r+0xce0>
1001042c:	d9001b17 	ldw	r4,108(sp)
10010430:	d8801c17 	ldw	r2,112(sp)
10010434:	d811883a 	mov	r8,sp
10010438:	21400044 	addi	r5,r4,1
1001043c:	003fdc06 	br	100103b0 <__alt_data_end+0xf80103b0>
10010440:	d8801c17 	ldw	r2,112(sp)
10010444:	10000426 	beq	r2,zero,10010458 <___vfiprintf_internal_r+0xce0>
10010448:	d9402017 	ldw	r5,128(sp)
1001044c:	d9002117 	ldw	r4,132(sp)
10010450:	d9801a04 	addi	r6,sp,104
10010454:	000f6640 	call	1000f664 <__sprint_r.part.0>
10010458:	d9402017 	ldw	r5,128(sp)
1001045c:	2880030b 	ldhu	r2,12(r5)
10010460:	1080100c 	andi	r2,r2,64
10010464:	10014d1e 	bne	r2,zero,1001099c <___vfiprintf_internal_r+0x1224>
10010468:	d8802417 	ldw	r2,144(sp)
1001046c:	003d9706 	br	1000facc <__alt_data_end+0xf800facc>
10010470:	1000d21e 	bne	r2,zero,100107bc <___vfiprintf_internal_r+0x1044>
10010474:	00c00044 	movi	r3,1
10010478:	a005883a 	mov	r2,r20
1001047c:	ddc00015 	stw	r23,0(sp)
10010480:	dd000115 	stw	r20,4(sp)
10010484:	dd001c15 	stw	r20,112(sp)
10010488:	d8c01b15 	stw	r3,108(sp)
1001048c:	d811883a 	mov	r8,sp
10010490:	42000204 	addi	r8,r8,8
10010494:	8c40010c 	andi	r17,r17,4
10010498:	88004026 	beq	r17,zero,1001059c <___vfiprintf_internal_r+0xe24>
1001049c:	d9002517 	ldw	r4,148(sp)
100104a0:	24e3c83a 	sub	r17,r4,r19
100104a4:	04403d0e 	bge	zero,r17,1001059c <___vfiprintf_internal_r+0xe24>
100104a8:	04000404 	movi	r16,16
100104ac:	8441a90e 	bge	r16,r17,10010b54 <___vfiprintf_internal_r+0x13dc>
100104b0:	00c400b4 	movhi	r3,4098
100104b4:	18e24f04 	addi	r3,r3,-30404
100104b8:	d9001b17 	ldw	r4,108(sp)
100104bc:	d8c02315 	stw	r3,140(sp)
100104c0:	050001c4 	movi	r20,7
100104c4:	dd402117 	ldw	r21,132(sp)
100104c8:	ddc02017 	ldw	r23,128(sp)
100104cc:	00000506 	br	100104e4 <___vfiprintf_internal_r+0xd6c>
100104d0:	21400084 	addi	r5,r4,2
100104d4:	42000204 	addi	r8,r8,8
100104d8:	1809883a 	mov	r4,r3
100104dc:	8c7ffc04 	addi	r17,r17,-16
100104e0:	84400f0e 	bge	r16,r17,10010520 <___vfiprintf_internal_r+0xda8>
100104e4:	014400b4 	movhi	r5,4098
100104e8:	10800404 	addi	r2,r2,16
100104ec:	20c00044 	addi	r3,r4,1
100104f0:	29624f04 	addi	r5,r5,-30404
100104f4:	41400015 	stw	r5,0(r8)
100104f8:	44000115 	stw	r16,4(r8)
100104fc:	d8801c15 	stw	r2,112(sp)
10010500:	d8c01b15 	stw	r3,108(sp)
10010504:	a0fff20e 	bge	r20,r3,100104d0 <__alt_data_end+0xf80104d0>
10010508:	1000141e 	bne	r2,zero,1001055c <___vfiprintf_internal_r+0xde4>
1001050c:	8c7ffc04 	addi	r17,r17,-16
10010510:	01400044 	movi	r5,1
10010514:	0009883a 	mov	r4,zero
10010518:	d811883a 	mov	r8,sp
1001051c:	847ff116 	blt	r16,r17,100104e4 <__alt_data_end+0xf80104e4>
10010520:	d8c02317 	ldw	r3,140(sp)
10010524:	1445883a 	add	r2,r2,r17
10010528:	44400115 	stw	r17,4(r8)
1001052c:	40c00015 	stw	r3,0(r8)
10010530:	d8801c15 	stw	r2,112(sp)
10010534:	d9401b15 	stw	r5,108(sp)
10010538:	00c001c4 	movi	r3,7
1001053c:	1940170e 	bge	r3,r5,1001059c <___vfiprintf_internal_r+0xe24>
10010540:	1000101e 	bne	r2,zero,10010584 <___vfiprintf_internal_r+0xe0c>
10010544:	d8802517 	ldw	r2,148(sp)
10010548:	14c11616 	blt	r2,r19,100109a4 <___vfiprintf_internal_r+0x122c>
1001054c:	d9002417 	ldw	r4,144(sp)
10010550:	2089883a 	add	r4,r4,r2
10010554:	d9002415 	stw	r4,144(sp)
10010558:	003e1806 	br	1000fdbc <__alt_data_end+0xf800fdbc>
1001055c:	d9801a04 	addi	r6,sp,104
10010560:	b80b883a 	mov	r5,r23
10010564:	a809883a 	mov	r4,r21
10010568:	000f6640 	call	1000f664 <__sprint_r.part.0>
1001056c:	103fba1e 	bne	r2,zero,10010458 <__alt_data_end+0xf8010458>
10010570:	d9001b17 	ldw	r4,108(sp)
10010574:	d8801c17 	ldw	r2,112(sp)
10010578:	d811883a 	mov	r8,sp
1001057c:	21400044 	addi	r5,r4,1
10010580:	003fd606 	br	100104dc <__alt_data_end+0xf80104dc>
10010584:	d9402017 	ldw	r5,128(sp)
10010588:	d9002117 	ldw	r4,132(sp)
1001058c:	d9801a04 	addi	r6,sp,104
10010590:	000f6640 	call	1000f664 <__sprint_r.part.0>
10010594:	103fb01e 	bne	r2,zero,10010458 <__alt_data_end+0xf8010458>
10010598:	d8801c17 	ldw	r2,112(sp)
1001059c:	d8c02517 	ldw	r3,148(sp)
100105a0:	1cc0010e 	bge	r3,r19,100105a8 <___vfiprintf_internal_r+0xe30>
100105a4:	9807883a 	mov	r3,r19
100105a8:	d9002417 	ldw	r4,144(sp)
100105ac:	20c9883a 	add	r4,r4,r3
100105b0:	d9002415 	stw	r4,144(sp)
100105b4:	103e0126 	beq	r2,zero,1000fdbc <__alt_data_end+0xf800fdbc>
100105b8:	d9402017 	ldw	r5,128(sp)
100105bc:	d9002117 	ldw	r4,132(sp)
100105c0:	d9801a04 	addi	r6,sp,104
100105c4:	000f6640 	call	1000f664 <__sprint_r.part.0>
100105c8:	103dfc26 	beq	r2,zero,1000fdbc <__alt_data_end+0xf800fdbc>
100105cc:	003fa206 	br	10010458 <__alt_data_end+0xf8010458>
100105d0:	d9402017 	ldw	r5,128(sp)
100105d4:	d9002117 	ldw	r4,132(sp)
100105d8:	d9801a04 	addi	r6,sp,104
100105dc:	d9c02b15 	stw	r7,172(sp)
100105e0:	000f6640 	call	1000f664 <__sprint_r.part.0>
100105e4:	d9c02b17 	ldw	r7,172(sp)
100105e8:	103f9b1e 	bne	r2,zero,10010458 <__alt_data_end+0xf8010458>
100105ec:	d9001b17 	ldw	r4,108(sp)
100105f0:	d8801c17 	ldw	r2,112(sp)
100105f4:	d811883a 	mov	r8,sp
100105f8:	21800044 	addi	r6,r4,1
100105fc:	003dbf06 	br	1000fcfc <__alt_data_end+0xf800fcfc>
10010600:	1000d81e 	bne	r2,zero,10010964 <___vfiprintf_internal_r+0x11ec>
10010604:	d9001d87 	ldb	r4,118(sp)
10010608:	20000a26 	beq	r4,zero,10010634 <___vfiprintf_internal_r+0xebc>
1001060c:	00800044 	movi	r2,1
10010610:	d9001d84 	addi	r4,sp,118
10010614:	100b883a 	mov	r5,r2
10010618:	d9000015 	stw	r4,0(sp)
1001061c:	d8800115 	stw	r2,4(sp)
10010620:	d811883a 	mov	r8,sp
10010624:	2809883a 	mov	r4,r5
10010628:	42000204 	addi	r8,r8,8
1001062c:	29400044 	addi	r5,r5,1
10010630:	003d9506 	br	1000fc88 <__alt_data_end+0xf800fc88>
10010634:	3800fd26 	beq	r7,zero,10010a2c <___vfiprintf_internal_r+0x12b4>
10010638:	00800084 	movi	r2,2
1001063c:	d9001d04 	addi	r4,sp,116
10010640:	d9000015 	stw	r4,0(sp)
10010644:	d8800115 	stw	r2,4(sp)
10010648:	01400044 	movi	r5,1
1001064c:	d811883a 	mov	r8,sp
10010650:	2809883a 	mov	r4,r5
10010654:	42000204 	addi	r8,r8,8
10010658:	29400044 	addi	r5,r5,1
1001065c:	003f4606 	br	10010378 <__alt_data_end+0xf8010378>
10010660:	d8802517 	ldw	r2,148(sp)
10010664:	14c0010e 	bge	r2,r19,1001066c <___vfiprintf_internal_r+0xef4>
10010668:	9805883a 	mov	r2,r19
1001066c:	d9402417 	ldw	r5,144(sp)
10010670:	288b883a 	add	r5,r5,r2
10010674:	d9402415 	stw	r5,144(sp)
10010678:	003dd006 	br	1000fdbc <__alt_data_end+0xf800fdbc>
1001067c:	d8001d85 	stb	zero,118(sp)
10010680:	80005d16 	blt	r16,zero,100107f8 <___vfiprintf_internal_r+0x1080>
10010684:	00ffdfc4 	movi	r3,-129
10010688:	9d04b03a 	or	r2,r19,r20
1001068c:	88e2703a 	and	r17,r17,r3
10010690:	103d3726 	beq	r2,zero,1000fb70 <__alt_data_end+0xf800fb70>
10010694:	002b883a 	mov	r21,zero
10010698:	d9002617 	ldw	r4,152(sp)
1001069c:	ddc01a04 	addi	r23,sp,104
100106a0:	988003cc 	andi	r2,r19,15
100106a4:	a006973a 	slli	r3,r20,28
100106a8:	2085883a 	add	r2,r4,r2
100106ac:	9826d13a 	srli	r19,r19,4
100106b0:	10800003 	ldbu	r2,0(r2)
100106b4:	a028d13a 	srli	r20,r20,4
100106b8:	bdffffc4 	addi	r23,r23,-1
100106bc:	1ce6b03a 	or	r19,r3,r19
100106c0:	b8800005 	stb	r2,0(r23)
100106c4:	9d04b03a 	or	r2,r19,r20
100106c8:	103ff51e 	bne	r2,zero,100106a0 <__alt_data_end+0xf80106a0>
100106cc:	d8801e17 	ldw	r2,120(sp)
100106d0:	15e9c83a 	sub	r20,r2,r23
100106d4:	003d2b06 	br	1000fb84 <__alt_data_end+0xf800fb84>
100106d8:	d9402017 	ldw	r5,128(sp)
100106dc:	d9002117 	ldw	r4,132(sp)
100106e0:	d9801a04 	addi	r6,sp,104
100106e4:	000f6640 	call	1000f664 <__sprint_r.part.0>
100106e8:	103f5b1e 	bne	r2,zero,10010458 <__alt_data_end+0xf8010458>
100106ec:	d8801c17 	ldw	r2,112(sp)
100106f0:	d811883a 	mov	r8,sp
100106f4:	003f6706 	br	10010494 <__alt_data_end+0xf8010494>
100106f8:	d9402017 	ldw	r5,128(sp)
100106fc:	d9002117 	ldw	r4,132(sp)
10010700:	d9801a04 	addi	r6,sp,104
10010704:	000f6640 	call	1000f664 <__sprint_r.part.0>
10010708:	103f531e 	bne	r2,zero,10010458 <__alt_data_end+0xf8010458>
1001070c:	d811883a 	mov	r8,sp
10010710:	003cd906 	br	1000fa78 <__alt_data_end+0xf800fa78>
10010714:	10803fcc 	andi	r2,r2,255
10010718:	1080201c 	xori	r2,r2,128
1001071c:	10bfe004 	addi	r2,r2,-128
10010720:	00c00c04 	movi	r3,48
10010724:	10ffe926 	beq	r2,r3,100106cc <__alt_data_end+0xf80106cc>
10010728:	b8ffffc5 	stb	r3,-1(r23)
1001072c:	d8c01e17 	ldw	r3,120(sp)
10010730:	b8bfffc4 	addi	r2,r23,-1
10010734:	102f883a 	mov	r23,r2
10010738:	18a9c83a 	sub	r20,r3,r2
1001073c:	003d1106 	br	1000fb84 <__alt_data_end+0xf800fb84>
10010740:	d9402017 	ldw	r5,128(sp)
10010744:	d9002117 	ldw	r4,132(sp)
10010748:	d9801a04 	addi	r6,sp,104
1001074c:	d8c02a15 	stw	r3,168(sp)
10010750:	d9c02b15 	stw	r7,172(sp)
10010754:	000f6640 	call	1000f664 <__sprint_r.part.0>
10010758:	d8c02a17 	ldw	r3,168(sp)
1001075c:	d9c02b17 	ldw	r7,172(sp)
10010760:	103f3d1e 	bne	r2,zero,10010458 <__alt_data_end+0xf8010458>
10010764:	d9001b17 	ldw	r4,108(sp)
10010768:	d8801c17 	ldw	r2,112(sp)
1001076c:	d811883a 	mov	r8,sp
10010770:	21400044 	addi	r5,r4,1
10010774:	003d4406 	br	1000fc88 <__alt_data_end+0xf800fc88>
10010778:	d9402017 	ldw	r5,128(sp)
1001077c:	d9002117 	ldw	r4,132(sp)
10010780:	d9801a04 	addi	r6,sp,104
10010784:	d8c02a15 	stw	r3,168(sp)
10010788:	000f6640 	call	1000f664 <__sprint_r.part.0>
1001078c:	d8c02a17 	ldw	r3,168(sp)
10010790:	103f311e 	bne	r2,zero,10010458 <__alt_data_end+0xf8010458>
10010794:	d9001b17 	ldw	r4,108(sp)
10010798:	d8801c17 	ldw	r2,112(sp)
1001079c:	d811883a 	mov	r8,sp
100107a0:	21400044 	addi	r5,r4,1
100107a4:	003ef406 	br	10010378 <__alt_data_end+0xf8010378>
100107a8:	1000bd1e 	bne	r2,zero,10010aa0 <___vfiprintf_internal_r+0x1328>
100107ac:	01400044 	movi	r5,1
100107b0:	0009883a 	mov	r4,zero
100107b4:	d811883a 	mov	r8,sp
100107b8:	003ef106 	br	10010380 <__alt_data_end+0xf8010380>
100107bc:	d9402017 	ldw	r5,128(sp)
100107c0:	d9002117 	ldw	r4,132(sp)
100107c4:	d9801a04 	addi	r6,sp,104
100107c8:	000f6640 	call	1000f664 <__sprint_r.part.0>
100107cc:	103f221e 	bne	r2,zero,10010458 <__alt_data_end+0xf8010458>
100107d0:	d9401b17 	ldw	r5,108(sp)
100107d4:	d8801c17 	ldw	r2,112(sp)
100107d8:	d811883a 	mov	r8,sp
100107dc:	29400044 	addi	r5,r5,1
100107e0:	003d6206 	br	1000fd6c <__alt_data_end+0xf800fd6c>
100107e4:	014400b4 	movhi	r5,4098
100107e8:	2961ea04 	addi	r5,r5,-30808
100107ec:	d9402615 	stw	r5,152(sp)
100107f0:	d8c02215 	stw	r3,136(sp)
100107f4:	1023883a 	mov	r17,r2
100107f8:	9d04b03a 	or	r2,r19,r20
100107fc:	103fa51e 	bne	r2,zero,10010694 <__alt_data_end+0xf8010694>
10010800:	002b883a 	mov	r21,zero
10010804:	00800084 	movi	r2,2
10010808:	003e4a06 	br	10010134 <__alt_data_end+0xf8010134>
1001080c:	014400b4 	movhi	r5,4098
10010810:	2961ea04 	addi	r5,r5,-30808
10010814:	002b883a 	mov	r21,zero
10010818:	d9402615 	stw	r5,152(sp)
1001081c:	003f9e06 	br	10010698 <__alt_data_end+0xf8010698>
10010820:	d9402217 	ldw	r5,136(sp)
10010824:	d8001d85 	stb	zero,118(sp)
10010828:	0029883a 	mov	r20,zero
1001082c:	28800104 	addi	r2,r5,4
10010830:	2cc00017 	ldw	r19,0(r5)
10010834:	803e3a16 	blt	r16,zero,10010120 <__alt_data_end+0xf8010120>
10010838:	00ffdfc4 	movi	r3,-129
1001083c:	d8802215 	stw	r2,136(sp)
10010840:	88e2703a 	and	r17,r17,r3
10010844:	002b883a 	mov	r21,zero
10010848:	983e9b26 	beq	r19,zero,100102b8 <__alt_data_end+0xf80102b8>
1001084c:	00800244 	movi	r2,9
10010850:	14fdc936 	bltu	r2,r19,1000ff78 <__alt_data_end+0xf800ff78>
10010854:	003e9a06 	br	100102c0 <__alt_data_end+0xf80102c0>
10010858:	00800c04 	movi	r2,48
1001085c:	d8c01d45 	stb	r3,117(sp)
10010860:	d8801d05 	stb	r2,116(sp)
10010864:	d8001d85 	stb	zero,118(sp)
10010868:	88c00094 	ori	r3,r17,2
1001086c:	80009c16 	blt	r16,zero,10010ae0 <___vfiprintf_internal_r+0x1368>
10010870:	00bfdfc4 	movi	r2,-129
10010874:	88a2703a 	and	r17,r17,r2
10010878:	8c400094 	ori	r17,r17,2
1001087c:	002b883a 	mov	r21,zero
10010880:	003f8506 	br	10010698 <__alt_data_end+0xf8010698>
10010884:	b029883a 	mov	r20,r22
10010888:	003c0b06 	br	1000f8b8 <__alt_data_end+0xf800f8b8>
1001088c:	04e7c83a 	sub	r19,zero,r19
10010890:	05400b44 	movi	r21,45
10010894:	9804c03a 	cmpne	r2,r19,zero
10010898:	0529c83a 	sub	r20,zero,r20
1001089c:	dd401d85 	stb	r21,118(sp)
100108a0:	a0a9c83a 	sub	r20,r20,r2
100108a4:	80009716 	blt	r16,zero,10010b04 <___vfiprintf_internal_r+0x138c>
100108a8:	00bfdfc4 	movi	r2,-129
100108ac:	88a2703a 	and	r17,r17,r2
100108b0:	003db006 	br	1000ff74 <__alt_data_end+0xf800ff74>
100108b4:	b0c00007 	ldb	r3,0(r22)
100108b8:	003c0c06 	br	1000f8ec <__alt_data_end+0xf800f8ec>
100108bc:	8880100c 	andi	r2,r17,64
100108c0:	d8001d85 	stb	zero,118(sp)
100108c4:	1000461e 	bne	r2,zero,100109e0 <___vfiprintf_internal_r+0x1268>
100108c8:	d9002217 	ldw	r4,136(sp)
100108cc:	0029883a 	mov	r20,zero
100108d0:	20800104 	addi	r2,r4,4
100108d4:	24c00017 	ldw	r19,0(r4)
100108d8:	803df80e 	bge	r16,zero,100100bc <__alt_data_end+0xf80100bc>
100108dc:	9d06b03a 	or	r3,r19,r20
100108e0:	d8802215 	stw	r2,136(sp)
100108e4:	183d5e1e 	bne	r3,zero,1000fe60 <__alt_data_end+0xf800fe60>
100108e8:	002b883a 	mov	r21,zero
100108ec:	0005883a 	mov	r2,zero
100108f0:	003e1006 	br	10010134 <__alt_data_end+0xf8010134>
100108f4:	8880040c 	andi	r2,r17,16
100108f8:	1000321e 	bne	r2,zero,100109c4 <___vfiprintf_internal_r+0x124c>
100108fc:	8c40100c 	andi	r17,r17,64
10010900:	88008d26 	beq	r17,zero,10010b38 <___vfiprintf_internal_r+0x13c0>
10010904:	d9402217 	ldw	r5,136(sp)
10010908:	d8c02417 	ldw	r3,144(sp)
1001090c:	28800017 	ldw	r2,0(r5)
10010910:	29400104 	addi	r5,r5,4
10010914:	d9402215 	stw	r5,136(sp)
10010918:	10c0000d 	sth	r3,0(r2)
1001091c:	003bca06 	br	1000f848 <__alt_data_end+0xf800f848>
10010920:	8880100c 	andi	r2,r17,64
10010924:	10003a26 	beq	r2,zero,10010a10 <___vfiprintf_internal_r+0x1298>
10010928:	d8802217 	ldw	r2,136(sp)
1001092c:	14c0000f 	ldh	r19,0(r2)
10010930:	10800104 	addi	r2,r2,4
10010934:	d8802215 	stw	r2,136(sp)
10010938:	9829d7fa 	srai	r20,r19,31
1001093c:	a005883a 	mov	r2,r20
10010940:	003d8506 	br	1000ff58 <__alt_data_end+0xf800ff58>
10010944:	8880100c 	andi	r2,r17,64
10010948:	10002b26 	beq	r2,zero,100109f8 <___vfiprintf_internal_r+0x1280>
1001094c:	d8802217 	ldw	r2,136(sp)
10010950:	0029883a 	mov	r20,zero
10010954:	14c0000b 	ldhu	r19,0(r2)
10010958:	10800104 	addi	r2,r2,4
1001095c:	d8802215 	stw	r2,136(sp)
10010960:	003d5d06 	br	1000fed8 <__alt_data_end+0xf800fed8>
10010964:	d9402017 	ldw	r5,128(sp)
10010968:	d9002117 	ldw	r4,132(sp)
1001096c:	d9801a04 	addi	r6,sp,104
10010970:	d8c02a15 	stw	r3,168(sp)
10010974:	d9c02b15 	stw	r7,172(sp)
10010978:	000f6640 	call	1000f664 <__sprint_r.part.0>
1001097c:	d8c02a17 	ldw	r3,168(sp)
10010980:	d9c02b17 	ldw	r7,172(sp)
10010984:	103eb41e 	bne	r2,zero,10010458 <__alt_data_end+0xf8010458>
10010988:	d9001b17 	ldw	r4,108(sp)
1001098c:	d8801c17 	ldw	r2,112(sp)
10010990:	d811883a 	mov	r8,sp
10010994:	21400044 	addi	r5,r4,1
10010998:	003e6706 	br	10010338 <__alt_data_end+0xf8010338>
1001099c:	00bfffc4 	movi	r2,-1
100109a0:	003c4a06 	br	1000facc <__alt_data_end+0xf800facc>
100109a4:	9805883a 	mov	r2,r19
100109a8:	003ee806 	br	1001054c <__alt_data_end+0xf801054c>
100109ac:	d8c02217 	ldw	r3,136(sp)
100109b0:	0029883a 	mov	r20,zero
100109b4:	18800104 	addi	r2,r3,4
100109b8:	1cc0000b 	ldhu	r19,0(r3)
100109bc:	803f9e0e 	bge	r16,zero,10010838 <__alt_data_end+0xf8010838>
100109c0:	003dd706 	br	10010120 <__alt_data_end+0xf8010120>
100109c4:	d8c02217 	ldw	r3,136(sp)
100109c8:	d9002417 	ldw	r4,144(sp)
100109cc:	18800017 	ldw	r2,0(r3)
100109d0:	18c00104 	addi	r3,r3,4
100109d4:	d8c02215 	stw	r3,136(sp)
100109d8:	11000015 	stw	r4,0(r2)
100109dc:	003b9a06 	br	1000f848 <__alt_data_end+0xf800f848>
100109e0:	d8c02217 	ldw	r3,136(sp)
100109e4:	0029883a 	mov	r20,zero
100109e8:	18800104 	addi	r2,r3,4
100109ec:	1cc0000b 	ldhu	r19,0(r3)
100109f0:	803db20e 	bge	r16,zero,100100bc <__alt_data_end+0xf80100bc>
100109f4:	003fb906 	br	100108dc <__alt_data_end+0xf80108dc>
100109f8:	d9002217 	ldw	r4,136(sp)
100109fc:	0029883a 	mov	r20,zero
10010a00:	24c00017 	ldw	r19,0(r4)
10010a04:	21000104 	addi	r4,r4,4
10010a08:	d9002215 	stw	r4,136(sp)
10010a0c:	003d3206 	br	1000fed8 <__alt_data_end+0xf800fed8>
10010a10:	d8c02217 	ldw	r3,136(sp)
10010a14:	1cc00017 	ldw	r19,0(r3)
10010a18:	18c00104 	addi	r3,r3,4
10010a1c:	d8c02215 	stw	r3,136(sp)
10010a20:	9829d7fa 	srai	r20,r19,31
10010a24:	a005883a 	mov	r2,r20
10010a28:	003d4b06 	br	1000ff58 <__alt_data_end+0xf800ff58>
10010a2c:	0009883a 	mov	r4,zero
10010a30:	01400044 	movi	r5,1
10010a34:	d811883a 	mov	r8,sp
10010a38:	003e4f06 	br	10010378 <__alt_data_end+0xf8010378>
10010a3c:	d8c02215 	stw	r3,136(sp)
10010a40:	002b883a 	mov	r21,zero
10010a44:	003db806 	br	10010128 <__alt_data_end+0xf8010128>
10010a48:	d811883a 	mov	r8,sp
10010a4c:	003e9606 	br	100104a8 <__alt_data_end+0xf80104a8>
10010a50:	010400b4 	movhi	r4,4098
10010a54:	21224b04 	addi	r4,r4,-30420
10010a58:	d9002315 	stw	r4,140(sp)
10010a5c:	003e6306 	br	100103ec <__alt_data_end+0xf80103ec>
10010a60:	b0c00043 	ldbu	r3,1(r22)
10010a64:	8c400814 	ori	r17,r17,32
10010a68:	b5800044 	addi	r22,r22,1
10010a6c:	18c03fcc 	andi	r3,r3,255
10010a70:	18c0201c 	xori	r3,r3,128
10010a74:	18ffe004 	addi	r3,r3,-128
10010a78:	003b9c06 	br	1000f8ec <__alt_data_end+0xf800f8ec>
10010a7c:	b809883a 	mov	r4,r23
10010a80:	da002a15 	stw	r8,168(sp)
10010a84:	00080100 	call	10008010 <strlen>
10010a88:	1029883a 	mov	r20,r2
10010a8c:	dd401d83 	ldbu	r21,118(sp)
10010a90:	df002215 	stw	fp,136(sp)
10010a94:	0021883a 	mov	r16,zero
10010a98:	da002a17 	ldw	r8,168(sp)
10010a9c:	003c3906 	br	1000fb84 <__alt_data_end+0xf800fb84>
10010aa0:	d9402017 	ldw	r5,128(sp)
10010aa4:	d9002117 	ldw	r4,132(sp)
10010aa8:	d9801a04 	addi	r6,sp,104
10010aac:	000f6640 	call	1000f664 <__sprint_r.part.0>
10010ab0:	103e691e 	bne	r2,zero,10010458 <__alt_data_end+0xf8010458>
10010ab4:	d9001b17 	ldw	r4,108(sp)
10010ab8:	d8801c17 	ldw	r2,112(sp)
10010abc:	d811883a 	mov	r8,sp
10010ac0:	21400044 	addi	r5,r4,1
10010ac4:	003e2e06 	br	10010380 <__alt_data_end+0xf8010380>
10010ac8:	010400b4 	movhi	r4,4098
10010acc:	21224f04 	addi	r4,r4,-30404
10010ad0:	d9002315 	stw	r4,140(sp)
10010ad4:	d9001b17 	ldw	r4,108(sp)
10010ad8:	21000044 	addi	r4,r4,1
10010adc:	003c5e06 	br	1000fc58 <__alt_data_end+0xf800fc58>
10010ae0:	002b883a 	mov	r21,zero
10010ae4:	00800084 	movi	r2,2
10010ae8:	10803fcc 	andi	r2,r2,255
10010aec:	01000044 	movi	r4,1
10010af0:	11002b26 	beq	r2,r4,10010ba0 <___vfiprintf_internal_r+0x1428>
10010af4:	01000084 	movi	r4,2
10010af8:	11002b1e 	bne	r2,r4,10010ba8 <___vfiprintf_internal_r+0x1430>
10010afc:	1823883a 	mov	r17,r3
10010b00:	003ee506 	br	10010698 <__alt_data_end+0xf8010698>
10010b04:	8807883a 	mov	r3,r17
10010b08:	00800044 	movi	r2,1
10010b0c:	003ff606 	br	10010ae8 <__alt_data_end+0xf8010ae8>
10010b10:	00800184 	movi	r2,6
10010b14:	1400012e 	bgeu	r2,r16,10010b1c <___vfiprintf_internal_r+0x13a4>
10010b18:	1021883a 	mov	r16,r2
10010b1c:	8029883a 	mov	r20,r16
10010b20:	8027883a 	mov	r19,r16
10010b24:	80002216 	blt	r16,zero,10010bb0 <___vfiprintf_internal_r+0x1438>
10010b28:	05c400b4 	movhi	r23,4098
10010b2c:	df002215 	stw	fp,136(sp)
10010b30:	bde1ef04 	addi	r23,r23,-30788
10010b34:	003cfb06 	br	1000ff24 <__alt_data_end+0xf800ff24>
10010b38:	d9002217 	ldw	r4,136(sp)
10010b3c:	d9402417 	ldw	r5,144(sp)
10010b40:	20800017 	ldw	r2,0(r4)
10010b44:	21000104 	addi	r4,r4,4
10010b48:	d9002215 	stw	r4,136(sp)
10010b4c:	11400015 	stw	r5,0(r2)
10010b50:	003b3d06 	br	1000f848 <__alt_data_end+0xf800f848>
10010b54:	014400b4 	movhi	r5,4098
10010b58:	29624f04 	addi	r5,r5,-30404
10010b5c:	d9402315 	stw	r5,140(sp)
10010b60:	d9401b17 	ldw	r5,108(sp)
10010b64:	29400044 	addi	r5,r5,1
10010b68:	003e6d06 	br	10010520 <__alt_data_end+0xf8010520>
10010b6c:	8029883a 	mov	r20,r16
10010b70:	dd401d83 	ldbu	r21,118(sp)
10010b74:	df002215 	stw	fp,136(sp)
10010b78:	0021883a 	mov	r16,zero
10010b7c:	003c0106 	br	1000fb84 <__alt_data_end+0xf800fb84>
10010b80:	00c400b4 	movhi	r3,4098
10010b84:	18e24b04 	addi	r3,r3,-30420
10010b88:	d8c02315 	stw	r3,140(sp)
10010b8c:	280d883a 	mov	r6,r5
10010b90:	003c6906 	br	1000fd38 <__alt_data_end+0xf800fd38>
10010b94:	802d883a 	mov	r22,r16
10010b98:	0021883a 	mov	r16,zero
10010b9c:	003b5406 	br	1000f8f0 <__alt_data_end+0xf800f8f0>
10010ba0:	1823883a 	mov	r17,r3
10010ba4:	003cf306 	br	1000ff74 <__alt_data_end+0xf800ff74>
10010ba8:	1823883a 	mov	r17,r3
10010bac:	003cad06 	br	1000fe64 <__alt_data_end+0xf800fe64>
10010bb0:	0027883a 	mov	r19,zero
10010bb4:	003fdc06 	br	10010b28 <__alt_data_end+0xf8010b28>
10010bb8:	d9402217 	ldw	r5,136(sp)
10010bbc:	8005883a 	mov	r2,r16
10010bc0:	b0c00043 	ldbu	r3,1(r22)
10010bc4:	2c000017 	ldw	r16,0(r5)
10010bc8:	29000104 	addi	r4,r5,4
10010bcc:	d9002215 	stw	r4,136(sp)
10010bd0:	102d883a 	mov	r22,r2
10010bd4:	803fa50e 	bge	r16,zero,10010a6c <__alt_data_end+0xf8010a6c>
10010bd8:	18c03fcc 	andi	r3,r3,255
10010bdc:	18c0201c 	xori	r3,r3,128
10010be0:	043fffc4 	movi	r16,-1
10010be4:	18ffe004 	addi	r3,r3,-128
10010be8:	003b4006 	br	1000f8ec <__alt_data_end+0xf800f8ec>
10010bec:	d9402303 	ldbu	r5,140(sp)
10010bf0:	d9401d85 	stb	r5,118(sp)
10010bf4:	003cae06 	br	1000feb0 <__alt_data_end+0xf800feb0>
10010bf8:	d8c02303 	ldbu	r3,140(sp)
10010bfc:	d8c01d85 	stb	r3,118(sp)
10010c00:	003d1406 	br	10010054 <__alt_data_end+0xf8010054>
10010c04:	d8c02303 	ldbu	r3,140(sp)
10010c08:	d8c01d85 	stb	r3,118(sp)
10010c0c:	003cca06 	br	1000ff38 <__alt_data_end+0xf800ff38>
10010c10:	8880004c 	andi	r2,r17,1
10010c14:	002b883a 	mov	r21,zero
10010c18:	10000526 	beq	r2,zero,10010c30 <___vfiprintf_internal_r+0x14b8>
10010c1c:	00800c04 	movi	r2,48
10010c20:	d88019c5 	stb	r2,103(sp)
10010c24:	dd002817 	ldw	r20,160(sp)
10010c28:	ddc019c4 	addi	r23,sp,103
10010c2c:	003bd506 	br	1000fb84 <__alt_data_end+0xf800fb84>
10010c30:	0029883a 	mov	r20,zero
10010c34:	ddc01a04 	addi	r23,sp,104
10010c38:	003bd206 	br	1000fb84 <__alt_data_end+0xf800fb84>
10010c3c:	d9002303 	ldbu	r4,140(sp)
10010c40:	d9001d85 	stb	r4,118(sp)
10010c44:	003da606 	br	100102e0 <__alt_data_end+0xf80102e0>
10010c48:	d8c02303 	ldbu	r3,140(sp)
10010c4c:	d8c01d85 	stb	r3,118(sp)
10010c50:	003c7606 	br	1000fe2c <__alt_data_end+0xf800fe2c>
10010c54:	d8c02303 	ldbu	r3,140(sp)
10010c58:	d8c01d85 	stb	r3,118(sp)
10010c5c:	003c6506 	br	1000fdf4 <__alt_data_end+0xf800fdf4>
10010c60:	d9002303 	ldbu	r4,140(sp)
10010c64:	d9001d85 	stb	r4,118(sp)
10010c68:	003d3d06 	br	10010160 <__alt_data_end+0xf8010160>
10010c6c:	d8c02303 	ldbu	r3,140(sp)
10010c70:	d8c01d85 	stb	r3,118(sp)
10010c74:	003d1d06 	br	100100ec <__alt_data_end+0xf80100ec>
10010c78:	d8c02303 	ldbu	r3,140(sp)
10010c7c:	d8c01d85 	stb	r3,118(sp)
10010c80:	003d0306 	br	10010090 <__alt_data_end+0xf8010090>

10010c84 <__vfiprintf_internal>:
10010c84:	008400b4 	movhi	r2,4098
10010c88:	10a99504 	addi	r2,r2,-22956
10010c8c:	300f883a 	mov	r7,r6
10010c90:	280d883a 	mov	r6,r5
10010c94:	200b883a 	mov	r5,r4
10010c98:	11000017 	ldw	r4,0(r2)
10010c9c:	000f7781 	jmpi	1000f778 <___vfiprintf_internal_r>

10010ca0 <__sbprintf>:
10010ca0:	2880030b 	ldhu	r2,12(r5)
10010ca4:	2ac01917 	ldw	r11,100(r5)
10010ca8:	2a80038b 	ldhu	r10,14(r5)
10010cac:	2a400717 	ldw	r9,28(r5)
10010cb0:	2a000917 	ldw	r8,36(r5)
10010cb4:	defee204 	addi	sp,sp,-1144
10010cb8:	00c10004 	movi	r3,1024
10010cbc:	dc011a15 	stw	r16,1128(sp)
10010cc0:	10bfff4c 	andi	r2,r2,65533
10010cc4:	2821883a 	mov	r16,r5
10010cc8:	d8cb883a 	add	r5,sp,r3
10010ccc:	dc811c15 	stw	r18,1136(sp)
10010cd0:	dc411b15 	stw	r17,1132(sp)
10010cd4:	dfc11d15 	stw	ra,1140(sp)
10010cd8:	2025883a 	mov	r18,r4
10010cdc:	d881030d 	sth	r2,1036(sp)
10010ce0:	dac11915 	stw	r11,1124(sp)
10010ce4:	da81038d 	sth	r10,1038(sp)
10010ce8:	da410715 	stw	r9,1052(sp)
10010cec:	da010915 	stw	r8,1060(sp)
10010cf0:	dec10015 	stw	sp,1024(sp)
10010cf4:	dec10415 	stw	sp,1040(sp)
10010cf8:	d8c10215 	stw	r3,1032(sp)
10010cfc:	d8c10515 	stw	r3,1044(sp)
10010d00:	d8010615 	stw	zero,1048(sp)
10010d04:	000f7780 	call	1000f778 <___vfiprintf_internal_r>
10010d08:	1023883a 	mov	r17,r2
10010d0c:	10000416 	blt	r2,zero,10010d20 <__sbprintf+0x80>
10010d10:	d9410004 	addi	r5,sp,1024
10010d14:	9009883a 	mov	r4,r18
10010d18:	000c07c0 	call	1000c07c <_fflush_r>
10010d1c:	10000d1e 	bne	r2,zero,10010d54 <__sbprintf+0xb4>
10010d20:	d881030b 	ldhu	r2,1036(sp)
10010d24:	1080100c 	andi	r2,r2,64
10010d28:	10000326 	beq	r2,zero,10010d38 <__sbprintf+0x98>
10010d2c:	8080030b 	ldhu	r2,12(r16)
10010d30:	10801014 	ori	r2,r2,64
10010d34:	8080030d 	sth	r2,12(r16)
10010d38:	8805883a 	mov	r2,r17
10010d3c:	dfc11d17 	ldw	ra,1140(sp)
10010d40:	dc811c17 	ldw	r18,1136(sp)
10010d44:	dc411b17 	ldw	r17,1132(sp)
10010d48:	dc011a17 	ldw	r16,1128(sp)
10010d4c:	dec11e04 	addi	sp,sp,1144
10010d50:	f800283a 	ret
10010d54:	047fffc4 	movi	r17,-1
10010d58:	003ff106 	br	10010d20 <__alt_data_end+0xf8010d20>

10010d5c <_write_r>:
10010d5c:	defffd04 	addi	sp,sp,-12
10010d60:	2805883a 	mov	r2,r5
10010d64:	dc000015 	stw	r16,0(sp)
10010d68:	040400b4 	movhi	r16,4098
10010d6c:	dc400115 	stw	r17,4(sp)
10010d70:	300b883a 	mov	r5,r6
10010d74:	8430af04 	addi	r16,r16,-15684
10010d78:	2023883a 	mov	r17,r4
10010d7c:	380d883a 	mov	r6,r7
10010d80:	1009883a 	mov	r4,r2
10010d84:	dfc00215 	stw	ra,8(sp)
10010d88:	80000015 	stw	zero,0(r16)
10010d8c:	00154dc0 	call	100154dc <write>
10010d90:	00ffffc4 	movi	r3,-1
10010d94:	10c00526 	beq	r2,r3,10010dac <_write_r+0x50>
10010d98:	dfc00217 	ldw	ra,8(sp)
10010d9c:	dc400117 	ldw	r17,4(sp)
10010da0:	dc000017 	ldw	r16,0(sp)
10010da4:	dec00304 	addi	sp,sp,12
10010da8:	f800283a 	ret
10010dac:	80c00017 	ldw	r3,0(r16)
10010db0:	183ff926 	beq	r3,zero,10010d98 <__alt_data_end+0xf8010d98>
10010db4:	88c00015 	stw	r3,0(r17)
10010db8:	003ff706 	br	10010d98 <__alt_data_end+0xf8010d98>

10010dbc <_close_r>:
10010dbc:	defffd04 	addi	sp,sp,-12
10010dc0:	dc000015 	stw	r16,0(sp)
10010dc4:	040400b4 	movhi	r16,4098
10010dc8:	dc400115 	stw	r17,4(sp)
10010dcc:	8430af04 	addi	r16,r16,-15684
10010dd0:	2023883a 	mov	r17,r4
10010dd4:	2809883a 	mov	r4,r5
10010dd8:	dfc00215 	stw	ra,8(sp)
10010ddc:	80000015 	stw	zero,0(r16)
10010de0:	0014c540 	call	10014c54 <close>
10010de4:	00ffffc4 	movi	r3,-1
10010de8:	10c00526 	beq	r2,r3,10010e00 <_close_r+0x44>
10010dec:	dfc00217 	ldw	ra,8(sp)
10010df0:	dc400117 	ldw	r17,4(sp)
10010df4:	dc000017 	ldw	r16,0(sp)
10010df8:	dec00304 	addi	sp,sp,12
10010dfc:	f800283a 	ret
10010e00:	80c00017 	ldw	r3,0(r16)
10010e04:	183ff926 	beq	r3,zero,10010dec <__alt_data_end+0xf8010dec>
10010e08:	88c00015 	stw	r3,0(r17)
10010e0c:	003ff706 	br	10010dec <__alt_data_end+0xf8010dec>

10010e10 <_calloc_r>:
10010e10:	defffe04 	addi	sp,sp,-8
10010e14:	2805883a 	mov	r2,r5
10010e18:	dc000015 	stw	r16,0(sp)
10010e1c:	300b883a 	mov	r5,r6
10010e20:	2021883a 	mov	r16,r4
10010e24:	1009883a 	mov	r4,r2
10010e28:	dfc00115 	stw	ra,4(sp)
10010e2c:	0007d040 	call	10007d04 <__mulsi3>
10010e30:	100b883a 	mov	r5,r2
10010e34:	8009883a 	mov	r4,r16
10010e38:	000d1d40 	call	1000d1d4 <_malloc_r>
10010e3c:	10002926 	beq	r2,zero,10010ee4 <_calloc_r+0xd4>
10010e40:	11bfff17 	ldw	r6,-4(r2)
10010e44:	1021883a 	mov	r16,r2
10010e48:	00bfff04 	movi	r2,-4
10010e4c:	308c703a 	and	r6,r6,r2
10010e50:	00c00904 	movi	r3,36
10010e54:	308d883a 	add	r6,r6,r2
10010e58:	19801636 	bltu	r3,r6,10010eb4 <_calloc_r+0xa4>
10010e5c:	008004c4 	movi	r2,19
10010e60:	11800b2e 	bgeu	r2,r6,10010e90 <_calloc_r+0x80>
10010e64:	80000015 	stw	zero,0(r16)
10010e68:	80000115 	stw	zero,4(r16)
10010e6c:	008006c4 	movi	r2,27
10010e70:	11801a2e 	bgeu	r2,r6,10010edc <_calloc_r+0xcc>
10010e74:	80000215 	stw	zero,8(r16)
10010e78:	80000315 	stw	zero,12(r16)
10010e7c:	30c0151e 	bne	r6,r3,10010ed4 <_calloc_r+0xc4>
10010e80:	80000415 	stw	zero,16(r16)
10010e84:	80800604 	addi	r2,r16,24
10010e88:	80000515 	stw	zero,20(r16)
10010e8c:	00000106 	br	10010e94 <_calloc_r+0x84>
10010e90:	8005883a 	mov	r2,r16
10010e94:	10000015 	stw	zero,0(r2)
10010e98:	10000115 	stw	zero,4(r2)
10010e9c:	10000215 	stw	zero,8(r2)
10010ea0:	8005883a 	mov	r2,r16
10010ea4:	dfc00117 	ldw	ra,4(sp)
10010ea8:	dc000017 	ldw	r16,0(sp)
10010eac:	dec00204 	addi	sp,sp,8
10010eb0:	f800283a 	ret
10010eb4:	000b883a 	mov	r5,zero
10010eb8:	8009883a 	mov	r4,r16
10010ebc:	0007d2c0 	call	10007d2c <memset>
10010ec0:	8005883a 	mov	r2,r16
10010ec4:	dfc00117 	ldw	ra,4(sp)
10010ec8:	dc000017 	ldw	r16,0(sp)
10010ecc:	dec00204 	addi	sp,sp,8
10010ed0:	f800283a 	ret
10010ed4:	80800404 	addi	r2,r16,16
10010ed8:	003fee06 	br	10010e94 <__alt_data_end+0xf8010e94>
10010edc:	80800204 	addi	r2,r16,8
10010ee0:	003fec06 	br	10010e94 <__alt_data_end+0xf8010e94>
10010ee4:	0005883a 	mov	r2,zero
10010ee8:	003fee06 	br	10010ea4 <__alt_data_end+0xf8010ea4>

10010eec <_fclose_r>:
10010eec:	28003926 	beq	r5,zero,10010fd4 <_fclose_r+0xe8>
10010ef0:	defffc04 	addi	sp,sp,-16
10010ef4:	dc400115 	stw	r17,4(sp)
10010ef8:	dc000015 	stw	r16,0(sp)
10010efc:	dfc00315 	stw	ra,12(sp)
10010f00:	dc800215 	stw	r18,8(sp)
10010f04:	2023883a 	mov	r17,r4
10010f08:	2821883a 	mov	r16,r5
10010f0c:	20000226 	beq	r4,zero,10010f18 <_fclose_r+0x2c>
10010f10:	20800e17 	ldw	r2,56(r4)
10010f14:	10002726 	beq	r2,zero,10010fb4 <_fclose_r+0xc8>
10010f18:	8080030f 	ldh	r2,12(r16)
10010f1c:	1000071e 	bne	r2,zero,10010f3c <_fclose_r+0x50>
10010f20:	0005883a 	mov	r2,zero
10010f24:	dfc00317 	ldw	ra,12(sp)
10010f28:	dc800217 	ldw	r18,8(sp)
10010f2c:	dc400117 	ldw	r17,4(sp)
10010f30:	dc000017 	ldw	r16,0(sp)
10010f34:	dec00404 	addi	sp,sp,16
10010f38:	f800283a 	ret
10010f3c:	800b883a 	mov	r5,r16
10010f40:	8809883a 	mov	r4,r17
10010f44:	000be600 	call	1000be60 <__sflush_r>
10010f48:	1025883a 	mov	r18,r2
10010f4c:	80800b17 	ldw	r2,44(r16)
10010f50:	10000426 	beq	r2,zero,10010f64 <_fclose_r+0x78>
10010f54:	81400717 	ldw	r5,28(r16)
10010f58:	8809883a 	mov	r4,r17
10010f5c:	103ee83a 	callr	r2
10010f60:	10001616 	blt	r2,zero,10010fbc <_fclose_r+0xd0>
10010f64:	8080030b 	ldhu	r2,12(r16)
10010f68:	1080200c 	andi	r2,r2,128
10010f6c:	1000151e 	bne	r2,zero,10010fc4 <_fclose_r+0xd8>
10010f70:	81400c17 	ldw	r5,48(r16)
10010f74:	28000526 	beq	r5,zero,10010f8c <_fclose_r+0xa0>
10010f78:	80801004 	addi	r2,r16,64
10010f7c:	28800226 	beq	r5,r2,10010f88 <_fclose_r+0x9c>
10010f80:	8809883a 	mov	r4,r17
10010f84:	000c5dc0 	call	1000c5dc <_free_r>
10010f88:	80000c15 	stw	zero,48(r16)
10010f8c:	81401117 	ldw	r5,68(r16)
10010f90:	28000326 	beq	r5,zero,10010fa0 <_fclose_r+0xb4>
10010f94:	8809883a 	mov	r4,r17
10010f98:	000c5dc0 	call	1000c5dc <_free_r>
10010f9c:	80001115 	stw	zero,68(r16)
10010fa0:	000c4780 	call	1000c478 <__sfp_lock_acquire>
10010fa4:	8000030d 	sth	zero,12(r16)
10010fa8:	000c47c0 	call	1000c47c <__sfp_lock_release>
10010fac:	9005883a 	mov	r2,r18
10010fb0:	003fdc06 	br	10010f24 <__alt_data_end+0xf8010f24>
10010fb4:	000c4680 	call	1000c468 <__sinit>
10010fb8:	003fd706 	br	10010f18 <__alt_data_end+0xf8010f18>
10010fbc:	04bfffc4 	movi	r18,-1
10010fc0:	003fe806 	br	10010f64 <__alt_data_end+0xf8010f64>
10010fc4:	81400417 	ldw	r5,16(r16)
10010fc8:	8809883a 	mov	r4,r17
10010fcc:	000c5dc0 	call	1000c5dc <_free_r>
10010fd0:	003fe706 	br	10010f70 <__alt_data_end+0xf8010f70>
10010fd4:	0005883a 	mov	r2,zero
10010fd8:	f800283a 	ret

10010fdc <fclose>:
10010fdc:	008400b4 	movhi	r2,4098
10010fe0:	10a99504 	addi	r2,r2,-22956
10010fe4:	200b883a 	mov	r5,r4
10010fe8:	11000017 	ldw	r4,0(r2)
10010fec:	0010eec1 	jmpi	10010eec <_fclose_r>

10010ff0 <__fputwc>:
10010ff0:	defff804 	addi	sp,sp,-32
10010ff4:	dcc00415 	stw	r19,16(sp)
10010ff8:	dc800315 	stw	r18,12(sp)
10010ffc:	dc000115 	stw	r16,4(sp)
10011000:	dfc00715 	stw	ra,28(sp)
10011004:	dd400615 	stw	r21,24(sp)
10011008:	dd000515 	stw	r20,20(sp)
1001100c:	dc400215 	stw	r17,8(sp)
10011010:	2027883a 	mov	r19,r4
10011014:	2825883a 	mov	r18,r5
10011018:	3021883a 	mov	r16,r6
1001101c:	000cfc40 	call	1000cfc4 <__locale_mb_cur_max>
10011020:	00c00044 	movi	r3,1
10011024:	10c03e26 	beq	r2,r3,10011120 <__fputwc+0x130>
10011028:	81c01704 	addi	r7,r16,92
1001102c:	900d883a 	mov	r6,r18
10011030:	d80b883a 	mov	r5,sp
10011034:	9809883a 	mov	r4,r19
10011038:	00114c00 	call	100114c0 <_wcrtomb_r>
1001103c:	1029883a 	mov	r20,r2
10011040:	00bfffc4 	movi	r2,-1
10011044:	a0802026 	beq	r20,r2,100110c8 <__fputwc+0xd8>
10011048:	d9400003 	ldbu	r5,0(sp)
1001104c:	a0001c26 	beq	r20,zero,100110c0 <__fputwc+0xd0>
10011050:	0023883a 	mov	r17,zero
10011054:	05400284 	movi	r21,10
10011058:	00000906 	br	10011080 <__fputwc+0x90>
1001105c:	80800017 	ldw	r2,0(r16)
10011060:	11400005 	stb	r5,0(r2)
10011064:	80c00017 	ldw	r3,0(r16)
10011068:	18c00044 	addi	r3,r3,1
1001106c:	80c00015 	stw	r3,0(r16)
10011070:	8c400044 	addi	r17,r17,1
10011074:	dc45883a 	add	r2,sp,r17
10011078:	8d00112e 	bgeu	r17,r20,100110c0 <__fputwc+0xd0>
1001107c:	11400003 	ldbu	r5,0(r2)
10011080:	80c00217 	ldw	r3,8(r16)
10011084:	18ffffc4 	addi	r3,r3,-1
10011088:	80c00215 	stw	r3,8(r16)
1001108c:	183ff30e 	bge	r3,zero,1001105c <__alt_data_end+0xf801105c>
10011090:	80800617 	ldw	r2,24(r16)
10011094:	18801916 	blt	r3,r2,100110fc <__fputwc+0x10c>
10011098:	80800017 	ldw	r2,0(r16)
1001109c:	11400005 	stb	r5,0(r2)
100110a0:	80800017 	ldw	r2,0(r16)
100110a4:	10c00003 	ldbu	r3,0(r2)
100110a8:	10800044 	addi	r2,r2,1
100110ac:	1d402326 	beq	r3,r21,1001113c <__fputwc+0x14c>
100110b0:	80800015 	stw	r2,0(r16)
100110b4:	8c400044 	addi	r17,r17,1
100110b8:	dc45883a 	add	r2,sp,r17
100110bc:	8d3fef36 	bltu	r17,r20,1001107c <__alt_data_end+0xf801107c>
100110c0:	9005883a 	mov	r2,r18
100110c4:	00000406 	br	100110d8 <__fputwc+0xe8>
100110c8:	80c0030b 	ldhu	r3,12(r16)
100110cc:	a005883a 	mov	r2,r20
100110d0:	18c01014 	ori	r3,r3,64
100110d4:	80c0030d 	sth	r3,12(r16)
100110d8:	dfc00717 	ldw	ra,28(sp)
100110dc:	dd400617 	ldw	r21,24(sp)
100110e0:	dd000517 	ldw	r20,20(sp)
100110e4:	dcc00417 	ldw	r19,16(sp)
100110e8:	dc800317 	ldw	r18,12(sp)
100110ec:	dc400217 	ldw	r17,8(sp)
100110f0:	dc000117 	ldw	r16,4(sp)
100110f4:	dec00804 	addi	sp,sp,32
100110f8:	f800283a 	ret
100110fc:	800d883a 	mov	r6,r16
10011100:	29403fcc 	andi	r5,r5,255
10011104:	9809883a 	mov	r4,r19
10011108:	00113680 	call	10011368 <__swbuf_r>
1001110c:	10bfffe0 	cmpeqi	r2,r2,-1
10011110:	10803fcc 	andi	r2,r2,255
10011114:	103fd626 	beq	r2,zero,10011070 <__alt_data_end+0xf8011070>
10011118:	00bfffc4 	movi	r2,-1
1001111c:	003fee06 	br	100110d8 <__alt_data_end+0xf80110d8>
10011120:	90ffffc4 	addi	r3,r18,-1
10011124:	01003f84 	movi	r4,254
10011128:	20ffbf36 	bltu	r4,r3,10011028 <__alt_data_end+0xf8011028>
1001112c:	900b883a 	mov	r5,r18
10011130:	dc800005 	stb	r18,0(sp)
10011134:	1029883a 	mov	r20,r2
10011138:	003fc506 	br	10011050 <__alt_data_end+0xf8011050>
1001113c:	800d883a 	mov	r6,r16
10011140:	a80b883a 	mov	r5,r21
10011144:	9809883a 	mov	r4,r19
10011148:	00113680 	call	10011368 <__swbuf_r>
1001114c:	10bfffe0 	cmpeqi	r2,r2,-1
10011150:	003fef06 	br	10011110 <__alt_data_end+0xf8011110>

10011154 <_fputwc_r>:
10011154:	3080030b 	ldhu	r2,12(r6)
10011158:	10c8000c 	andi	r3,r2,8192
1001115c:	1800051e 	bne	r3,zero,10011174 <_fputwc_r+0x20>
10011160:	30c01917 	ldw	r3,100(r6)
10011164:	10880014 	ori	r2,r2,8192
10011168:	3080030d 	sth	r2,12(r6)
1001116c:	18880014 	ori	r2,r3,8192
10011170:	30801915 	stw	r2,100(r6)
10011174:	0010ff01 	jmpi	10010ff0 <__fputwc>

10011178 <fputwc>:
10011178:	008400b4 	movhi	r2,4098
1001117c:	defffc04 	addi	sp,sp,-16
10011180:	10a99504 	addi	r2,r2,-22956
10011184:	dc000115 	stw	r16,4(sp)
10011188:	14000017 	ldw	r16,0(r2)
1001118c:	dc400215 	stw	r17,8(sp)
10011190:	dfc00315 	stw	ra,12(sp)
10011194:	2023883a 	mov	r17,r4
10011198:	80000226 	beq	r16,zero,100111a4 <fputwc+0x2c>
1001119c:	80800e17 	ldw	r2,56(r16)
100111a0:	10001026 	beq	r2,zero,100111e4 <fputwc+0x6c>
100111a4:	2880030b 	ldhu	r2,12(r5)
100111a8:	10c8000c 	andi	r3,r2,8192
100111ac:	1800051e 	bne	r3,zero,100111c4 <fputwc+0x4c>
100111b0:	28c01917 	ldw	r3,100(r5)
100111b4:	10880014 	ori	r2,r2,8192
100111b8:	2880030d 	sth	r2,12(r5)
100111bc:	18880014 	ori	r2,r3,8192
100111c0:	28801915 	stw	r2,100(r5)
100111c4:	280d883a 	mov	r6,r5
100111c8:	8009883a 	mov	r4,r16
100111cc:	880b883a 	mov	r5,r17
100111d0:	dfc00317 	ldw	ra,12(sp)
100111d4:	dc400217 	ldw	r17,8(sp)
100111d8:	dc000117 	ldw	r16,4(sp)
100111dc:	dec00404 	addi	sp,sp,16
100111e0:	0010ff01 	jmpi	10010ff0 <__fputwc>
100111e4:	8009883a 	mov	r4,r16
100111e8:	d9400015 	stw	r5,0(sp)
100111ec:	000c4680 	call	1000c468 <__sinit>
100111f0:	d9400017 	ldw	r5,0(sp)
100111f4:	003feb06 	br	100111a4 <__alt_data_end+0xf80111a4>

100111f8 <_fstat_r>:
100111f8:	defffd04 	addi	sp,sp,-12
100111fc:	2805883a 	mov	r2,r5
10011200:	dc000015 	stw	r16,0(sp)
10011204:	040400b4 	movhi	r16,4098
10011208:	dc400115 	stw	r17,4(sp)
1001120c:	8430af04 	addi	r16,r16,-15684
10011210:	2023883a 	mov	r17,r4
10011214:	300b883a 	mov	r5,r6
10011218:	1009883a 	mov	r4,r2
1001121c:	dfc00215 	stw	ra,8(sp)
10011220:	80000015 	stw	zero,0(r16)
10011224:	0014d940 	call	10014d94 <fstat>
10011228:	00ffffc4 	movi	r3,-1
1001122c:	10c00526 	beq	r2,r3,10011244 <_fstat_r+0x4c>
10011230:	dfc00217 	ldw	ra,8(sp)
10011234:	dc400117 	ldw	r17,4(sp)
10011238:	dc000017 	ldw	r16,0(sp)
1001123c:	dec00304 	addi	sp,sp,12
10011240:	f800283a 	ret
10011244:	80c00017 	ldw	r3,0(r16)
10011248:	183ff926 	beq	r3,zero,10011230 <__alt_data_end+0xf8011230>
1001124c:	88c00015 	stw	r3,0(r17)
10011250:	003ff706 	br	10011230 <__alt_data_end+0xf8011230>

10011254 <_isatty_r>:
10011254:	defffd04 	addi	sp,sp,-12
10011258:	dc000015 	stw	r16,0(sp)
1001125c:	040400b4 	movhi	r16,4098
10011260:	dc400115 	stw	r17,4(sp)
10011264:	8430af04 	addi	r16,r16,-15684
10011268:	2023883a 	mov	r17,r4
1001126c:	2809883a 	mov	r4,r5
10011270:	dfc00215 	stw	ra,8(sp)
10011274:	80000015 	stw	zero,0(r16)
10011278:	0014e880 	call	10014e88 <isatty>
1001127c:	00ffffc4 	movi	r3,-1
10011280:	10c00526 	beq	r2,r3,10011298 <_isatty_r+0x44>
10011284:	dfc00217 	ldw	ra,8(sp)
10011288:	dc400117 	ldw	r17,4(sp)
1001128c:	dc000017 	ldw	r16,0(sp)
10011290:	dec00304 	addi	sp,sp,12
10011294:	f800283a 	ret
10011298:	80c00017 	ldw	r3,0(r16)
1001129c:	183ff926 	beq	r3,zero,10011284 <__alt_data_end+0xf8011284>
100112a0:	88c00015 	stw	r3,0(r17)
100112a4:	003ff706 	br	10011284 <__alt_data_end+0xf8011284>

100112a8 <_lseek_r>:
100112a8:	defffd04 	addi	sp,sp,-12
100112ac:	2805883a 	mov	r2,r5
100112b0:	dc000015 	stw	r16,0(sp)
100112b4:	040400b4 	movhi	r16,4098
100112b8:	dc400115 	stw	r17,4(sp)
100112bc:	300b883a 	mov	r5,r6
100112c0:	8430af04 	addi	r16,r16,-15684
100112c4:	2023883a 	mov	r17,r4
100112c8:	380d883a 	mov	r6,r7
100112cc:	1009883a 	mov	r4,r2
100112d0:	dfc00215 	stw	ra,8(sp)
100112d4:	80000015 	stw	zero,0(r16)
100112d8:	001505c0 	call	1001505c <lseek>
100112dc:	00ffffc4 	movi	r3,-1
100112e0:	10c00526 	beq	r2,r3,100112f8 <_lseek_r+0x50>
100112e4:	dfc00217 	ldw	ra,8(sp)
100112e8:	dc400117 	ldw	r17,4(sp)
100112ec:	dc000017 	ldw	r16,0(sp)
100112f0:	dec00304 	addi	sp,sp,12
100112f4:	f800283a 	ret
100112f8:	80c00017 	ldw	r3,0(r16)
100112fc:	183ff926 	beq	r3,zero,100112e4 <__alt_data_end+0xf80112e4>
10011300:	88c00015 	stw	r3,0(r17)
10011304:	003ff706 	br	100112e4 <__alt_data_end+0xf80112e4>

10011308 <_read_r>:
10011308:	defffd04 	addi	sp,sp,-12
1001130c:	2805883a 	mov	r2,r5
10011310:	dc000015 	stw	r16,0(sp)
10011314:	040400b4 	movhi	r16,4098
10011318:	dc400115 	stw	r17,4(sp)
1001131c:	300b883a 	mov	r5,r6
10011320:	8430af04 	addi	r16,r16,-15684
10011324:	2023883a 	mov	r17,r4
10011328:	380d883a 	mov	r6,r7
1001132c:	1009883a 	mov	r4,r2
10011330:	dfc00215 	stw	ra,8(sp)
10011334:	80000015 	stw	zero,0(r16)
10011338:	00152380 	call	10015238 <read>
1001133c:	00ffffc4 	movi	r3,-1
10011340:	10c00526 	beq	r2,r3,10011358 <_read_r+0x50>
10011344:	dfc00217 	ldw	ra,8(sp)
10011348:	dc400117 	ldw	r17,4(sp)
1001134c:	dc000017 	ldw	r16,0(sp)
10011350:	dec00304 	addi	sp,sp,12
10011354:	f800283a 	ret
10011358:	80c00017 	ldw	r3,0(r16)
1001135c:	183ff926 	beq	r3,zero,10011344 <__alt_data_end+0xf8011344>
10011360:	88c00015 	stw	r3,0(r17)
10011364:	003ff706 	br	10011344 <__alt_data_end+0xf8011344>

10011368 <__swbuf_r>:
10011368:	defffb04 	addi	sp,sp,-20
1001136c:	dcc00315 	stw	r19,12(sp)
10011370:	dc800215 	stw	r18,8(sp)
10011374:	dc000015 	stw	r16,0(sp)
10011378:	dfc00415 	stw	ra,16(sp)
1001137c:	dc400115 	stw	r17,4(sp)
10011380:	2025883a 	mov	r18,r4
10011384:	2827883a 	mov	r19,r5
10011388:	3021883a 	mov	r16,r6
1001138c:	20000226 	beq	r4,zero,10011398 <__swbuf_r+0x30>
10011390:	20800e17 	ldw	r2,56(r4)
10011394:	10004226 	beq	r2,zero,100114a0 <__swbuf_r+0x138>
10011398:	80800617 	ldw	r2,24(r16)
1001139c:	8100030b 	ldhu	r4,12(r16)
100113a0:	80800215 	stw	r2,8(r16)
100113a4:	2080020c 	andi	r2,r4,8
100113a8:	10003626 	beq	r2,zero,10011484 <__swbuf_r+0x11c>
100113ac:	80c00417 	ldw	r3,16(r16)
100113b0:	18003426 	beq	r3,zero,10011484 <__swbuf_r+0x11c>
100113b4:	2088000c 	andi	r2,r4,8192
100113b8:	9c403fcc 	andi	r17,r19,255
100113bc:	10001a26 	beq	r2,zero,10011428 <__swbuf_r+0xc0>
100113c0:	80800017 	ldw	r2,0(r16)
100113c4:	81000517 	ldw	r4,20(r16)
100113c8:	10c7c83a 	sub	r3,r2,r3
100113cc:	1900200e 	bge	r3,r4,10011450 <__swbuf_r+0xe8>
100113d0:	18c00044 	addi	r3,r3,1
100113d4:	81000217 	ldw	r4,8(r16)
100113d8:	11400044 	addi	r5,r2,1
100113dc:	81400015 	stw	r5,0(r16)
100113e0:	213fffc4 	addi	r4,r4,-1
100113e4:	81000215 	stw	r4,8(r16)
100113e8:	14c00005 	stb	r19,0(r2)
100113ec:	80800517 	ldw	r2,20(r16)
100113f0:	10c01e26 	beq	r2,r3,1001146c <__swbuf_r+0x104>
100113f4:	8080030b 	ldhu	r2,12(r16)
100113f8:	1080004c 	andi	r2,r2,1
100113fc:	10000226 	beq	r2,zero,10011408 <__swbuf_r+0xa0>
10011400:	00800284 	movi	r2,10
10011404:	88801926 	beq	r17,r2,1001146c <__swbuf_r+0x104>
10011408:	8805883a 	mov	r2,r17
1001140c:	dfc00417 	ldw	ra,16(sp)
10011410:	dcc00317 	ldw	r19,12(sp)
10011414:	dc800217 	ldw	r18,8(sp)
10011418:	dc400117 	ldw	r17,4(sp)
1001141c:	dc000017 	ldw	r16,0(sp)
10011420:	dec00504 	addi	sp,sp,20
10011424:	f800283a 	ret
10011428:	81401917 	ldw	r5,100(r16)
1001142c:	00b7ffc4 	movi	r2,-8193
10011430:	21080014 	ori	r4,r4,8192
10011434:	2884703a 	and	r2,r5,r2
10011438:	80801915 	stw	r2,100(r16)
1001143c:	80800017 	ldw	r2,0(r16)
10011440:	8100030d 	sth	r4,12(r16)
10011444:	81000517 	ldw	r4,20(r16)
10011448:	10c7c83a 	sub	r3,r2,r3
1001144c:	193fe016 	blt	r3,r4,100113d0 <__alt_data_end+0xf80113d0>
10011450:	800b883a 	mov	r5,r16
10011454:	9009883a 	mov	r4,r18
10011458:	000c07c0 	call	1000c07c <_fflush_r>
1001145c:	1000071e 	bne	r2,zero,1001147c <__swbuf_r+0x114>
10011460:	80800017 	ldw	r2,0(r16)
10011464:	00c00044 	movi	r3,1
10011468:	003fda06 	br	100113d4 <__alt_data_end+0xf80113d4>
1001146c:	800b883a 	mov	r5,r16
10011470:	9009883a 	mov	r4,r18
10011474:	000c07c0 	call	1000c07c <_fflush_r>
10011478:	103fe326 	beq	r2,zero,10011408 <__alt_data_end+0xf8011408>
1001147c:	00bfffc4 	movi	r2,-1
10011480:	003fe206 	br	1001140c <__alt_data_end+0xf801140c>
10011484:	800b883a 	mov	r5,r16
10011488:	9009883a 	mov	r4,r18
1001148c:	000a45c0 	call	1000a45c <__swsetup_r>
10011490:	103ffa1e 	bne	r2,zero,1001147c <__alt_data_end+0xf801147c>
10011494:	8100030b 	ldhu	r4,12(r16)
10011498:	80c00417 	ldw	r3,16(r16)
1001149c:	003fc506 	br	100113b4 <__alt_data_end+0xf80113b4>
100114a0:	000c4680 	call	1000c468 <__sinit>
100114a4:	003fbc06 	br	10011398 <__alt_data_end+0xf8011398>

100114a8 <__swbuf>:
100114a8:	008400b4 	movhi	r2,4098
100114ac:	10a99504 	addi	r2,r2,-22956
100114b0:	280d883a 	mov	r6,r5
100114b4:	200b883a 	mov	r5,r4
100114b8:	11000017 	ldw	r4,0(r2)
100114bc:	00113681 	jmpi	10011368 <__swbuf_r>

100114c0 <_wcrtomb_r>:
100114c0:	defff604 	addi	sp,sp,-40
100114c4:	008400b4 	movhi	r2,4098
100114c8:	dc800815 	stw	r18,32(sp)
100114cc:	dc400715 	stw	r17,28(sp)
100114d0:	dc000615 	stw	r16,24(sp)
100114d4:	10a99904 	addi	r2,r2,-22940
100114d8:	dfc00915 	stw	ra,36(sp)
100114dc:	2021883a 	mov	r16,r4
100114e0:	3823883a 	mov	r17,r7
100114e4:	14800017 	ldw	r18,0(r2)
100114e8:	28001426 	beq	r5,zero,1001153c <_wcrtomb_r+0x7c>
100114ec:	d9400415 	stw	r5,16(sp)
100114f0:	d9800515 	stw	r6,20(sp)
100114f4:	000cfb80 	call	1000cfb8 <__locale_charset>
100114f8:	d9800517 	ldw	r6,20(sp)
100114fc:	d9400417 	ldw	r5,16(sp)
10011500:	100f883a 	mov	r7,r2
10011504:	dc400015 	stw	r17,0(sp)
10011508:	8009883a 	mov	r4,r16
1001150c:	903ee83a 	callr	r18
10011510:	00ffffc4 	movi	r3,-1
10011514:	10c0031e 	bne	r2,r3,10011524 <_wcrtomb_r+0x64>
10011518:	88000015 	stw	zero,0(r17)
1001151c:	00c02284 	movi	r3,138
10011520:	80c00015 	stw	r3,0(r16)
10011524:	dfc00917 	ldw	ra,36(sp)
10011528:	dc800817 	ldw	r18,32(sp)
1001152c:	dc400717 	ldw	r17,28(sp)
10011530:	dc000617 	ldw	r16,24(sp)
10011534:	dec00a04 	addi	sp,sp,40
10011538:	f800283a 	ret
1001153c:	000cfb80 	call	1000cfb8 <__locale_charset>
10011540:	100f883a 	mov	r7,r2
10011544:	dc400015 	stw	r17,0(sp)
10011548:	000d883a 	mov	r6,zero
1001154c:	d9400104 	addi	r5,sp,4
10011550:	8009883a 	mov	r4,r16
10011554:	903ee83a 	callr	r18
10011558:	003fed06 	br	10011510 <__alt_data_end+0xf8011510>

1001155c <wcrtomb>:
1001155c:	defff604 	addi	sp,sp,-40
10011560:	008400b4 	movhi	r2,4098
10011564:	dc800615 	stw	r18,24(sp)
10011568:	dc400515 	stw	r17,20(sp)
1001156c:	10a99504 	addi	r2,r2,-22956
10011570:	dfc00915 	stw	ra,36(sp)
10011574:	dd000815 	stw	r20,32(sp)
10011578:	dcc00715 	stw	r19,28(sp)
1001157c:	dc000415 	stw	r16,16(sp)
10011580:	3025883a 	mov	r18,r6
10011584:	14400017 	ldw	r17,0(r2)
10011588:	20001926 	beq	r4,zero,100115f0 <wcrtomb+0x94>
1001158c:	008400b4 	movhi	r2,4098
10011590:	10a99904 	addi	r2,r2,-22940
10011594:	15000017 	ldw	r20,0(r2)
10011598:	2021883a 	mov	r16,r4
1001159c:	2827883a 	mov	r19,r5
100115a0:	000cfb80 	call	1000cfb8 <__locale_charset>
100115a4:	100f883a 	mov	r7,r2
100115a8:	dc800015 	stw	r18,0(sp)
100115ac:	980d883a 	mov	r6,r19
100115b0:	800b883a 	mov	r5,r16
100115b4:	8809883a 	mov	r4,r17
100115b8:	a03ee83a 	callr	r20
100115bc:	00ffffc4 	movi	r3,-1
100115c0:	10c0031e 	bne	r2,r3,100115d0 <wcrtomb+0x74>
100115c4:	90000015 	stw	zero,0(r18)
100115c8:	00c02284 	movi	r3,138
100115cc:	88c00015 	stw	r3,0(r17)
100115d0:	dfc00917 	ldw	ra,36(sp)
100115d4:	dd000817 	ldw	r20,32(sp)
100115d8:	dcc00717 	ldw	r19,28(sp)
100115dc:	dc800617 	ldw	r18,24(sp)
100115e0:	dc400517 	ldw	r17,20(sp)
100115e4:	dc000417 	ldw	r16,16(sp)
100115e8:	dec00a04 	addi	sp,sp,40
100115ec:	f800283a 	ret
100115f0:	008400b4 	movhi	r2,4098
100115f4:	10a99904 	addi	r2,r2,-22940
100115f8:	14000017 	ldw	r16,0(r2)
100115fc:	000cfb80 	call	1000cfb8 <__locale_charset>
10011600:	100f883a 	mov	r7,r2
10011604:	dc800015 	stw	r18,0(sp)
10011608:	000d883a 	mov	r6,zero
1001160c:	d9400104 	addi	r5,sp,4
10011610:	8809883a 	mov	r4,r17
10011614:	803ee83a 	callr	r16
10011618:	003fe806 	br	100115bc <__alt_data_end+0xf80115bc>

1001161c <__ascii_wctomb>:
1001161c:	28000526 	beq	r5,zero,10011634 <__ascii_wctomb+0x18>
10011620:	00803fc4 	movi	r2,255
10011624:	11800536 	bltu	r2,r6,1001163c <__ascii_wctomb+0x20>
10011628:	29800005 	stb	r6,0(r5)
1001162c:	00800044 	movi	r2,1
10011630:	f800283a 	ret
10011634:	0005883a 	mov	r2,zero
10011638:	f800283a 	ret
1001163c:	00802284 	movi	r2,138
10011640:	20800015 	stw	r2,0(r4)
10011644:	00bfffc4 	movi	r2,-1
10011648:	f800283a 	ret

1001164c <_wctomb_r>:
1001164c:	008400b4 	movhi	r2,4098
10011650:	defff904 	addi	sp,sp,-28
10011654:	10a99904 	addi	r2,r2,-22940
10011658:	dfc00615 	stw	ra,24(sp)
1001165c:	dc400515 	stw	r17,20(sp)
10011660:	dc000415 	stw	r16,16(sp)
10011664:	3823883a 	mov	r17,r7
10011668:	14000017 	ldw	r16,0(r2)
1001166c:	d9000115 	stw	r4,4(sp)
10011670:	d9400215 	stw	r5,8(sp)
10011674:	d9800315 	stw	r6,12(sp)
10011678:	000cfb80 	call	1000cfb8 <__locale_charset>
1001167c:	d9800317 	ldw	r6,12(sp)
10011680:	d9400217 	ldw	r5,8(sp)
10011684:	d9000117 	ldw	r4,4(sp)
10011688:	100f883a 	mov	r7,r2
1001168c:	dc400015 	stw	r17,0(sp)
10011690:	803ee83a 	callr	r16
10011694:	dfc00617 	ldw	ra,24(sp)
10011698:	dc400517 	ldw	r17,20(sp)
1001169c:	dc000417 	ldw	r16,16(sp)
100116a0:	dec00704 	addi	sp,sp,28
100116a4:	f800283a 	ret

100116a8 <__muldi3>:
100116a8:	defff604 	addi	sp,sp,-40
100116ac:	dd800615 	stw	r22,24(sp)
100116b0:	dd400515 	stw	r21,20(sp)
100116b4:	dc400115 	stw	r17,4(sp)
100116b8:	357fffcc 	andi	r21,r6,65535
100116bc:	2022d43a 	srli	r17,r4,16
100116c0:	25bfffcc 	andi	r22,r4,65535
100116c4:	dcc00315 	stw	r19,12(sp)
100116c8:	dc800215 	stw	r18,8(sp)
100116cc:	2027883a 	mov	r19,r4
100116d0:	2825883a 	mov	r18,r5
100116d4:	b009883a 	mov	r4,r22
100116d8:	a80b883a 	mov	r5,r21
100116dc:	dfc00915 	stw	ra,36(sp)
100116e0:	df000815 	stw	fp,32(sp)
100116e4:	ddc00715 	stw	r23,28(sp)
100116e8:	3839883a 	mov	fp,r7
100116ec:	302ed43a 	srli	r23,r6,16
100116f0:	dd000415 	stw	r20,16(sp)
100116f4:	dc000015 	stw	r16,0(sp)
100116f8:	3029883a 	mov	r20,r6
100116fc:	0007d040 	call	10007d04 <__mulsi3>
10011700:	a80b883a 	mov	r5,r21
10011704:	8809883a 	mov	r4,r17
10011708:	1021883a 	mov	r16,r2
1001170c:	0007d040 	call	10007d04 <__mulsi3>
10011710:	8809883a 	mov	r4,r17
10011714:	b80b883a 	mov	r5,r23
10011718:	102b883a 	mov	r21,r2
1001171c:	0007d040 	call	10007d04 <__mulsi3>
10011720:	b80b883a 	mov	r5,r23
10011724:	b009883a 	mov	r4,r22
10011728:	1023883a 	mov	r17,r2
1001172c:	0007d040 	call	10007d04 <__mulsi3>
10011730:	8006d43a 	srli	r3,r16,16
10011734:	1545883a 	add	r2,r2,r21
10011738:	1885883a 	add	r2,r3,r2
1001173c:	1540022e 	bgeu	r2,r21,10011748 <__muldi3+0xa0>
10011740:	00c00074 	movhi	r3,1
10011744:	88e3883a 	add	r17,r17,r3
10011748:	1006d43a 	srli	r3,r2,16
1001174c:	1004943a 	slli	r2,r2,16
10011750:	e00b883a 	mov	r5,fp
10011754:	9809883a 	mov	r4,r19
10011758:	843fffcc 	andi	r16,r16,65535
1001175c:	1c63883a 	add	r17,r3,r17
10011760:	1421883a 	add	r16,r2,r16
10011764:	0007d040 	call	10007d04 <__mulsi3>
10011768:	900b883a 	mov	r5,r18
1001176c:	a009883a 	mov	r4,r20
10011770:	1027883a 	mov	r19,r2
10011774:	0007d040 	call	10007d04 <__mulsi3>
10011778:	9885883a 	add	r2,r19,r2
1001177c:	1447883a 	add	r3,r2,r17
10011780:	8005883a 	mov	r2,r16
10011784:	dfc00917 	ldw	ra,36(sp)
10011788:	df000817 	ldw	fp,32(sp)
1001178c:	ddc00717 	ldw	r23,28(sp)
10011790:	dd800617 	ldw	r22,24(sp)
10011794:	dd400517 	ldw	r21,20(sp)
10011798:	dd000417 	ldw	r20,16(sp)
1001179c:	dcc00317 	ldw	r19,12(sp)
100117a0:	dc800217 	ldw	r18,8(sp)
100117a4:	dc400117 	ldw	r17,4(sp)
100117a8:	dc000017 	ldw	r16,0(sp)
100117ac:	dec00a04 	addi	sp,sp,40
100117b0:	f800283a 	ret

100117b4 <__udivdi3>:
100117b4:	defff404 	addi	sp,sp,-48
100117b8:	dcc00515 	stw	r19,20(sp)
100117bc:	dc000215 	stw	r16,8(sp)
100117c0:	dfc00b15 	stw	ra,44(sp)
100117c4:	df000a15 	stw	fp,40(sp)
100117c8:	ddc00915 	stw	r23,36(sp)
100117cc:	dd800815 	stw	r22,32(sp)
100117d0:	dd400715 	stw	r21,28(sp)
100117d4:	dd000615 	stw	r20,24(sp)
100117d8:	dc800415 	stw	r18,16(sp)
100117dc:	dc400315 	stw	r17,12(sp)
100117e0:	2027883a 	mov	r19,r4
100117e4:	2821883a 	mov	r16,r5
100117e8:	3800461e 	bne	r7,zero,10011904 <__udivdi3+0x150>
100117ec:	3023883a 	mov	r17,r6
100117f0:	2025883a 	mov	r18,r4
100117f4:	2980572e 	bgeu	r5,r6,10011954 <__udivdi3+0x1a0>
100117f8:	00bfffd4 	movui	r2,65535
100117fc:	282d883a 	mov	r22,r5
10011800:	1180b236 	bltu	r2,r6,10011acc <__udivdi3+0x318>
10011804:	00803fc4 	movi	r2,255
10011808:	1185803a 	cmpltu	r2,r2,r6
1001180c:	100490fa 	slli	r2,r2,3
10011810:	3086d83a 	srl	r3,r6,r2
10011814:	010400b4 	movhi	r4,4098
10011818:	21225304 	addi	r4,r4,-30388
1001181c:	20c7883a 	add	r3,r4,r3
10011820:	18c00003 	ldbu	r3,0(r3)
10011824:	1885883a 	add	r2,r3,r2
10011828:	00c00804 	movi	r3,32
1001182c:	1887c83a 	sub	r3,r3,r2
10011830:	18000526 	beq	r3,zero,10011848 <__udivdi3+0x94>
10011834:	80e0983a 	sll	r16,r16,r3
10011838:	9884d83a 	srl	r2,r19,r2
1001183c:	30e2983a 	sll	r17,r6,r3
10011840:	98e4983a 	sll	r18,r19,r3
10011844:	142cb03a 	or	r22,r2,r16
10011848:	882ad43a 	srli	r21,r17,16
1001184c:	b009883a 	mov	r4,r22
10011850:	8d3fffcc 	andi	r20,r17,65535
10011854:	a80b883a 	mov	r5,r21
10011858:	0007cac0 	call	10007cac <__umodsi3>
1001185c:	b009883a 	mov	r4,r22
10011860:	a80b883a 	mov	r5,r21
10011864:	1027883a 	mov	r19,r2
10011868:	0007c480 	call	10007c48 <__udivsi3>
1001186c:	100b883a 	mov	r5,r2
10011870:	a009883a 	mov	r4,r20
10011874:	102d883a 	mov	r22,r2
10011878:	0007d040 	call	10007d04 <__mulsi3>
1001187c:	9826943a 	slli	r19,r19,16
10011880:	9006d43a 	srli	r3,r18,16
10011884:	1cc6b03a 	or	r3,r3,r19
10011888:	1880052e 	bgeu	r3,r2,100118a0 <__udivdi3+0xec>
1001188c:	1c47883a 	add	r3,r3,r17
10011890:	b13fffc4 	addi	r4,r22,-1
10011894:	1c400136 	bltu	r3,r17,1001189c <__udivdi3+0xe8>
10011898:	18814236 	bltu	r3,r2,10011da4 <__udivdi3+0x5f0>
1001189c:	202d883a 	mov	r22,r4
100118a0:	18a1c83a 	sub	r16,r3,r2
100118a4:	8009883a 	mov	r4,r16
100118a8:	a80b883a 	mov	r5,r21
100118ac:	0007cac0 	call	10007cac <__umodsi3>
100118b0:	1027883a 	mov	r19,r2
100118b4:	8009883a 	mov	r4,r16
100118b8:	a80b883a 	mov	r5,r21
100118bc:	9826943a 	slli	r19,r19,16
100118c0:	0007c480 	call	10007c48 <__udivsi3>
100118c4:	100b883a 	mov	r5,r2
100118c8:	a009883a 	mov	r4,r20
100118cc:	94bfffcc 	andi	r18,r18,65535
100118d0:	1021883a 	mov	r16,r2
100118d4:	94e4b03a 	or	r18,r18,r19
100118d8:	0007d040 	call	10007d04 <__mulsi3>
100118dc:	9080052e 	bgeu	r18,r2,100118f4 <__udivdi3+0x140>
100118e0:	8ca5883a 	add	r18,r17,r18
100118e4:	80ffffc4 	addi	r3,r16,-1
100118e8:	94410c36 	bltu	r18,r17,10011d1c <__udivdi3+0x568>
100118ec:	90810b2e 	bgeu	r18,r2,10011d1c <__udivdi3+0x568>
100118f0:	843fff84 	addi	r16,r16,-2
100118f4:	b004943a 	slli	r2,r22,16
100118f8:	0007883a 	mov	r3,zero
100118fc:	1404b03a 	or	r2,r2,r16
10011900:	00005e06 	br	10011a7c <__udivdi3+0x2c8>
10011904:	29c05b36 	bltu	r5,r7,10011a74 <__udivdi3+0x2c0>
10011908:	00bfffd4 	movui	r2,65535
1001190c:	11c0672e 	bgeu	r2,r7,10011aac <__udivdi3+0x2f8>
10011910:	00804034 	movhi	r2,256
10011914:	10bfffc4 	addi	r2,r2,-1
10011918:	11c10a36 	bltu	r2,r7,10011d44 <__udivdi3+0x590>
1001191c:	00800404 	movi	r2,16
10011920:	3886d83a 	srl	r3,r7,r2
10011924:	010400b4 	movhi	r4,4098
10011928:	21225304 	addi	r4,r4,-30388
1001192c:	20c7883a 	add	r3,r4,r3
10011930:	18c00003 	ldbu	r3,0(r3)
10011934:	05c00804 	movi	r23,32
10011938:	1885883a 	add	r2,r3,r2
1001193c:	b8afc83a 	sub	r23,r23,r2
10011940:	b800671e 	bne	r23,zero,10011ae0 <__udivdi3+0x32c>
10011944:	3c010536 	bltu	r7,r16,10011d5c <__udivdi3+0x5a8>
10011948:	9985403a 	cmpgeu	r2,r19,r6
1001194c:	0007883a 	mov	r3,zero
10011950:	00004a06 	br	10011a7c <__udivdi3+0x2c8>
10011954:	3000041e 	bne	r6,zero,10011968 <__udivdi3+0x1b4>
10011958:	000b883a 	mov	r5,zero
1001195c:	01000044 	movi	r4,1
10011960:	0007c480 	call	10007c48 <__udivsi3>
10011964:	1023883a 	mov	r17,r2
10011968:	00bfffd4 	movui	r2,65535
1001196c:	1440532e 	bgeu	r2,r17,10011abc <__udivdi3+0x308>
10011970:	00804034 	movhi	r2,256
10011974:	10bfffc4 	addi	r2,r2,-1
10011978:	1440f436 	bltu	r2,r17,10011d4c <__udivdi3+0x598>
1001197c:	00800404 	movi	r2,16
10011980:	8886d83a 	srl	r3,r17,r2
10011984:	010400b4 	movhi	r4,4098
10011988:	21225304 	addi	r4,r4,-30388
1001198c:	20c7883a 	add	r3,r4,r3
10011990:	18c00003 	ldbu	r3,0(r3)
10011994:	1885883a 	add	r2,r3,r2
10011998:	00c00804 	movi	r3,32
1001199c:	1887c83a 	sub	r3,r3,r2
100119a0:	1800a51e 	bne	r3,zero,10011c38 <__udivdi3+0x484>
100119a4:	882ad43a 	srli	r21,r17,16
100119a8:	8461c83a 	sub	r16,r16,r17
100119ac:	8d3fffcc 	andi	r20,r17,65535
100119b0:	00c00044 	movi	r3,1
100119b4:	a80b883a 	mov	r5,r21
100119b8:	8009883a 	mov	r4,r16
100119bc:	d8c00115 	stw	r3,4(sp)
100119c0:	0007cac0 	call	10007cac <__umodsi3>
100119c4:	a80b883a 	mov	r5,r21
100119c8:	8009883a 	mov	r4,r16
100119cc:	1027883a 	mov	r19,r2
100119d0:	0007c480 	call	10007c48 <__udivsi3>
100119d4:	a00b883a 	mov	r5,r20
100119d8:	1009883a 	mov	r4,r2
100119dc:	102d883a 	mov	r22,r2
100119e0:	0007d040 	call	10007d04 <__mulsi3>
100119e4:	9826943a 	slli	r19,r19,16
100119e8:	900ed43a 	srli	r7,r18,16
100119ec:	d8c00117 	ldw	r3,4(sp)
100119f0:	3cceb03a 	or	r7,r7,r19
100119f4:	3880052e 	bgeu	r7,r2,10011a0c <__udivdi3+0x258>
100119f8:	3c4f883a 	add	r7,r7,r17
100119fc:	b13fffc4 	addi	r4,r22,-1
10011a00:	3c400136 	bltu	r7,r17,10011a08 <__udivdi3+0x254>
10011a04:	3880e436 	bltu	r7,r2,10011d98 <__udivdi3+0x5e4>
10011a08:	202d883a 	mov	r22,r4
10011a0c:	38a1c83a 	sub	r16,r7,r2
10011a10:	8009883a 	mov	r4,r16
10011a14:	a80b883a 	mov	r5,r21
10011a18:	d8c00115 	stw	r3,4(sp)
10011a1c:	0007cac0 	call	10007cac <__umodsi3>
10011a20:	1027883a 	mov	r19,r2
10011a24:	8009883a 	mov	r4,r16
10011a28:	a80b883a 	mov	r5,r21
10011a2c:	9826943a 	slli	r19,r19,16
10011a30:	0007c480 	call	10007c48 <__udivsi3>
10011a34:	a00b883a 	mov	r5,r20
10011a38:	1009883a 	mov	r4,r2
10011a3c:	94bfffcc 	andi	r18,r18,65535
10011a40:	1021883a 	mov	r16,r2
10011a44:	94e4b03a 	or	r18,r18,r19
10011a48:	0007d040 	call	10007d04 <__mulsi3>
10011a4c:	d8c00117 	ldw	r3,4(sp)
10011a50:	9080052e 	bgeu	r18,r2,10011a68 <__udivdi3+0x2b4>
10011a54:	8ca5883a 	add	r18,r17,r18
10011a58:	813fffc4 	addi	r4,r16,-1
10011a5c:	9440ad36 	bltu	r18,r17,10011d14 <__udivdi3+0x560>
10011a60:	9080ac2e 	bgeu	r18,r2,10011d14 <__udivdi3+0x560>
10011a64:	843fff84 	addi	r16,r16,-2
10011a68:	b004943a 	slli	r2,r22,16
10011a6c:	1404b03a 	or	r2,r2,r16
10011a70:	00000206 	br	10011a7c <__udivdi3+0x2c8>
10011a74:	0007883a 	mov	r3,zero
10011a78:	0005883a 	mov	r2,zero
10011a7c:	dfc00b17 	ldw	ra,44(sp)
10011a80:	df000a17 	ldw	fp,40(sp)
10011a84:	ddc00917 	ldw	r23,36(sp)
10011a88:	dd800817 	ldw	r22,32(sp)
10011a8c:	dd400717 	ldw	r21,28(sp)
10011a90:	dd000617 	ldw	r20,24(sp)
10011a94:	dcc00517 	ldw	r19,20(sp)
10011a98:	dc800417 	ldw	r18,16(sp)
10011a9c:	dc400317 	ldw	r17,12(sp)
10011aa0:	dc000217 	ldw	r16,8(sp)
10011aa4:	dec00c04 	addi	sp,sp,48
10011aa8:	f800283a 	ret
10011aac:	00803fc4 	movi	r2,255
10011ab0:	11c5803a 	cmpltu	r2,r2,r7
10011ab4:	100490fa 	slli	r2,r2,3
10011ab8:	003f9906 	br	10011920 <__alt_data_end+0xf8011920>
10011abc:	00803fc4 	movi	r2,255
10011ac0:	1445803a 	cmpltu	r2,r2,r17
10011ac4:	100490fa 	slli	r2,r2,3
10011ac8:	003fad06 	br	10011980 <__alt_data_end+0xf8011980>
10011acc:	00804034 	movhi	r2,256
10011ad0:	10bfffc4 	addi	r2,r2,-1
10011ad4:	11809f36 	bltu	r2,r6,10011d54 <__udivdi3+0x5a0>
10011ad8:	00800404 	movi	r2,16
10011adc:	003f4c06 	br	10011810 <__alt_data_end+0xf8011810>
10011ae0:	3dce983a 	sll	r7,r7,r23
10011ae4:	30b8d83a 	srl	fp,r6,r2
10011ae8:	80a2d83a 	srl	r17,r16,r2
10011aec:	35cc983a 	sll	r6,r6,r23
10011af0:	3f38b03a 	or	fp,r7,fp
10011af4:	e024d43a 	srli	r18,fp,16
10011af8:	9884d83a 	srl	r2,r19,r2
10011afc:	85e0983a 	sll	r16,r16,r23
10011b00:	8809883a 	mov	r4,r17
10011b04:	900b883a 	mov	r5,r18
10011b08:	d9800015 	stw	r6,0(sp)
10011b0c:	1420b03a 	or	r16,r2,r16
10011b10:	0007cac0 	call	10007cac <__umodsi3>
10011b14:	900b883a 	mov	r5,r18
10011b18:	8809883a 	mov	r4,r17
10011b1c:	1029883a 	mov	r20,r2
10011b20:	e5bfffcc 	andi	r22,fp,65535
10011b24:	0007c480 	call	10007c48 <__udivsi3>
10011b28:	100b883a 	mov	r5,r2
10011b2c:	b009883a 	mov	r4,r22
10011b30:	102b883a 	mov	r21,r2
10011b34:	0007d040 	call	10007d04 <__mulsi3>
10011b38:	a028943a 	slli	r20,r20,16
10011b3c:	8006d43a 	srli	r3,r16,16
10011b40:	1d06b03a 	or	r3,r3,r20
10011b44:	1880042e 	bgeu	r3,r2,10011b58 <__udivdi3+0x3a4>
10011b48:	1f07883a 	add	r3,r3,fp
10011b4c:	a93fffc4 	addi	r4,r21,-1
10011b50:	1f00892e 	bgeu	r3,fp,10011d78 <__udivdi3+0x5c4>
10011b54:	202b883a 	mov	r21,r4
10011b58:	18a3c83a 	sub	r17,r3,r2
10011b5c:	8809883a 	mov	r4,r17
10011b60:	900b883a 	mov	r5,r18
10011b64:	0007cac0 	call	10007cac <__umodsi3>
10011b68:	1029883a 	mov	r20,r2
10011b6c:	8809883a 	mov	r4,r17
10011b70:	900b883a 	mov	r5,r18
10011b74:	a028943a 	slli	r20,r20,16
10011b78:	0007c480 	call	10007c48 <__udivsi3>
10011b7c:	100b883a 	mov	r5,r2
10011b80:	b009883a 	mov	r4,r22
10011b84:	843fffcc 	andi	r16,r16,65535
10011b88:	1023883a 	mov	r17,r2
10011b8c:	8520b03a 	or	r16,r16,r20
10011b90:	0007d040 	call	10007d04 <__mulsi3>
10011b94:	8080042e 	bgeu	r16,r2,10011ba8 <__udivdi3+0x3f4>
10011b98:	8721883a 	add	r16,r16,fp
10011b9c:	88ffffc4 	addi	r3,r17,-1
10011ba0:	8700712e 	bgeu	r16,fp,10011d68 <__udivdi3+0x5b4>
10011ba4:	1823883a 	mov	r17,r3
10011ba8:	a80e943a 	slli	r7,r21,16
10011bac:	d8c00017 	ldw	r3,0(sp)
10011bb0:	80a1c83a 	sub	r16,r16,r2
10011bb4:	3c64b03a 	or	r18,r7,r17
10011bb8:	1d3fffcc 	andi	r20,r3,65535
10011bbc:	9022d43a 	srli	r17,r18,16
10011bc0:	95bfffcc 	andi	r22,r18,65535
10011bc4:	a00b883a 	mov	r5,r20
10011bc8:	b009883a 	mov	r4,r22
10011bcc:	182ad43a 	srli	r21,r3,16
10011bd0:	0007d040 	call	10007d04 <__mulsi3>
10011bd4:	a00b883a 	mov	r5,r20
10011bd8:	8809883a 	mov	r4,r17
10011bdc:	1039883a 	mov	fp,r2
10011be0:	0007d040 	call	10007d04 <__mulsi3>
10011be4:	8809883a 	mov	r4,r17
10011be8:	a80b883a 	mov	r5,r21
10011bec:	1029883a 	mov	r20,r2
10011bf0:	0007d040 	call	10007d04 <__mulsi3>
10011bf4:	a80b883a 	mov	r5,r21
10011bf8:	b009883a 	mov	r4,r22
10011bfc:	1023883a 	mov	r17,r2
10011c00:	0007d040 	call	10007d04 <__mulsi3>
10011c04:	e006d43a 	srli	r3,fp,16
10011c08:	1505883a 	add	r2,r2,r20
10011c0c:	1887883a 	add	r3,r3,r2
10011c10:	1d00022e 	bgeu	r3,r20,10011c1c <__udivdi3+0x468>
10011c14:	00800074 	movhi	r2,1
10011c18:	88a3883a 	add	r17,r17,r2
10011c1c:	1804d43a 	srli	r2,r3,16
10011c20:	1463883a 	add	r17,r2,r17
10011c24:	84404436 	bltu	r16,r17,10011d38 <__udivdi3+0x584>
10011c28:	84403e26 	beq	r16,r17,10011d24 <__udivdi3+0x570>
10011c2c:	9005883a 	mov	r2,r18
10011c30:	0007883a 	mov	r3,zero
10011c34:	003f9106 	br	10011a7c <__alt_data_end+0xf8011a7c>
10011c38:	88e2983a 	sll	r17,r17,r3
10011c3c:	80aed83a 	srl	r23,r16,r2
10011c40:	80e0983a 	sll	r16,r16,r3
10011c44:	882ad43a 	srli	r21,r17,16
10011c48:	9884d83a 	srl	r2,r19,r2
10011c4c:	b809883a 	mov	r4,r23
10011c50:	a80b883a 	mov	r5,r21
10011c54:	98e4983a 	sll	r18,r19,r3
10011c58:	142cb03a 	or	r22,r2,r16
10011c5c:	0007cac0 	call	10007cac <__umodsi3>
10011c60:	b809883a 	mov	r4,r23
10011c64:	a80b883a 	mov	r5,r21
10011c68:	1027883a 	mov	r19,r2
10011c6c:	8d3fffcc 	andi	r20,r17,65535
10011c70:	0007c480 	call	10007c48 <__udivsi3>
10011c74:	a009883a 	mov	r4,r20
10011c78:	100b883a 	mov	r5,r2
10011c7c:	102f883a 	mov	r23,r2
10011c80:	0007d040 	call	10007d04 <__mulsi3>
10011c84:	9826943a 	slli	r19,r19,16
10011c88:	b008d43a 	srli	r4,r22,16
10011c8c:	24c8b03a 	or	r4,r4,r19
10011c90:	2080062e 	bgeu	r4,r2,10011cac <__udivdi3+0x4f8>
10011c94:	2449883a 	add	r4,r4,r17
10011c98:	b8ffffc4 	addi	r3,r23,-1
10011c9c:	24403c36 	bltu	r4,r17,10011d90 <__udivdi3+0x5dc>
10011ca0:	20803b2e 	bgeu	r4,r2,10011d90 <__udivdi3+0x5dc>
10011ca4:	bdffff84 	addi	r23,r23,-2
10011ca8:	2449883a 	add	r4,r4,r17
10011cac:	20a1c83a 	sub	r16,r4,r2
10011cb0:	a80b883a 	mov	r5,r21
10011cb4:	8009883a 	mov	r4,r16
10011cb8:	0007cac0 	call	10007cac <__umodsi3>
10011cbc:	a80b883a 	mov	r5,r21
10011cc0:	8009883a 	mov	r4,r16
10011cc4:	1027883a 	mov	r19,r2
10011cc8:	0007c480 	call	10007c48 <__udivsi3>
10011ccc:	a009883a 	mov	r4,r20
10011cd0:	100b883a 	mov	r5,r2
10011cd4:	9826943a 	slli	r19,r19,16
10011cd8:	1039883a 	mov	fp,r2
10011cdc:	0007d040 	call	10007d04 <__mulsi3>
10011ce0:	b13fffcc 	andi	r4,r22,65535
10011ce4:	24c8b03a 	or	r4,r4,r19
10011ce8:	2080062e 	bgeu	r4,r2,10011d04 <__udivdi3+0x550>
10011cec:	2449883a 	add	r4,r4,r17
10011cf0:	e0ffffc4 	addi	r3,fp,-1
10011cf4:	24402436 	bltu	r4,r17,10011d88 <__udivdi3+0x5d4>
10011cf8:	2080232e 	bgeu	r4,r2,10011d88 <__udivdi3+0x5d4>
10011cfc:	e73fff84 	addi	fp,fp,-2
10011d00:	2449883a 	add	r4,r4,r17
10011d04:	b82e943a 	slli	r23,r23,16
10011d08:	20a1c83a 	sub	r16,r4,r2
10011d0c:	bf06b03a 	or	r3,r23,fp
10011d10:	003f2806 	br	100119b4 <__alt_data_end+0xf80119b4>
10011d14:	2021883a 	mov	r16,r4
10011d18:	003f5306 	br	10011a68 <__alt_data_end+0xf8011a68>
10011d1c:	1821883a 	mov	r16,r3
10011d20:	003ef406 	br	100118f4 <__alt_data_end+0xf80118f4>
10011d24:	1806943a 	slli	r3,r3,16
10011d28:	9de6983a 	sll	r19,r19,r23
10011d2c:	e73fffcc 	andi	fp,fp,65535
10011d30:	1f07883a 	add	r3,r3,fp
10011d34:	98ffbd2e 	bgeu	r19,r3,10011c2c <__alt_data_end+0xf8011c2c>
10011d38:	90bfffc4 	addi	r2,r18,-1
10011d3c:	0007883a 	mov	r3,zero
10011d40:	003f4e06 	br	10011a7c <__alt_data_end+0xf8011a7c>
10011d44:	00800604 	movi	r2,24
10011d48:	003ef506 	br	10011920 <__alt_data_end+0xf8011920>
10011d4c:	00800604 	movi	r2,24
10011d50:	003f0b06 	br	10011980 <__alt_data_end+0xf8011980>
10011d54:	00800604 	movi	r2,24
10011d58:	003ead06 	br	10011810 <__alt_data_end+0xf8011810>
10011d5c:	0007883a 	mov	r3,zero
10011d60:	00800044 	movi	r2,1
10011d64:	003f4506 	br	10011a7c <__alt_data_end+0xf8011a7c>
10011d68:	80bf8e2e 	bgeu	r16,r2,10011ba4 <__alt_data_end+0xf8011ba4>
10011d6c:	8c7fff84 	addi	r17,r17,-2
10011d70:	8721883a 	add	r16,r16,fp
10011d74:	003f8c06 	br	10011ba8 <__alt_data_end+0xf8011ba8>
10011d78:	18bf762e 	bgeu	r3,r2,10011b54 <__alt_data_end+0xf8011b54>
10011d7c:	ad7fff84 	addi	r21,r21,-2
10011d80:	1f07883a 	add	r3,r3,fp
10011d84:	003f7406 	br	10011b58 <__alt_data_end+0xf8011b58>
10011d88:	1839883a 	mov	fp,r3
10011d8c:	003fdd06 	br	10011d04 <__alt_data_end+0xf8011d04>
10011d90:	182f883a 	mov	r23,r3
10011d94:	003fc506 	br	10011cac <__alt_data_end+0xf8011cac>
10011d98:	b5bfff84 	addi	r22,r22,-2
10011d9c:	3c4f883a 	add	r7,r7,r17
10011da0:	003f1a06 	br	10011a0c <__alt_data_end+0xf8011a0c>
10011da4:	b5bfff84 	addi	r22,r22,-2
10011da8:	1c47883a 	add	r3,r3,r17
10011dac:	003ebc06 	br	100118a0 <__alt_data_end+0xf80118a0>

10011db0 <__umoddi3>:
10011db0:	defff304 	addi	sp,sp,-52
10011db4:	df000b15 	stw	fp,44(sp)
10011db8:	dc400415 	stw	r17,16(sp)
10011dbc:	dc000315 	stw	r16,12(sp)
10011dc0:	dfc00c15 	stw	ra,48(sp)
10011dc4:	ddc00a15 	stw	r23,40(sp)
10011dc8:	dd800915 	stw	r22,36(sp)
10011dcc:	dd400815 	stw	r21,32(sp)
10011dd0:	dd000715 	stw	r20,28(sp)
10011dd4:	dcc00615 	stw	r19,24(sp)
10011dd8:	dc800515 	stw	r18,20(sp)
10011ddc:	2021883a 	mov	r16,r4
10011de0:	2823883a 	mov	r17,r5
10011de4:	2839883a 	mov	fp,r5
10011de8:	3800401e 	bne	r7,zero,10011eec <__umoddi3+0x13c>
10011dec:	3027883a 	mov	r19,r6
10011df0:	2029883a 	mov	r20,r4
10011df4:	2980552e 	bgeu	r5,r6,10011f4c <__umoddi3+0x19c>
10011df8:	00bfffd4 	movui	r2,65535
10011dfc:	1180a236 	bltu	r2,r6,10012088 <__umoddi3+0x2d8>
10011e00:	01003fc4 	movi	r4,255
10011e04:	2189803a 	cmpltu	r4,r4,r6
10011e08:	200890fa 	slli	r4,r4,3
10011e0c:	3104d83a 	srl	r2,r6,r4
10011e10:	00c400b4 	movhi	r3,4098
10011e14:	18e25304 	addi	r3,r3,-30388
10011e18:	1885883a 	add	r2,r3,r2
10011e1c:	10c00003 	ldbu	r3,0(r2)
10011e20:	00800804 	movi	r2,32
10011e24:	1909883a 	add	r4,r3,r4
10011e28:	1125c83a 	sub	r18,r2,r4
10011e2c:	90000526 	beq	r18,zero,10011e44 <__umoddi3+0x94>
10011e30:	8ca2983a 	sll	r17,r17,r18
10011e34:	8108d83a 	srl	r4,r16,r4
10011e38:	34a6983a 	sll	r19,r6,r18
10011e3c:	84a8983a 	sll	r20,r16,r18
10011e40:	2478b03a 	or	fp,r4,r17
10011e44:	982cd43a 	srli	r22,r19,16
10011e48:	e009883a 	mov	r4,fp
10011e4c:	9dffffcc 	andi	r23,r19,65535
10011e50:	b00b883a 	mov	r5,r22
10011e54:	0007cac0 	call	10007cac <__umodsi3>
10011e58:	b00b883a 	mov	r5,r22
10011e5c:	e009883a 	mov	r4,fp
10011e60:	102b883a 	mov	r21,r2
10011e64:	0007c480 	call	10007c48 <__udivsi3>
10011e68:	100b883a 	mov	r5,r2
10011e6c:	b809883a 	mov	r4,r23
10011e70:	0007d040 	call	10007d04 <__mulsi3>
10011e74:	a82a943a 	slli	r21,r21,16
10011e78:	a006d43a 	srli	r3,r20,16
10011e7c:	1d46b03a 	or	r3,r3,r21
10011e80:	1880032e 	bgeu	r3,r2,10011e90 <__umoddi3+0xe0>
10011e84:	1cc7883a 	add	r3,r3,r19
10011e88:	1cc00136 	bltu	r3,r19,10011e90 <__umoddi3+0xe0>
10011e8c:	18813136 	bltu	r3,r2,10012354 <__umoddi3+0x5a4>
10011e90:	18a1c83a 	sub	r16,r3,r2
10011e94:	b00b883a 	mov	r5,r22
10011e98:	8009883a 	mov	r4,r16
10011e9c:	0007cac0 	call	10007cac <__umodsi3>
10011ea0:	b00b883a 	mov	r5,r22
10011ea4:	8009883a 	mov	r4,r16
10011ea8:	1023883a 	mov	r17,r2
10011eac:	0007c480 	call	10007c48 <__udivsi3>
10011eb0:	100b883a 	mov	r5,r2
10011eb4:	b809883a 	mov	r4,r23
10011eb8:	8822943a 	slli	r17,r17,16
10011ebc:	0007d040 	call	10007d04 <__mulsi3>
10011ec0:	a0ffffcc 	andi	r3,r20,65535
10011ec4:	1c46b03a 	or	r3,r3,r17
10011ec8:	1880042e 	bgeu	r3,r2,10011edc <__umoddi3+0x12c>
10011ecc:	1cc7883a 	add	r3,r3,r19
10011ed0:	1cc00236 	bltu	r3,r19,10011edc <__umoddi3+0x12c>
10011ed4:	1880012e 	bgeu	r3,r2,10011edc <__umoddi3+0x12c>
10011ed8:	1cc7883a 	add	r3,r3,r19
10011edc:	1885c83a 	sub	r2,r3,r2
10011ee0:	1484d83a 	srl	r2,r2,r18
10011ee4:	0007883a 	mov	r3,zero
10011ee8:	00005306 	br	10012038 <__umoddi3+0x288>
10011eec:	29c05036 	bltu	r5,r7,10012030 <__umoddi3+0x280>
10011ef0:	00bfffd4 	movui	r2,65535
10011ef4:	11c05c2e 	bgeu	r2,r7,10012068 <__umoddi3+0x2b8>
10011ef8:	00804034 	movhi	r2,256
10011efc:	10bfffc4 	addi	r2,r2,-1
10011f00:	11c10636 	bltu	r2,r7,1001231c <__umoddi3+0x56c>
10011f04:	01000404 	movi	r4,16
10011f08:	3904d83a 	srl	r2,r7,r4
10011f0c:	00c400b4 	movhi	r3,4098
10011f10:	18e25304 	addi	r3,r3,-30388
10011f14:	1885883a 	add	r2,r3,r2
10011f18:	14c00003 	ldbu	r19,0(r2)
10011f1c:	00c00804 	movi	r3,32
10011f20:	9927883a 	add	r19,r19,r4
10011f24:	1ce9c83a 	sub	r20,r3,r19
10011f28:	a0005c1e 	bne	r20,zero,1001209c <__umoddi3+0x2ec>
10011f2c:	3c400136 	bltu	r7,r17,10011f34 <__umoddi3+0x184>
10011f30:	81810a36 	bltu	r16,r6,1001235c <__umoddi3+0x5ac>
10011f34:	8185c83a 	sub	r2,r16,r6
10011f38:	89e3c83a 	sub	r17,r17,r7
10011f3c:	8089803a 	cmpltu	r4,r16,r2
10011f40:	8939c83a 	sub	fp,r17,r4
10011f44:	e007883a 	mov	r3,fp
10011f48:	00003b06 	br	10012038 <__umoddi3+0x288>
10011f4c:	3000041e 	bne	r6,zero,10011f60 <__umoddi3+0x1b0>
10011f50:	000b883a 	mov	r5,zero
10011f54:	01000044 	movi	r4,1
10011f58:	0007c480 	call	10007c48 <__udivsi3>
10011f5c:	1027883a 	mov	r19,r2
10011f60:	00bfffd4 	movui	r2,65535
10011f64:	14c0442e 	bgeu	r2,r19,10012078 <__umoddi3+0x2c8>
10011f68:	00804034 	movhi	r2,256
10011f6c:	10bfffc4 	addi	r2,r2,-1
10011f70:	14c0ec36 	bltu	r2,r19,10012324 <__umoddi3+0x574>
10011f74:	00800404 	movi	r2,16
10011f78:	9886d83a 	srl	r3,r19,r2
10011f7c:	010400b4 	movhi	r4,4098
10011f80:	21225304 	addi	r4,r4,-30388
10011f84:	20c7883a 	add	r3,r4,r3
10011f88:	18c00003 	ldbu	r3,0(r3)
10011f8c:	1887883a 	add	r3,r3,r2
10011f90:	00800804 	movi	r2,32
10011f94:	10e5c83a 	sub	r18,r2,r3
10011f98:	9000ab1e 	bne	r18,zero,10012248 <__umoddi3+0x498>
10011f9c:	982cd43a 	srli	r22,r19,16
10011fa0:	8ce3c83a 	sub	r17,r17,r19
10011fa4:	9dffffcc 	andi	r23,r19,65535
10011fa8:	b00b883a 	mov	r5,r22
10011fac:	8809883a 	mov	r4,r17
10011fb0:	0007cac0 	call	10007cac <__umodsi3>
10011fb4:	b00b883a 	mov	r5,r22
10011fb8:	8809883a 	mov	r4,r17
10011fbc:	102b883a 	mov	r21,r2
10011fc0:	0007c480 	call	10007c48 <__udivsi3>
10011fc4:	b80b883a 	mov	r5,r23
10011fc8:	1009883a 	mov	r4,r2
10011fcc:	0007d040 	call	10007d04 <__mulsi3>
10011fd0:	a82a943a 	slli	r21,r21,16
10011fd4:	a006d43a 	srli	r3,r20,16
10011fd8:	1d46b03a 	or	r3,r3,r21
10011fdc:	1880042e 	bgeu	r3,r2,10011ff0 <__umoddi3+0x240>
10011fe0:	1cc7883a 	add	r3,r3,r19
10011fe4:	1cc00236 	bltu	r3,r19,10011ff0 <__umoddi3+0x240>
10011fe8:	1880012e 	bgeu	r3,r2,10011ff0 <__umoddi3+0x240>
10011fec:	1cc7883a 	add	r3,r3,r19
10011ff0:	18a1c83a 	sub	r16,r3,r2
10011ff4:	b00b883a 	mov	r5,r22
10011ff8:	8009883a 	mov	r4,r16
10011ffc:	0007cac0 	call	10007cac <__umodsi3>
10012000:	1023883a 	mov	r17,r2
10012004:	b00b883a 	mov	r5,r22
10012008:	8009883a 	mov	r4,r16
1001200c:	0007c480 	call	10007c48 <__udivsi3>
10012010:	8822943a 	slli	r17,r17,16
10012014:	b80b883a 	mov	r5,r23
10012018:	1009883a 	mov	r4,r2
1001201c:	0007d040 	call	10007d04 <__mulsi3>
10012020:	a53fffcc 	andi	r20,r20,65535
10012024:	a446b03a 	or	r3,r20,r17
10012028:	18bfac2e 	bgeu	r3,r2,10011edc <__alt_data_end+0xf8011edc>
1001202c:	003fa706 	br	10011ecc <__alt_data_end+0xf8011ecc>
10012030:	2005883a 	mov	r2,r4
10012034:	2807883a 	mov	r3,r5
10012038:	dfc00c17 	ldw	ra,48(sp)
1001203c:	df000b17 	ldw	fp,44(sp)
10012040:	ddc00a17 	ldw	r23,40(sp)
10012044:	dd800917 	ldw	r22,36(sp)
10012048:	dd400817 	ldw	r21,32(sp)
1001204c:	dd000717 	ldw	r20,28(sp)
10012050:	dcc00617 	ldw	r19,24(sp)
10012054:	dc800517 	ldw	r18,20(sp)
10012058:	dc400417 	ldw	r17,16(sp)
1001205c:	dc000317 	ldw	r16,12(sp)
10012060:	dec00d04 	addi	sp,sp,52
10012064:	f800283a 	ret
10012068:	04c03fc4 	movi	r19,255
1001206c:	99c9803a 	cmpltu	r4,r19,r7
10012070:	200890fa 	slli	r4,r4,3
10012074:	003fa406 	br	10011f08 <__alt_data_end+0xf8011f08>
10012078:	00803fc4 	movi	r2,255
1001207c:	14c5803a 	cmpltu	r2,r2,r19
10012080:	100490fa 	slli	r2,r2,3
10012084:	003fbc06 	br	10011f78 <__alt_data_end+0xf8011f78>
10012088:	00804034 	movhi	r2,256
1001208c:	10bfffc4 	addi	r2,r2,-1
10012090:	1180a636 	bltu	r2,r6,1001232c <__umoddi3+0x57c>
10012094:	01000404 	movi	r4,16
10012098:	003f5c06 	br	10011e0c <__alt_data_end+0xf8011e0c>
1001209c:	3d0e983a 	sll	r7,r7,r20
100120a0:	34ead83a 	srl	r21,r6,r19
100120a4:	8cc6d83a 	srl	r3,r17,r19
100120a8:	8d10983a 	sll	r8,r17,r20
100120ac:	3d6ab03a 	or	r21,r7,r21
100120b0:	a82cd43a 	srli	r22,r21,16
100120b4:	84e2d83a 	srl	r17,r16,r19
100120b8:	1809883a 	mov	r4,r3
100120bc:	b00b883a 	mov	r5,r22
100120c0:	8a22b03a 	or	r17,r17,r8
100120c4:	3524983a 	sll	r18,r6,r20
100120c8:	dc400015 	stw	r17,0(sp)
100120cc:	d8c00115 	stw	r3,4(sp)
100120d0:	0007cac0 	call	10007cac <__umodsi3>
100120d4:	d8c00117 	ldw	r3,4(sp)
100120d8:	b00b883a 	mov	r5,r22
100120dc:	1039883a 	mov	fp,r2
100120e0:	1809883a 	mov	r4,r3
100120e4:	0007c480 	call	10007c48 <__udivsi3>
100120e8:	adffffcc 	andi	r23,r21,65535
100120ec:	100b883a 	mov	r5,r2
100120f0:	b809883a 	mov	r4,r23
100120f4:	1023883a 	mov	r17,r2
100120f8:	0007d040 	call	10007d04 <__mulsi3>
100120fc:	d9400017 	ldw	r5,0(sp)
10012100:	e008943a 	slli	r4,fp,16
10012104:	8520983a 	sll	r16,r16,r20
10012108:	2806d43a 	srli	r3,r5,16
1001210c:	1906b03a 	or	r3,r3,r4
10012110:	1880042e 	bgeu	r3,r2,10012124 <__umoddi3+0x374>
10012114:	1d47883a 	add	r3,r3,r21
10012118:	893fffc4 	addi	r4,r17,-1
1001211c:	1d40892e 	bgeu	r3,r21,10012344 <__umoddi3+0x594>
10012120:	2023883a 	mov	r17,r4
10012124:	18b9c83a 	sub	fp,r3,r2
10012128:	b00b883a 	mov	r5,r22
1001212c:	e009883a 	mov	r4,fp
10012130:	0007cac0 	call	10007cac <__umodsi3>
10012134:	b00b883a 	mov	r5,r22
10012138:	e009883a 	mov	r4,fp
1001213c:	d8800215 	stw	r2,8(sp)
10012140:	0007c480 	call	10007c48 <__udivsi3>
10012144:	100b883a 	mov	r5,r2
10012148:	b809883a 	mov	r4,r23
1001214c:	102d883a 	mov	r22,r2
10012150:	0007d040 	call	10007d04 <__mulsi3>
10012154:	d9800217 	ldw	r6,8(sp)
10012158:	d8c00017 	ldw	r3,0(sp)
1001215c:	300c943a 	slli	r6,r6,16
10012160:	1a3fffcc 	andi	r8,r3,65535
10012164:	4190b03a 	or	r8,r8,r6
10012168:	4080042e 	bgeu	r8,r2,1001217c <__umoddi3+0x3cc>
1001216c:	4551883a 	add	r8,r8,r21
10012170:	b0ffffc4 	addi	r3,r22,-1
10012174:	45406f2e 	bgeu	r8,r21,10012334 <__umoddi3+0x584>
10012178:	182d883a 	mov	r22,r3
1001217c:	880e943a 	slli	r7,r17,16
10012180:	9006d43a 	srli	r3,r18,16
10012184:	91bfffcc 	andi	r6,r18,65535
10012188:	3dacb03a 	or	r22,r7,r22
1001218c:	b02ed43a 	srli	r23,r22,16
10012190:	b5bfffcc 	andi	r22,r22,65535
10012194:	300b883a 	mov	r5,r6
10012198:	b009883a 	mov	r4,r22
1001219c:	40a3c83a 	sub	r17,r8,r2
100121a0:	d8c00115 	stw	r3,4(sp)
100121a4:	d9800215 	stw	r6,8(sp)
100121a8:	0007d040 	call	10007d04 <__mulsi3>
100121ac:	d9800217 	ldw	r6,8(sp)
100121b0:	b809883a 	mov	r4,r23
100121b4:	1039883a 	mov	fp,r2
100121b8:	300b883a 	mov	r5,r6
100121bc:	0007d040 	call	10007d04 <__mulsi3>
100121c0:	d8c00117 	ldw	r3,4(sp)
100121c4:	b809883a 	mov	r4,r23
100121c8:	d8800215 	stw	r2,8(sp)
100121cc:	180b883a 	mov	r5,r3
100121d0:	0007d040 	call	10007d04 <__mulsi3>
100121d4:	d8c00117 	ldw	r3,4(sp)
100121d8:	b009883a 	mov	r4,r22
100121dc:	102f883a 	mov	r23,r2
100121e0:	180b883a 	mov	r5,r3
100121e4:	0007d040 	call	10007d04 <__mulsi3>
100121e8:	d9800217 	ldw	r6,8(sp)
100121ec:	e006d43a 	srli	r3,fp,16
100121f0:	1185883a 	add	r2,r2,r6
100121f4:	1885883a 	add	r2,r3,r2
100121f8:	1180022e 	bgeu	r2,r6,10012204 <__umoddi3+0x454>
100121fc:	00c00074 	movhi	r3,1
10012200:	b8ef883a 	add	r23,r23,r3
10012204:	1006d43a 	srli	r3,r2,16
10012208:	1004943a 	slli	r2,r2,16
1001220c:	e73fffcc 	andi	fp,fp,65535
10012210:	1dc7883a 	add	r3,r3,r23
10012214:	1739883a 	add	fp,r2,fp
10012218:	88c03a36 	bltu	r17,r3,10012304 <__umoddi3+0x554>
1001221c:	88c05126 	beq	r17,r3,10012364 <__umoddi3+0x5b4>
10012220:	88c9c83a 	sub	r4,r17,r3
10012224:	e00f883a 	mov	r7,fp
10012228:	81cfc83a 	sub	r7,r16,r7
1001222c:	81c7803a 	cmpltu	r3,r16,r7
10012230:	20c7c83a 	sub	r3,r4,r3
10012234:	1cc4983a 	sll	r2,r3,r19
10012238:	3d0ed83a 	srl	r7,r7,r20
1001223c:	1d06d83a 	srl	r3,r3,r20
10012240:	11c4b03a 	or	r2,r2,r7
10012244:	003f7c06 	br	10012038 <__alt_data_end+0xf8012038>
10012248:	9ca6983a 	sll	r19,r19,r18
1001224c:	88f8d83a 	srl	fp,r17,r3
10012250:	80c4d83a 	srl	r2,r16,r3
10012254:	982cd43a 	srli	r22,r19,16
10012258:	8ca2983a 	sll	r17,r17,r18
1001225c:	e009883a 	mov	r4,fp
10012260:	b00b883a 	mov	r5,r22
10012264:	146ab03a 	or	r21,r2,r17
10012268:	0007cac0 	call	10007cac <__umodsi3>
1001226c:	b00b883a 	mov	r5,r22
10012270:	e009883a 	mov	r4,fp
10012274:	1029883a 	mov	r20,r2
10012278:	9dffffcc 	andi	r23,r19,65535
1001227c:	0007c480 	call	10007c48 <__udivsi3>
10012280:	b809883a 	mov	r4,r23
10012284:	100b883a 	mov	r5,r2
10012288:	0007d040 	call	10007d04 <__mulsi3>
1001228c:	a008943a 	slli	r4,r20,16
10012290:	a806d43a 	srli	r3,r21,16
10012294:	84a8983a 	sll	r20,r16,r18
10012298:	1906b03a 	or	r3,r3,r4
1001229c:	1880042e 	bgeu	r3,r2,100122b0 <__umoddi3+0x500>
100122a0:	1cc7883a 	add	r3,r3,r19
100122a4:	1cc00236 	bltu	r3,r19,100122b0 <__umoddi3+0x500>
100122a8:	1880012e 	bgeu	r3,r2,100122b0 <__umoddi3+0x500>
100122ac:	1cc7883a 	add	r3,r3,r19
100122b0:	18a3c83a 	sub	r17,r3,r2
100122b4:	b00b883a 	mov	r5,r22
100122b8:	8809883a 	mov	r4,r17
100122bc:	0007cac0 	call	10007cac <__umodsi3>
100122c0:	b00b883a 	mov	r5,r22
100122c4:	8809883a 	mov	r4,r17
100122c8:	1021883a 	mov	r16,r2
100122cc:	0007c480 	call	10007c48 <__udivsi3>
100122d0:	100b883a 	mov	r5,r2
100122d4:	b809883a 	mov	r4,r23
100122d8:	8020943a 	slli	r16,r16,16
100122dc:	0007d040 	call	10007d04 <__mulsi3>
100122e0:	a8ffffcc 	andi	r3,r21,65535
100122e4:	1c06b03a 	or	r3,r3,r16
100122e8:	1880042e 	bgeu	r3,r2,100122fc <__umoddi3+0x54c>
100122ec:	1cc7883a 	add	r3,r3,r19
100122f0:	1cc00236 	bltu	r3,r19,100122fc <__umoddi3+0x54c>
100122f4:	1880012e 	bgeu	r3,r2,100122fc <__umoddi3+0x54c>
100122f8:	1cc7883a 	add	r3,r3,r19
100122fc:	18a3c83a 	sub	r17,r3,r2
10012300:	003f2906 	br	10011fa8 <__alt_data_end+0xf8011fa8>
10012304:	e48fc83a 	sub	r7,fp,r18
10012308:	1d49c83a 	sub	r4,r3,r21
1001230c:	e1f9803a 	cmpltu	fp,fp,r7
10012310:	2739c83a 	sub	fp,r4,fp
10012314:	8f09c83a 	sub	r4,r17,fp
10012318:	003fc306 	br	10012228 <__alt_data_end+0xf8012228>
1001231c:	01000604 	movi	r4,24
10012320:	003ef906 	br	10011f08 <__alt_data_end+0xf8011f08>
10012324:	00800604 	movi	r2,24
10012328:	003f1306 	br	10011f78 <__alt_data_end+0xf8011f78>
1001232c:	01000604 	movi	r4,24
10012330:	003eb606 	br	10011e0c <__alt_data_end+0xf8011e0c>
10012334:	40bf902e 	bgeu	r8,r2,10012178 <__alt_data_end+0xf8012178>
10012338:	b5bfff84 	addi	r22,r22,-2
1001233c:	4551883a 	add	r8,r8,r21
10012340:	003f8e06 	br	1001217c <__alt_data_end+0xf801217c>
10012344:	18bf762e 	bgeu	r3,r2,10012120 <__alt_data_end+0xf8012120>
10012348:	8c7fff84 	addi	r17,r17,-2
1001234c:	1d47883a 	add	r3,r3,r21
10012350:	003f7406 	br	10012124 <__alt_data_end+0xf8012124>
10012354:	1cc7883a 	add	r3,r3,r19
10012358:	003ecd06 	br	10011e90 <__alt_data_end+0xf8011e90>
1001235c:	8005883a 	mov	r2,r16
10012360:	003ef806 	br	10011f44 <__alt_data_end+0xf8011f44>
10012364:	873fe736 	bltu	r16,fp,10012304 <__alt_data_end+0xf8012304>
10012368:	e00f883a 	mov	r7,fp
1001236c:	0009883a 	mov	r4,zero
10012370:	003fad06 	br	10012228 <__alt_data_end+0xf8012228>

10012374 <__adddf3>:
10012374:	02c00434 	movhi	r11,16
10012378:	5affffc4 	addi	r11,r11,-1
1001237c:	2806d7fa 	srli	r3,r5,31
10012380:	2ad4703a 	and	r10,r5,r11
10012384:	3ad2703a 	and	r9,r7,r11
10012388:	3804d53a 	srli	r2,r7,20
1001238c:	3018d77a 	srli	r12,r6,29
10012390:	280ad53a 	srli	r5,r5,20
10012394:	501490fa 	slli	r10,r10,3
10012398:	2010d77a 	srli	r8,r4,29
1001239c:	481290fa 	slli	r9,r9,3
100123a0:	380ed7fa 	srli	r7,r7,31
100123a4:	defffb04 	addi	sp,sp,-20
100123a8:	dc800215 	stw	r18,8(sp)
100123ac:	dc400115 	stw	r17,4(sp)
100123b0:	dc000015 	stw	r16,0(sp)
100123b4:	dfc00415 	stw	ra,16(sp)
100123b8:	dcc00315 	stw	r19,12(sp)
100123bc:	1c803fcc 	andi	r18,r3,255
100123c0:	2c01ffcc 	andi	r16,r5,2047
100123c4:	5210b03a 	or	r8,r10,r8
100123c8:	202290fa 	slli	r17,r4,3
100123cc:	1081ffcc 	andi	r2,r2,2047
100123d0:	4b12b03a 	or	r9,r9,r12
100123d4:	300c90fa 	slli	r6,r6,3
100123d8:	91c07526 	beq	r18,r7,100125b0 <__adddf3+0x23c>
100123dc:	8087c83a 	sub	r3,r16,r2
100123e0:	00c0ab0e 	bge	zero,r3,10012690 <__adddf3+0x31c>
100123e4:	10002a1e 	bne	r2,zero,10012490 <__adddf3+0x11c>
100123e8:	4984b03a 	or	r2,r9,r6
100123ec:	1000961e 	bne	r2,zero,10012648 <__adddf3+0x2d4>
100123f0:	888001cc 	andi	r2,r17,7
100123f4:	10000726 	beq	r2,zero,10012414 <__adddf3+0xa0>
100123f8:	888003cc 	andi	r2,r17,15
100123fc:	00c00104 	movi	r3,4
10012400:	10c00426 	beq	r2,r3,10012414 <__adddf3+0xa0>
10012404:	88c7883a 	add	r3,r17,r3
10012408:	1c63803a 	cmpltu	r17,r3,r17
1001240c:	4451883a 	add	r8,r8,r17
10012410:	1823883a 	mov	r17,r3
10012414:	4080202c 	andhi	r2,r8,128
10012418:	10005926 	beq	r2,zero,10012580 <__adddf3+0x20c>
1001241c:	84000044 	addi	r16,r16,1
10012420:	0081ffc4 	movi	r2,2047
10012424:	8080ba26 	beq	r16,r2,10012710 <__adddf3+0x39c>
10012428:	00bfe034 	movhi	r2,65408
1001242c:	10bfffc4 	addi	r2,r2,-1
10012430:	4090703a 	and	r8,r8,r2
10012434:	4004977a 	slli	r2,r8,29
10012438:	4010927a 	slli	r8,r8,9
1001243c:	8822d0fa 	srli	r17,r17,3
10012440:	8401ffcc 	andi	r16,r16,2047
10012444:	4010d33a 	srli	r8,r8,12
10012448:	9007883a 	mov	r3,r18
1001244c:	1444b03a 	or	r2,r2,r17
10012450:	8401ffcc 	andi	r16,r16,2047
10012454:	8020953a 	slli	r16,r16,20
10012458:	18c03fcc 	andi	r3,r3,255
1001245c:	01000434 	movhi	r4,16
10012460:	213fffc4 	addi	r4,r4,-1
10012464:	180697fa 	slli	r3,r3,31
10012468:	4110703a 	and	r8,r8,r4
1001246c:	4410b03a 	or	r8,r8,r16
10012470:	40c6b03a 	or	r3,r8,r3
10012474:	dfc00417 	ldw	ra,16(sp)
10012478:	dcc00317 	ldw	r19,12(sp)
1001247c:	dc800217 	ldw	r18,8(sp)
10012480:	dc400117 	ldw	r17,4(sp)
10012484:	dc000017 	ldw	r16,0(sp)
10012488:	dec00504 	addi	sp,sp,20
1001248c:	f800283a 	ret
10012490:	0081ffc4 	movi	r2,2047
10012494:	80bfd626 	beq	r16,r2,100123f0 <__alt_data_end+0xf80123f0>
10012498:	4a402034 	orhi	r9,r9,128
1001249c:	00800e04 	movi	r2,56
100124a0:	10c09f16 	blt	r2,r3,10012720 <__adddf3+0x3ac>
100124a4:	008007c4 	movi	r2,31
100124a8:	10c0c216 	blt	r2,r3,100127b4 <__adddf3+0x440>
100124ac:	00800804 	movi	r2,32
100124b0:	10c5c83a 	sub	r2,r2,r3
100124b4:	488a983a 	sll	r5,r9,r2
100124b8:	30c8d83a 	srl	r4,r6,r3
100124bc:	3084983a 	sll	r2,r6,r2
100124c0:	48c6d83a 	srl	r3,r9,r3
100124c4:	290cb03a 	or	r6,r5,r4
100124c8:	1004c03a 	cmpne	r2,r2,zero
100124cc:	308cb03a 	or	r6,r6,r2
100124d0:	898dc83a 	sub	r6,r17,r6
100124d4:	89a3803a 	cmpltu	r17,r17,r6
100124d8:	40d1c83a 	sub	r8,r8,r3
100124dc:	4451c83a 	sub	r8,r8,r17
100124e0:	3023883a 	mov	r17,r6
100124e4:	4080202c 	andhi	r2,r8,128
100124e8:	10002326 	beq	r2,zero,10012578 <__adddf3+0x204>
100124ec:	04c02034 	movhi	r19,128
100124f0:	9cffffc4 	addi	r19,r19,-1
100124f4:	44e6703a 	and	r19,r8,r19
100124f8:	98007626 	beq	r19,zero,100126d4 <__adddf3+0x360>
100124fc:	9809883a 	mov	r4,r19
10012500:	0014bb40 	call	10014bb4 <__clzsi2>
10012504:	10fffe04 	addi	r3,r2,-8
10012508:	010007c4 	movi	r4,31
1001250c:	20c07716 	blt	r4,r3,100126ec <__adddf3+0x378>
10012510:	00800804 	movi	r2,32
10012514:	10c5c83a 	sub	r2,r2,r3
10012518:	8884d83a 	srl	r2,r17,r2
1001251c:	98d0983a 	sll	r8,r19,r3
10012520:	88e2983a 	sll	r17,r17,r3
10012524:	1204b03a 	or	r2,r2,r8
10012528:	1c007416 	blt	r3,r16,100126fc <__adddf3+0x388>
1001252c:	1c21c83a 	sub	r16,r3,r16
10012530:	82000044 	addi	r8,r16,1
10012534:	00c007c4 	movi	r3,31
10012538:	1a009116 	blt	r3,r8,10012780 <__adddf3+0x40c>
1001253c:	00c00804 	movi	r3,32
10012540:	1a07c83a 	sub	r3,r3,r8
10012544:	8a08d83a 	srl	r4,r17,r8
10012548:	88e2983a 	sll	r17,r17,r3
1001254c:	10c6983a 	sll	r3,r2,r3
10012550:	1210d83a 	srl	r8,r2,r8
10012554:	8804c03a 	cmpne	r2,r17,zero
10012558:	1906b03a 	or	r3,r3,r4
1001255c:	18a2b03a 	or	r17,r3,r2
10012560:	0021883a 	mov	r16,zero
10012564:	003fa206 	br	100123f0 <__alt_data_end+0xf80123f0>
10012568:	1890b03a 	or	r8,r3,r2
1001256c:	40017d26 	beq	r8,zero,10012b64 <__adddf3+0x7f0>
10012570:	1011883a 	mov	r8,r2
10012574:	1823883a 	mov	r17,r3
10012578:	888001cc 	andi	r2,r17,7
1001257c:	103f9e1e 	bne	r2,zero,100123f8 <__alt_data_end+0xf80123f8>
10012580:	4004977a 	slli	r2,r8,29
10012584:	8822d0fa 	srli	r17,r17,3
10012588:	4010d0fa 	srli	r8,r8,3
1001258c:	9007883a 	mov	r3,r18
10012590:	1444b03a 	or	r2,r2,r17
10012594:	0101ffc4 	movi	r4,2047
10012598:	81002426 	beq	r16,r4,1001262c <__adddf3+0x2b8>
1001259c:	8120703a 	and	r16,r16,r4
100125a0:	01000434 	movhi	r4,16
100125a4:	213fffc4 	addi	r4,r4,-1
100125a8:	4110703a 	and	r8,r8,r4
100125ac:	003fa806 	br	10012450 <__alt_data_end+0xf8012450>
100125b0:	8089c83a 	sub	r4,r16,r2
100125b4:	01005e0e 	bge	zero,r4,10012730 <__adddf3+0x3bc>
100125b8:	10002b26 	beq	r2,zero,10012668 <__adddf3+0x2f4>
100125bc:	0081ffc4 	movi	r2,2047
100125c0:	80bf8b26 	beq	r16,r2,100123f0 <__alt_data_end+0xf80123f0>
100125c4:	4a402034 	orhi	r9,r9,128
100125c8:	00800e04 	movi	r2,56
100125cc:	1100a40e 	bge	r2,r4,10012860 <__adddf3+0x4ec>
100125d0:	498cb03a 	or	r6,r9,r6
100125d4:	300ac03a 	cmpne	r5,r6,zero
100125d8:	0013883a 	mov	r9,zero
100125dc:	2c4b883a 	add	r5,r5,r17
100125e0:	2c63803a 	cmpltu	r17,r5,r17
100125e4:	4a11883a 	add	r8,r9,r8
100125e8:	8a11883a 	add	r8,r17,r8
100125ec:	2823883a 	mov	r17,r5
100125f0:	4080202c 	andhi	r2,r8,128
100125f4:	103fe026 	beq	r2,zero,10012578 <__alt_data_end+0xf8012578>
100125f8:	84000044 	addi	r16,r16,1
100125fc:	0081ffc4 	movi	r2,2047
10012600:	8080d226 	beq	r16,r2,1001294c <__adddf3+0x5d8>
10012604:	00bfe034 	movhi	r2,65408
10012608:	10bfffc4 	addi	r2,r2,-1
1001260c:	4090703a 	and	r8,r8,r2
10012610:	880ad07a 	srli	r5,r17,1
10012614:	400897fa 	slli	r4,r8,31
10012618:	88c0004c 	andi	r3,r17,1
1001261c:	28e2b03a 	or	r17,r5,r3
10012620:	4010d07a 	srli	r8,r8,1
10012624:	2462b03a 	or	r17,r4,r17
10012628:	003f7106 	br	100123f0 <__alt_data_end+0xf80123f0>
1001262c:	4088b03a 	or	r4,r8,r2
10012630:	20014526 	beq	r4,zero,10012b48 <__adddf3+0x7d4>
10012634:	01000434 	movhi	r4,16
10012638:	42000234 	orhi	r8,r8,8
1001263c:	213fffc4 	addi	r4,r4,-1
10012640:	4110703a 	and	r8,r8,r4
10012644:	003f8206 	br	10012450 <__alt_data_end+0xf8012450>
10012648:	18ffffc4 	addi	r3,r3,-1
1001264c:	1800491e 	bne	r3,zero,10012774 <__adddf3+0x400>
10012650:	898bc83a 	sub	r5,r17,r6
10012654:	8963803a 	cmpltu	r17,r17,r5
10012658:	4251c83a 	sub	r8,r8,r9
1001265c:	4451c83a 	sub	r8,r8,r17
10012660:	2823883a 	mov	r17,r5
10012664:	003f9f06 	br	100124e4 <__alt_data_end+0xf80124e4>
10012668:	4984b03a 	or	r2,r9,r6
1001266c:	103f6026 	beq	r2,zero,100123f0 <__alt_data_end+0xf80123f0>
10012670:	213fffc4 	addi	r4,r4,-1
10012674:	2000931e 	bne	r4,zero,100128c4 <__adddf3+0x550>
10012678:	898d883a 	add	r6,r17,r6
1001267c:	3463803a 	cmpltu	r17,r6,r17
10012680:	4251883a 	add	r8,r8,r9
10012684:	8a11883a 	add	r8,r17,r8
10012688:	3023883a 	mov	r17,r6
1001268c:	003fd806 	br	100125f0 <__alt_data_end+0xf80125f0>
10012690:	1800541e 	bne	r3,zero,100127e4 <__adddf3+0x470>
10012694:	80800044 	addi	r2,r16,1
10012698:	1081ffcc 	andi	r2,r2,2047
1001269c:	00c00044 	movi	r3,1
100126a0:	1880a00e 	bge	r3,r2,10012924 <__adddf3+0x5b0>
100126a4:	8989c83a 	sub	r4,r17,r6
100126a8:	8905803a 	cmpltu	r2,r17,r4
100126ac:	4267c83a 	sub	r19,r8,r9
100126b0:	98a7c83a 	sub	r19,r19,r2
100126b4:	9880202c 	andhi	r2,r19,128
100126b8:	10006326 	beq	r2,zero,10012848 <__adddf3+0x4d4>
100126bc:	3463c83a 	sub	r17,r6,r17
100126c0:	4a07c83a 	sub	r3,r9,r8
100126c4:	344d803a 	cmpltu	r6,r6,r17
100126c8:	19a7c83a 	sub	r19,r3,r6
100126cc:	3825883a 	mov	r18,r7
100126d0:	983f8a1e 	bne	r19,zero,100124fc <__alt_data_end+0xf80124fc>
100126d4:	8809883a 	mov	r4,r17
100126d8:	0014bb40 	call	10014bb4 <__clzsi2>
100126dc:	10800804 	addi	r2,r2,32
100126e0:	10fffe04 	addi	r3,r2,-8
100126e4:	010007c4 	movi	r4,31
100126e8:	20ff890e 	bge	r4,r3,10012510 <__alt_data_end+0xf8012510>
100126ec:	10bff604 	addi	r2,r2,-40
100126f0:	8884983a 	sll	r2,r17,r2
100126f4:	0023883a 	mov	r17,zero
100126f8:	1c3f8c0e 	bge	r3,r16,1001252c <__alt_data_end+0xf801252c>
100126fc:	023fe034 	movhi	r8,65408
10012700:	423fffc4 	addi	r8,r8,-1
10012704:	80e1c83a 	sub	r16,r16,r3
10012708:	1210703a 	and	r8,r2,r8
1001270c:	003f3806 	br	100123f0 <__alt_data_end+0xf80123f0>
10012710:	9007883a 	mov	r3,r18
10012714:	0011883a 	mov	r8,zero
10012718:	0005883a 	mov	r2,zero
1001271c:	003f4c06 	br	10012450 <__alt_data_end+0xf8012450>
10012720:	498cb03a 	or	r6,r9,r6
10012724:	300cc03a 	cmpne	r6,r6,zero
10012728:	0007883a 	mov	r3,zero
1001272c:	003f6806 	br	100124d0 <__alt_data_end+0xf80124d0>
10012730:	20009c1e 	bne	r4,zero,100129a4 <__adddf3+0x630>
10012734:	80800044 	addi	r2,r16,1
10012738:	1141ffcc 	andi	r5,r2,2047
1001273c:	01000044 	movi	r4,1
10012740:	2140670e 	bge	r4,r5,100128e0 <__adddf3+0x56c>
10012744:	0101ffc4 	movi	r4,2047
10012748:	11007f26 	beq	r2,r4,10012948 <__adddf3+0x5d4>
1001274c:	898d883a 	add	r6,r17,r6
10012750:	4247883a 	add	r3,r8,r9
10012754:	3451803a 	cmpltu	r8,r6,r17
10012758:	40d1883a 	add	r8,r8,r3
1001275c:	402297fa 	slli	r17,r8,31
10012760:	300cd07a 	srli	r6,r6,1
10012764:	4010d07a 	srli	r8,r8,1
10012768:	1021883a 	mov	r16,r2
1001276c:	89a2b03a 	or	r17,r17,r6
10012770:	003f1f06 	br	100123f0 <__alt_data_end+0xf80123f0>
10012774:	0081ffc4 	movi	r2,2047
10012778:	80bf481e 	bne	r16,r2,1001249c <__alt_data_end+0xf801249c>
1001277c:	003f1c06 	br	100123f0 <__alt_data_end+0xf80123f0>
10012780:	843ff844 	addi	r16,r16,-31
10012784:	01000804 	movi	r4,32
10012788:	1406d83a 	srl	r3,r2,r16
1001278c:	41005026 	beq	r8,r4,100128d0 <__adddf3+0x55c>
10012790:	01001004 	movi	r4,64
10012794:	2211c83a 	sub	r8,r4,r8
10012798:	1204983a 	sll	r2,r2,r8
1001279c:	88a2b03a 	or	r17,r17,r2
100127a0:	8822c03a 	cmpne	r17,r17,zero
100127a4:	1c62b03a 	or	r17,r3,r17
100127a8:	0011883a 	mov	r8,zero
100127ac:	0021883a 	mov	r16,zero
100127b0:	003f7106 	br	10012578 <__alt_data_end+0xf8012578>
100127b4:	193ff804 	addi	r4,r3,-32
100127b8:	00800804 	movi	r2,32
100127bc:	4908d83a 	srl	r4,r9,r4
100127c0:	18804526 	beq	r3,r2,100128d8 <__adddf3+0x564>
100127c4:	00801004 	movi	r2,64
100127c8:	10c5c83a 	sub	r2,r2,r3
100127cc:	4886983a 	sll	r3,r9,r2
100127d0:	198cb03a 	or	r6,r3,r6
100127d4:	300cc03a 	cmpne	r6,r6,zero
100127d8:	218cb03a 	or	r6,r4,r6
100127dc:	0007883a 	mov	r3,zero
100127e0:	003f3b06 	br	100124d0 <__alt_data_end+0xf80124d0>
100127e4:	80002a26 	beq	r16,zero,10012890 <__adddf3+0x51c>
100127e8:	0101ffc4 	movi	r4,2047
100127ec:	11006826 	beq	r2,r4,10012990 <__adddf3+0x61c>
100127f0:	00c7c83a 	sub	r3,zero,r3
100127f4:	42002034 	orhi	r8,r8,128
100127f8:	01000e04 	movi	r4,56
100127fc:	20c07c16 	blt	r4,r3,100129f0 <__adddf3+0x67c>
10012800:	010007c4 	movi	r4,31
10012804:	20c0da16 	blt	r4,r3,10012b70 <__adddf3+0x7fc>
10012808:	01000804 	movi	r4,32
1001280c:	20c9c83a 	sub	r4,r4,r3
10012810:	4114983a 	sll	r10,r8,r4
10012814:	88cad83a 	srl	r5,r17,r3
10012818:	8908983a 	sll	r4,r17,r4
1001281c:	40c6d83a 	srl	r3,r8,r3
10012820:	5162b03a 	or	r17,r10,r5
10012824:	2008c03a 	cmpne	r4,r4,zero
10012828:	8922b03a 	or	r17,r17,r4
1001282c:	3463c83a 	sub	r17,r6,r17
10012830:	48c7c83a 	sub	r3,r9,r3
10012834:	344d803a 	cmpltu	r6,r6,r17
10012838:	1991c83a 	sub	r8,r3,r6
1001283c:	1021883a 	mov	r16,r2
10012840:	3825883a 	mov	r18,r7
10012844:	003f2706 	br	100124e4 <__alt_data_end+0xf80124e4>
10012848:	24d0b03a 	or	r8,r4,r19
1001284c:	40001b1e 	bne	r8,zero,100128bc <__adddf3+0x548>
10012850:	0005883a 	mov	r2,zero
10012854:	0007883a 	mov	r3,zero
10012858:	0021883a 	mov	r16,zero
1001285c:	003f4d06 	br	10012594 <__alt_data_end+0xf8012594>
10012860:	008007c4 	movi	r2,31
10012864:	11003c16 	blt	r2,r4,10012958 <__adddf3+0x5e4>
10012868:	00800804 	movi	r2,32
1001286c:	1105c83a 	sub	r2,r2,r4
10012870:	488e983a 	sll	r7,r9,r2
10012874:	310ad83a 	srl	r5,r6,r4
10012878:	3084983a 	sll	r2,r6,r2
1001287c:	4912d83a 	srl	r9,r9,r4
10012880:	394ab03a 	or	r5,r7,r5
10012884:	1004c03a 	cmpne	r2,r2,zero
10012888:	288ab03a 	or	r5,r5,r2
1001288c:	003f5306 	br	100125dc <__alt_data_end+0xf80125dc>
10012890:	4448b03a 	or	r4,r8,r17
10012894:	20003e26 	beq	r4,zero,10012990 <__adddf3+0x61c>
10012898:	00c6303a 	nor	r3,zero,r3
1001289c:	18003a1e 	bne	r3,zero,10012988 <__adddf3+0x614>
100128a0:	3463c83a 	sub	r17,r6,r17
100128a4:	4a07c83a 	sub	r3,r9,r8
100128a8:	344d803a 	cmpltu	r6,r6,r17
100128ac:	1991c83a 	sub	r8,r3,r6
100128b0:	1021883a 	mov	r16,r2
100128b4:	3825883a 	mov	r18,r7
100128b8:	003f0a06 	br	100124e4 <__alt_data_end+0xf80124e4>
100128bc:	2023883a 	mov	r17,r4
100128c0:	003f0d06 	br	100124f8 <__alt_data_end+0xf80124f8>
100128c4:	0081ffc4 	movi	r2,2047
100128c8:	80bf3f1e 	bne	r16,r2,100125c8 <__alt_data_end+0xf80125c8>
100128cc:	003ec806 	br	100123f0 <__alt_data_end+0xf80123f0>
100128d0:	0005883a 	mov	r2,zero
100128d4:	003fb106 	br	1001279c <__alt_data_end+0xf801279c>
100128d8:	0007883a 	mov	r3,zero
100128dc:	003fbc06 	br	100127d0 <__alt_data_end+0xf80127d0>
100128e0:	4444b03a 	or	r2,r8,r17
100128e4:	8000871e 	bne	r16,zero,10012b04 <__adddf3+0x790>
100128e8:	1000ba26 	beq	r2,zero,10012bd4 <__adddf3+0x860>
100128ec:	4984b03a 	or	r2,r9,r6
100128f0:	103ebf26 	beq	r2,zero,100123f0 <__alt_data_end+0xf80123f0>
100128f4:	8985883a 	add	r2,r17,r6
100128f8:	4247883a 	add	r3,r8,r9
100128fc:	1451803a 	cmpltu	r8,r2,r17
10012900:	40d1883a 	add	r8,r8,r3
10012904:	40c0202c 	andhi	r3,r8,128
10012908:	1023883a 	mov	r17,r2
1001290c:	183f1a26 	beq	r3,zero,10012578 <__alt_data_end+0xf8012578>
10012910:	00bfe034 	movhi	r2,65408
10012914:	10bfffc4 	addi	r2,r2,-1
10012918:	2021883a 	mov	r16,r4
1001291c:	4090703a 	and	r8,r8,r2
10012920:	003eb306 	br	100123f0 <__alt_data_end+0xf80123f0>
10012924:	4444b03a 	or	r2,r8,r17
10012928:	8000291e 	bne	r16,zero,100129d0 <__adddf3+0x65c>
1001292c:	10004b1e 	bne	r2,zero,10012a5c <__adddf3+0x6e8>
10012930:	4990b03a 	or	r8,r9,r6
10012934:	40008b26 	beq	r8,zero,10012b64 <__adddf3+0x7f0>
10012938:	4811883a 	mov	r8,r9
1001293c:	3023883a 	mov	r17,r6
10012940:	3825883a 	mov	r18,r7
10012944:	003eaa06 	br	100123f0 <__alt_data_end+0xf80123f0>
10012948:	1021883a 	mov	r16,r2
1001294c:	0011883a 	mov	r8,zero
10012950:	0005883a 	mov	r2,zero
10012954:	003f0f06 	br	10012594 <__alt_data_end+0xf8012594>
10012958:	217ff804 	addi	r5,r4,-32
1001295c:	00800804 	movi	r2,32
10012960:	494ad83a 	srl	r5,r9,r5
10012964:	20807d26 	beq	r4,r2,10012b5c <__adddf3+0x7e8>
10012968:	00801004 	movi	r2,64
1001296c:	1109c83a 	sub	r4,r2,r4
10012970:	4912983a 	sll	r9,r9,r4
10012974:	498cb03a 	or	r6,r9,r6
10012978:	300cc03a 	cmpne	r6,r6,zero
1001297c:	298ab03a 	or	r5,r5,r6
10012980:	0013883a 	mov	r9,zero
10012984:	003f1506 	br	100125dc <__alt_data_end+0xf80125dc>
10012988:	0101ffc4 	movi	r4,2047
1001298c:	113f9a1e 	bne	r2,r4,100127f8 <__alt_data_end+0xf80127f8>
10012990:	4811883a 	mov	r8,r9
10012994:	3023883a 	mov	r17,r6
10012998:	1021883a 	mov	r16,r2
1001299c:	3825883a 	mov	r18,r7
100129a0:	003e9306 	br	100123f0 <__alt_data_end+0xf80123f0>
100129a4:	8000161e 	bne	r16,zero,10012a00 <__adddf3+0x68c>
100129a8:	444ab03a 	or	r5,r8,r17
100129ac:	28005126 	beq	r5,zero,10012af4 <__adddf3+0x780>
100129b0:	0108303a 	nor	r4,zero,r4
100129b4:	20004d1e 	bne	r4,zero,10012aec <__adddf3+0x778>
100129b8:	89a3883a 	add	r17,r17,r6
100129bc:	4253883a 	add	r9,r8,r9
100129c0:	898d803a 	cmpltu	r6,r17,r6
100129c4:	3251883a 	add	r8,r6,r9
100129c8:	1021883a 	mov	r16,r2
100129cc:	003f0806 	br	100125f0 <__alt_data_end+0xf80125f0>
100129d0:	1000301e 	bne	r2,zero,10012a94 <__adddf3+0x720>
100129d4:	4984b03a 	or	r2,r9,r6
100129d8:	10007126 	beq	r2,zero,10012ba0 <__adddf3+0x82c>
100129dc:	4811883a 	mov	r8,r9
100129e0:	3023883a 	mov	r17,r6
100129e4:	3825883a 	mov	r18,r7
100129e8:	0401ffc4 	movi	r16,2047
100129ec:	003e8006 	br	100123f0 <__alt_data_end+0xf80123f0>
100129f0:	4462b03a 	or	r17,r8,r17
100129f4:	8822c03a 	cmpne	r17,r17,zero
100129f8:	0007883a 	mov	r3,zero
100129fc:	003f8b06 	br	1001282c <__alt_data_end+0xf801282c>
10012a00:	0141ffc4 	movi	r5,2047
10012a04:	11403b26 	beq	r2,r5,10012af4 <__adddf3+0x780>
10012a08:	0109c83a 	sub	r4,zero,r4
10012a0c:	42002034 	orhi	r8,r8,128
10012a10:	01400e04 	movi	r5,56
10012a14:	29006716 	blt	r5,r4,10012bb4 <__adddf3+0x840>
10012a18:	014007c4 	movi	r5,31
10012a1c:	29007016 	blt	r5,r4,10012be0 <__adddf3+0x86c>
10012a20:	01400804 	movi	r5,32
10012a24:	290bc83a 	sub	r5,r5,r4
10012a28:	4154983a 	sll	r10,r8,r5
10012a2c:	890ed83a 	srl	r7,r17,r4
10012a30:	894a983a 	sll	r5,r17,r5
10012a34:	4108d83a 	srl	r4,r8,r4
10012a38:	51e2b03a 	or	r17,r10,r7
10012a3c:	280ac03a 	cmpne	r5,r5,zero
10012a40:	8962b03a 	or	r17,r17,r5
10012a44:	89a3883a 	add	r17,r17,r6
10012a48:	2253883a 	add	r9,r4,r9
10012a4c:	898d803a 	cmpltu	r6,r17,r6
10012a50:	3251883a 	add	r8,r6,r9
10012a54:	1021883a 	mov	r16,r2
10012a58:	003ee506 	br	100125f0 <__alt_data_end+0xf80125f0>
10012a5c:	4984b03a 	or	r2,r9,r6
10012a60:	103e6326 	beq	r2,zero,100123f0 <__alt_data_end+0xf80123f0>
10012a64:	8987c83a 	sub	r3,r17,r6
10012a68:	88c9803a 	cmpltu	r4,r17,r3
10012a6c:	4245c83a 	sub	r2,r8,r9
10012a70:	1105c83a 	sub	r2,r2,r4
10012a74:	1100202c 	andhi	r4,r2,128
10012a78:	203ebb26 	beq	r4,zero,10012568 <__alt_data_end+0xf8012568>
10012a7c:	3463c83a 	sub	r17,r6,r17
10012a80:	4a07c83a 	sub	r3,r9,r8
10012a84:	344d803a 	cmpltu	r6,r6,r17
10012a88:	1991c83a 	sub	r8,r3,r6
10012a8c:	3825883a 	mov	r18,r7
10012a90:	003e5706 	br	100123f0 <__alt_data_end+0xf80123f0>
10012a94:	4984b03a 	or	r2,r9,r6
10012a98:	10002e26 	beq	r2,zero,10012b54 <__adddf3+0x7e0>
10012a9c:	4004d0fa 	srli	r2,r8,3
10012aa0:	8822d0fa 	srli	r17,r17,3
10012aa4:	4010977a 	slli	r8,r8,29
10012aa8:	10c0022c 	andhi	r3,r2,8
10012aac:	4462b03a 	or	r17,r8,r17
10012ab0:	18000826 	beq	r3,zero,10012ad4 <__adddf3+0x760>
10012ab4:	4808d0fa 	srli	r4,r9,3
10012ab8:	20c0022c 	andhi	r3,r4,8
10012abc:	1800051e 	bne	r3,zero,10012ad4 <__adddf3+0x760>
10012ac0:	300cd0fa 	srli	r6,r6,3
10012ac4:	4806977a 	slli	r3,r9,29
10012ac8:	2005883a 	mov	r2,r4
10012acc:	3825883a 	mov	r18,r7
10012ad0:	19a2b03a 	or	r17,r3,r6
10012ad4:	8810d77a 	srli	r8,r17,29
10012ad8:	100490fa 	slli	r2,r2,3
10012adc:	882290fa 	slli	r17,r17,3
10012ae0:	0401ffc4 	movi	r16,2047
10012ae4:	4090b03a 	or	r8,r8,r2
10012ae8:	003e4106 	br	100123f0 <__alt_data_end+0xf80123f0>
10012aec:	0141ffc4 	movi	r5,2047
10012af0:	117fc71e 	bne	r2,r5,10012a10 <__alt_data_end+0xf8012a10>
10012af4:	4811883a 	mov	r8,r9
10012af8:	3023883a 	mov	r17,r6
10012afc:	1021883a 	mov	r16,r2
10012b00:	003e3b06 	br	100123f0 <__alt_data_end+0xf80123f0>
10012b04:	10002f26 	beq	r2,zero,10012bc4 <__adddf3+0x850>
10012b08:	4984b03a 	or	r2,r9,r6
10012b0c:	10001126 	beq	r2,zero,10012b54 <__adddf3+0x7e0>
10012b10:	4004d0fa 	srli	r2,r8,3
10012b14:	8822d0fa 	srli	r17,r17,3
10012b18:	4010977a 	slli	r8,r8,29
10012b1c:	10c0022c 	andhi	r3,r2,8
10012b20:	4462b03a 	or	r17,r8,r17
10012b24:	183feb26 	beq	r3,zero,10012ad4 <__alt_data_end+0xf8012ad4>
10012b28:	4808d0fa 	srli	r4,r9,3
10012b2c:	20c0022c 	andhi	r3,r4,8
10012b30:	183fe81e 	bne	r3,zero,10012ad4 <__alt_data_end+0xf8012ad4>
10012b34:	300cd0fa 	srli	r6,r6,3
10012b38:	4806977a 	slli	r3,r9,29
10012b3c:	2005883a 	mov	r2,r4
10012b40:	19a2b03a 	or	r17,r3,r6
10012b44:	003fe306 	br	10012ad4 <__alt_data_end+0xf8012ad4>
10012b48:	0011883a 	mov	r8,zero
10012b4c:	0005883a 	mov	r2,zero
10012b50:	003e3f06 	br	10012450 <__alt_data_end+0xf8012450>
10012b54:	0401ffc4 	movi	r16,2047
10012b58:	003e2506 	br	100123f0 <__alt_data_end+0xf80123f0>
10012b5c:	0013883a 	mov	r9,zero
10012b60:	003f8406 	br	10012974 <__alt_data_end+0xf8012974>
10012b64:	0005883a 	mov	r2,zero
10012b68:	0007883a 	mov	r3,zero
10012b6c:	003e8906 	br	10012594 <__alt_data_end+0xf8012594>
10012b70:	197ff804 	addi	r5,r3,-32
10012b74:	01000804 	movi	r4,32
10012b78:	414ad83a 	srl	r5,r8,r5
10012b7c:	19002426 	beq	r3,r4,10012c10 <__adddf3+0x89c>
10012b80:	01001004 	movi	r4,64
10012b84:	20c7c83a 	sub	r3,r4,r3
10012b88:	40c6983a 	sll	r3,r8,r3
10012b8c:	1c46b03a 	or	r3,r3,r17
10012b90:	1806c03a 	cmpne	r3,r3,zero
10012b94:	28e2b03a 	or	r17,r5,r3
10012b98:	0007883a 	mov	r3,zero
10012b9c:	003f2306 	br	1001282c <__alt_data_end+0xf801282c>
10012ba0:	0007883a 	mov	r3,zero
10012ba4:	5811883a 	mov	r8,r11
10012ba8:	00bfffc4 	movi	r2,-1
10012bac:	0401ffc4 	movi	r16,2047
10012bb0:	003e7806 	br	10012594 <__alt_data_end+0xf8012594>
10012bb4:	4462b03a 	or	r17,r8,r17
10012bb8:	8822c03a 	cmpne	r17,r17,zero
10012bbc:	0009883a 	mov	r4,zero
10012bc0:	003fa006 	br	10012a44 <__alt_data_end+0xf8012a44>
10012bc4:	4811883a 	mov	r8,r9
10012bc8:	3023883a 	mov	r17,r6
10012bcc:	0401ffc4 	movi	r16,2047
10012bd0:	003e0706 	br	100123f0 <__alt_data_end+0xf80123f0>
10012bd4:	4811883a 	mov	r8,r9
10012bd8:	3023883a 	mov	r17,r6
10012bdc:	003e0406 	br	100123f0 <__alt_data_end+0xf80123f0>
10012be0:	21fff804 	addi	r7,r4,-32
10012be4:	01400804 	movi	r5,32
10012be8:	41ced83a 	srl	r7,r8,r7
10012bec:	21400a26 	beq	r4,r5,10012c18 <__adddf3+0x8a4>
10012bf0:	01401004 	movi	r5,64
10012bf4:	2909c83a 	sub	r4,r5,r4
10012bf8:	4108983a 	sll	r4,r8,r4
10012bfc:	2448b03a 	or	r4,r4,r17
10012c00:	2008c03a 	cmpne	r4,r4,zero
10012c04:	3922b03a 	or	r17,r7,r4
10012c08:	0009883a 	mov	r4,zero
10012c0c:	003f8d06 	br	10012a44 <__alt_data_end+0xf8012a44>
10012c10:	0007883a 	mov	r3,zero
10012c14:	003fdd06 	br	10012b8c <__alt_data_end+0xf8012b8c>
10012c18:	0009883a 	mov	r4,zero
10012c1c:	003ff706 	br	10012bfc <__alt_data_end+0xf8012bfc>

10012c20 <__divdf3>:
10012c20:	defff004 	addi	sp,sp,-64
10012c24:	dc800815 	stw	r18,32(sp)
10012c28:	2824d53a 	srli	r18,r5,20
10012c2c:	dd800c15 	stw	r22,48(sp)
10012c30:	282cd7fa 	srli	r22,r5,31
10012c34:	dc000615 	stw	r16,24(sp)
10012c38:	04000434 	movhi	r16,16
10012c3c:	843fffc4 	addi	r16,r16,-1
10012c40:	dfc00f15 	stw	ra,60(sp)
10012c44:	df000e15 	stw	fp,56(sp)
10012c48:	ddc00d15 	stw	r23,52(sp)
10012c4c:	dd400b15 	stw	r21,44(sp)
10012c50:	dd000a15 	stw	r20,40(sp)
10012c54:	dcc00915 	stw	r19,36(sp)
10012c58:	dc400715 	stw	r17,28(sp)
10012c5c:	9481ffcc 	andi	r18,r18,2047
10012c60:	2c20703a 	and	r16,r5,r16
10012c64:	b2003fcc 	andi	r8,r22,255
10012c68:	90006126 	beq	r18,zero,10012df0 <__divdf3+0x1d0>
10012c6c:	0081ffc4 	movi	r2,2047
10012c70:	202b883a 	mov	r21,r4
10012c74:	90803726 	beq	r18,r2,10012d54 <__divdf3+0x134>
10012c78:	80800434 	orhi	r2,r16,16
10012c7c:	100490fa 	slli	r2,r2,3
10012c80:	2020d77a 	srli	r16,r4,29
10012c84:	202a90fa 	slli	r21,r4,3
10012c88:	94bf0044 	addi	r18,r18,-1023
10012c8c:	80a0b03a 	or	r16,r16,r2
10012c90:	0013883a 	mov	r9,zero
10012c94:	000b883a 	mov	r5,zero
10012c98:	3806d53a 	srli	r3,r7,20
10012c9c:	382ed7fa 	srli	r23,r7,31
10012ca0:	04400434 	movhi	r17,16
10012ca4:	8c7fffc4 	addi	r17,r17,-1
10012ca8:	18c1ffcc 	andi	r3,r3,2047
10012cac:	3029883a 	mov	r20,r6
10012cb0:	3c62703a 	and	r17,r7,r17
10012cb4:	bf003fcc 	andi	fp,r23,255
10012cb8:	18006e26 	beq	r3,zero,10012e74 <__divdf3+0x254>
10012cbc:	0081ffc4 	movi	r2,2047
10012cc0:	18806626 	beq	r3,r2,10012e5c <__divdf3+0x23c>
10012cc4:	88800434 	orhi	r2,r17,16
10012cc8:	100490fa 	slli	r2,r2,3
10012ccc:	3022d77a 	srli	r17,r6,29
10012cd0:	302890fa 	slli	r20,r6,3
10012cd4:	18ff0044 	addi	r3,r3,-1023
10012cd8:	88a2b03a 	or	r17,r17,r2
10012cdc:	000f883a 	mov	r7,zero
10012ce0:	b5e6f03a 	xor	r19,r22,r23
10012ce4:	3a4cb03a 	or	r6,r7,r9
10012ce8:	008003c4 	movi	r2,15
10012cec:	9809883a 	mov	r4,r19
10012cf0:	90c7c83a 	sub	r3,r18,r3
10012cf4:	9cc03fcc 	andi	r19,r19,255
10012cf8:	11809636 	bltu	r2,r6,10012f54 <__divdf3+0x334>
10012cfc:	300c90ba 	slli	r6,r6,2
10012d00:	00840074 	movhi	r2,4097
10012d04:	108b4504 	addi	r2,r2,11540
10012d08:	308d883a 	add	r6,r6,r2
10012d0c:	30800017 	ldw	r2,0(r6)
10012d10:	1000683a 	jmp	r2
10012d14:	10012f54 	ori	zero,r2,1213
10012d18:	10012d8c 	andi	zero,r2,1206
10012d1c:	10012f44 	addi	zero,r2,1213
10012d20:	10012d80 	call	110012d8 <_gp+0xfdedac>
10012d24:	10012f44 	addi	zero,r2,1213
10012d28:	10012f18 	cmpnei	zero,r2,1212
10012d2c:	10012f44 	addi	zero,r2,1213
10012d30:	10012d80 	call	110012d8 <_gp+0xfdedac>
10012d34:	10012d8c 	andi	zero,r2,1206
10012d38:	10012d8c 	andi	zero,r2,1206
10012d3c:	10012f18 	cmpnei	zero,r2,1212
10012d40:	10012d80 	call	110012d8 <_gp+0xfdedac>
10012d44:	10012d70 	cmpltui	zero,r2,1205
10012d48:	10012d70 	cmpltui	zero,r2,1205
10012d4c:	10012d70 	cmpltui	zero,r2,1205
10012d50:	100132dc 	xori	zero,r2,1227
10012d54:	2404b03a 	or	r2,r4,r16
10012d58:	10006c1e 	bne	r2,zero,10012f0c <__divdf3+0x2ec>
10012d5c:	02400204 	movi	r9,8
10012d60:	0021883a 	mov	r16,zero
10012d64:	002b883a 	mov	r21,zero
10012d68:	01400084 	movi	r5,2
10012d6c:	003fca06 	br	10012c98 <__alt_data_end+0xf8012c98>
10012d70:	8023883a 	mov	r17,r16
10012d74:	a829883a 	mov	r20,r21
10012d78:	4039883a 	mov	fp,r8
10012d7c:	280f883a 	mov	r7,r5
10012d80:	00800084 	movi	r2,2
10012d84:	3881601e 	bne	r7,r2,10013308 <__divdf3+0x6e8>
10012d88:	e027883a 	mov	r19,fp
10012d8c:	9900004c 	andi	r4,r19,1
10012d90:	0081ffc4 	movi	r2,2047
10012d94:	0021883a 	mov	r16,zero
10012d98:	002b883a 	mov	r21,zero
10012d9c:	1004953a 	slli	r2,r2,20
10012da0:	20c03fcc 	andi	r3,r4,255
10012da4:	01400434 	movhi	r5,16
10012da8:	297fffc4 	addi	r5,r5,-1
10012dac:	180697fa 	slli	r3,r3,31
10012db0:	8160703a 	and	r16,r16,r5
10012db4:	80a0b03a 	or	r16,r16,r2
10012db8:	80c6b03a 	or	r3,r16,r3
10012dbc:	a805883a 	mov	r2,r21
10012dc0:	dfc00f17 	ldw	ra,60(sp)
10012dc4:	df000e17 	ldw	fp,56(sp)
10012dc8:	ddc00d17 	ldw	r23,52(sp)
10012dcc:	dd800c17 	ldw	r22,48(sp)
10012dd0:	dd400b17 	ldw	r21,44(sp)
10012dd4:	dd000a17 	ldw	r20,40(sp)
10012dd8:	dcc00917 	ldw	r19,36(sp)
10012ddc:	dc800817 	ldw	r18,32(sp)
10012de0:	dc400717 	ldw	r17,28(sp)
10012de4:	dc000617 	ldw	r16,24(sp)
10012de8:	dec01004 	addi	sp,sp,64
10012dec:	f800283a 	ret
10012df0:	2404b03a 	or	r2,r4,r16
10012df4:	2023883a 	mov	r17,r4
10012df8:	10003f26 	beq	r2,zero,10012ef8 <__divdf3+0x2d8>
10012dfc:	80015e26 	beq	r16,zero,10013378 <__divdf3+0x758>
10012e00:	8009883a 	mov	r4,r16
10012e04:	d9800215 	stw	r6,8(sp)
10012e08:	d9c00515 	stw	r7,20(sp)
10012e0c:	da000415 	stw	r8,16(sp)
10012e10:	0014bb40 	call	10014bb4 <__clzsi2>
10012e14:	d9800217 	ldw	r6,8(sp)
10012e18:	d9c00517 	ldw	r7,20(sp)
10012e1c:	da000417 	ldw	r8,16(sp)
10012e20:	113ffd44 	addi	r4,r2,-11
10012e24:	00c00704 	movi	r3,28
10012e28:	19014f16 	blt	r3,r4,10013368 <__divdf3+0x748>
10012e2c:	00c00744 	movi	r3,29
10012e30:	157ffe04 	addi	r21,r2,-8
10012e34:	1907c83a 	sub	r3,r3,r4
10012e38:	8560983a 	sll	r16,r16,r21
10012e3c:	88c6d83a 	srl	r3,r17,r3
10012e40:	8d6a983a 	sll	r21,r17,r21
10012e44:	1c20b03a 	or	r16,r3,r16
10012e48:	1080fcc4 	addi	r2,r2,1011
10012e4c:	00a5c83a 	sub	r18,zero,r2
10012e50:	0013883a 	mov	r9,zero
10012e54:	000b883a 	mov	r5,zero
10012e58:	003f8f06 	br	10012c98 <__alt_data_end+0xf8012c98>
10012e5c:	3444b03a 	or	r2,r6,r17
10012e60:	1000231e 	bne	r2,zero,10012ef0 <__divdf3+0x2d0>
10012e64:	0023883a 	mov	r17,zero
10012e68:	0029883a 	mov	r20,zero
10012e6c:	01c00084 	movi	r7,2
10012e70:	003f9b06 	br	10012ce0 <__alt_data_end+0xf8012ce0>
10012e74:	3444b03a 	or	r2,r6,r17
10012e78:	10001926 	beq	r2,zero,10012ee0 <__divdf3+0x2c0>
10012e7c:	88014b26 	beq	r17,zero,100133ac <__divdf3+0x78c>
10012e80:	8809883a 	mov	r4,r17
10012e84:	d9400115 	stw	r5,4(sp)
10012e88:	d9800215 	stw	r6,8(sp)
10012e8c:	da000415 	stw	r8,16(sp)
10012e90:	da400315 	stw	r9,12(sp)
10012e94:	0014bb40 	call	10014bb4 <__clzsi2>
10012e98:	d9400117 	ldw	r5,4(sp)
10012e9c:	d9800217 	ldw	r6,8(sp)
10012ea0:	da000417 	ldw	r8,16(sp)
10012ea4:	da400317 	ldw	r9,12(sp)
10012ea8:	113ffd44 	addi	r4,r2,-11
10012eac:	00c00704 	movi	r3,28
10012eb0:	19013a16 	blt	r3,r4,1001339c <__divdf3+0x77c>
10012eb4:	00c00744 	movi	r3,29
10012eb8:	153ffe04 	addi	r20,r2,-8
10012ebc:	1907c83a 	sub	r3,r3,r4
10012ec0:	8d22983a 	sll	r17,r17,r20
10012ec4:	30c6d83a 	srl	r3,r6,r3
10012ec8:	3528983a 	sll	r20,r6,r20
10012ecc:	1c62b03a 	or	r17,r3,r17
10012ed0:	1080fcc4 	addi	r2,r2,1011
10012ed4:	0087c83a 	sub	r3,zero,r2
10012ed8:	000f883a 	mov	r7,zero
10012edc:	003f8006 	br	10012ce0 <__alt_data_end+0xf8012ce0>
10012ee0:	0023883a 	mov	r17,zero
10012ee4:	0029883a 	mov	r20,zero
10012ee8:	01c00044 	movi	r7,1
10012eec:	003f7c06 	br	10012ce0 <__alt_data_end+0xf8012ce0>
10012ef0:	01c000c4 	movi	r7,3
10012ef4:	003f7a06 	br	10012ce0 <__alt_data_end+0xf8012ce0>
10012ef8:	02400104 	movi	r9,4
10012efc:	0021883a 	mov	r16,zero
10012f00:	002b883a 	mov	r21,zero
10012f04:	01400044 	movi	r5,1
10012f08:	003f6306 	br	10012c98 <__alt_data_end+0xf8012c98>
10012f0c:	02400304 	movi	r9,12
10012f10:	014000c4 	movi	r5,3
10012f14:	003f6006 	br	10012c98 <__alt_data_end+0xf8012c98>
10012f18:	04000434 	movhi	r16,16
10012f1c:	0009883a 	mov	r4,zero
10012f20:	843fffc4 	addi	r16,r16,-1
10012f24:	057fffc4 	movi	r21,-1
10012f28:	0081ffc4 	movi	r2,2047
10012f2c:	003f9b06 	br	10012d9c <__alt_data_end+0xf8012d9c>
10012f30:	00c00044 	movi	r3,1
10012f34:	1887c83a 	sub	r3,r3,r2
10012f38:	01000e04 	movi	r4,56
10012f3c:	20c1530e 	bge	r4,r3,1001348c <__divdf3+0x86c>
10012f40:	9900004c 	andi	r4,r19,1
10012f44:	0005883a 	mov	r2,zero
10012f48:	0021883a 	mov	r16,zero
10012f4c:	002b883a 	mov	r21,zero
10012f50:	003f9206 	br	10012d9c <__alt_data_end+0xf8012d9c>
10012f54:	8c012e36 	bltu	r17,r16,10013410 <__divdf3+0x7f0>
10012f58:	84412c26 	beq	r16,r17,1001340c <__divdf3+0x7ec>
10012f5c:	a82f883a 	mov	r23,r21
10012f60:	18ffffc4 	addi	r3,r3,-1
10012f64:	002b883a 	mov	r21,zero
10012f68:	a004d63a 	srli	r2,r20,24
10012f6c:	8822923a 	slli	r17,r17,8
10012f70:	a028923a 	slli	r20,r20,8
10012f74:	8009883a 	mov	r4,r16
10012f78:	88acb03a 	or	r22,r17,r2
10012f7c:	dd000015 	stw	r20,0(sp)
10012f80:	b028d43a 	srli	r20,r22,16
10012f84:	d8c00215 	stw	r3,8(sp)
10012f88:	b4bfffcc 	andi	r18,r22,65535
10012f8c:	a00b883a 	mov	r5,r20
10012f90:	0007c480 	call	10007c48 <__udivsi3>
10012f94:	100b883a 	mov	r5,r2
10012f98:	9009883a 	mov	r4,r18
10012f9c:	1023883a 	mov	r17,r2
10012fa0:	0007d040 	call	10007d04 <__mulsi3>
10012fa4:	8009883a 	mov	r4,r16
10012fa8:	a00b883a 	mov	r5,r20
10012fac:	1039883a 	mov	fp,r2
10012fb0:	0007cac0 	call	10007cac <__umodsi3>
10012fb4:	1004943a 	slli	r2,r2,16
10012fb8:	b808d43a 	srli	r4,r23,16
10012fbc:	d8c00217 	ldw	r3,8(sp)
10012fc0:	2084b03a 	or	r2,r4,r2
10012fc4:	1700062e 	bgeu	r2,fp,10012fe0 <__divdf3+0x3c0>
10012fc8:	1585883a 	add	r2,r2,r22
10012fcc:	893fffc4 	addi	r4,r17,-1
10012fd0:	15811d36 	bltu	r2,r22,10013448 <__divdf3+0x828>
10012fd4:	17011c2e 	bgeu	r2,fp,10013448 <__divdf3+0x828>
10012fd8:	8c7fff84 	addi	r17,r17,-2
10012fdc:	1585883a 	add	r2,r2,r22
10012fe0:	1739c83a 	sub	fp,r2,fp
10012fe4:	a00b883a 	mov	r5,r20
10012fe8:	e009883a 	mov	r4,fp
10012fec:	d8c00215 	stw	r3,8(sp)
10012ff0:	0007c480 	call	10007c48 <__udivsi3>
10012ff4:	100b883a 	mov	r5,r2
10012ff8:	9009883a 	mov	r4,r18
10012ffc:	1021883a 	mov	r16,r2
10013000:	0007d040 	call	10007d04 <__mulsi3>
10013004:	a00b883a 	mov	r5,r20
10013008:	e009883a 	mov	r4,fp
1001300c:	d8800415 	stw	r2,16(sp)
10013010:	0007cac0 	call	10007cac <__umodsi3>
10013014:	1004943a 	slli	r2,r2,16
10013018:	da000417 	ldw	r8,16(sp)
1001301c:	bdffffcc 	andi	r23,r23,65535
10013020:	b884b03a 	or	r2,r23,r2
10013024:	d8c00217 	ldw	r3,8(sp)
10013028:	1200062e 	bgeu	r2,r8,10013044 <__divdf3+0x424>
1001302c:	1585883a 	add	r2,r2,r22
10013030:	813fffc4 	addi	r4,r16,-1
10013034:	15810236 	bltu	r2,r22,10013440 <__divdf3+0x820>
10013038:	1201012e 	bgeu	r2,r8,10013440 <__divdf3+0x820>
1001303c:	843fff84 	addi	r16,r16,-2
10013040:	1585883a 	add	r2,r2,r22
10013044:	8822943a 	slli	r17,r17,16
10013048:	d9800017 	ldw	r6,0(sp)
1001304c:	1211c83a 	sub	r8,r2,r8
10013050:	8c22b03a 	or	r17,r17,r16
10013054:	373fffcc 	andi	fp,r6,65535
10013058:	8abfffcc 	andi	r10,r17,65535
1001305c:	8820d43a 	srli	r16,r17,16
10013060:	5009883a 	mov	r4,r10
10013064:	e00b883a 	mov	r5,fp
10013068:	302ed43a 	srli	r23,r6,16
1001306c:	d8c00215 	stw	r3,8(sp)
10013070:	da000415 	stw	r8,16(sp)
10013074:	da800115 	stw	r10,4(sp)
10013078:	0007d040 	call	10007d04 <__mulsi3>
1001307c:	800b883a 	mov	r5,r16
10013080:	e009883a 	mov	r4,fp
10013084:	d8800515 	stw	r2,20(sp)
10013088:	0007d040 	call	10007d04 <__mulsi3>
1001308c:	8009883a 	mov	r4,r16
10013090:	b80b883a 	mov	r5,r23
10013094:	d8800315 	stw	r2,12(sp)
10013098:	0007d040 	call	10007d04 <__mulsi3>
1001309c:	da800117 	ldw	r10,4(sp)
100130a0:	b80b883a 	mov	r5,r23
100130a4:	1021883a 	mov	r16,r2
100130a8:	5009883a 	mov	r4,r10
100130ac:	0007d040 	call	10007d04 <__mulsi3>
100130b0:	d9c00517 	ldw	r7,20(sp)
100130b4:	da400317 	ldw	r9,12(sp)
100130b8:	d8c00217 	ldw	r3,8(sp)
100130bc:	3808d43a 	srli	r4,r7,16
100130c0:	1245883a 	add	r2,r2,r9
100130c4:	da000417 	ldw	r8,16(sp)
100130c8:	2085883a 	add	r2,r4,r2
100130cc:	1240022e 	bgeu	r2,r9,100130d8 <__divdf3+0x4b8>
100130d0:	01000074 	movhi	r4,1
100130d4:	8121883a 	add	r16,r16,r4
100130d8:	1008d43a 	srli	r4,r2,16
100130dc:	1004943a 	slli	r2,r2,16
100130e0:	39ffffcc 	andi	r7,r7,65535
100130e4:	2409883a 	add	r4,r4,r16
100130e8:	11c5883a 	add	r2,r2,r7
100130ec:	4100bb36 	bltu	r8,r4,100133dc <__divdf3+0x7bc>
100130f0:	4100d726 	beq	r8,r4,10013450 <__divdf3+0x830>
100130f4:	4109c83a 	sub	r4,r8,r4
100130f8:	a8a1c83a 	sub	r16,r21,r2
100130fc:	ac2b803a 	cmpltu	r21,r21,r16
10013100:	256bc83a 	sub	r21,r4,r21
10013104:	b540d926 	beq	r22,r21,1001346c <__divdf3+0x84c>
10013108:	a00b883a 	mov	r5,r20
1001310c:	a809883a 	mov	r4,r21
10013110:	d8c00215 	stw	r3,8(sp)
10013114:	0007c480 	call	10007c48 <__udivsi3>
10013118:	100b883a 	mov	r5,r2
1001311c:	9009883a 	mov	r4,r18
10013120:	d8800515 	stw	r2,20(sp)
10013124:	0007d040 	call	10007d04 <__mulsi3>
10013128:	a809883a 	mov	r4,r21
1001312c:	a00b883a 	mov	r5,r20
10013130:	d8800415 	stw	r2,16(sp)
10013134:	0007cac0 	call	10007cac <__umodsi3>
10013138:	1004943a 	slli	r2,r2,16
1001313c:	8008d43a 	srli	r4,r16,16
10013140:	da000417 	ldw	r8,16(sp)
10013144:	d8c00217 	ldw	r3,8(sp)
10013148:	2084b03a 	or	r2,r4,r2
1001314c:	d9c00517 	ldw	r7,20(sp)
10013150:	1200062e 	bgeu	r2,r8,1001316c <__divdf3+0x54c>
10013154:	1585883a 	add	r2,r2,r22
10013158:	393fffc4 	addi	r4,r7,-1
1001315c:	1580c536 	bltu	r2,r22,10013474 <__divdf3+0x854>
10013160:	1200c42e 	bgeu	r2,r8,10013474 <__divdf3+0x854>
10013164:	39ffff84 	addi	r7,r7,-2
10013168:	1585883a 	add	r2,r2,r22
1001316c:	122bc83a 	sub	r21,r2,r8
10013170:	a00b883a 	mov	r5,r20
10013174:	a809883a 	mov	r4,r21
10013178:	d8c00215 	stw	r3,8(sp)
1001317c:	d9c00515 	stw	r7,20(sp)
10013180:	0007c480 	call	10007c48 <__udivsi3>
10013184:	9009883a 	mov	r4,r18
10013188:	100b883a 	mov	r5,r2
1001318c:	d8800415 	stw	r2,16(sp)
10013190:	0007d040 	call	10007d04 <__mulsi3>
10013194:	a809883a 	mov	r4,r21
10013198:	a00b883a 	mov	r5,r20
1001319c:	1025883a 	mov	r18,r2
100131a0:	0007cac0 	call	10007cac <__umodsi3>
100131a4:	1004943a 	slli	r2,r2,16
100131a8:	813fffcc 	andi	r4,r16,65535
100131ac:	d8c00217 	ldw	r3,8(sp)
100131b0:	20a0b03a 	or	r16,r4,r2
100131b4:	d9c00517 	ldw	r7,20(sp)
100131b8:	da000417 	ldw	r8,16(sp)
100131bc:	8480062e 	bgeu	r16,r18,100131d8 <__divdf3+0x5b8>
100131c0:	85a1883a 	add	r16,r16,r22
100131c4:	40bfffc4 	addi	r2,r8,-1
100131c8:	8580ac36 	bltu	r16,r22,1001347c <__divdf3+0x85c>
100131cc:	8480ab2e 	bgeu	r16,r18,1001347c <__divdf3+0x85c>
100131d0:	423fff84 	addi	r8,r8,-2
100131d4:	85a1883a 	add	r16,r16,r22
100131d8:	3804943a 	slli	r2,r7,16
100131dc:	84a1c83a 	sub	r16,r16,r18
100131e0:	e009883a 	mov	r4,fp
100131e4:	1228b03a 	or	r20,r2,r8
100131e8:	a1ffffcc 	andi	r7,r20,65535
100131ec:	a024d43a 	srli	r18,r20,16
100131f0:	380b883a 	mov	r5,r7
100131f4:	d8c00215 	stw	r3,8(sp)
100131f8:	d9c00515 	stw	r7,20(sp)
100131fc:	0007d040 	call	10007d04 <__mulsi3>
10013200:	900b883a 	mov	r5,r18
10013204:	e009883a 	mov	r4,fp
10013208:	102b883a 	mov	r21,r2
1001320c:	0007d040 	call	10007d04 <__mulsi3>
10013210:	900b883a 	mov	r5,r18
10013214:	b809883a 	mov	r4,r23
10013218:	1039883a 	mov	fp,r2
1001321c:	0007d040 	call	10007d04 <__mulsi3>
10013220:	d9c00517 	ldw	r7,20(sp)
10013224:	b80b883a 	mov	r5,r23
10013228:	1025883a 	mov	r18,r2
1001322c:	3809883a 	mov	r4,r7
10013230:	0007d040 	call	10007d04 <__mulsi3>
10013234:	a808d43a 	srli	r4,r21,16
10013238:	1705883a 	add	r2,r2,fp
1001323c:	d8c00217 	ldw	r3,8(sp)
10013240:	2085883a 	add	r2,r4,r2
10013244:	1700022e 	bgeu	r2,fp,10013250 <__divdf3+0x630>
10013248:	01000074 	movhi	r4,1
1001324c:	9125883a 	add	r18,r18,r4
10013250:	1008d43a 	srli	r4,r2,16
10013254:	1004943a 	slli	r2,r2,16
10013258:	ad7fffcc 	andi	r21,r21,65535
1001325c:	2489883a 	add	r4,r4,r18
10013260:	1545883a 	add	r2,r2,r21
10013264:	81003836 	bltu	r16,r4,10013348 <__divdf3+0x728>
10013268:	81003626 	beq	r16,r4,10013344 <__divdf3+0x724>
1001326c:	a5000054 	ori	r20,r20,1
10013270:	1880ffc4 	addi	r2,r3,1023
10013274:	00bf2e0e 	bge	zero,r2,10012f30 <__alt_data_end+0xf8012f30>
10013278:	a10001cc 	andi	r4,r20,7
1001327c:	20000726 	beq	r4,zero,1001329c <__divdf3+0x67c>
10013280:	a10003cc 	andi	r4,r20,15
10013284:	01400104 	movi	r5,4
10013288:	21400426 	beq	r4,r5,1001329c <__divdf3+0x67c>
1001328c:	a149883a 	add	r4,r20,r5
10013290:	2529803a 	cmpltu	r20,r4,r20
10013294:	8d23883a 	add	r17,r17,r20
10013298:	2029883a 	mov	r20,r4
1001329c:	8900402c 	andhi	r4,r17,256
100132a0:	20000426 	beq	r4,zero,100132b4 <__divdf3+0x694>
100132a4:	18810004 	addi	r2,r3,1024
100132a8:	00ffc034 	movhi	r3,65280
100132ac:	18ffffc4 	addi	r3,r3,-1
100132b0:	88e2703a 	and	r17,r17,r3
100132b4:	00c1ff84 	movi	r3,2046
100132b8:	18beb416 	blt	r3,r2,10012d8c <__alt_data_end+0xf8012d8c>
100132bc:	a028d0fa 	srli	r20,r20,3
100132c0:	882a977a 	slli	r21,r17,29
100132c4:	8820927a 	slli	r16,r17,9
100132c8:	1081ffcc 	andi	r2,r2,2047
100132cc:	ad2ab03a 	or	r21,r21,r20
100132d0:	8020d33a 	srli	r16,r16,12
100132d4:	9900004c 	andi	r4,r19,1
100132d8:	003eb006 	br	10012d9c <__alt_data_end+0xf8012d9c>
100132dc:	8080022c 	andhi	r2,r16,8
100132e0:	10001226 	beq	r2,zero,1001332c <__divdf3+0x70c>
100132e4:	8880022c 	andhi	r2,r17,8
100132e8:	1000101e 	bne	r2,zero,1001332c <__divdf3+0x70c>
100132ec:	00800434 	movhi	r2,16
100132f0:	8c000234 	orhi	r16,r17,8
100132f4:	10bfffc4 	addi	r2,r2,-1
100132f8:	b809883a 	mov	r4,r23
100132fc:	80a0703a 	and	r16,r16,r2
10013300:	a02b883a 	mov	r21,r20
10013304:	003f0806 	br	10012f28 <__alt_data_end+0xf8012f28>
10013308:	008000c4 	movi	r2,3
1001330c:	3880b126 	beq	r7,r2,100135d4 <__divdf3+0x9b4>
10013310:	00800044 	movi	r2,1
10013314:	38805b1e 	bne	r7,r2,10013484 <__divdf3+0x864>
10013318:	e009883a 	mov	r4,fp
1001331c:	0005883a 	mov	r2,zero
10013320:	0021883a 	mov	r16,zero
10013324:	002b883a 	mov	r21,zero
10013328:	003e9c06 	br	10012d9c <__alt_data_end+0xf8012d9c>
1001332c:	00800434 	movhi	r2,16
10013330:	84000234 	orhi	r16,r16,8
10013334:	10bfffc4 	addi	r2,r2,-1
10013338:	b009883a 	mov	r4,r22
1001333c:	80a0703a 	and	r16,r16,r2
10013340:	003ef906 	br	10012f28 <__alt_data_end+0xf8012f28>
10013344:	103fca26 	beq	r2,zero,10013270 <__alt_data_end+0xf8013270>
10013348:	b421883a 	add	r16,r22,r16
1001334c:	a17fffc4 	addi	r5,r20,-1
10013350:	8580422e 	bgeu	r16,r22,1001345c <__divdf3+0x83c>
10013354:	2829883a 	mov	r20,r5
10013358:	813fc41e 	bne	r16,r4,1001326c <__alt_data_end+0xf801326c>
1001335c:	d9800017 	ldw	r6,0(sp)
10013360:	30bfc21e 	bne	r6,r2,1001326c <__alt_data_end+0xf801326c>
10013364:	003fc206 	br	10013270 <__alt_data_end+0xf8013270>
10013368:	143ff604 	addi	r16,r2,-40
1001336c:	8c20983a 	sll	r16,r17,r16
10013370:	002b883a 	mov	r21,zero
10013374:	003eb406 	br	10012e48 <__alt_data_end+0xf8012e48>
10013378:	d9800215 	stw	r6,8(sp)
1001337c:	d9c00515 	stw	r7,20(sp)
10013380:	da000415 	stw	r8,16(sp)
10013384:	0014bb40 	call	10014bb4 <__clzsi2>
10013388:	10800804 	addi	r2,r2,32
1001338c:	da000417 	ldw	r8,16(sp)
10013390:	d9c00517 	ldw	r7,20(sp)
10013394:	d9800217 	ldw	r6,8(sp)
10013398:	003ea106 	br	10012e20 <__alt_data_end+0xf8012e20>
1001339c:	147ff604 	addi	r17,r2,-40
100133a0:	3462983a 	sll	r17,r6,r17
100133a4:	0029883a 	mov	r20,zero
100133a8:	003ec906 	br	10012ed0 <__alt_data_end+0xf8012ed0>
100133ac:	3009883a 	mov	r4,r6
100133b0:	d9400115 	stw	r5,4(sp)
100133b4:	d9800215 	stw	r6,8(sp)
100133b8:	da000415 	stw	r8,16(sp)
100133bc:	da400315 	stw	r9,12(sp)
100133c0:	0014bb40 	call	10014bb4 <__clzsi2>
100133c4:	10800804 	addi	r2,r2,32
100133c8:	da400317 	ldw	r9,12(sp)
100133cc:	da000417 	ldw	r8,16(sp)
100133d0:	d9800217 	ldw	r6,8(sp)
100133d4:	d9400117 	ldw	r5,4(sp)
100133d8:	003eb306 	br	10012ea8 <__alt_data_end+0xf8012ea8>
100133dc:	d9800017 	ldw	r6,0(sp)
100133e0:	a9ab883a 	add	r21,r21,r6
100133e4:	a98b803a 	cmpltu	r5,r21,r6
100133e8:	2d8b883a 	add	r5,r5,r22
100133ec:	2a11883a 	add	r8,r5,r8
100133f0:	897fffc4 	addi	r5,r17,-1
100133f4:	b2000c2e 	bgeu	r22,r8,10013428 <__divdf3+0x808>
100133f8:	41003f36 	bltu	r8,r4,100134f8 <__divdf3+0x8d8>
100133fc:	22006c26 	beq	r4,r8,100135b0 <__divdf3+0x990>
10013400:	4109c83a 	sub	r4,r8,r4
10013404:	2823883a 	mov	r17,r5
10013408:	003f3b06 	br	100130f8 <__alt_data_end+0xf80130f8>
1001340c:	ad3ed336 	bltu	r21,r20,10012f5c <__alt_data_end+0xf8012f5c>
10013410:	a804d07a 	srli	r2,r21,1
10013414:	802e97fa 	slli	r23,r16,31
10013418:	a82a97fa 	slli	r21,r21,31
1001341c:	8020d07a 	srli	r16,r16,1
10013420:	b8aeb03a 	or	r23,r23,r2
10013424:	003ed006 	br	10012f68 <__alt_data_end+0xf8012f68>
10013428:	b23ff51e 	bne	r22,r8,10013400 <__alt_data_end+0xf8013400>
1001342c:	d9800017 	ldw	r6,0(sp)
10013430:	a9bff12e 	bgeu	r21,r6,100133f8 <__alt_data_end+0xf80133f8>
10013434:	b109c83a 	sub	r4,r22,r4
10013438:	2823883a 	mov	r17,r5
1001343c:	003f2e06 	br	100130f8 <__alt_data_end+0xf80130f8>
10013440:	2021883a 	mov	r16,r4
10013444:	003eff06 	br	10013044 <__alt_data_end+0xf8013044>
10013448:	2023883a 	mov	r17,r4
1001344c:	003ee406 	br	10012fe0 <__alt_data_end+0xf8012fe0>
10013450:	a8bfe236 	bltu	r21,r2,100133dc <__alt_data_end+0xf80133dc>
10013454:	0009883a 	mov	r4,zero
10013458:	003f2706 	br	100130f8 <__alt_data_end+0xf80130f8>
1001345c:	81002d36 	bltu	r16,r4,10013514 <__divdf3+0x8f4>
10013460:	24005626 	beq	r4,r16,100135bc <__divdf3+0x99c>
10013464:	2829883a 	mov	r20,r5
10013468:	003f8006 	br	1001326c <__alt_data_end+0xf801326c>
1001346c:	053fffc4 	movi	r20,-1
10013470:	003f7f06 	br	10013270 <__alt_data_end+0xf8013270>
10013474:	200f883a 	mov	r7,r4
10013478:	003f3c06 	br	1001316c <__alt_data_end+0xf801316c>
1001347c:	1011883a 	mov	r8,r2
10013480:	003f5506 	br	100131d8 <__alt_data_end+0xf80131d8>
10013484:	e027883a 	mov	r19,fp
10013488:	003f7906 	br	10013270 <__alt_data_end+0xf8013270>
1001348c:	010007c4 	movi	r4,31
10013490:	20c02816 	blt	r4,r3,10013534 <__divdf3+0x914>
10013494:	00800804 	movi	r2,32
10013498:	10c5c83a 	sub	r2,r2,r3
1001349c:	888a983a 	sll	r5,r17,r2
100134a0:	a0c8d83a 	srl	r4,r20,r3
100134a4:	a084983a 	sll	r2,r20,r2
100134a8:	88e2d83a 	srl	r17,r17,r3
100134ac:	2906b03a 	or	r3,r5,r4
100134b0:	1004c03a 	cmpne	r2,r2,zero
100134b4:	1886b03a 	or	r3,r3,r2
100134b8:	188001cc 	andi	r2,r3,7
100134bc:	10000726 	beq	r2,zero,100134dc <__divdf3+0x8bc>
100134c0:	188003cc 	andi	r2,r3,15
100134c4:	01000104 	movi	r4,4
100134c8:	11000426 	beq	r2,r4,100134dc <__divdf3+0x8bc>
100134cc:	1805883a 	mov	r2,r3
100134d0:	10c00104 	addi	r3,r2,4
100134d4:	1885803a 	cmpltu	r2,r3,r2
100134d8:	88a3883a 	add	r17,r17,r2
100134dc:	8880202c 	andhi	r2,r17,128
100134e0:	10002926 	beq	r2,zero,10013588 <__divdf3+0x968>
100134e4:	9900004c 	andi	r4,r19,1
100134e8:	00800044 	movi	r2,1
100134ec:	0021883a 	mov	r16,zero
100134f0:	002b883a 	mov	r21,zero
100134f4:	003e2906 	br	10012d9c <__alt_data_end+0xf8012d9c>
100134f8:	d9800017 	ldw	r6,0(sp)
100134fc:	8c7fff84 	addi	r17,r17,-2
10013500:	a9ab883a 	add	r21,r21,r6
10013504:	a98b803a 	cmpltu	r5,r21,r6
10013508:	2d8b883a 	add	r5,r5,r22
1001350c:	2a11883a 	add	r8,r5,r8
10013510:	003ef806 	br	100130f4 <__alt_data_end+0xf80130f4>
10013514:	d9800017 	ldw	r6,0(sp)
10013518:	318f883a 	add	r7,r6,r6
1001351c:	398b803a 	cmpltu	r5,r7,r6
10013520:	2d8d883a 	add	r6,r5,r22
10013524:	81a1883a 	add	r16,r16,r6
10013528:	a17fff84 	addi	r5,r20,-2
1001352c:	d9c00015 	stw	r7,0(sp)
10013530:	003f8806 	br	10013354 <__alt_data_end+0xf8013354>
10013534:	013ff844 	movi	r4,-31
10013538:	2085c83a 	sub	r2,r4,r2
1001353c:	8888d83a 	srl	r4,r17,r2
10013540:	00800804 	movi	r2,32
10013544:	18802126 	beq	r3,r2,100135cc <__divdf3+0x9ac>
10013548:	04001004 	movi	r16,64
1001354c:	80c7c83a 	sub	r3,r16,r3
10013550:	88e0983a 	sll	r16,r17,r3
10013554:	8504b03a 	or	r2,r16,r20
10013558:	1004c03a 	cmpne	r2,r2,zero
1001355c:	2084b03a 	or	r2,r4,r2
10013560:	144001cc 	andi	r17,r2,7
10013564:	88000d1e 	bne	r17,zero,1001359c <__divdf3+0x97c>
10013568:	0021883a 	mov	r16,zero
1001356c:	102ad0fa 	srli	r21,r2,3
10013570:	9900004c 	andi	r4,r19,1
10013574:	0005883a 	mov	r2,zero
10013578:	ac6ab03a 	or	r21,r21,r17
1001357c:	003e0706 	br	10012d9c <__alt_data_end+0xf8012d9c>
10013580:	1007883a 	mov	r3,r2
10013584:	0023883a 	mov	r17,zero
10013588:	8820927a 	slli	r16,r17,9
1001358c:	1805883a 	mov	r2,r3
10013590:	8822977a 	slli	r17,r17,29
10013594:	8020d33a 	srli	r16,r16,12
10013598:	003ff406 	br	1001356c <__alt_data_end+0xf801356c>
1001359c:	10c003cc 	andi	r3,r2,15
100135a0:	01000104 	movi	r4,4
100135a4:	193ff626 	beq	r3,r4,10013580 <__alt_data_end+0xf8013580>
100135a8:	0023883a 	mov	r17,zero
100135ac:	003fc806 	br	100134d0 <__alt_data_end+0xf80134d0>
100135b0:	a8bfd136 	bltu	r21,r2,100134f8 <__alt_data_end+0xf80134f8>
100135b4:	2823883a 	mov	r17,r5
100135b8:	003fa606 	br	10013454 <__alt_data_end+0xf8013454>
100135bc:	d9800017 	ldw	r6,0(sp)
100135c0:	30bfd436 	bltu	r6,r2,10013514 <__alt_data_end+0xf8013514>
100135c4:	2829883a 	mov	r20,r5
100135c8:	003f6406 	br	1001335c <__alt_data_end+0xf801335c>
100135cc:	0021883a 	mov	r16,zero
100135d0:	003fe006 	br	10013554 <__alt_data_end+0xf8013554>
100135d4:	00800434 	movhi	r2,16
100135d8:	8c000234 	orhi	r16,r17,8
100135dc:	10bfffc4 	addi	r2,r2,-1
100135e0:	e009883a 	mov	r4,fp
100135e4:	80a0703a 	and	r16,r16,r2
100135e8:	a02b883a 	mov	r21,r20
100135ec:	003e4e06 	br	10012f28 <__alt_data_end+0xf8012f28>

100135f0 <__eqdf2>:
100135f0:	2804d53a 	srli	r2,r5,20
100135f4:	3806d53a 	srli	r3,r7,20
100135f8:	02000434 	movhi	r8,16
100135fc:	423fffc4 	addi	r8,r8,-1
10013600:	1081ffcc 	andi	r2,r2,2047
10013604:	0281ffc4 	movi	r10,2047
10013608:	2a12703a 	and	r9,r5,r8
1001360c:	18c1ffcc 	andi	r3,r3,2047
10013610:	3a10703a 	and	r8,r7,r8
10013614:	280ad7fa 	srli	r5,r5,31
10013618:	380ed7fa 	srli	r7,r7,31
1001361c:	12801026 	beq	r2,r10,10013660 <__eqdf2+0x70>
10013620:	0281ffc4 	movi	r10,2047
10013624:	1a800a26 	beq	r3,r10,10013650 <__eqdf2+0x60>
10013628:	10c00226 	beq	r2,r3,10013634 <__eqdf2+0x44>
1001362c:	00800044 	movi	r2,1
10013630:	f800283a 	ret
10013634:	4a3ffd1e 	bne	r9,r8,1001362c <__alt_data_end+0xf801362c>
10013638:	21bffc1e 	bne	r4,r6,1001362c <__alt_data_end+0xf801362c>
1001363c:	29c00c26 	beq	r5,r7,10013670 <__eqdf2+0x80>
10013640:	103ffa1e 	bne	r2,zero,1001362c <__alt_data_end+0xf801362c>
10013644:	2244b03a 	or	r2,r4,r9
10013648:	1004c03a 	cmpne	r2,r2,zero
1001364c:	f800283a 	ret
10013650:	3214b03a 	or	r10,r6,r8
10013654:	503ff426 	beq	r10,zero,10013628 <__alt_data_end+0xf8013628>
10013658:	00800044 	movi	r2,1
1001365c:	f800283a 	ret
10013660:	2254b03a 	or	r10,r4,r9
10013664:	503fee26 	beq	r10,zero,10013620 <__alt_data_end+0xf8013620>
10013668:	00800044 	movi	r2,1
1001366c:	f800283a 	ret
10013670:	0005883a 	mov	r2,zero
10013674:	f800283a 	ret

10013678 <__gedf2>:
10013678:	2804d53a 	srli	r2,r5,20
1001367c:	3806d53a 	srli	r3,r7,20
10013680:	02000434 	movhi	r8,16
10013684:	423fffc4 	addi	r8,r8,-1
10013688:	1081ffcc 	andi	r2,r2,2047
1001368c:	0241ffc4 	movi	r9,2047
10013690:	2a14703a 	and	r10,r5,r8
10013694:	18c1ffcc 	andi	r3,r3,2047
10013698:	3a10703a 	and	r8,r7,r8
1001369c:	280ad7fa 	srli	r5,r5,31
100136a0:	380ed7fa 	srli	r7,r7,31
100136a4:	12401d26 	beq	r2,r9,1001371c <__gedf2+0xa4>
100136a8:	0241ffc4 	movi	r9,2047
100136ac:	1a401226 	beq	r3,r9,100136f8 <__gedf2+0x80>
100136b0:	1000081e 	bne	r2,zero,100136d4 <__gedf2+0x5c>
100136b4:	2296b03a 	or	r11,r4,r10
100136b8:	5813003a 	cmpeq	r9,r11,zero
100136bc:	1800091e 	bne	r3,zero,100136e4 <__gedf2+0x6c>
100136c0:	3218b03a 	or	r12,r6,r8
100136c4:	6000071e 	bne	r12,zero,100136e4 <__gedf2+0x6c>
100136c8:	0005883a 	mov	r2,zero
100136cc:	5800101e 	bne	r11,zero,10013710 <__gedf2+0x98>
100136d0:	f800283a 	ret
100136d4:	18000c1e 	bne	r3,zero,10013708 <__gedf2+0x90>
100136d8:	3212b03a 	or	r9,r6,r8
100136dc:	48000c26 	beq	r9,zero,10013710 <__gedf2+0x98>
100136e0:	0013883a 	mov	r9,zero
100136e4:	39c03fcc 	andi	r7,r7,255
100136e8:	48000826 	beq	r9,zero,1001370c <__gedf2+0x94>
100136ec:	38000926 	beq	r7,zero,10013714 <__gedf2+0x9c>
100136f0:	00800044 	movi	r2,1
100136f4:	f800283a 	ret
100136f8:	3212b03a 	or	r9,r6,r8
100136fc:	483fec26 	beq	r9,zero,100136b0 <__alt_data_end+0xf80136b0>
10013700:	00bfff84 	movi	r2,-2
10013704:	f800283a 	ret
10013708:	39c03fcc 	andi	r7,r7,255
1001370c:	29c00626 	beq	r5,r7,10013728 <__gedf2+0xb0>
10013710:	283ff726 	beq	r5,zero,100136f0 <__alt_data_end+0xf80136f0>
10013714:	00bfffc4 	movi	r2,-1
10013718:	f800283a 	ret
1001371c:	2292b03a 	or	r9,r4,r10
10013720:	483fe126 	beq	r9,zero,100136a8 <__alt_data_end+0xf80136a8>
10013724:	003ff606 	br	10013700 <__alt_data_end+0xf8013700>
10013728:	18bff916 	blt	r3,r2,10013710 <__alt_data_end+0xf8013710>
1001372c:	10c00316 	blt	r2,r3,1001373c <__gedf2+0xc4>
10013730:	42bff736 	bltu	r8,r10,10013710 <__alt_data_end+0xf8013710>
10013734:	52000326 	beq	r10,r8,10013744 <__gedf2+0xcc>
10013738:	5200042e 	bgeu	r10,r8,1001374c <__gedf2+0xd4>
1001373c:	283fec1e 	bne	r5,zero,100136f0 <__alt_data_end+0xf80136f0>
10013740:	003ff406 	br	10013714 <__alt_data_end+0xf8013714>
10013744:	313ff236 	bltu	r6,r4,10013710 <__alt_data_end+0xf8013710>
10013748:	21bffc36 	bltu	r4,r6,1001373c <__alt_data_end+0xf801373c>
1001374c:	0005883a 	mov	r2,zero
10013750:	f800283a 	ret

10013754 <__ledf2>:
10013754:	2804d53a 	srli	r2,r5,20
10013758:	3810d53a 	srli	r8,r7,20
1001375c:	00c00434 	movhi	r3,16
10013760:	18ffffc4 	addi	r3,r3,-1
10013764:	1081ffcc 	andi	r2,r2,2047
10013768:	0241ffc4 	movi	r9,2047
1001376c:	28d4703a 	and	r10,r5,r3
10013770:	4201ffcc 	andi	r8,r8,2047
10013774:	38c6703a 	and	r3,r7,r3
10013778:	280ad7fa 	srli	r5,r5,31
1001377c:	380ed7fa 	srli	r7,r7,31
10013780:	12401f26 	beq	r2,r9,10013800 <__ledf2+0xac>
10013784:	0241ffc4 	movi	r9,2047
10013788:	42401426 	beq	r8,r9,100137dc <__ledf2+0x88>
1001378c:	1000091e 	bne	r2,zero,100137b4 <__ledf2+0x60>
10013790:	2296b03a 	or	r11,r4,r10
10013794:	5813003a 	cmpeq	r9,r11,zero
10013798:	29403fcc 	andi	r5,r5,255
1001379c:	40000a1e 	bne	r8,zero,100137c8 <__ledf2+0x74>
100137a0:	30d8b03a 	or	r12,r6,r3
100137a4:	6000081e 	bne	r12,zero,100137c8 <__ledf2+0x74>
100137a8:	0005883a 	mov	r2,zero
100137ac:	5800111e 	bne	r11,zero,100137f4 <__ledf2+0xa0>
100137b0:	f800283a 	ret
100137b4:	29403fcc 	andi	r5,r5,255
100137b8:	40000c1e 	bne	r8,zero,100137ec <__ledf2+0x98>
100137bc:	30d2b03a 	or	r9,r6,r3
100137c0:	48000c26 	beq	r9,zero,100137f4 <__ledf2+0xa0>
100137c4:	0013883a 	mov	r9,zero
100137c8:	39c03fcc 	andi	r7,r7,255
100137cc:	48000826 	beq	r9,zero,100137f0 <__ledf2+0x9c>
100137d0:	38001126 	beq	r7,zero,10013818 <__ledf2+0xc4>
100137d4:	00800044 	movi	r2,1
100137d8:	f800283a 	ret
100137dc:	30d2b03a 	or	r9,r6,r3
100137e0:	483fea26 	beq	r9,zero,1001378c <__alt_data_end+0xf801378c>
100137e4:	00800084 	movi	r2,2
100137e8:	f800283a 	ret
100137ec:	39c03fcc 	andi	r7,r7,255
100137f0:	39400726 	beq	r7,r5,10013810 <__ledf2+0xbc>
100137f4:	2800081e 	bne	r5,zero,10013818 <__ledf2+0xc4>
100137f8:	00800044 	movi	r2,1
100137fc:	f800283a 	ret
10013800:	2292b03a 	or	r9,r4,r10
10013804:	483fdf26 	beq	r9,zero,10013784 <__alt_data_end+0xf8013784>
10013808:	00800084 	movi	r2,2
1001380c:	f800283a 	ret
10013810:	4080030e 	bge	r8,r2,10013820 <__ledf2+0xcc>
10013814:	383fef26 	beq	r7,zero,100137d4 <__alt_data_end+0xf80137d4>
10013818:	00bfffc4 	movi	r2,-1
1001381c:	f800283a 	ret
10013820:	123feb16 	blt	r2,r8,100137d0 <__alt_data_end+0xf80137d0>
10013824:	1abff336 	bltu	r3,r10,100137f4 <__alt_data_end+0xf80137f4>
10013828:	50c00326 	beq	r10,r3,10013838 <__ledf2+0xe4>
1001382c:	50c0042e 	bgeu	r10,r3,10013840 <__ledf2+0xec>
10013830:	283fe81e 	bne	r5,zero,100137d4 <__alt_data_end+0xf80137d4>
10013834:	003ff806 	br	10013818 <__alt_data_end+0xf8013818>
10013838:	313fee36 	bltu	r6,r4,100137f4 <__alt_data_end+0xf80137f4>
1001383c:	21bffc36 	bltu	r4,r6,10013830 <__alt_data_end+0xf8013830>
10013840:	0005883a 	mov	r2,zero
10013844:	f800283a 	ret

10013848 <__muldf3>:
10013848:	deffee04 	addi	sp,sp,-72
1001384c:	dd000c15 	stw	r20,48(sp)
10013850:	2828d53a 	srli	r20,r5,20
10013854:	ddc00f15 	stw	r23,60(sp)
10013858:	282ed7fa 	srli	r23,r5,31
1001385c:	dc000815 	stw	r16,32(sp)
10013860:	04000434 	movhi	r16,16
10013864:	dcc00b15 	stw	r19,44(sp)
10013868:	843fffc4 	addi	r16,r16,-1
1001386c:	dfc01115 	stw	ra,68(sp)
10013870:	df001015 	stw	fp,64(sp)
10013874:	dd800e15 	stw	r22,56(sp)
10013878:	dd400d15 	stw	r21,52(sp)
1001387c:	dc800a15 	stw	r18,40(sp)
10013880:	dc400915 	stw	r17,36(sp)
10013884:	a501ffcc 	andi	r20,r20,2047
10013888:	2c20703a 	and	r16,r5,r16
1001388c:	b827883a 	mov	r19,r23
10013890:	ba403fcc 	andi	r9,r23,255
10013894:	a0006026 	beq	r20,zero,10013a18 <__muldf3+0x1d0>
10013898:	0081ffc4 	movi	r2,2047
1001389c:	202d883a 	mov	r22,r4
100138a0:	a0803626 	beq	r20,r2,1001397c <__muldf3+0x134>
100138a4:	84000434 	orhi	r16,r16,16
100138a8:	200ad77a 	srli	r5,r4,29
100138ac:	800490fa 	slli	r2,r16,3
100138b0:	202c90fa 	slli	r22,r4,3
100138b4:	a53f0044 	addi	r20,r20,-1023
100138b8:	28a0b03a 	or	r16,r5,r2
100138bc:	002b883a 	mov	r21,zero
100138c0:	000b883a 	mov	r5,zero
100138c4:	3804d53a 	srli	r2,r7,20
100138c8:	3838d7fa 	srli	fp,r7,31
100138cc:	04400434 	movhi	r17,16
100138d0:	8c7fffc4 	addi	r17,r17,-1
100138d4:	1081ffcc 	andi	r2,r2,2047
100138d8:	3025883a 	mov	r18,r6
100138dc:	3c62703a 	and	r17,r7,r17
100138e0:	e2803fcc 	andi	r10,fp,255
100138e4:	10006d26 	beq	r2,zero,10013a9c <__muldf3+0x254>
100138e8:	00c1ffc4 	movi	r3,2047
100138ec:	10c06526 	beq	r2,r3,10013a84 <__muldf3+0x23c>
100138f0:	8c400434 	orhi	r17,r17,16
100138f4:	300ed77a 	srli	r7,r6,29
100138f8:	880690fa 	slli	r3,r17,3
100138fc:	302490fa 	slli	r18,r6,3
10013900:	10bf0044 	addi	r2,r2,-1023
10013904:	38e2b03a 	or	r17,r7,r3
10013908:	000f883a 	mov	r7,zero
1001390c:	a087883a 	add	r3,r20,r2
10013910:	010003c4 	movi	r4,15
10013914:	3d44b03a 	or	r2,r7,r21
10013918:	e5ccf03a 	xor	r6,fp,r23
1001391c:	1a000044 	addi	r8,r3,1
10013920:	20809b36 	bltu	r4,r2,10013b90 <__muldf3+0x348>
10013924:	100490ba 	slli	r2,r2,2
10013928:	01040074 	movhi	r4,4097
1001392c:	210e4f04 	addi	r4,r4,14652
10013930:	1105883a 	add	r2,r2,r4
10013934:	10800017 	ldw	r2,0(r2)
10013938:	1000683a 	jmp	r2
1001393c:	10013b90 	cmplti	zero,r2,1262
10013940:	1001399c 	xori	zero,r2,1254
10013944:	1001399c 	xori	zero,r2,1254
10013948:	10013998 	cmpnei	zero,r2,1254
1001394c:	10013b6c 	andhi	zero,r2,1261
10013950:	10013b6c 	andhi	zero,r2,1261
10013954:	10013b54 	ori	zero,r2,1261
10013958:	10013998 	cmpnei	zero,r2,1254
1001395c:	10013b6c 	andhi	zero,r2,1261
10013960:	10013b54 	ori	zero,r2,1261
10013964:	10013b6c 	andhi	zero,r2,1261
10013968:	10013998 	cmpnei	zero,r2,1254
1001396c:	10013b7c 	xorhi	zero,r2,1261
10013970:	10013b7c 	xorhi	zero,r2,1261
10013974:	10013b7c 	xorhi	zero,r2,1261
10013978:	10013edc 	xori	zero,r2,1275
1001397c:	2404b03a 	or	r2,r4,r16
10013980:	1000711e 	bne	r2,zero,10013b48 <__muldf3+0x300>
10013984:	05400204 	movi	r21,8
10013988:	0021883a 	mov	r16,zero
1001398c:	002d883a 	mov	r22,zero
10013990:	01400084 	movi	r5,2
10013994:	003fcb06 	br	100138c4 <__alt_data_end+0xf80138c4>
10013998:	500d883a 	mov	r6,r10
1001399c:	00800084 	movi	r2,2
100139a0:	38805926 	beq	r7,r2,10013b08 <__muldf3+0x2c0>
100139a4:	008000c4 	movi	r2,3
100139a8:	3881bb26 	beq	r7,r2,10014098 <__muldf3+0x850>
100139ac:	00800044 	movi	r2,1
100139b0:	3881961e 	bne	r7,r2,1001400c <__muldf3+0x7c4>
100139b4:	3027883a 	mov	r19,r6
100139b8:	0005883a 	mov	r2,zero
100139bc:	0021883a 	mov	r16,zero
100139c0:	002d883a 	mov	r22,zero
100139c4:	1004953a 	slli	r2,r2,20
100139c8:	98c03fcc 	andi	r3,r19,255
100139cc:	04400434 	movhi	r17,16
100139d0:	8c7fffc4 	addi	r17,r17,-1
100139d4:	180697fa 	slli	r3,r3,31
100139d8:	8460703a 	and	r16,r16,r17
100139dc:	80a0b03a 	or	r16,r16,r2
100139e0:	80c6b03a 	or	r3,r16,r3
100139e4:	b005883a 	mov	r2,r22
100139e8:	dfc01117 	ldw	ra,68(sp)
100139ec:	df001017 	ldw	fp,64(sp)
100139f0:	ddc00f17 	ldw	r23,60(sp)
100139f4:	dd800e17 	ldw	r22,56(sp)
100139f8:	dd400d17 	ldw	r21,52(sp)
100139fc:	dd000c17 	ldw	r20,48(sp)
10013a00:	dcc00b17 	ldw	r19,44(sp)
10013a04:	dc800a17 	ldw	r18,40(sp)
10013a08:	dc400917 	ldw	r17,36(sp)
10013a0c:	dc000817 	ldw	r16,32(sp)
10013a10:	dec01204 	addi	sp,sp,72
10013a14:	f800283a 	ret
10013a18:	2404b03a 	or	r2,r4,r16
10013a1c:	202b883a 	mov	r21,r4
10013a20:	10004426 	beq	r2,zero,10013b34 <__muldf3+0x2ec>
10013a24:	80015126 	beq	r16,zero,10013f6c <__muldf3+0x724>
10013a28:	8009883a 	mov	r4,r16
10013a2c:	d9800715 	stw	r6,28(sp)
10013a30:	d9c00215 	stw	r7,8(sp)
10013a34:	da400415 	stw	r9,16(sp)
10013a38:	0014bb40 	call	10014bb4 <__clzsi2>
10013a3c:	d9800717 	ldw	r6,28(sp)
10013a40:	d9c00217 	ldw	r7,8(sp)
10013a44:	da400417 	ldw	r9,16(sp)
10013a48:	113ffd44 	addi	r4,r2,-11
10013a4c:	00c00704 	movi	r3,28
10013a50:	19014216 	blt	r3,r4,10013f5c <__muldf3+0x714>
10013a54:	00c00744 	movi	r3,29
10013a58:	15bffe04 	addi	r22,r2,-8
10013a5c:	1907c83a 	sub	r3,r3,r4
10013a60:	85a0983a 	sll	r16,r16,r22
10013a64:	a8c6d83a 	srl	r3,r21,r3
10013a68:	adac983a 	sll	r22,r21,r22
10013a6c:	1c20b03a 	or	r16,r3,r16
10013a70:	1080fcc4 	addi	r2,r2,1011
10013a74:	00a9c83a 	sub	r20,zero,r2
10013a78:	002b883a 	mov	r21,zero
10013a7c:	000b883a 	mov	r5,zero
10013a80:	003f9006 	br	100138c4 <__alt_data_end+0xf80138c4>
10013a84:	3446b03a 	or	r3,r6,r17
10013a88:	1800281e 	bne	r3,zero,10013b2c <__muldf3+0x2e4>
10013a8c:	0023883a 	mov	r17,zero
10013a90:	0025883a 	mov	r18,zero
10013a94:	01c00084 	movi	r7,2
10013a98:	003f9c06 	br	1001390c <__alt_data_end+0xf801390c>
10013a9c:	3446b03a 	or	r3,r6,r17
10013aa0:	18001e26 	beq	r3,zero,10013b1c <__muldf3+0x2d4>
10013aa4:	88012126 	beq	r17,zero,10013f2c <__muldf3+0x6e4>
10013aa8:	8809883a 	mov	r4,r17
10013aac:	d9400215 	stw	r5,8(sp)
10013ab0:	d9800715 	stw	r6,28(sp)
10013ab4:	da400415 	stw	r9,16(sp)
10013ab8:	da800315 	stw	r10,12(sp)
10013abc:	0014bb40 	call	10014bb4 <__clzsi2>
10013ac0:	d9400217 	ldw	r5,8(sp)
10013ac4:	d9800717 	ldw	r6,28(sp)
10013ac8:	da400417 	ldw	r9,16(sp)
10013acc:	da800317 	ldw	r10,12(sp)
10013ad0:	113ffd44 	addi	r4,r2,-11
10013ad4:	00c00704 	movi	r3,28
10013ad8:	19011016 	blt	r3,r4,10013f1c <__muldf3+0x6d4>
10013adc:	00c00744 	movi	r3,29
10013ae0:	14bffe04 	addi	r18,r2,-8
10013ae4:	1907c83a 	sub	r3,r3,r4
10013ae8:	8ca2983a 	sll	r17,r17,r18
10013aec:	30c6d83a 	srl	r3,r6,r3
10013af0:	34a4983a 	sll	r18,r6,r18
10013af4:	1c62b03a 	or	r17,r3,r17
10013af8:	1080fcc4 	addi	r2,r2,1011
10013afc:	0085c83a 	sub	r2,zero,r2
10013b00:	000f883a 	mov	r7,zero
10013b04:	003f8106 	br	1001390c <__alt_data_end+0xf801390c>
10013b08:	3027883a 	mov	r19,r6
10013b0c:	0081ffc4 	movi	r2,2047
10013b10:	0021883a 	mov	r16,zero
10013b14:	002d883a 	mov	r22,zero
10013b18:	003faa06 	br	100139c4 <__alt_data_end+0xf80139c4>
10013b1c:	0023883a 	mov	r17,zero
10013b20:	0025883a 	mov	r18,zero
10013b24:	01c00044 	movi	r7,1
10013b28:	003f7806 	br	1001390c <__alt_data_end+0xf801390c>
10013b2c:	01c000c4 	movi	r7,3
10013b30:	003f7606 	br	1001390c <__alt_data_end+0xf801390c>
10013b34:	05400104 	movi	r21,4
10013b38:	0021883a 	mov	r16,zero
10013b3c:	002d883a 	mov	r22,zero
10013b40:	01400044 	movi	r5,1
10013b44:	003f5f06 	br	100138c4 <__alt_data_end+0xf80138c4>
10013b48:	05400304 	movi	r21,12
10013b4c:	014000c4 	movi	r5,3
10013b50:	003f5c06 	br	100138c4 <__alt_data_end+0xf80138c4>
10013b54:	04000434 	movhi	r16,16
10013b58:	0027883a 	mov	r19,zero
10013b5c:	843fffc4 	addi	r16,r16,-1
10013b60:	05bfffc4 	movi	r22,-1
10013b64:	0081ffc4 	movi	r2,2047
10013b68:	003f9606 	br	100139c4 <__alt_data_end+0xf80139c4>
10013b6c:	8023883a 	mov	r17,r16
10013b70:	b025883a 	mov	r18,r22
10013b74:	280f883a 	mov	r7,r5
10013b78:	003f8806 	br	1001399c <__alt_data_end+0xf801399c>
10013b7c:	8023883a 	mov	r17,r16
10013b80:	b025883a 	mov	r18,r22
10013b84:	480d883a 	mov	r6,r9
10013b88:	280f883a 	mov	r7,r5
10013b8c:	003f8306 	br	1001399c <__alt_data_end+0xf801399c>
10013b90:	b026d43a 	srli	r19,r22,16
10013b94:	902ed43a 	srli	r23,r18,16
10013b98:	b5bfffcc 	andi	r22,r22,65535
10013b9c:	94bfffcc 	andi	r18,r18,65535
10013ba0:	b00b883a 	mov	r5,r22
10013ba4:	9009883a 	mov	r4,r18
10013ba8:	d8c00515 	stw	r3,20(sp)
10013bac:	d9800715 	stw	r6,28(sp)
10013bb0:	da000615 	stw	r8,24(sp)
10013bb4:	0007d040 	call	10007d04 <__mulsi3>
10013bb8:	980b883a 	mov	r5,r19
10013bbc:	9009883a 	mov	r4,r18
10013bc0:	1029883a 	mov	r20,r2
10013bc4:	0007d040 	call	10007d04 <__mulsi3>
10013bc8:	b80b883a 	mov	r5,r23
10013bcc:	9809883a 	mov	r4,r19
10013bd0:	102b883a 	mov	r21,r2
10013bd4:	0007d040 	call	10007d04 <__mulsi3>
10013bd8:	b809883a 	mov	r4,r23
10013bdc:	b00b883a 	mov	r5,r22
10013be0:	1039883a 	mov	fp,r2
10013be4:	0007d040 	call	10007d04 <__mulsi3>
10013be8:	a008d43a 	srli	r4,r20,16
10013bec:	1545883a 	add	r2,r2,r21
10013bf0:	d8c00517 	ldw	r3,20(sp)
10013bf4:	2085883a 	add	r2,r4,r2
10013bf8:	d9800717 	ldw	r6,28(sp)
10013bfc:	da000617 	ldw	r8,24(sp)
10013c00:	1540022e 	bgeu	r2,r21,10013c0c <__muldf3+0x3c4>
10013c04:	01000074 	movhi	r4,1
10013c08:	e139883a 	add	fp,fp,r4
10013c0c:	100e943a 	slli	r7,r2,16
10013c10:	1004d43a 	srli	r2,r2,16
10013c14:	882ad43a 	srli	r21,r17,16
10013c18:	a53fffcc 	andi	r20,r20,65535
10013c1c:	8c7fffcc 	andi	r17,r17,65535
10013c20:	3d29883a 	add	r20,r7,r20
10013c24:	b00b883a 	mov	r5,r22
10013c28:	8809883a 	mov	r4,r17
10013c2c:	d8c00515 	stw	r3,20(sp)
10013c30:	d9800715 	stw	r6,28(sp)
10013c34:	da000615 	stw	r8,24(sp)
10013c38:	dd000115 	stw	r20,4(sp)
10013c3c:	d8800015 	stw	r2,0(sp)
10013c40:	0007d040 	call	10007d04 <__mulsi3>
10013c44:	980b883a 	mov	r5,r19
10013c48:	8809883a 	mov	r4,r17
10013c4c:	d8800215 	stw	r2,8(sp)
10013c50:	0007d040 	call	10007d04 <__mulsi3>
10013c54:	9809883a 	mov	r4,r19
10013c58:	a80b883a 	mov	r5,r21
10013c5c:	1029883a 	mov	r20,r2
10013c60:	0007d040 	call	10007d04 <__mulsi3>
10013c64:	b00b883a 	mov	r5,r22
10013c68:	a809883a 	mov	r4,r21
10013c6c:	d8800415 	stw	r2,16(sp)
10013c70:	0007d040 	call	10007d04 <__mulsi3>
10013c74:	d9c00217 	ldw	r7,8(sp)
10013c78:	1505883a 	add	r2,r2,r20
10013c7c:	d8c00517 	ldw	r3,20(sp)
10013c80:	3826d43a 	srli	r19,r7,16
10013c84:	d9800717 	ldw	r6,28(sp)
10013c88:	da000617 	ldw	r8,24(sp)
10013c8c:	9885883a 	add	r2,r19,r2
10013c90:	da400417 	ldw	r9,16(sp)
10013c94:	1500022e 	bgeu	r2,r20,10013ca0 <__muldf3+0x458>
10013c98:	01000074 	movhi	r4,1
10013c9c:	4913883a 	add	r9,r9,r4
10013ca0:	1028d43a 	srli	r20,r2,16
10013ca4:	1004943a 	slli	r2,r2,16
10013ca8:	802cd43a 	srli	r22,r16,16
10013cac:	843fffcc 	andi	r16,r16,65535
10013cb0:	3cffffcc 	andi	r19,r7,65535
10013cb4:	9009883a 	mov	r4,r18
10013cb8:	800b883a 	mov	r5,r16
10013cbc:	a269883a 	add	r20,r20,r9
10013cc0:	d8c00515 	stw	r3,20(sp)
10013cc4:	d9800715 	stw	r6,28(sp)
10013cc8:	da000615 	stw	r8,24(sp)
10013ccc:	14e7883a 	add	r19,r2,r19
10013cd0:	0007d040 	call	10007d04 <__mulsi3>
10013cd4:	9009883a 	mov	r4,r18
10013cd8:	b00b883a 	mov	r5,r22
10013cdc:	d8800315 	stw	r2,12(sp)
10013ce0:	0007d040 	call	10007d04 <__mulsi3>
10013ce4:	b809883a 	mov	r4,r23
10013ce8:	b00b883a 	mov	r5,r22
10013cec:	d8800215 	stw	r2,8(sp)
10013cf0:	0007d040 	call	10007d04 <__mulsi3>
10013cf4:	b80b883a 	mov	r5,r23
10013cf8:	8009883a 	mov	r4,r16
10013cfc:	d8800415 	stw	r2,16(sp)
10013d00:	0007d040 	call	10007d04 <__mulsi3>
10013d04:	da800317 	ldw	r10,12(sp)
10013d08:	d9c00217 	ldw	r7,8(sp)
10013d0c:	d9000017 	ldw	r4,0(sp)
10013d10:	502ed43a 	srli	r23,r10,16
10013d14:	11c5883a 	add	r2,r2,r7
10013d18:	24e5883a 	add	r18,r4,r19
10013d1c:	b885883a 	add	r2,r23,r2
10013d20:	d8c00517 	ldw	r3,20(sp)
10013d24:	d9800717 	ldw	r6,28(sp)
10013d28:	da000617 	ldw	r8,24(sp)
10013d2c:	da400417 	ldw	r9,16(sp)
10013d30:	11c0022e 	bgeu	r2,r7,10013d3c <__muldf3+0x4f4>
10013d34:	01000074 	movhi	r4,1
10013d38:	4913883a 	add	r9,r9,r4
10013d3c:	100ed43a 	srli	r7,r2,16
10013d40:	1004943a 	slli	r2,r2,16
10013d44:	55ffffcc 	andi	r23,r10,65535
10013d48:	3a53883a 	add	r9,r7,r9
10013d4c:	8809883a 	mov	r4,r17
10013d50:	800b883a 	mov	r5,r16
10013d54:	d8c00515 	stw	r3,20(sp)
10013d58:	d9800715 	stw	r6,28(sp)
10013d5c:	da000615 	stw	r8,24(sp)
10013d60:	da400415 	stw	r9,16(sp)
10013d64:	15ef883a 	add	r23,r2,r23
10013d68:	0007d040 	call	10007d04 <__mulsi3>
10013d6c:	8809883a 	mov	r4,r17
10013d70:	b00b883a 	mov	r5,r22
10013d74:	d8800215 	stw	r2,8(sp)
10013d78:	0007d040 	call	10007d04 <__mulsi3>
10013d7c:	b00b883a 	mov	r5,r22
10013d80:	a809883a 	mov	r4,r21
10013d84:	d8800315 	stw	r2,12(sp)
10013d88:	0007d040 	call	10007d04 <__mulsi3>
10013d8c:	8009883a 	mov	r4,r16
10013d90:	a80b883a 	mov	r5,r21
10013d94:	1023883a 	mov	r17,r2
10013d98:	0007d040 	call	10007d04 <__mulsi3>
10013d9c:	d9c00217 	ldw	r7,8(sp)
10013da0:	da800317 	ldw	r10,12(sp)
10013da4:	d8c00517 	ldw	r3,20(sp)
10013da8:	3808d43a 	srli	r4,r7,16
10013dac:	1285883a 	add	r2,r2,r10
10013db0:	d9800717 	ldw	r6,28(sp)
10013db4:	2085883a 	add	r2,r4,r2
10013db8:	da000617 	ldw	r8,24(sp)
10013dbc:	da400417 	ldw	r9,16(sp)
10013dc0:	1280022e 	bgeu	r2,r10,10013dcc <__muldf3+0x584>
10013dc4:	01000074 	movhi	r4,1
10013dc8:	8923883a 	add	r17,r17,r4
10013dcc:	1008943a 	slli	r4,r2,16
10013dd0:	39ffffcc 	andi	r7,r7,65535
10013dd4:	e4b9883a 	add	fp,fp,r18
10013dd8:	21cf883a 	add	r7,r4,r7
10013ddc:	e4e7803a 	cmpltu	r19,fp,r19
10013de0:	3d0f883a 	add	r7,r7,r20
10013de4:	bf39883a 	add	fp,r23,fp
10013de8:	99c9883a 	add	r4,r19,r7
10013dec:	e5ef803a 	cmpltu	r23,fp,r23
10013df0:	490b883a 	add	r5,r9,r4
10013df4:	1004d43a 	srli	r2,r2,16
10013df8:	b965883a 	add	r18,r23,r5
10013dfc:	24c9803a 	cmpltu	r4,r4,r19
10013e00:	3d29803a 	cmpltu	r20,r7,r20
10013e04:	a128b03a 	or	r20,r20,r4
10013e08:	95ef803a 	cmpltu	r23,r18,r23
10013e0c:	2a53803a 	cmpltu	r9,r5,r9
10013e10:	a0a9883a 	add	r20,r20,r2
10013e14:	4deeb03a 	or	r23,r9,r23
10013e18:	a5ef883a 	add	r23,r20,r23
10013e1c:	bc63883a 	add	r17,r23,r17
10013e20:	e004927a 	slli	r2,fp,9
10013e24:	d9000117 	ldw	r4,4(sp)
10013e28:	882e927a 	slli	r23,r17,9
10013e2c:	9022d5fa 	srli	r17,r18,23
10013e30:	e038d5fa 	srli	fp,fp,23
10013e34:	1104b03a 	or	r2,r2,r4
10013e38:	9024927a 	slli	r18,r18,9
10013e3c:	1004c03a 	cmpne	r2,r2,zero
10013e40:	bc62b03a 	or	r17,r23,r17
10013e44:	1738b03a 	or	fp,r2,fp
10013e48:	8880402c 	andhi	r2,r17,256
10013e4c:	e4a4b03a 	or	r18,fp,r18
10013e50:	10000726 	beq	r2,zero,10013e70 <__muldf3+0x628>
10013e54:	9006d07a 	srli	r3,r18,1
10013e58:	880497fa 	slli	r2,r17,31
10013e5c:	9480004c 	andi	r18,r18,1
10013e60:	8822d07a 	srli	r17,r17,1
10013e64:	1ca4b03a 	or	r18,r3,r18
10013e68:	14a4b03a 	or	r18,r2,r18
10013e6c:	4007883a 	mov	r3,r8
10013e70:	1880ffc4 	addi	r2,r3,1023
10013e74:	0080460e 	bge	zero,r2,10013f90 <__muldf3+0x748>
10013e78:	910001cc 	andi	r4,r18,7
10013e7c:	20000726 	beq	r4,zero,10013e9c <__muldf3+0x654>
10013e80:	910003cc 	andi	r4,r18,15
10013e84:	01400104 	movi	r5,4
10013e88:	21400426 	beq	r4,r5,10013e9c <__muldf3+0x654>
10013e8c:	9149883a 	add	r4,r18,r5
10013e90:	24a5803a 	cmpltu	r18,r4,r18
10013e94:	8ca3883a 	add	r17,r17,r18
10013e98:	2025883a 	mov	r18,r4
10013e9c:	8900402c 	andhi	r4,r17,256
10013ea0:	20000426 	beq	r4,zero,10013eb4 <__muldf3+0x66c>
10013ea4:	18810004 	addi	r2,r3,1024
10013ea8:	00ffc034 	movhi	r3,65280
10013eac:	18ffffc4 	addi	r3,r3,-1
10013eb0:	88e2703a 	and	r17,r17,r3
10013eb4:	00c1ff84 	movi	r3,2046
10013eb8:	18bf1316 	blt	r3,r2,10013b08 <__alt_data_end+0xf8013b08>
10013ebc:	882c977a 	slli	r22,r17,29
10013ec0:	9024d0fa 	srli	r18,r18,3
10013ec4:	8822927a 	slli	r17,r17,9
10013ec8:	1081ffcc 	andi	r2,r2,2047
10013ecc:	b4acb03a 	or	r22,r22,r18
10013ed0:	8820d33a 	srli	r16,r17,12
10013ed4:	3027883a 	mov	r19,r6
10013ed8:	003eba06 	br	100139c4 <__alt_data_end+0xf80139c4>
10013edc:	8080022c 	andhi	r2,r16,8
10013ee0:	10000926 	beq	r2,zero,10013f08 <__muldf3+0x6c0>
10013ee4:	8880022c 	andhi	r2,r17,8
10013ee8:	1000071e 	bne	r2,zero,10013f08 <__muldf3+0x6c0>
10013eec:	00800434 	movhi	r2,16
10013ef0:	8c000234 	orhi	r16,r17,8
10013ef4:	10bfffc4 	addi	r2,r2,-1
10013ef8:	e027883a 	mov	r19,fp
10013efc:	80a0703a 	and	r16,r16,r2
10013f00:	902d883a 	mov	r22,r18
10013f04:	003f1706 	br	10013b64 <__alt_data_end+0xf8013b64>
10013f08:	00800434 	movhi	r2,16
10013f0c:	84000234 	orhi	r16,r16,8
10013f10:	10bfffc4 	addi	r2,r2,-1
10013f14:	80a0703a 	and	r16,r16,r2
10013f18:	003f1206 	br	10013b64 <__alt_data_end+0xf8013b64>
10013f1c:	147ff604 	addi	r17,r2,-40
10013f20:	3462983a 	sll	r17,r6,r17
10013f24:	0025883a 	mov	r18,zero
10013f28:	003ef306 	br	10013af8 <__alt_data_end+0xf8013af8>
10013f2c:	3009883a 	mov	r4,r6
10013f30:	d9400215 	stw	r5,8(sp)
10013f34:	d9800715 	stw	r6,28(sp)
10013f38:	da400415 	stw	r9,16(sp)
10013f3c:	da800315 	stw	r10,12(sp)
10013f40:	0014bb40 	call	10014bb4 <__clzsi2>
10013f44:	10800804 	addi	r2,r2,32
10013f48:	da800317 	ldw	r10,12(sp)
10013f4c:	da400417 	ldw	r9,16(sp)
10013f50:	d9800717 	ldw	r6,28(sp)
10013f54:	d9400217 	ldw	r5,8(sp)
10013f58:	003edd06 	br	10013ad0 <__alt_data_end+0xf8013ad0>
10013f5c:	143ff604 	addi	r16,r2,-40
10013f60:	ac20983a 	sll	r16,r21,r16
10013f64:	002d883a 	mov	r22,zero
10013f68:	003ec106 	br	10013a70 <__alt_data_end+0xf8013a70>
10013f6c:	d9800715 	stw	r6,28(sp)
10013f70:	d9c00215 	stw	r7,8(sp)
10013f74:	da400415 	stw	r9,16(sp)
10013f78:	0014bb40 	call	10014bb4 <__clzsi2>
10013f7c:	10800804 	addi	r2,r2,32
10013f80:	da400417 	ldw	r9,16(sp)
10013f84:	d9c00217 	ldw	r7,8(sp)
10013f88:	d9800717 	ldw	r6,28(sp)
10013f8c:	003eae06 	br	10013a48 <__alt_data_end+0xf8013a48>
10013f90:	00c00044 	movi	r3,1
10013f94:	1887c83a 	sub	r3,r3,r2
10013f98:	01000e04 	movi	r4,56
10013f9c:	20fe8516 	blt	r4,r3,100139b4 <__alt_data_end+0xf80139b4>
10013fa0:	010007c4 	movi	r4,31
10013fa4:	20c01b16 	blt	r4,r3,10014014 <__muldf3+0x7cc>
10013fa8:	00800804 	movi	r2,32
10013fac:	10c5c83a 	sub	r2,r2,r3
10013fb0:	888a983a 	sll	r5,r17,r2
10013fb4:	90c8d83a 	srl	r4,r18,r3
10013fb8:	9084983a 	sll	r2,r18,r2
10013fbc:	88e2d83a 	srl	r17,r17,r3
10013fc0:	2906b03a 	or	r3,r5,r4
10013fc4:	1004c03a 	cmpne	r2,r2,zero
10013fc8:	1886b03a 	or	r3,r3,r2
10013fcc:	188001cc 	andi	r2,r3,7
10013fd0:	10000726 	beq	r2,zero,10013ff0 <__muldf3+0x7a8>
10013fd4:	188003cc 	andi	r2,r3,15
10013fd8:	01000104 	movi	r4,4
10013fdc:	11000426 	beq	r2,r4,10013ff0 <__muldf3+0x7a8>
10013fe0:	1805883a 	mov	r2,r3
10013fe4:	10c00104 	addi	r3,r2,4
10013fe8:	1885803a 	cmpltu	r2,r3,r2
10013fec:	88a3883a 	add	r17,r17,r2
10013ff0:	8880202c 	andhi	r2,r17,128
10013ff4:	10001c26 	beq	r2,zero,10014068 <__muldf3+0x820>
10013ff8:	3027883a 	mov	r19,r6
10013ffc:	00800044 	movi	r2,1
10014000:	0021883a 	mov	r16,zero
10014004:	002d883a 	mov	r22,zero
10014008:	003e6e06 	br	100139c4 <__alt_data_end+0xf80139c4>
1001400c:	4007883a 	mov	r3,r8
10014010:	003f9706 	br	10013e70 <__alt_data_end+0xf8013e70>
10014014:	017ff844 	movi	r5,-31
10014018:	2885c83a 	sub	r2,r5,r2
1001401c:	888ad83a 	srl	r5,r17,r2
10014020:	00800804 	movi	r2,32
10014024:	18801a26 	beq	r3,r2,10014090 <__muldf3+0x848>
10014028:	01001004 	movi	r4,64
1001402c:	20c7c83a 	sub	r3,r4,r3
10014030:	88e2983a 	sll	r17,r17,r3
10014034:	8ca4b03a 	or	r18,r17,r18
10014038:	9004c03a 	cmpne	r2,r18,zero
1001403c:	2884b03a 	or	r2,r5,r2
10014040:	144001cc 	andi	r17,r2,7
10014044:	88000d1e 	bne	r17,zero,1001407c <__muldf3+0x834>
10014048:	0021883a 	mov	r16,zero
1001404c:	102cd0fa 	srli	r22,r2,3
10014050:	3027883a 	mov	r19,r6
10014054:	0005883a 	mov	r2,zero
10014058:	b46cb03a 	or	r22,r22,r17
1001405c:	003e5906 	br	100139c4 <__alt_data_end+0xf80139c4>
10014060:	1007883a 	mov	r3,r2
10014064:	0023883a 	mov	r17,zero
10014068:	8820927a 	slli	r16,r17,9
1001406c:	1805883a 	mov	r2,r3
10014070:	8822977a 	slli	r17,r17,29
10014074:	8020d33a 	srli	r16,r16,12
10014078:	003ff406 	br	1001404c <__alt_data_end+0xf801404c>
1001407c:	10c003cc 	andi	r3,r2,15
10014080:	01000104 	movi	r4,4
10014084:	193ff626 	beq	r3,r4,10014060 <__alt_data_end+0xf8014060>
10014088:	0023883a 	mov	r17,zero
1001408c:	003fd506 	br	10013fe4 <__alt_data_end+0xf8013fe4>
10014090:	0023883a 	mov	r17,zero
10014094:	003fe706 	br	10014034 <__alt_data_end+0xf8014034>
10014098:	00800434 	movhi	r2,16
1001409c:	8c000234 	orhi	r16,r17,8
100140a0:	10bfffc4 	addi	r2,r2,-1
100140a4:	3027883a 	mov	r19,r6
100140a8:	80a0703a 	and	r16,r16,r2
100140ac:	902d883a 	mov	r22,r18
100140b0:	003eac06 	br	10013b64 <__alt_data_end+0xf8013b64>

100140b4 <__subdf3>:
100140b4:	02000434 	movhi	r8,16
100140b8:	423fffc4 	addi	r8,r8,-1
100140bc:	defffb04 	addi	sp,sp,-20
100140c0:	2a14703a 	and	r10,r5,r8
100140c4:	3812d53a 	srli	r9,r7,20
100140c8:	3a10703a 	and	r8,r7,r8
100140cc:	2006d77a 	srli	r3,r4,29
100140d0:	3004d77a 	srli	r2,r6,29
100140d4:	dc000015 	stw	r16,0(sp)
100140d8:	501490fa 	slli	r10,r10,3
100140dc:	2820d53a 	srli	r16,r5,20
100140e0:	401090fa 	slli	r8,r8,3
100140e4:	dc800215 	stw	r18,8(sp)
100140e8:	dc400115 	stw	r17,4(sp)
100140ec:	dfc00415 	stw	ra,16(sp)
100140f0:	202290fa 	slli	r17,r4,3
100140f4:	dcc00315 	stw	r19,12(sp)
100140f8:	4a41ffcc 	andi	r9,r9,2047
100140fc:	0101ffc4 	movi	r4,2047
10014100:	2824d7fa 	srli	r18,r5,31
10014104:	8401ffcc 	andi	r16,r16,2047
10014108:	50c6b03a 	or	r3,r10,r3
1001410c:	380ed7fa 	srli	r7,r7,31
10014110:	408ab03a 	or	r5,r8,r2
10014114:	300c90fa 	slli	r6,r6,3
10014118:	49009626 	beq	r9,r4,10014374 <__subdf3+0x2c0>
1001411c:	39c0005c 	xori	r7,r7,1
10014120:	8245c83a 	sub	r2,r16,r9
10014124:	3c807426 	beq	r7,r18,100142f8 <__subdf3+0x244>
10014128:	0080af0e 	bge	zero,r2,100143e8 <__subdf3+0x334>
1001412c:	48002a1e 	bne	r9,zero,100141d8 <__subdf3+0x124>
10014130:	2988b03a 	or	r4,r5,r6
10014134:	20009a1e 	bne	r4,zero,100143a0 <__subdf3+0x2ec>
10014138:	888001cc 	andi	r2,r17,7
1001413c:	10000726 	beq	r2,zero,1001415c <__subdf3+0xa8>
10014140:	888003cc 	andi	r2,r17,15
10014144:	01000104 	movi	r4,4
10014148:	11000426 	beq	r2,r4,1001415c <__subdf3+0xa8>
1001414c:	890b883a 	add	r5,r17,r4
10014150:	2c63803a 	cmpltu	r17,r5,r17
10014154:	1c47883a 	add	r3,r3,r17
10014158:	2823883a 	mov	r17,r5
1001415c:	1880202c 	andhi	r2,r3,128
10014160:	10005926 	beq	r2,zero,100142c8 <__subdf3+0x214>
10014164:	84000044 	addi	r16,r16,1
10014168:	0081ffc4 	movi	r2,2047
1001416c:	8080be26 	beq	r16,r2,10014468 <__subdf3+0x3b4>
10014170:	017fe034 	movhi	r5,65408
10014174:	297fffc4 	addi	r5,r5,-1
10014178:	1946703a 	and	r3,r3,r5
1001417c:	1804977a 	slli	r2,r3,29
10014180:	1806927a 	slli	r3,r3,9
10014184:	8822d0fa 	srli	r17,r17,3
10014188:	8401ffcc 	andi	r16,r16,2047
1001418c:	180ad33a 	srli	r5,r3,12
10014190:	9100004c 	andi	r4,r18,1
10014194:	1444b03a 	or	r2,r2,r17
10014198:	80c1ffcc 	andi	r3,r16,2047
1001419c:	1820953a 	slli	r16,r3,20
100141a0:	20c03fcc 	andi	r3,r4,255
100141a4:	180897fa 	slli	r4,r3,31
100141a8:	00c00434 	movhi	r3,16
100141ac:	18ffffc4 	addi	r3,r3,-1
100141b0:	28c6703a 	and	r3,r5,r3
100141b4:	1c06b03a 	or	r3,r3,r16
100141b8:	1906b03a 	or	r3,r3,r4
100141bc:	dfc00417 	ldw	ra,16(sp)
100141c0:	dcc00317 	ldw	r19,12(sp)
100141c4:	dc800217 	ldw	r18,8(sp)
100141c8:	dc400117 	ldw	r17,4(sp)
100141cc:	dc000017 	ldw	r16,0(sp)
100141d0:	dec00504 	addi	sp,sp,20
100141d4:	f800283a 	ret
100141d8:	0101ffc4 	movi	r4,2047
100141dc:	813fd626 	beq	r16,r4,10014138 <__alt_data_end+0xf8014138>
100141e0:	29402034 	orhi	r5,r5,128
100141e4:	01000e04 	movi	r4,56
100141e8:	2080a316 	blt	r4,r2,10014478 <__subdf3+0x3c4>
100141ec:	010007c4 	movi	r4,31
100141f0:	2080c616 	blt	r4,r2,1001450c <__subdf3+0x458>
100141f4:	01000804 	movi	r4,32
100141f8:	2089c83a 	sub	r4,r4,r2
100141fc:	2910983a 	sll	r8,r5,r4
10014200:	308ed83a 	srl	r7,r6,r2
10014204:	3108983a 	sll	r4,r6,r4
10014208:	2884d83a 	srl	r2,r5,r2
1001420c:	41ccb03a 	or	r6,r8,r7
10014210:	2008c03a 	cmpne	r4,r4,zero
10014214:	310cb03a 	or	r6,r6,r4
10014218:	898dc83a 	sub	r6,r17,r6
1001421c:	89a3803a 	cmpltu	r17,r17,r6
10014220:	1887c83a 	sub	r3,r3,r2
10014224:	1c47c83a 	sub	r3,r3,r17
10014228:	3023883a 	mov	r17,r6
1001422c:	1880202c 	andhi	r2,r3,128
10014230:	10002326 	beq	r2,zero,100142c0 <__subdf3+0x20c>
10014234:	04c02034 	movhi	r19,128
10014238:	9cffffc4 	addi	r19,r19,-1
1001423c:	1ce6703a 	and	r19,r3,r19
10014240:	98007a26 	beq	r19,zero,1001442c <__subdf3+0x378>
10014244:	9809883a 	mov	r4,r19
10014248:	0014bb40 	call	10014bb4 <__clzsi2>
1001424c:	113ffe04 	addi	r4,r2,-8
10014250:	00c007c4 	movi	r3,31
10014254:	19007b16 	blt	r3,r4,10014444 <__subdf3+0x390>
10014258:	00800804 	movi	r2,32
1001425c:	1105c83a 	sub	r2,r2,r4
10014260:	8884d83a 	srl	r2,r17,r2
10014264:	9906983a 	sll	r3,r19,r4
10014268:	8922983a 	sll	r17,r17,r4
1001426c:	10c4b03a 	or	r2,r2,r3
10014270:	24007816 	blt	r4,r16,10014454 <__subdf3+0x3a0>
10014274:	2421c83a 	sub	r16,r4,r16
10014278:	80c00044 	addi	r3,r16,1
1001427c:	010007c4 	movi	r4,31
10014280:	20c09516 	blt	r4,r3,100144d8 <__subdf3+0x424>
10014284:	01400804 	movi	r5,32
10014288:	28cbc83a 	sub	r5,r5,r3
1001428c:	88c8d83a 	srl	r4,r17,r3
10014290:	8962983a 	sll	r17,r17,r5
10014294:	114a983a 	sll	r5,r2,r5
10014298:	10c6d83a 	srl	r3,r2,r3
1001429c:	8804c03a 	cmpne	r2,r17,zero
100142a0:	290ab03a 	or	r5,r5,r4
100142a4:	28a2b03a 	or	r17,r5,r2
100142a8:	0021883a 	mov	r16,zero
100142ac:	003fa206 	br	10014138 <__alt_data_end+0xf8014138>
100142b0:	2090b03a 	or	r8,r4,r2
100142b4:	40018e26 	beq	r8,zero,100148f0 <__subdf3+0x83c>
100142b8:	1007883a 	mov	r3,r2
100142bc:	2023883a 	mov	r17,r4
100142c0:	888001cc 	andi	r2,r17,7
100142c4:	103f9e1e 	bne	r2,zero,10014140 <__alt_data_end+0xf8014140>
100142c8:	1804977a 	slli	r2,r3,29
100142cc:	8822d0fa 	srli	r17,r17,3
100142d0:	1810d0fa 	srli	r8,r3,3
100142d4:	9100004c 	andi	r4,r18,1
100142d8:	1444b03a 	or	r2,r2,r17
100142dc:	00c1ffc4 	movi	r3,2047
100142e0:	80c02826 	beq	r16,r3,10014384 <__subdf3+0x2d0>
100142e4:	01400434 	movhi	r5,16
100142e8:	297fffc4 	addi	r5,r5,-1
100142ec:	80e0703a 	and	r16,r16,r3
100142f0:	414a703a 	and	r5,r8,r5
100142f4:	003fa806 	br	10014198 <__alt_data_end+0xf8014198>
100142f8:	0080630e 	bge	zero,r2,10014488 <__subdf3+0x3d4>
100142fc:	48003026 	beq	r9,zero,100143c0 <__subdf3+0x30c>
10014300:	0101ffc4 	movi	r4,2047
10014304:	813f8c26 	beq	r16,r4,10014138 <__alt_data_end+0xf8014138>
10014308:	29402034 	orhi	r5,r5,128
1001430c:	01000e04 	movi	r4,56
10014310:	2080a90e 	bge	r4,r2,100145b8 <__subdf3+0x504>
10014314:	298cb03a 	or	r6,r5,r6
10014318:	3012c03a 	cmpne	r9,r6,zero
1001431c:	0005883a 	mov	r2,zero
10014320:	4c53883a 	add	r9,r9,r17
10014324:	4c63803a 	cmpltu	r17,r9,r17
10014328:	10c7883a 	add	r3,r2,r3
1001432c:	88c7883a 	add	r3,r17,r3
10014330:	4823883a 	mov	r17,r9
10014334:	1880202c 	andhi	r2,r3,128
10014338:	1000d026 	beq	r2,zero,1001467c <__subdf3+0x5c8>
1001433c:	84000044 	addi	r16,r16,1
10014340:	0081ffc4 	movi	r2,2047
10014344:	8080fe26 	beq	r16,r2,10014740 <__subdf3+0x68c>
10014348:	00bfe034 	movhi	r2,65408
1001434c:	10bfffc4 	addi	r2,r2,-1
10014350:	1886703a 	and	r3,r3,r2
10014354:	880ad07a 	srli	r5,r17,1
10014358:	180497fa 	slli	r2,r3,31
1001435c:	8900004c 	andi	r4,r17,1
10014360:	2922b03a 	or	r17,r5,r4
10014364:	1806d07a 	srli	r3,r3,1
10014368:	1462b03a 	or	r17,r2,r17
1001436c:	3825883a 	mov	r18,r7
10014370:	003f7106 	br	10014138 <__alt_data_end+0xf8014138>
10014374:	2984b03a 	or	r2,r5,r6
10014378:	103f6826 	beq	r2,zero,1001411c <__alt_data_end+0xf801411c>
1001437c:	39c03fcc 	andi	r7,r7,255
10014380:	003f6706 	br	10014120 <__alt_data_end+0xf8014120>
10014384:	4086b03a 	or	r3,r8,r2
10014388:	18015226 	beq	r3,zero,100148d4 <__subdf3+0x820>
1001438c:	00c00434 	movhi	r3,16
10014390:	41400234 	orhi	r5,r8,8
10014394:	18ffffc4 	addi	r3,r3,-1
10014398:	28ca703a 	and	r5,r5,r3
1001439c:	003f7e06 	br	10014198 <__alt_data_end+0xf8014198>
100143a0:	10bfffc4 	addi	r2,r2,-1
100143a4:	1000491e 	bne	r2,zero,100144cc <__subdf3+0x418>
100143a8:	898fc83a 	sub	r7,r17,r6
100143ac:	89e3803a 	cmpltu	r17,r17,r7
100143b0:	1947c83a 	sub	r3,r3,r5
100143b4:	1c47c83a 	sub	r3,r3,r17
100143b8:	3823883a 	mov	r17,r7
100143bc:	003f9b06 	br	1001422c <__alt_data_end+0xf801422c>
100143c0:	2988b03a 	or	r4,r5,r6
100143c4:	203f5c26 	beq	r4,zero,10014138 <__alt_data_end+0xf8014138>
100143c8:	10bfffc4 	addi	r2,r2,-1
100143cc:	1000931e 	bne	r2,zero,1001461c <__subdf3+0x568>
100143d0:	898d883a 	add	r6,r17,r6
100143d4:	3463803a 	cmpltu	r17,r6,r17
100143d8:	1947883a 	add	r3,r3,r5
100143dc:	88c7883a 	add	r3,r17,r3
100143e0:	3023883a 	mov	r17,r6
100143e4:	003fd306 	br	10014334 <__alt_data_end+0xf8014334>
100143e8:	1000541e 	bne	r2,zero,1001453c <__subdf3+0x488>
100143ec:	80800044 	addi	r2,r16,1
100143f0:	1081ffcc 	andi	r2,r2,2047
100143f4:	01000044 	movi	r4,1
100143f8:	2080a20e 	bge	r4,r2,10014684 <__subdf3+0x5d0>
100143fc:	8989c83a 	sub	r4,r17,r6
10014400:	8905803a 	cmpltu	r2,r17,r4
10014404:	1967c83a 	sub	r19,r3,r5
10014408:	98a7c83a 	sub	r19,r19,r2
1001440c:	9880202c 	andhi	r2,r19,128
10014410:	10006326 	beq	r2,zero,100145a0 <__subdf3+0x4ec>
10014414:	3463c83a 	sub	r17,r6,r17
10014418:	28c7c83a 	sub	r3,r5,r3
1001441c:	344d803a 	cmpltu	r6,r6,r17
10014420:	19a7c83a 	sub	r19,r3,r6
10014424:	3825883a 	mov	r18,r7
10014428:	983f861e 	bne	r19,zero,10014244 <__alt_data_end+0xf8014244>
1001442c:	8809883a 	mov	r4,r17
10014430:	0014bb40 	call	10014bb4 <__clzsi2>
10014434:	10800804 	addi	r2,r2,32
10014438:	113ffe04 	addi	r4,r2,-8
1001443c:	00c007c4 	movi	r3,31
10014440:	193f850e 	bge	r3,r4,10014258 <__alt_data_end+0xf8014258>
10014444:	10bff604 	addi	r2,r2,-40
10014448:	8884983a 	sll	r2,r17,r2
1001444c:	0023883a 	mov	r17,zero
10014450:	243f880e 	bge	r4,r16,10014274 <__alt_data_end+0xf8014274>
10014454:	00ffe034 	movhi	r3,65408
10014458:	18ffffc4 	addi	r3,r3,-1
1001445c:	8121c83a 	sub	r16,r16,r4
10014460:	10c6703a 	and	r3,r2,r3
10014464:	003f3406 	br	10014138 <__alt_data_end+0xf8014138>
10014468:	9100004c 	andi	r4,r18,1
1001446c:	000b883a 	mov	r5,zero
10014470:	0005883a 	mov	r2,zero
10014474:	003f4806 	br	10014198 <__alt_data_end+0xf8014198>
10014478:	298cb03a 	or	r6,r5,r6
1001447c:	300cc03a 	cmpne	r6,r6,zero
10014480:	0005883a 	mov	r2,zero
10014484:	003f6406 	br	10014218 <__alt_data_end+0xf8014218>
10014488:	10009a1e 	bne	r2,zero,100146f4 <__subdf3+0x640>
1001448c:	82400044 	addi	r9,r16,1
10014490:	4881ffcc 	andi	r2,r9,2047
10014494:	02800044 	movi	r10,1
10014498:	5080670e 	bge	r10,r2,10014638 <__subdf3+0x584>
1001449c:	0081ffc4 	movi	r2,2047
100144a0:	4880af26 	beq	r9,r2,10014760 <__subdf3+0x6ac>
100144a4:	898d883a 	add	r6,r17,r6
100144a8:	1945883a 	add	r2,r3,r5
100144ac:	3447803a 	cmpltu	r3,r6,r17
100144b0:	1887883a 	add	r3,r3,r2
100144b4:	182297fa 	slli	r17,r3,31
100144b8:	300cd07a 	srli	r6,r6,1
100144bc:	1806d07a 	srli	r3,r3,1
100144c0:	4821883a 	mov	r16,r9
100144c4:	89a2b03a 	or	r17,r17,r6
100144c8:	003f1b06 	br	10014138 <__alt_data_end+0xf8014138>
100144cc:	0101ffc4 	movi	r4,2047
100144d0:	813f441e 	bne	r16,r4,100141e4 <__alt_data_end+0xf80141e4>
100144d4:	003f1806 	br	10014138 <__alt_data_end+0xf8014138>
100144d8:	843ff844 	addi	r16,r16,-31
100144dc:	01400804 	movi	r5,32
100144e0:	1408d83a 	srl	r4,r2,r16
100144e4:	19405026 	beq	r3,r5,10014628 <__subdf3+0x574>
100144e8:	01401004 	movi	r5,64
100144ec:	28c7c83a 	sub	r3,r5,r3
100144f0:	10c4983a 	sll	r2,r2,r3
100144f4:	88a2b03a 	or	r17,r17,r2
100144f8:	8822c03a 	cmpne	r17,r17,zero
100144fc:	2462b03a 	or	r17,r4,r17
10014500:	0007883a 	mov	r3,zero
10014504:	0021883a 	mov	r16,zero
10014508:	003f6d06 	br	100142c0 <__alt_data_end+0xf80142c0>
1001450c:	11fff804 	addi	r7,r2,-32
10014510:	01000804 	movi	r4,32
10014514:	29ced83a 	srl	r7,r5,r7
10014518:	11004526 	beq	r2,r4,10014630 <__subdf3+0x57c>
1001451c:	01001004 	movi	r4,64
10014520:	2089c83a 	sub	r4,r4,r2
10014524:	2904983a 	sll	r2,r5,r4
10014528:	118cb03a 	or	r6,r2,r6
1001452c:	300cc03a 	cmpne	r6,r6,zero
10014530:	398cb03a 	or	r6,r7,r6
10014534:	0005883a 	mov	r2,zero
10014538:	003f3706 	br	10014218 <__alt_data_end+0xf8014218>
1001453c:	80002a26 	beq	r16,zero,100145e8 <__subdf3+0x534>
10014540:	0101ffc4 	movi	r4,2047
10014544:	49006626 	beq	r9,r4,100146e0 <__subdf3+0x62c>
10014548:	0085c83a 	sub	r2,zero,r2
1001454c:	18c02034 	orhi	r3,r3,128
10014550:	01000e04 	movi	r4,56
10014554:	20807e16 	blt	r4,r2,10014750 <__subdf3+0x69c>
10014558:	010007c4 	movi	r4,31
1001455c:	2080e716 	blt	r4,r2,100148fc <__subdf3+0x848>
10014560:	01000804 	movi	r4,32
10014564:	2089c83a 	sub	r4,r4,r2
10014568:	1914983a 	sll	r10,r3,r4
1001456c:	8890d83a 	srl	r8,r17,r2
10014570:	8908983a 	sll	r4,r17,r4
10014574:	1884d83a 	srl	r2,r3,r2
10014578:	5222b03a 	or	r17,r10,r8
1001457c:	2006c03a 	cmpne	r3,r4,zero
10014580:	88e2b03a 	or	r17,r17,r3
10014584:	3463c83a 	sub	r17,r6,r17
10014588:	2885c83a 	sub	r2,r5,r2
1001458c:	344d803a 	cmpltu	r6,r6,r17
10014590:	1187c83a 	sub	r3,r2,r6
10014594:	4821883a 	mov	r16,r9
10014598:	3825883a 	mov	r18,r7
1001459c:	003f2306 	br	1001422c <__alt_data_end+0xf801422c>
100145a0:	24d0b03a 	or	r8,r4,r19
100145a4:	40001b1e 	bne	r8,zero,10014614 <__subdf3+0x560>
100145a8:	0005883a 	mov	r2,zero
100145ac:	0009883a 	mov	r4,zero
100145b0:	0021883a 	mov	r16,zero
100145b4:	003f4906 	br	100142dc <__alt_data_end+0xf80142dc>
100145b8:	010007c4 	movi	r4,31
100145bc:	20803a16 	blt	r4,r2,100146a8 <__subdf3+0x5f4>
100145c0:	01000804 	movi	r4,32
100145c4:	2089c83a 	sub	r4,r4,r2
100145c8:	2912983a 	sll	r9,r5,r4
100145cc:	3090d83a 	srl	r8,r6,r2
100145d0:	3108983a 	sll	r4,r6,r4
100145d4:	2884d83a 	srl	r2,r5,r2
100145d8:	4a12b03a 	or	r9,r9,r8
100145dc:	2008c03a 	cmpne	r4,r4,zero
100145e0:	4912b03a 	or	r9,r9,r4
100145e4:	003f4e06 	br	10014320 <__alt_data_end+0xf8014320>
100145e8:	1c48b03a 	or	r4,r3,r17
100145ec:	20003c26 	beq	r4,zero,100146e0 <__subdf3+0x62c>
100145f0:	0084303a 	nor	r2,zero,r2
100145f4:	1000381e 	bne	r2,zero,100146d8 <__subdf3+0x624>
100145f8:	3463c83a 	sub	r17,r6,r17
100145fc:	28c5c83a 	sub	r2,r5,r3
10014600:	344d803a 	cmpltu	r6,r6,r17
10014604:	1187c83a 	sub	r3,r2,r6
10014608:	4821883a 	mov	r16,r9
1001460c:	3825883a 	mov	r18,r7
10014610:	003f0606 	br	1001422c <__alt_data_end+0xf801422c>
10014614:	2023883a 	mov	r17,r4
10014618:	003f0906 	br	10014240 <__alt_data_end+0xf8014240>
1001461c:	0101ffc4 	movi	r4,2047
10014620:	813f3a1e 	bne	r16,r4,1001430c <__alt_data_end+0xf801430c>
10014624:	003ec406 	br	10014138 <__alt_data_end+0xf8014138>
10014628:	0005883a 	mov	r2,zero
1001462c:	003fb106 	br	100144f4 <__alt_data_end+0xf80144f4>
10014630:	0005883a 	mov	r2,zero
10014634:	003fbc06 	br	10014528 <__alt_data_end+0xf8014528>
10014638:	1c44b03a 	or	r2,r3,r17
1001463c:	80008e1e 	bne	r16,zero,10014878 <__subdf3+0x7c4>
10014640:	1000c826 	beq	r2,zero,10014964 <__subdf3+0x8b0>
10014644:	2984b03a 	or	r2,r5,r6
10014648:	103ebb26 	beq	r2,zero,10014138 <__alt_data_end+0xf8014138>
1001464c:	8989883a 	add	r4,r17,r6
10014650:	1945883a 	add	r2,r3,r5
10014654:	2447803a 	cmpltu	r3,r4,r17
10014658:	1887883a 	add	r3,r3,r2
1001465c:	1880202c 	andhi	r2,r3,128
10014660:	2023883a 	mov	r17,r4
10014664:	103f1626 	beq	r2,zero,100142c0 <__alt_data_end+0xf80142c0>
10014668:	00bfe034 	movhi	r2,65408
1001466c:	10bfffc4 	addi	r2,r2,-1
10014670:	5021883a 	mov	r16,r10
10014674:	1886703a 	and	r3,r3,r2
10014678:	003eaf06 	br	10014138 <__alt_data_end+0xf8014138>
1001467c:	3825883a 	mov	r18,r7
10014680:	003f0f06 	br	100142c0 <__alt_data_end+0xf80142c0>
10014684:	1c44b03a 	or	r2,r3,r17
10014688:	8000251e 	bne	r16,zero,10014720 <__subdf3+0x66c>
1001468c:	1000661e 	bne	r2,zero,10014828 <__subdf3+0x774>
10014690:	2990b03a 	or	r8,r5,r6
10014694:	40009626 	beq	r8,zero,100148f0 <__subdf3+0x83c>
10014698:	2807883a 	mov	r3,r5
1001469c:	3023883a 	mov	r17,r6
100146a0:	3825883a 	mov	r18,r7
100146a4:	003ea406 	br	10014138 <__alt_data_end+0xf8014138>
100146a8:	127ff804 	addi	r9,r2,-32
100146ac:	01000804 	movi	r4,32
100146b0:	2a52d83a 	srl	r9,r5,r9
100146b4:	11008c26 	beq	r2,r4,100148e8 <__subdf3+0x834>
100146b8:	01001004 	movi	r4,64
100146bc:	2085c83a 	sub	r2,r4,r2
100146c0:	2884983a 	sll	r2,r5,r2
100146c4:	118cb03a 	or	r6,r2,r6
100146c8:	300cc03a 	cmpne	r6,r6,zero
100146cc:	4992b03a 	or	r9,r9,r6
100146d0:	0005883a 	mov	r2,zero
100146d4:	003f1206 	br	10014320 <__alt_data_end+0xf8014320>
100146d8:	0101ffc4 	movi	r4,2047
100146dc:	493f9c1e 	bne	r9,r4,10014550 <__alt_data_end+0xf8014550>
100146e0:	2807883a 	mov	r3,r5
100146e4:	3023883a 	mov	r17,r6
100146e8:	4821883a 	mov	r16,r9
100146ec:	3825883a 	mov	r18,r7
100146f0:	003e9106 	br	10014138 <__alt_data_end+0xf8014138>
100146f4:	80001f1e 	bne	r16,zero,10014774 <__subdf3+0x6c0>
100146f8:	1c48b03a 	or	r4,r3,r17
100146fc:	20005a26 	beq	r4,zero,10014868 <__subdf3+0x7b4>
10014700:	0084303a 	nor	r2,zero,r2
10014704:	1000561e 	bne	r2,zero,10014860 <__subdf3+0x7ac>
10014708:	89a3883a 	add	r17,r17,r6
1001470c:	1945883a 	add	r2,r3,r5
10014710:	898d803a 	cmpltu	r6,r17,r6
10014714:	3087883a 	add	r3,r6,r2
10014718:	4821883a 	mov	r16,r9
1001471c:	003f0506 	br	10014334 <__alt_data_end+0xf8014334>
10014720:	10002b1e 	bne	r2,zero,100147d0 <__subdf3+0x71c>
10014724:	2984b03a 	or	r2,r5,r6
10014728:	10008026 	beq	r2,zero,1001492c <__subdf3+0x878>
1001472c:	2807883a 	mov	r3,r5
10014730:	3023883a 	mov	r17,r6
10014734:	3825883a 	mov	r18,r7
10014738:	0401ffc4 	movi	r16,2047
1001473c:	003e7e06 	br	10014138 <__alt_data_end+0xf8014138>
10014740:	3809883a 	mov	r4,r7
10014744:	0011883a 	mov	r8,zero
10014748:	0005883a 	mov	r2,zero
1001474c:	003ee306 	br	100142dc <__alt_data_end+0xf80142dc>
10014750:	1c62b03a 	or	r17,r3,r17
10014754:	8822c03a 	cmpne	r17,r17,zero
10014758:	0005883a 	mov	r2,zero
1001475c:	003f8906 	br	10014584 <__alt_data_end+0xf8014584>
10014760:	3809883a 	mov	r4,r7
10014764:	4821883a 	mov	r16,r9
10014768:	0011883a 	mov	r8,zero
1001476c:	0005883a 	mov	r2,zero
10014770:	003eda06 	br	100142dc <__alt_data_end+0xf80142dc>
10014774:	0101ffc4 	movi	r4,2047
10014778:	49003b26 	beq	r9,r4,10014868 <__subdf3+0x7b4>
1001477c:	0085c83a 	sub	r2,zero,r2
10014780:	18c02034 	orhi	r3,r3,128
10014784:	01000e04 	movi	r4,56
10014788:	20806e16 	blt	r4,r2,10014944 <__subdf3+0x890>
1001478c:	010007c4 	movi	r4,31
10014790:	20807716 	blt	r4,r2,10014970 <__subdf3+0x8bc>
10014794:	01000804 	movi	r4,32
10014798:	2089c83a 	sub	r4,r4,r2
1001479c:	1914983a 	sll	r10,r3,r4
100147a0:	8890d83a 	srl	r8,r17,r2
100147a4:	8908983a 	sll	r4,r17,r4
100147a8:	1884d83a 	srl	r2,r3,r2
100147ac:	5222b03a 	or	r17,r10,r8
100147b0:	2006c03a 	cmpne	r3,r4,zero
100147b4:	88e2b03a 	or	r17,r17,r3
100147b8:	89a3883a 	add	r17,r17,r6
100147bc:	1145883a 	add	r2,r2,r5
100147c0:	898d803a 	cmpltu	r6,r17,r6
100147c4:	3087883a 	add	r3,r6,r2
100147c8:	4821883a 	mov	r16,r9
100147cc:	003ed906 	br	10014334 <__alt_data_end+0xf8014334>
100147d0:	2984b03a 	or	r2,r5,r6
100147d4:	10004226 	beq	r2,zero,100148e0 <__subdf3+0x82c>
100147d8:	1808d0fa 	srli	r4,r3,3
100147dc:	8822d0fa 	srli	r17,r17,3
100147e0:	1806977a 	slli	r3,r3,29
100147e4:	2080022c 	andhi	r2,r4,8
100147e8:	1c62b03a 	or	r17,r3,r17
100147ec:	10000826 	beq	r2,zero,10014810 <__subdf3+0x75c>
100147f0:	2812d0fa 	srli	r9,r5,3
100147f4:	4880022c 	andhi	r2,r9,8
100147f8:	1000051e 	bne	r2,zero,10014810 <__subdf3+0x75c>
100147fc:	300cd0fa 	srli	r6,r6,3
10014800:	2804977a 	slli	r2,r5,29
10014804:	4809883a 	mov	r4,r9
10014808:	3825883a 	mov	r18,r7
1001480c:	11a2b03a 	or	r17,r2,r6
10014810:	8806d77a 	srli	r3,r17,29
10014814:	200890fa 	slli	r4,r4,3
10014818:	882290fa 	slli	r17,r17,3
1001481c:	0401ffc4 	movi	r16,2047
10014820:	1906b03a 	or	r3,r3,r4
10014824:	003e4406 	br	10014138 <__alt_data_end+0xf8014138>
10014828:	2984b03a 	or	r2,r5,r6
1001482c:	103e4226 	beq	r2,zero,10014138 <__alt_data_end+0xf8014138>
10014830:	8989c83a 	sub	r4,r17,r6
10014834:	8911803a 	cmpltu	r8,r17,r4
10014838:	1945c83a 	sub	r2,r3,r5
1001483c:	1205c83a 	sub	r2,r2,r8
10014840:	1200202c 	andhi	r8,r2,128
10014844:	403e9a26 	beq	r8,zero,100142b0 <__alt_data_end+0xf80142b0>
10014848:	3463c83a 	sub	r17,r6,r17
1001484c:	28c5c83a 	sub	r2,r5,r3
10014850:	344d803a 	cmpltu	r6,r6,r17
10014854:	1187c83a 	sub	r3,r2,r6
10014858:	3825883a 	mov	r18,r7
1001485c:	003e3606 	br	10014138 <__alt_data_end+0xf8014138>
10014860:	0101ffc4 	movi	r4,2047
10014864:	493fc71e 	bne	r9,r4,10014784 <__alt_data_end+0xf8014784>
10014868:	2807883a 	mov	r3,r5
1001486c:	3023883a 	mov	r17,r6
10014870:	4821883a 	mov	r16,r9
10014874:	003e3006 	br	10014138 <__alt_data_end+0xf8014138>
10014878:	10003626 	beq	r2,zero,10014954 <__subdf3+0x8a0>
1001487c:	2984b03a 	or	r2,r5,r6
10014880:	10001726 	beq	r2,zero,100148e0 <__subdf3+0x82c>
10014884:	1808d0fa 	srli	r4,r3,3
10014888:	8822d0fa 	srli	r17,r17,3
1001488c:	1806977a 	slli	r3,r3,29
10014890:	2080022c 	andhi	r2,r4,8
10014894:	1c62b03a 	or	r17,r3,r17
10014898:	10000726 	beq	r2,zero,100148b8 <__subdf3+0x804>
1001489c:	2812d0fa 	srli	r9,r5,3
100148a0:	4880022c 	andhi	r2,r9,8
100148a4:	1000041e 	bne	r2,zero,100148b8 <__subdf3+0x804>
100148a8:	300cd0fa 	srli	r6,r6,3
100148ac:	2804977a 	slli	r2,r5,29
100148b0:	4809883a 	mov	r4,r9
100148b4:	11a2b03a 	or	r17,r2,r6
100148b8:	8806d77a 	srli	r3,r17,29
100148bc:	200890fa 	slli	r4,r4,3
100148c0:	882290fa 	slli	r17,r17,3
100148c4:	3825883a 	mov	r18,r7
100148c8:	1906b03a 	or	r3,r3,r4
100148cc:	0401ffc4 	movi	r16,2047
100148d0:	003e1906 	br	10014138 <__alt_data_end+0xf8014138>
100148d4:	000b883a 	mov	r5,zero
100148d8:	0005883a 	mov	r2,zero
100148dc:	003e2e06 	br	10014198 <__alt_data_end+0xf8014198>
100148e0:	0401ffc4 	movi	r16,2047
100148e4:	003e1406 	br	10014138 <__alt_data_end+0xf8014138>
100148e8:	0005883a 	mov	r2,zero
100148ec:	003f7506 	br	100146c4 <__alt_data_end+0xf80146c4>
100148f0:	0005883a 	mov	r2,zero
100148f4:	0009883a 	mov	r4,zero
100148f8:	003e7806 	br	100142dc <__alt_data_end+0xf80142dc>
100148fc:	123ff804 	addi	r8,r2,-32
10014900:	01000804 	movi	r4,32
10014904:	1a10d83a 	srl	r8,r3,r8
10014908:	11002526 	beq	r2,r4,100149a0 <__subdf3+0x8ec>
1001490c:	01001004 	movi	r4,64
10014910:	2085c83a 	sub	r2,r4,r2
10014914:	1884983a 	sll	r2,r3,r2
10014918:	1444b03a 	or	r2,r2,r17
1001491c:	1004c03a 	cmpne	r2,r2,zero
10014920:	40a2b03a 	or	r17,r8,r2
10014924:	0005883a 	mov	r2,zero
10014928:	003f1606 	br	10014584 <__alt_data_end+0xf8014584>
1001492c:	02000434 	movhi	r8,16
10014930:	0009883a 	mov	r4,zero
10014934:	423fffc4 	addi	r8,r8,-1
10014938:	00bfffc4 	movi	r2,-1
1001493c:	0401ffc4 	movi	r16,2047
10014940:	003e6606 	br	100142dc <__alt_data_end+0xf80142dc>
10014944:	1c62b03a 	or	r17,r3,r17
10014948:	8822c03a 	cmpne	r17,r17,zero
1001494c:	0005883a 	mov	r2,zero
10014950:	003f9906 	br	100147b8 <__alt_data_end+0xf80147b8>
10014954:	2807883a 	mov	r3,r5
10014958:	3023883a 	mov	r17,r6
1001495c:	0401ffc4 	movi	r16,2047
10014960:	003df506 	br	10014138 <__alt_data_end+0xf8014138>
10014964:	2807883a 	mov	r3,r5
10014968:	3023883a 	mov	r17,r6
1001496c:	003df206 	br	10014138 <__alt_data_end+0xf8014138>
10014970:	123ff804 	addi	r8,r2,-32
10014974:	01000804 	movi	r4,32
10014978:	1a10d83a 	srl	r8,r3,r8
1001497c:	11000a26 	beq	r2,r4,100149a8 <__subdf3+0x8f4>
10014980:	01001004 	movi	r4,64
10014984:	2085c83a 	sub	r2,r4,r2
10014988:	1884983a 	sll	r2,r3,r2
1001498c:	1444b03a 	or	r2,r2,r17
10014990:	1004c03a 	cmpne	r2,r2,zero
10014994:	40a2b03a 	or	r17,r8,r2
10014998:	0005883a 	mov	r2,zero
1001499c:	003f8606 	br	100147b8 <__alt_data_end+0xf80147b8>
100149a0:	0005883a 	mov	r2,zero
100149a4:	003fdc06 	br	10014918 <__alt_data_end+0xf8014918>
100149a8:	0005883a 	mov	r2,zero
100149ac:	003ff706 	br	1001498c <__alt_data_end+0xf801498c>

100149b0 <__fixdfsi>:
100149b0:	280cd53a 	srli	r6,r5,20
100149b4:	00c00434 	movhi	r3,16
100149b8:	18ffffc4 	addi	r3,r3,-1
100149bc:	3181ffcc 	andi	r6,r6,2047
100149c0:	01c0ff84 	movi	r7,1022
100149c4:	28c6703a 	and	r3,r5,r3
100149c8:	280ad7fa 	srli	r5,r5,31
100149cc:	3980120e 	bge	r7,r6,10014a18 <__fixdfsi+0x68>
100149d0:	00810744 	movi	r2,1053
100149d4:	11800c16 	blt	r2,r6,10014a08 <__fixdfsi+0x58>
100149d8:	00810cc4 	movi	r2,1075
100149dc:	1185c83a 	sub	r2,r2,r6
100149e0:	01c007c4 	movi	r7,31
100149e4:	18c00434 	orhi	r3,r3,16
100149e8:	38800d16 	blt	r7,r2,10014a20 <__fixdfsi+0x70>
100149ec:	31befb44 	addi	r6,r6,-1043
100149f0:	2084d83a 	srl	r2,r4,r2
100149f4:	1986983a 	sll	r3,r3,r6
100149f8:	1884b03a 	or	r2,r3,r2
100149fc:	28000726 	beq	r5,zero,10014a1c <__fixdfsi+0x6c>
10014a00:	0085c83a 	sub	r2,zero,r2
10014a04:	f800283a 	ret
10014a08:	00a00034 	movhi	r2,32768
10014a0c:	10bfffc4 	addi	r2,r2,-1
10014a10:	2885883a 	add	r2,r5,r2
10014a14:	f800283a 	ret
10014a18:	0005883a 	mov	r2,zero
10014a1c:	f800283a 	ret
10014a20:	008104c4 	movi	r2,1043
10014a24:	1185c83a 	sub	r2,r2,r6
10014a28:	1884d83a 	srl	r2,r3,r2
10014a2c:	003ff306 	br	100149fc <__alt_data_end+0xf80149fc>

10014a30 <__floatsidf>:
10014a30:	defffd04 	addi	sp,sp,-12
10014a34:	dfc00215 	stw	ra,8(sp)
10014a38:	dc400115 	stw	r17,4(sp)
10014a3c:	dc000015 	stw	r16,0(sp)
10014a40:	20002b26 	beq	r4,zero,10014af0 <__floatsidf+0xc0>
10014a44:	2023883a 	mov	r17,r4
10014a48:	2020d7fa 	srli	r16,r4,31
10014a4c:	20002d16 	blt	r4,zero,10014b04 <__floatsidf+0xd4>
10014a50:	8809883a 	mov	r4,r17
10014a54:	0014bb40 	call	10014bb4 <__clzsi2>
10014a58:	01410784 	movi	r5,1054
10014a5c:	288bc83a 	sub	r5,r5,r2
10014a60:	01010cc4 	movi	r4,1075
10014a64:	2149c83a 	sub	r4,r4,r5
10014a68:	00c007c4 	movi	r3,31
10014a6c:	1900160e 	bge	r3,r4,10014ac8 <__floatsidf+0x98>
10014a70:	00c104c4 	movi	r3,1043
10014a74:	1947c83a 	sub	r3,r3,r5
10014a78:	88c6983a 	sll	r3,r17,r3
10014a7c:	00800434 	movhi	r2,16
10014a80:	10bfffc4 	addi	r2,r2,-1
10014a84:	1886703a 	and	r3,r3,r2
10014a88:	2941ffcc 	andi	r5,r5,2047
10014a8c:	800d883a 	mov	r6,r16
10014a90:	0005883a 	mov	r2,zero
10014a94:	280a953a 	slli	r5,r5,20
10014a98:	31803fcc 	andi	r6,r6,255
10014a9c:	01000434 	movhi	r4,16
10014aa0:	300c97fa 	slli	r6,r6,31
10014aa4:	213fffc4 	addi	r4,r4,-1
10014aa8:	1906703a 	and	r3,r3,r4
10014aac:	1946b03a 	or	r3,r3,r5
10014ab0:	1986b03a 	or	r3,r3,r6
10014ab4:	dfc00217 	ldw	ra,8(sp)
10014ab8:	dc400117 	ldw	r17,4(sp)
10014abc:	dc000017 	ldw	r16,0(sp)
10014ac0:	dec00304 	addi	sp,sp,12
10014ac4:	f800283a 	ret
10014ac8:	00c002c4 	movi	r3,11
10014acc:	1887c83a 	sub	r3,r3,r2
10014ad0:	88c6d83a 	srl	r3,r17,r3
10014ad4:	8904983a 	sll	r2,r17,r4
10014ad8:	01000434 	movhi	r4,16
10014adc:	213fffc4 	addi	r4,r4,-1
10014ae0:	2941ffcc 	andi	r5,r5,2047
10014ae4:	1906703a 	and	r3,r3,r4
10014ae8:	800d883a 	mov	r6,r16
10014aec:	003fe906 	br	10014a94 <__alt_data_end+0xf8014a94>
10014af0:	000d883a 	mov	r6,zero
10014af4:	000b883a 	mov	r5,zero
10014af8:	0007883a 	mov	r3,zero
10014afc:	0005883a 	mov	r2,zero
10014b00:	003fe406 	br	10014a94 <__alt_data_end+0xf8014a94>
10014b04:	0123c83a 	sub	r17,zero,r4
10014b08:	003fd106 	br	10014a50 <__alt_data_end+0xf8014a50>

10014b0c <__floatunsidf>:
10014b0c:	defffe04 	addi	sp,sp,-8
10014b10:	dc000015 	stw	r16,0(sp)
10014b14:	dfc00115 	stw	ra,4(sp)
10014b18:	2021883a 	mov	r16,r4
10014b1c:	20002226 	beq	r4,zero,10014ba8 <__floatunsidf+0x9c>
10014b20:	0014bb40 	call	10014bb4 <__clzsi2>
10014b24:	01010784 	movi	r4,1054
10014b28:	2089c83a 	sub	r4,r4,r2
10014b2c:	01810cc4 	movi	r6,1075
10014b30:	310dc83a 	sub	r6,r6,r4
10014b34:	00c007c4 	movi	r3,31
10014b38:	1980120e 	bge	r3,r6,10014b84 <__floatunsidf+0x78>
10014b3c:	00c104c4 	movi	r3,1043
10014b40:	1907c83a 	sub	r3,r3,r4
10014b44:	80ca983a 	sll	r5,r16,r3
10014b48:	00800434 	movhi	r2,16
10014b4c:	10bfffc4 	addi	r2,r2,-1
10014b50:	2101ffcc 	andi	r4,r4,2047
10014b54:	0021883a 	mov	r16,zero
10014b58:	288a703a 	and	r5,r5,r2
10014b5c:	2008953a 	slli	r4,r4,20
10014b60:	00c00434 	movhi	r3,16
10014b64:	18ffffc4 	addi	r3,r3,-1
10014b68:	28c6703a 	and	r3,r5,r3
10014b6c:	8005883a 	mov	r2,r16
10014b70:	1906b03a 	or	r3,r3,r4
10014b74:	dfc00117 	ldw	ra,4(sp)
10014b78:	dc000017 	ldw	r16,0(sp)
10014b7c:	dec00204 	addi	sp,sp,8
10014b80:	f800283a 	ret
10014b84:	00c002c4 	movi	r3,11
10014b88:	188bc83a 	sub	r5,r3,r2
10014b8c:	814ad83a 	srl	r5,r16,r5
10014b90:	00c00434 	movhi	r3,16
10014b94:	18ffffc4 	addi	r3,r3,-1
10014b98:	81a0983a 	sll	r16,r16,r6
10014b9c:	2101ffcc 	andi	r4,r4,2047
10014ba0:	28ca703a 	and	r5,r5,r3
10014ba4:	003fed06 	br	10014b5c <__alt_data_end+0xf8014b5c>
10014ba8:	0009883a 	mov	r4,zero
10014bac:	000b883a 	mov	r5,zero
10014bb0:	003fea06 	br	10014b5c <__alt_data_end+0xf8014b5c>

10014bb4 <__clzsi2>:
10014bb4:	00bfffd4 	movui	r2,65535
10014bb8:	11000536 	bltu	r2,r4,10014bd0 <__clzsi2+0x1c>
10014bbc:	00803fc4 	movi	r2,255
10014bc0:	11000f36 	bltu	r2,r4,10014c00 <__clzsi2+0x4c>
10014bc4:	00800804 	movi	r2,32
10014bc8:	0007883a 	mov	r3,zero
10014bcc:	00000506 	br	10014be4 <__clzsi2+0x30>
10014bd0:	00804034 	movhi	r2,256
10014bd4:	10bfffc4 	addi	r2,r2,-1
10014bd8:	11000c2e 	bgeu	r2,r4,10014c0c <__clzsi2+0x58>
10014bdc:	00800204 	movi	r2,8
10014be0:	00c00604 	movi	r3,24
10014be4:	20c8d83a 	srl	r4,r4,r3
10014be8:	00c400b4 	movhi	r3,4098
10014bec:	18e25304 	addi	r3,r3,-30388
10014bf0:	1909883a 	add	r4,r3,r4
10014bf4:	20c00003 	ldbu	r3,0(r4)
10014bf8:	10c5c83a 	sub	r2,r2,r3
10014bfc:	f800283a 	ret
10014c00:	00800604 	movi	r2,24
10014c04:	00c00204 	movi	r3,8
10014c08:	003ff606 	br	10014be4 <__alt_data_end+0xf8014be4>
10014c0c:	00800404 	movi	r2,16
10014c10:	1007883a 	mov	r3,r2
10014c14:	003ff306 	br	10014be4 <__alt_data_end+0xf8014be4>

10014c18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10014c18:	defffe04 	addi	sp,sp,-8
10014c1c:	dfc00115 	stw	ra,4(sp)
10014c20:	df000015 	stw	fp,0(sp)
10014c24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10014c28:	d0a05417 	ldw	r2,-32432(gp)
10014c2c:	10000326 	beq	r2,zero,10014c3c <alt_get_errno+0x24>
10014c30:	d0a05417 	ldw	r2,-32432(gp)
10014c34:	103ee83a 	callr	r2
10014c38:	00000106 	br	10014c40 <alt_get_errno+0x28>
10014c3c:	d0a76404 	addi	r2,gp,-25200
}
10014c40:	e037883a 	mov	sp,fp
10014c44:	dfc00117 	ldw	ra,4(sp)
10014c48:	df000017 	ldw	fp,0(sp)
10014c4c:	dec00204 	addi	sp,sp,8
10014c50:	f800283a 	ret

10014c54 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10014c54:	defffb04 	addi	sp,sp,-20
10014c58:	dfc00415 	stw	ra,16(sp)
10014c5c:	df000315 	stw	fp,12(sp)
10014c60:	df000304 	addi	fp,sp,12
10014c64:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10014c68:	e0bfff17 	ldw	r2,-4(fp)
10014c6c:	10000816 	blt	r2,zero,10014c90 <close+0x3c>
10014c70:	01400304 	movi	r5,12
10014c74:	e13fff17 	ldw	r4,-4(fp)
10014c78:	0007d040 	call	10007d04 <__mulsi3>
10014c7c:	1007883a 	mov	r3,r2
10014c80:	008400b4 	movhi	r2,4098
10014c84:	10a4d304 	addi	r2,r2,-27828
10014c88:	1885883a 	add	r2,r3,r2
10014c8c:	00000106 	br	10014c94 <close+0x40>
10014c90:	0005883a 	mov	r2,zero
10014c94:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10014c98:	e0bffd17 	ldw	r2,-12(fp)
10014c9c:	10001926 	beq	r2,zero,10014d04 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10014ca0:	e0bffd17 	ldw	r2,-12(fp)
10014ca4:	10800017 	ldw	r2,0(r2)
10014ca8:	10800417 	ldw	r2,16(r2)
10014cac:	10000626 	beq	r2,zero,10014cc8 <close+0x74>
10014cb0:	e0bffd17 	ldw	r2,-12(fp)
10014cb4:	10800017 	ldw	r2,0(r2)
10014cb8:	10800417 	ldw	r2,16(r2)
10014cbc:	e13ffd17 	ldw	r4,-12(fp)
10014cc0:	103ee83a 	callr	r2
10014cc4:	00000106 	br	10014ccc <close+0x78>
10014cc8:	0005883a 	mov	r2,zero
10014ccc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10014cd0:	e13fff17 	ldw	r4,-4(fp)
10014cd4:	001533c0 	call	1001533c <alt_release_fd>
    if (rval < 0)
10014cd8:	e0bffe17 	ldw	r2,-8(fp)
10014cdc:	1000070e 	bge	r2,zero,10014cfc <close+0xa8>
    {
      ALT_ERRNO = -rval;
10014ce0:	0014c180 	call	10014c18 <alt_get_errno>
10014ce4:	1007883a 	mov	r3,r2
10014ce8:	e0bffe17 	ldw	r2,-8(fp)
10014cec:	0085c83a 	sub	r2,zero,r2
10014cf0:	18800015 	stw	r2,0(r3)
      return -1;
10014cf4:	00bfffc4 	movi	r2,-1
10014cf8:	00000706 	br	10014d18 <close+0xc4>
    }
    return 0;
10014cfc:	0005883a 	mov	r2,zero
10014d00:	00000506 	br	10014d18 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10014d04:	0014c180 	call	10014c18 <alt_get_errno>
10014d08:	1007883a 	mov	r3,r2
10014d0c:	00801444 	movi	r2,81
10014d10:	18800015 	stw	r2,0(r3)
    return -1;
10014d14:	00bfffc4 	movi	r2,-1
  }
}
10014d18:	e037883a 	mov	sp,fp
10014d1c:	dfc00117 	ldw	ra,4(sp)
10014d20:	df000017 	ldw	fp,0(sp)
10014d24:	dec00204 	addi	sp,sp,8
10014d28:	f800283a 	ret

10014d2c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10014d2c:	defffc04 	addi	sp,sp,-16
10014d30:	df000315 	stw	fp,12(sp)
10014d34:	df000304 	addi	fp,sp,12
10014d38:	e13ffd15 	stw	r4,-12(fp)
10014d3c:	e17ffe15 	stw	r5,-8(fp)
10014d40:	e1bfff15 	stw	r6,-4(fp)
  return len;
10014d44:	e0bfff17 	ldw	r2,-4(fp)
}
10014d48:	e037883a 	mov	sp,fp
10014d4c:	df000017 	ldw	fp,0(sp)
10014d50:	dec00104 	addi	sp,sp,4
10014d54:	f800283a 	ret

10014d58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10014d58:	defffe04 	addi	sp,sp,-8
10014d5c:	dfc00115 	stw	ra,4(sp)
10014d60:	df000015 	stw	fp,0(sp)
10014d64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10014d68:	d0a05417 	ldw	r2,-32432(gp)
10014d6c:	10000326 	beq	r2,zero,10014d7c <alt_get_errno+0x24>
10014d70:	d0a05417 	ldw	r2,-32432(gp)
10014d74:	103ee83a 	callr	r2
10014d78:	00000106 	br	10014d80 <alt_get_errno+0x28>
10014d7c:	d0a76404 	addi	r2,gp,-25200
}
10014d80:	e037883a 	mov	sp,fp
10014d84:	dfc00117 	ldw	ra,4(sp)
10014d88:	df000017 	ldw	fp,0(sp)
10014d8c:	dec00204 	addi	sp,sp,8
10014d90:	f800283a 	ret

10014d94 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10014d94:	defffb04 	addi	sp,sp,-20
10014d98:	dfc00415 	stw	ra,16(sp)
10014d9c:	df000315 	stw	fp,12(sp)
10014da0:	df000304 	addi	fp,sp,12
10014da4:	e13ffe15 	stw	r4,-8(fp)
10014da8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10014dac:	e0bffe17 	ldw	r2,-8(fp)
10014db0:	10000816 	blt	r2,zero,10014dd4 <fstat+0x40>
10014db4:	01400304 	movi	r5,12
10014db8:	e13ffe17 	ldw	r4,-8(fp)
10014dbc:	0007d040 	call	10007d04 <__mulsi3>
10014dc0:	1007883a 	mov	r3,r2
10014dc4:	008400b4 	movhi	r2,4098
10014dc8:	10a4d304 	addi	r2,r2,-27828
10014dcc:	1885883a 	add	r2,r3,r2
10014dd0:	00000106 	br	10014dd8 <fstat+0x44>
10014dd4:	0005883a 	mov	r2,zero
10014dd8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10014ddc:	e0bffd17 	ldw	r2,-12(fp)
10014de0:	10001026 	beq	r2,zero,10014e24 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10014de4:	e0bffd17 	ldw	r2,-12(fp)
10014de8:	10800017 	ldw	r2,0(r2)
10014dec:	10800817 	ldw	r2,32(r2)
10014df0:	10000726 	beq	r2,zero,10014e10 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10014df4:	e0bffd17 	ldw	r2,-12(fp)
10014df8:	10800017 	ldw	r2,0(r2)
10014dfc:	10800817 	ldw	r2,32(r2)
10014e00:	e17fff17 	ldw	r5,-4(fp)
10014e04:	e13ffd17 	ldw	r4,-12(fp)
10014e08:	103ee83a 	callr	r2
10014e0c:	00000a06 	br	10014e38 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10014e10:	e0bfff17 	ldw	r2,-4(fp)
10014e14:	00c80004 	movi	r3,8192
10014e18:	10c00115 	stw	r3,4(r2)
      return 0;
10014e1c:	0005883a 	mov	r2,zero
10014e20:	00000506 	br	10014e38 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10014e24:	0014d580 	call	10014d58 <alt_get_errno>
10014e28:	1007883a 	mov	r3,r2
10014e2c:	00801444 	movi	r2,81
10014e30:	18800015 	stw	r2,0(r3)
    return -1;
10014e34:	00bfffc4 	movi	r2,-1
  }
}
10014e38:	e037883a 	mov	sp,fp
10014e3c:	dfc00117 	ldw	ra,4(sp)
10014e40:	df000017 	ldw	fp,0(sp)
10014e44:	dec00204 	addi	sp,sp,8
10014e48:	f800283a 	ret

10014e4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10014e4c:	defffe04 	addi	sp,sp,-8
10014e50:	dfc00115 	stw	ra,4(sp)
10014e54:	df000015 	stw	fp,0(sp)
10014e58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10014e5c:	d0a05417 	ldw	r2,-32432(gp)
10014e60:	10000326 	beq	r2,zero,10014e70 <alt_get_errno+0x24>
10014e64:	d0a05417 	ldw	r2,-32432(gp)
10014e68:	103ee83a 	callr	r2
10014e6c:	00000106 	br	10014e74 <alt_get_errno+0x28>
10014e70:	d0a76404 	addi	r2,gp,-25200
}
10014e74:	e037883a 	mov	sp,fp
10014e78:	dfc00117 	ldw	ra,4(sp)
10014e7c:	df000017 	ldw	fp,0(sp)
10014e80:	dec00204 	addi	sp,sp,8
10014e84:	f800283a 	ret

10014e88 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10014e88:	deffed04 	addi	sp,sp,-76
10014e8c:	dfc01215 	stw	ra,72(sp)
10014e90:	df001115 	stw	fp,68(sp)
10014e94:	df001104 	addi	fp,sp,68
10014e98:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10014e9c:	e0bfff17 	ldw	r2,-4(fp)
10014ea0:	10000816 	blt	r2,zero,10014ec4 <isatty+0x3c>
10014ea4:	01400304 	movi	r5,12
10014ea8:	e13fff17 	ldw	r4,-4(fp)
10014eac:	0007d040 	call	10007d04 <__mulsi3>
10014eb0:	1007883a 	mov	r3,r2
10014eb4:	008400b4 	movhi	r2,4098
10014eb8:	10a4d304 	addi	r2,r2,-27828
10014ebc:	1885883a 	add	r2,r3,r2
10014ec0:	00000106 	br	10014ec8 <isatty+0x40>
10014ec4:	0005883a 	mov	r2,zero
10014ec8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10014ecc:	e0bfef17 	ldw	r2,-68(fp)
10014ed0:	10000e26 	beq	r2,zero,10014f0c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10014ed4:	e0bfef17 	ldw	r2,-68(fp)
10014ed8:	10800017 	ldw	r2,0(r2)
10014edc:	10800817 	ldw	r2,32(r2)
10014ee0:	1000021e 	bne	r2,zero,10014eec <isatty+0x64>
    {
      return 1;
10014ee4:	00800044 	movi	r2,1
10014ee8:	00000d06 	br	10014f20 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10014eec:	e0bff004 	addi	r2,fp,-64
10014ef0:	100b883a 	mov	r5,r2
10014ef4:	e13fff17 	ldw	r4,-4(fp)
10014ef8:	0014d940 	call	10014d94 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10014efc:	e0bff117 	ldw	r2,-60(fp)
10014f00:	10880020 	cmpeqi	r2,r2,8192
10014f04:	10803fcc 	andi	r2,r2,255
10014f08:	00000506 	br	10014f20 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10014f0c:	0014e4c0 	call	10014e4c <alt_get_errno>
10014f10:	1007883a 	mov	r3,r2
10014f14:	00801444 	movi	r2,81
10014f18:	18800015 	stw	r2,0(r3)
    return 0;
10014f1c:	0005883a 	mov	r2,zero
  }
}
10014f20:	e037883a 	mov	sp,fp
10014f24:	dfc00117 	ldw	ra,4(sp)
10014f28:	df000017 	ldw	fp,0(sp)
10014f2c:	dec00204 	addi	sp,sp,8
10014f30:	f800283a 	ret

10014f34 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10014f34:	defffc04 	addi	sp,sp,-16
10014f38:	df000315 	stw	fp,12(sp)
10014f3c:	df000304 	addi	fp,sp,12
10014f40:	e13ffd15 	stw	r4,-12(fp)
10014f44:	e17ffe15 	stw	r5,-8(fp)
10014f48:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10014f4c:	e0fffe17 	ldw	r3,-8(fp)
10014f50:	e0bffd17 	ldw	r2,-12(fp)
10014f54:	18800c26 	beq	r3,r2,10014f88 <alt_load_section+0x54>
  {
    while( to != end )
10014f58:	00000806 	br	10014f7c <alt_load_section+0x48>
    {
      *to++ = *from++;
10014f5c:	e0bffe17 	ldw	r2,-8(fp)
10014f60:	10c00104 	addi	r3,r2,4
10014f64:	e0fffe15 	stw	r3,-8(fp)
10014f68:	e0fffd17 	ldw	r3,-12(fp)
10014f6c:	19000104 	addi	r4,r3,4
10014f70:	e13ffd15 	stw	r4,-12(fp)
10014f74:	18c00017 	ldw	r3,0(r3)
10014f78:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10014f7c:	e0fffe17 	ldw	r3,-8(fp)
10014f80:	e0bfff17 	ldw	r2,-4(fp)
10014f84:	18bff51e 	bne	r3,r2,10014f5c <__alt_data_end+0xf8014f5c>
    {
      *to++ = *from++;
    }
  }
}
10014f88:	0001883a 	nop
10014f8c:	e037883a 	mov	sp,fp
10014f90:	df000017 	ldw	fp,0(sp)
10014f94:	dec00104 	addi	sp,sp,4
10014f98:	f800283a 	ret

10014f9c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10014f9c:	defffe04 	addi	sp,sp,-8
10014fa0:	dfc00115 	stw	ra,4(sp)
10014fa4:	df000015 	stw	fp,0(sp)
10014fa8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10014fac:	018400b4 	movhi	r6,4098
10014fb0:	31a9a404 	addi	r6,r6,-22896
10014fb4:	014400b4 	movhi	r5,4098
10014fb8:	2962a004 	addi	r5,r5,-30080
10014fbc:	010400b4 	movhi	r4,4098
10014fc0:	2129a404 	addi	r4,r4,-22896
10014fc4:	0014f340 	call	10014f34 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10014fc8:	01840034 	movhi	r6,4096
10014fcc:	31808c04 	addi	r6,r6,560
10014fd0:	01440034 	movhi	r5,4096
10014fd4:	29400804 	addi	r5,r5,32
10014fd8:	01040034 	movhi	r4,4096
10014fdc:	21000804 	addi	r4,r4,32
10014fe0:	0014f340 	call	10014f34 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10014fe4:	018400b4 	movhi	r6,4098
10014fe8:	31a2a004 	addi	r6,r6,-30080
10014fec:	01440074 	movhi	r5,4097
10014ff0:	295d0e04 	addi	r5,r5,29752
10014ff4:	01040074 	movhi	r4,4097
10014ff8:	211d0e04 	addi	r4,r4,29752
10014ffc:	0014f340 	call	10014f34 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10015000:	00163800 	call	10016380 <alt_dcache_flush_all>
  alt_icache_flush_all();
10015004:	00165400 	call	10016540 <alt_icache_flush_all>
}
10015008:	0001883a 	nop
1001500c:	e037883a 	mov	sp,fp
10015010:	dfc00117 	ldw	ra,4(sp)
10015014:	df000017 	ldw	fp,0(sp)
10015018:	dec00204 	addi	sp,sp,8
1001501c:	f800283a 	ret

10015020 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10015020:	defffe04 	addi	sp,sp,-8
10015024:	dfc00115 	stw	ra,4(sp)
10015028:	df000015 	stw	fp,0(sp)
1001502c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10015030:	d0a05417 	ldw	r2,-32432(gp)
10015034:	10000326 	beq	r2,zero,10015044 <alt_get_errno+0x24>
10015038:	d0a05417 	ldw	r2,-32432(gp)
1001503c:	103ee83a 	callr	r2
10015040:	00000106 	br	10015048 <alt_get_errno+0x28>
10015044:	d0a76404 	addi	r2,gp,-25200
}
10015048:	e037883a 	mov	sp,fp
1001504c:	dfc00117 	ldw	ra,4(sp)
10015050:	df000017 	ldw	fp,0(sp)
10015054:	dec00204 	addi	sp,sp,8
10015058:	f800283a 	ret

1001505c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1001505c:	defff904 	addi	sp,sp,-28
10015060:	dfc00615 	stw	ra,24(sp)
10015064:	df000515 	stw	fp,20(sp)
10015068:	df000504 	addi	fp,sp,20
1001506c:	e13ffd15 	stw	r4,-12(fp)
10015070:	e17ffe15 	stw	r5,-8(fp)
10015074:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10015078:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001507c:	e0bffd17 	ldw	r2,-12(fp)
10015080:	10000816 	blt	r2,zero,100150a4 <lseek+0x48>
10015084:	01400304 	movi	r5,12
10015088:	e13ffd17 	ldw	r4,-12(fp)
1001508c:	0007d040 	call	10007d04 <__mulsi3>
10015090:	1007883a 	mov	r3,r2
10015094:	008400b4 	movhi	r2,4098
10015098:	10a4d304 	addi	r2,r2,-27828
1001509c:	1885883a 	add	r2,r3,r2
100150a0:	00000106 	br	100150a8 <lseek+0x4c>
100150a4:	0005883a 	mov	r2,zero
100150a8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
100150ac:	e0bffc17 	ldw	r2,-16(fp)
100150b0:	10001026 	beq	r2,zero,100150f4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
100150b4:	e0bffc17 	ldw	r2,-16(fp)
100150b8:	10800017 	ldw	r2,0(r2)
100150bc:	10800717 	ldw	r2,28(r2)
100150c0:	10000926 	beq	r2,zero,100150e8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
100150c4:	e0bffc17 	ldw	r2,-16(fp)
100150c8:	10800017 	ldw	r2,0(r2)
100150cc:	10800717 	ldw	r2,28(r2)
100150d0:	e1bfff17 	ldw	r6,-4(fp)
100150d4:	e17ffe17 	ldw	r5,-8(fp)
100150d8:	e13ffc17 	ldw	r4,-16(fp)
100150dc:	103ee83a 	callr	r2
100150e0:	e0bffb15 	stw	r2,-20(fp)
100150e4:	00000506 	br	100150fc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
100150e8:	00bfde84 	movi	r2,-134
100150ec:	e0bffb15 	stw	r2,-20(fp)
100150f0:	00000206 	br	100150fc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
100150f4:	00bfebc4 	movi	r2,-81
100150f8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
100150fc:	e0bffb17 	ldw	r2,-20(fp)
10015100:	1000070e 	bge	r2,zero,10015120 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10015104:	00150200 	call	10015020 <alt_get_errno>
10015108:	1007883a 	mov	r3,r2
1001510c:	e0bffb17 	ldw	r2,-20(fp)
10015110:	0085c83a 	sub	r2,zero,r2
10015114:	18800015 	stw	r2,0(r3)
    rc = -1;
10015118:	00bfffc4 	movi	r2,-1
1001511c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10015120:	e0bffb17 	ldw	r2,-20(fp)
}
10015124:	e037883a 	mov	sp,fp
10015128:	dfc00117 	ldw	ra,4(sp)
1001512c:	df000017 	ldw	fp,0(sp)
10015130:	dec00204 	addi	sp,sp,8
10015134:	f800283a 	ret

10015138 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10015138:	defffd04 	addi	sp,sp,-12
1001513c:	dfc00215 	stw	ra,8(sp)
10015140:	df000115 	stw	fp,4(sp)
10015144:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10015148:	0009883a 	mov	r4,zero
1001514c:	00156100 	call	10015610 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10015150:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10015154:	00156480 	call	10015648 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10015158:	018400b4 	movhi	r6,4098
1001515c:	31a29604 	addi	r6,r6,-30120
10015160:	014400b4 	movhi	r5,4098
10015164:	29629604 	addi	r5,r5,-30120
10015168:	010400b4 	movhi	r4,4098
1001516c:	21229604 	addi	r4,r4,-30120
10015170:	00168e40 	call	100168e4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10015174:	00164800 	call	10016480 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10015178:	01040074 	movhi	r4,4097
1001517c:	21193804 	addi	r4,r4,25824
10015180:	00170a40 	call	100170a4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10015184:	d0a76517 	ldw	r2,-25196(gp)
10015188:	d0e76617 	ldw	r3,-25192(gp)
1001518c:	d1276717 	ldw	r4,-25188(gp)
10015190:	200d883a 	mov	r6,r4
10015194:	180b883a 	mov	r5,r3
10015198:	1009883a 	mov	r4,r2
1001519c:	0005f380 	call	10005f38 <main>
100151a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
100151a4:	01000044 	movi	r4,1
100151a8:	0014c540 	call	10014c54 <close>
  exit (result);
100151ac:	e13fff17 	ldw	r4,-4(fp)
100151b0:	00170b80 	call	100170b8 <exit>

100151b4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
100151b4:	defffe04 	addi	sp,sp,-8
100151b8:	df000115 	stw	fp,4(sp)
100151bc:	df000104 	addi	fp,sp,4
100151c0:	e13fff15 	stw	r4,-4(fp)
}
100151c4:	0001883a 	nop
100151c8:	e037883a 	mov	sp,fp
100151cc:	df000017 	ldw	fp,0(sp)
100151d0:	dec00104 	addi	sp,sp,4
100151d4:	f800283a 	ret

100151d8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
100151d8:	defffe04 	addi	sp,sp,-8
100151dc:	df000115 	stw	fp,4(sp)
100151e0:	df000104 	addi	fp,sp,4
100151e4:	e13fff15 	stw	r4,-4(fp)
}
100151e8:	0001883a 	nop
100151ec:	e037883a 	mov	sp,fp
100151f0:	df000017 	ldw	fp,0(sp)
100151f4:	dec00104 	addi	sp,sp,4
100151f8:	f800283a 	ret

100151fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100151fc:	defffe04 	addi	sp,sp,-8
10015200:	dfc00115 	stw	ra,4(sp)
10015204:	df000015 	stw	fp,0(sp)
10015208:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001520c:	d0a05417 	ldw	r2,-32432(gp)
10015210:	10000326 	beq	r2,zero,10015220 <alt_get_errno+0x24>
10015214:	d0a05417 	ldw	r2,-32432(gp)
10015218:	103ee83a 	callr	r2
1001521c:	00000106 	br	10015224 <alt_get_errno+0x28>
10015220:	d0a76404 	addi	r2,gp,-25200
}
10015224:	e037883a 	mov	sp,fp
10015228:	dfc00117 	ldw	ra,4(sp)
1001522c:	df000017 	ldw	fp,0(sp)
10015230:	dec00204 	addi	sp,sp,8
10015234:	f800283a 	ret

10015238 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10015238:	defff904 	addi	sp,sp,-28
1001523c:	dfc00615 	stw	ra,24(sp)
10015240:	df000515 	stw	fp,20(sp)
10015244:	df000504 	addi	fp,sp,20
10015248:	e13ffd15 	stw	r4,-12(fp)
1001524c:	e17ffe15 	stw	r5,-8(fp)
10015250:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10015254:	e0bffd17 	ldw	r2,-12(fp)
10015258:	10000816 	blt	r2,zero,1001527c <read+0x44>
1001525c:	01400304 	movi	r5,12
10015260:	e13ffd17 	ldw	r4,-12(fp)
10015264:	0007d040 	call	10007d04 <__mulsi3>
10015268:	1007883a 	mov	r3,r2
1001526c:	008400b4 	movhi	r2,4098
10015270:	10a4d304 	addi	r2,r2,-27828
10015274:	1885883a 	add	r2,r3,r2
10015278:	00000106 	br	10015280 <read+0x48>
1001527c:	0005883a 	mov	r2,zero
10015280:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10015284:	e0bffb17 	ldw	r2,-20(fp)
10015288:	10002226 	beq	r2,zero,10015314 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1001528c:	e0bffb17 	ldw	r2,-20(fp)
10015290:	10800217 	ldw	r2,8(r2)
10015294:	108000cc 	andi	r2,r2,3
10015298:	10800060 	cmpeqi	r2,r2,1
1001529c:	1000181e 	bne	r2,zero,10015300 <read+0xc8>
        (fd->dev->read))
100152a0:	e0bffb17 	ldw	r2,-20(fp)
100152a4:	10800017 	ldw	r2,0(r2)
100152a8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100152ac:	10001426 	beq	r2,zero,10015300 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
100152b0:	e0bffb17 	ldw	r2,-20(fp)
100152b4:	10800017 	ldw	r2,0(r2)
100152b8:	10800517 	ldw	r2,20(r2)
100152bc:	e0ffff17 	ldw	r3,-4(fp)
100152c0:	180d883a 	mov	r6,r3
100152c4:	e17ffe17 	ldw	r5,-8(fp)
100152c8:	e13ffb17 	ldw	r4,-20(fp)
100152cc:	103ee83a 	callr	r2
100152d0:	e0bffc15 	stw	r2,-16(fp)
100152d4:	e0bffc17 	ldw	r2,-16(fp)
100152d8:	1000070e 	bge	r2,zero,100152f8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
100152dc:	00151fc0 	call	100151fc <alt_get_errno>
100152e0:	1007883a 	mov	r3,r2
100152e4:	e0bffc17 	ldw	r2,-16(fp)
100152e8:	0085c83a 	sub	r2,zero,r2
100152ec:	18800015 	stw	r2,0(r3)
          return -1;
100152f0:	00bfffc4 	movi	r2,-1
100152f4:	00000c06 	br	10015328 <read+0xf0>
        }
        return rval;
100152f8:	e0bffc17 	ldw	r2,-16(fp)
100152fc:	00000a06 	br	10015328 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10015300:	00151fc0 	call	100151fc <alt_get_errno>
10015304:	1007883a 	mov	r3,r2
10015308:	00800344 	movi	r2,13
1001530c:	18800015 	stw	r2,0(r3)
10015310:	00000406 	br	10015324 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10015314:	00151fc0 	call	100151fc <alt_get_errno>
10015318:	1007883a 	mov	r3,r2
1001531c:	00801444 	movi	r2,81
10015320:	18800015 	stw	r2,0(r3)
  }
  return -1;
10015324:	00bfffc4 	movi	r2,-1
}
10015328:	e037883a 	mov	sp,fp
1001532c:	dfc00117 	ldw	ra,4(sp)
10015330:	df000017 	ldw	fp,0(sp)
10015334:	dec00204 	addi	sp,sp,8
10015338:	f800283a 	ret

1001533c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1001533c:	defffc04 	addi	sp,sp,-16
10015340:	dfc00315 	stw	ra,12(sp)
10015344:	df000215 	stw	fp,8(sp)
10015348:	dc000115 	stw	r16,4(sp)
1001534c:	df000204 	addi	fp,sp,8
10015350:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10015354:	e0bffe17 	ldw	r2,-8(fp)
10015358:	108000d0 	cmplti	r2,r2,3
1001535c:	1000111e 	bne	r2,zero,100153a4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10015360:	040400b4 	movhi	r16,4098
10015364:	8424d304 	addi	r16,r16,-27828
10015368:	e0bffe17 	ldw	r2,-8(fp)
1001536c:	01400304 	movi	r5,12
10015370:	1009883a 	mov	r4,r2
10015374:	0007d040 	call	10007d04 <__mulsi3>
10015378:	8085883a 	add	r2,r16,r2
1001537c:	10800204 	addi	r2,r2,8
10015380:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10015384:	040400b4 	movhi	r16,4098
10015388:	8424d304 	addi	r16,r16,-27828
1001538c:	e0bffe17 	ldw	r2,-8(fp)
10015390:	01400304 	movi	r5,12
10015394:	1009883a 	mov	r4,r2
10015398:	0007d040 	call	10007d04 <__mulsi3>
1001539c:	8085883a 	add	r2,r16,r2
100153a0:	10000015 	stw	zero,0(r2)
  }
}
100153a4:	0001883a 	nop
100153a8:	e6ffff04 	addi	sp,fp,-4
100153ac:	dfc00217 	ldw	ra,8(sp)
100153b0:	df000117 	ldw	fp,4(sp)
100153b4:	dc000017 	ldw	r16,0(sp)
100153b8:	dec00304 	addi	sp,sp,12
100153bc:	f800283a 	ret

100153c0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100153c0:	defff904 	addi	sp,sp,-28
100153c4:	df000615 	stw	fp,24(sp)
100153c8:	df000604 	addi	fp,sp,24
100153cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100153d0:	0005303a 	rdctl	r2,status
100153d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100153d8:	e0fffe17 	ldw	r3,-8(fp)
100153dc:	00bfff84 	movi	r2,-2
100153e0:	1884703a 	and	r2,r3,r2
100153e4:	1001703a 	wrctl	status,r2
  
  return context;
100153e8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100153ec:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100153f0:	d0a05517 	ldw	r2,-32428(gp)
100153f4:	10c000c4 	addi	r3,r2,3
100153f8:	00bfff04 	movi	r2,-4
100153fc:	1884703a 	and	r2,r3,r2
10015400:	d0a05515 	stw	r2,-32428(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10015404:	d0e05517 	ldw	r3,-32428(gp)
10015408:	e0bfff17 	ldw	r2,-4(fp)
1001540c:	1887883a 	add	r3,r3,r2
10015410:	00860034 	movhi	r2,6144
10015414:	10800004 	addi	r2,r2,0
10015418:	10c0062e 	bgeu	r2,r3,10015434 <sbrk+0x74>
1001541c:	e0bffb17 	ldw	r2,-20(fp)
10015420:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10015424:	e0bffa17 	ldw	r2,-24(fp)
10015428:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1001542c:	00bfffc4 	movi	r2,-1
10015430:	00000b06 	br	10015460 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10015434:	d0a05517 	ldw	r2,-32428(gp)
10015438:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1001543c:	d0e05517 	ldw	r3,-32428(gp)
10015440:	e0bfff17 	ldw	r2,-4(fp)
10015444:	1885883a 	add	r2,r3,r2
10015448:	d0a05515 	stw	r2,-32428(gp)
1001544c:	e0bffb17 	ldw	r2,-20(fp)
10015450:	e0bffc15 	stw	r2,-16(fp)
10015454:	e0bffc17 	ldw	r2,-16(fp)
10015458:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1001545c:	e0bffd17 	ldw	r2,-12(fp)
} 
10015460:	e037883a 	mov	sp,fp
10015464:	df000017 	ldw	fp,0(sp)
10015468:	dec00104 	addi	sp,sp,4
1001546c:	f800283a 	ret

10015470 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10015470:	defffd04 	addi	sp,sp,-12
10015474:	dfc00215 	stw	ra,8(sp)
10015478:	df000115 	stw	fp,4(sp)
1001547c:	df000104 	addi	fp,sp,4
10015480:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
10015484:	e13fff17 	ldw	r4,-4(fp)
10015488:	00162280 	call	10016228 <alt_busy_sleep>
}
1001548c:	e037883a 	mov	sp,fp
10015490:	dfc00117 	ldw	ra,4(sp)
10015494:	df000017 	ldw	fp,0(sp)
10015498:	dec00204 	addi	sp,sp,8
1001549c:	f800283a 	ret

100154a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100154a0:	defffe04 	addi	sp,sp,-8
100154a4:	dfc00115 	stw	ra,4(sp)
100154a8:	df000015 	stw	fp,0(sp)
100154ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100154b0:	d0a05417 	ldw	r2,-32432(gp)
100154b4:	10000326 	beq	r2,zero,100154c4 <alt_get_errno+0x24>
100154b8:	d0a05417 	ldw	r2,-32432(gp)
100154bc:	103ee83a 	callr	r2
100154c0:	00000106 	br	100154c8 <alt_get_errno+0x28>
100154c4:	d0a76404 	addi	r2,gp,-25200
}
100154c8:	e037883a 	mov	sp,fp
100154cc:	dfc00117 	ldw	ra,4(sp)
100154d0:	df000017 	ldw	fp,0(sp)
100154d4:	dec00204 	addi	sp,sp,8
100154d8:	f800283a 	ret

100154dc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100154dc:	defff904 	addi	sp,sp,-28
100154e0:	dfc00615 	stw	ra,24(sp)
100154e4:	df000515 	stw	fp,20(sp)
100154e8:	df000504 	addi	fp,sp,20
100154ec:	e13ffd15 	stw	r4,-12(fp)
100154f0:	e17ffe15 	stw	r5,-8(fp)
100154f4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100154f8:	e0bffd17 	ldw	r2,-12(fp)
100154fc:	10000816 	blt	r2,zero,10015520 <write+0x44>
10015500:	01400304 	movi	r5,12
10015504:	e13ffd17 	ldw	r4,-12(fp)
10015508:	0007d040 	call	10007d04 <__mulsi3>
1001550c:	1007883a 	mov	r3,r2
10015510:	008400b4 	movhi	r2,4098
10015514:	10a4d304 	addi	r2,r2,-27828
10015518:	1885883a 	add	r2,r3,r2
1001551c:	00000106 	br	10015524 <write+0x48>
10015520:	0005883a 	mov	r2,zero
10015524:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10015528:	e0bffb17 	ldw	r2,-20(fp)
1001552c:	10002126 	beq	r2,zero,100155b4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10015530:	e0bffb17 	ldw	r2,-20(fp)
10015534:	10800217 	ldw	r2,8(r2)
10015538:	108000cc 	andi	r2,r2,3
1001553c:	10001826 	beq	r2,zero,100155a0 <write+0xc4>
10015540:	e0bffb17 	ldw	r2,-20(fp)
10015544:	10800017 	ldw	r2,0(r2)
10015548:	10800617 	ldw	r2,24(r2)
1001554c:	10001426 	beq	r2,zero,100155a0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10015550:	e0bffb17 	ldw	r2,-20(fp)
10015554:	10800017 	ldw	r2,0(r2)
10015558:	10800617 	ldw	r2,24(r2)
1001555c:	e0ffff17 	ldw	r3,-4(fp)
10015560:	180d883a 	mov	r6,r3
10015564:	e17ffe17 	ldw	r5,-8(fp)
10015568:	e13ffb17 	ldw	r4,-20(fp)
1001556c:	103ee83a 	callr	r2
10015570:	e0bffc15 	stw	r2,-16(fp)
10015574:	e0bffc17 	ldw	r2,-16(fp)
10015578:	1000070e 	bge	r2,zero,10015598 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1001557c:	00154a00 	call	100154a0 <alt_get_errno>
10015580:	1007883a 	mov	r3,r2
10015584:	e0bffc17 	ldw	r2,-16(fp)
10015588:	0085c83a 	sub	r2,zero,r2
1001558c:	18800015 	stw	r2,0(r3)
        return -1;
10015590:	00bfffc4 	movi	r2,-1
10015594:	00000c06 	br	100155c8 <write+0xec>
      }
      return rval;
10015598:	e0bffc17 	ldw	r2,-16(fp)
1001559c:	00000a06 	br	100155c8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
100155a0:	00154a00 	call	100154a0 <alt_get_errno>
100155a4:	1007883a 	mov	r3,r2
100155a8:	00800344 	movi	r2,13
100155ac:	18800015 	stw	r2,0(r3)
100155b0:	00000406 	br	100155c4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
100155b4:	00154a00 	call	100154a0 <alt_get_errno>
100155b8:	1007883a 	mov	r3,r2
100155bc:	00801444 	movi	r2,81
100155c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
100155c4:	00bfffc4 	movi	r2,-1
}
100155c8:	e037883a 	mov	sp,fp
100155cc:	dfc00117 	ldw	ra,4(sp)
100155d0:	df000017 	ldw	fp,0(sp)
100155d4:	dec00204 	addi	sp,sp,8
100155d8:	f800283a 	ret

100155dc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
100155dc:	defffd04 	addi	sp,sp,-12
100155e0:	dfc00215 	stw	ra,8(sp)
100155e4:	df000115 	stw	fp,4(sp)
100155e8:	df000104 	addi	fp,sp,4
100155ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
100155f0:	d1605104 	addi	r5,gp,-32444
100155f4:	e13fff17 	ldw	r4,-4(fp)
100155f8:	00163dc0 	call	100163dc <alt_dev_llist_insert>
}
100155fc:	e037883a 	mov	sp,fp
10015600:	dfc00117 	ldw	ra,4(sp)
10015604:	df000017 	ldw	fp,0(sp)
10015608:	dec00204 	addi	sp,sp,8
1001560c:	f800283a 	ret

10015610 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10015610:	defffd04 	addi	sp,sp,-12
10015614:	dfc00215 	stw	ra,8(sp)
10015618:	df000115 	stw	fp,4(sp)
1001561c:	df000104 	addi	fp,sp,4
10015620:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10015624:	0016d880 	call	10016d88 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10015628:	00800044 	movi	r2,1
1001562c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10015630:	0001883a 	nop
10015634:	e037883a 	mov	sp,fp
10015638:	dfc00117 	ldw	ra,4(sp)
1001563c:	df000017 	ldw	fp,0(sp)
10015640:	dec00204 	addi	sp,sp,8
10015644:	f800283a 	ret

10015648 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10015648:	defffe04 	addi	sp,sp,-8
1001564c:	dfc00115 	stw	ra,4(sp)
10015650:	df000015 	stw	fp,0(sp)
10015654:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10015658:	01800144 	movi	r6,5
1001565c:	000b883a 	mov	r5,zero
10015660:	010400b4 	movhi	r4,4098
10015664:	21253d04 	addi	r4,r4,-27404
10015668:	00157f80 	call	100157f8 <altera_avalon_jtag_uart_init>
1001566c:	010400b4 	movhi	r4,4098
10015670:	21253304 	addi	r4,r4,-27444
10015674:	00155dc0 	call	100155dc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10015678:	0001883a 	nop
}
1001567c:	0001883a 	nop
10015680:	e037883a 	mov	sp,fp
10015684:	dfc00117 	ldw	ra,4(sp)
10015688:	df000017 	ldw	fp,0(sp)
1001568c:	dec00204 	addi	sp,sp,8
10015690:	f800283a 	ret

10015694 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10015694:	defffa04 	addi	sp,sp,-24
10015698:	dfc00515 	stw	ra,20(sp)
1001569c:	df000415 	stw	fp,16(sp)
100156a0:	df000404 	addi	fp,sp,16
100156a4:	e13ffd15 	stw	r4,-12(fp)
100156a8:	e17ffe15 	stw	r5,-8(fp)
100156ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100156b0:	e0bffd17 	ldw	r2,-12(fp)
100156b4:	10800017 	ldw	r2,0(r2)
100156b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
100156bc:	e0bffc17 	ldw	r2,-16(fp)
100156c0:	10c00a04 	addi	r3,r2,40
100156c4:	e0bffd17 	ldw	r2,-12(fp)
100156c8:	10800217 	ldw	r2,8(r2)
100156cc:	100f883a 	mov	r7,r2
100156d0:	e1bfff17 	ldw	r6,-4(fp)
100156d4:	e17ffe17 	ldw	r5,-8(fp)
100156d8:	1809883a 	mov	r4,r3
100156dc:	0015cbc0 	call	10015cbc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100156e0:	e037883a 	mov	sp,fp
100156e4:	dfc00117 	ldw	ra,4(sp)
100156e8:	df000017 	ldw	fp,0(sp)
100156ec:	dec00204 	addi	sp,sp,8
100156f0:	f800283a 	ret

100156f4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100156f4:	defffa04 	addi	sp,sp,-24
100156f8:	dfc00515 	stw	ra,20(sp)
100156fc:	df000415 	stw	fp,16(sp)
10015700:	df000404 	addi	fp,sp,16
10015704:	e13ffd15 	stw	r4,-12(fp)
10015708:	e17ffe15 	stw	r5,-8(fp)
1001570c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10015710:	e0bffd17 	ldw	r2,-12(fp)
10015714:	10800017 	ldw	r2,0(r2)
10015718:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1001571c:	e0bffc17 	ldw	r2,-16(fp)
10015720:	10c00a04 	addi	r3,r2,40
10015724:	e0bffd17 	ldw	r2,-12(fp)
10015728:	10800217 	ldw	r2,8(r2)
1001572c:	100f883a 	mov	r7,r2
10015730:	e1bfff17 	ldw	r6,-4(fp)
10015734:	e17ffe17 	ldw	r5,-8(fp)
10015738:	1809883a 	mov	r4,r3
1001573c:	0015ed80 	call	10015ed8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10015740:	e037883a 	mov	sp,fp
10015744:	dfc00117 	ldw	ra,4(sp)
10015748:	df000017 	ldw	fp,0(sp)
1001574c:	dec00204 	addi	sp,sp,8
10015750:	f800283a 	ret

10015754 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10015754:	defffc04 	addi	sp,sp,-16
10015758:	dfc00315 	stw	ra,12(sp)
1001575c:	df000215 	stw	fp,8(sp)
10015760:	df000204 	addi	fp,sp,8
10015764:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10015768:	e0bfff17 	ldw	r2,-4(fp)
1001576c:	10800017 	ldw	r2,0(r2)
10015770:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10015774:	e0bffe17 	ldw	r2,-8(fp)
10015778:	10c00a04 	addi	r3,r2,40
1001577c:	e0bfff17 	ldw	r2,-4(fp)
10015780:	10800217 	ldw	r2,8(r2)
10015784:	100b883a 	mov	r5,r2
10015788:	1809883a 	mov	r4,r3
1001578c:	0015b640 	call	10015b64 <altera_avalon_jtag_uart_close>
}
10015790:	e037883a 	mov	sp,fp
10015794:	dfc00117 	ldw	ra,4(sp)
10015798:	df000017 	ldw	fp,0(sp)
1001579c:	dec00204 	addi	sp,sp,8
100157a0:	f800283a 	ret

100157a4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100157a4:	defffa04 	addi	sp,sp,-24
100157a8:	dfc00515 	stw	ra,20(sp)
100157ac:	df000415 	stw	fp,16(sp)
100157b0:	df000404 	addi	fp,sp,16
100157b4:	e13ffd15 	stw	r4,-12(fp)
100157b8:	e17ffe15 	stw	r5,-8(fp)
100157bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100157c0:	e0bffd17 	ldw	r2,-12(fp)
100157c4:	10800017 	ldw	r2,0(r2)
100157c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100157cc:	e0bffc17 	ldw	r2,-16(fp)
100157d0:	10800a04 	addi	r2,r2,40
100157d4:	e1bfff17 	ldw	r6,-4(fp)
100157d8:	e17ffe17 	ldw	r5,-8(fp)
100157dc:	1009883a 	mov	r4,r2
100157e0:	0015bcc0 	call	10015bcc <altera_avalon_jtag_uart_ioctl>
}
100157e4:	e037883a 	mov	sp,fp
100157e8:	dfc00117 	ldw	ra,4(sp)
100157ec:	df000017 	ldw	fp,0(sp)
100157f0:	dec00204 	addi	sp,sp,8
100157f4:	f800283a 	ret

100157f8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
100157f8:	defffa04 	addi	sp,sp,-24
100157fc:	dfc00515 	stw	ra,20(sp)
10015800:	df000415 	stw	fp,16(sp)
10015804:	df000404 	addi	fp,sp,16
10015808:	e13ffd15 	stw	r4,-12(fp)
1001580c:	e17ffe15 	stw	r5,-8(fp)
10015810:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10015814:	e0bffd17 	ldw	r2,-12(fp)
10015818:	00c00044 	movi	r3,1
1001581c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10015820:	e0bffd17 	ldw	r2,-12(fp)
10015824:	10800017 	ldw	r2,0(r2)
10015828:	10800104 	addi	r2,r2,4
1001582c:	1007883a 	mov	r3,r2
10015830:	e0bffd17 	ldw	r2,-12(fp)
10015834:	10800817 	ldw	r2,32(r2)
10015838:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1001583c:	e0bffe17 	ldw	r2,-8(fp)
10015840:	e0ffff17 	ldw	r3,-4(fp)
10015844:	d8000015 	stw	zero,0(sp)
10015848:	e1fffd17 	ldw	r7,-12(fp)
1001584c:	01840074 	movhi	r6,4097
10015850:	31962e04 	addi	r6,r6,22712
10015854:	180b883a 	mov	r5,r3
10015858:	1009883a 	mov	r4,r2
1001585c:	00165600 	call	10016560 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10015860:	e0bffd17 	ldw	r2,-12(fp)
10015864:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10015868:	e0bffd17 	ldw	r2,-12(fp)
1001586c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10015870:	d0e76917 	ldw	r3,-25180(gp)
10015874:	e1fffd17 	ldw	r7,-12(fp)
10015878:	01840074 	movhi	r6,4097
1001587c:	3196b104 	addi	r6,r6,23236
10015880:	180b883a 	mov	r5,r3
10015884:	1009883a 	mov	r4,r2
10015888:	00160fc0 	call	100160fc <alt_alarm_start>
1001588c:	1000040e 	bge	r2,zero,100158a0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10015890:	e0fffd17 	ldw	r3,-12(fp)
10015894:	00a00034 	movhi	r2,32768
10015898:	10bfffc4 	addi	r2,r2,-1
1001589c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100158a0:	0001883a 	nop
100158a4:	e037883a 	mov	sp,fp
100158a8:	dfc00117 	ldw	ra,4(sp)
100158ac:	df000017 	ldw	fp,0(sp)
100158b0:	dec00204 	addi	sp,sp,8
100158b4:	f800283a 	ret

100158b8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
100158b8:	defff804 	addi	sp,sp,-32
100158bc:	df000715 	stw	fp,28(sp)
100158c0:	df000704 	addi	fp,sp,28
100158c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
100158c8:	e0bfff17 	ldw	r2,-4(fp)
100158cc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
100158d0:	e0bffb17 	ldw	r2,-20(fp)
100158d4:	10800017 	ldw	r2,0(r2)
100158d8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100158dc:	e0bffc17 	ldw	r2,-16(fp)
100158e0:	10800104 	addi	r2,r2,4
100158e4:	10800037 	ldwio	r2,0(r2)
100158e8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
100158ec:	e0bffd17 	ldw	r2,-12(fp)
100158f0:	1080c00c 	andi	r2,r2,768
100158f4:	10006d26 	beq	r2,zero,10015aac <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
100158f8:	e0bffd17 	ldw	r2,-12(fp)
100158fc:	1080400c 	andi	r2,r2,256
10015900:	10003526 	beq	r2,zero,100159d8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10015904:	00800074 	movhi	r2,1
10015908:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001590c:	e0bffb17 	ldw	r2,-20(fp)
10015910:	10800a17 	ldw	r2,40(r2)
10015914:	10800044 	addi	r2,r2,1
10015918:	1081ffcc 	andi	r2,r2,2047
1001591c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10015920:	e0bffb17 	ldw	r2,-20(fp)
10015924:	10c00b17 	ldw	r3,44(r2)
10015928:	e0bffe17 	ldw	r2,-8(fp)
1001592c:	18801526 	beq	r3,r2,10015984 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10015930:	e0bffc17 	ldw	r2,-16(fp)
10015934:	10800037 	ldwio	r2,0(r2)
10015938:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1001593c:	e0bff917 	ldw	r2,-28(fp)
10015940:	10a0000c 	andi	r2,r2,32768
10015944:	10001126 	beq	r2,zero,1001598c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10015948:	e0bffb17 	ldw	r2,-20(fp)
1001594c:	10800a17 	ldw	r2,40(r2)
10015950:	e0fff917 	ldw	r3,-28(fp)
10015954:	1809883a 	mov	r4,r3
10015958:	e0fffb17 	ldw	r3,-20(fp)
1001595c:	1885883a 	add	r2,r3,r2
10015960:	10800e04 	addi	r2,r2,56
10015964:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10015968:	e0bffb17 	ldw	r2,-20(fp)
1001596c:	10800a17 	ldw	r2,40(r2)
10015970:	10800044 	addi	r2,r2,1
10015974:	10c1ffcc 	andi	r3,r2,2047
10015978:	e0bffb17 	ldw	r2,-20(fp)
1001597c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10015980:	003fe206 	br	1001590c <__alt_data_end+0xf801590c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10015984:	0001883a 	nop
10015988:	00000106 	br	10015990 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1001598c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10015990:	e0bff917 	ldw	r2,-28(fp)
10015994:	10bfffec 	andhi	r2,r2,65535
10015998:	10000f26 	beq	r2,zero,100159d8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001599c:	e0bffb17 	ldw	r2,-20(fp)
100159a0:	10c00817 	ldw	r3,32(r2)
100159a4:	00bfff84 	movi	r2,-2
100159a8:	1886703a 	and	r3,r3,r2
100159ac:	e0bffb17 	ldw	r2,-20(fp)
100159b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100159b4:	e0bffc17 	ldw	r2,-16(fp)
100159b8:	10800104 	addi	r2,r2,4
100159bc:	1007883a 	mov	r3,r2
100159c0:	e0bffb17 	ldw	r2,-20(fp)
100159c4:	10800817 	ldw	r2,32(r2)
100159c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100159cc:	e0bffc17 	ldw	r2,-16(fp)
100159d0:	10800104 	addi	r2,r2,4
100159d4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100159d8:	e0bffd17 	ldw	r2,-12(fp)
100159dc:	1080800c 	andi	r2,r2,512
100159e0:	103fbe26 	beq	r2,zero,100158dc <__alt_data_end+0xf80158dc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100159e4:	e0bffd17 	ldw	r2,-12(fp)
100159e8:	1004d43a 	srli	r2,r2,16
100159ec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
100159f0:	00001406 	br	10015a44 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
100159f4:	e0bffc17 	ldw	r2,-16(fp)
100159f8:	e0fffb17 	ldw	r3,-20(fp)
100159fc:	18c00d17 	ldw	r3,52(r3)
10015a00:	e13ffb17 	ldw	r4,-20(fp)
10015a04:	20c7883a 	add	r3,r4,r3
10015a08:	18c20e04 	addi	r3,r3,2104
10015a0c:	18c00003 	ldbu	r3,0(r3)
10015a10:	18c03fcc 	andi	r3,r3,255
10015a14:	18c0201c 	xori	r3,r3,128
10015a18:	18ffe004 	addi	r3,r3,-128
10015a1c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10015a20:	e0bffb17 	ldw	r2,-20(fp)
10015a24:	10800d17 	ldw	r2,52(r2)
10015a28:	10800044 	addi	r2,r2,1
10015a2c:	10c1ffcc 	andi	r3,r2,2047
10015a30:	e0bffb17 	ldw	r2,-20(fp)
10015a34:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10015a38:	e0bffa17 	ldw	r2,-24(fp)
10015a3c:	10bfffc4 	addi	r2,r2,-1
10015a40:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10015a44:	e0bffa17 	ldw	r2,-24(fp)
10015a48:	10000526 	beq	r2,zero,10015a60 <altera_avalon_jtag_uart_irq+0x1a8>
10015a4c:	e0bffb17 	ldw	r2,-20(fp)
10015a50:	10c00d17 	ldw	r3,52(r2)
10015a54:	e0bffb17 	ldw	r2,-20(fp)
10015a58:	10800c17 	ldw	r2,48(r2)
10015a5c:	18bfe51e 	bne	r3,r2,100159f4 <__alt_data_end+0xf80159f4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10015a60:	e0bffa17 	ldw	r2,-24(fp)
10015a64:	103f9d26 	beq	r2,zero,100158dc <__alt_data_end+0xf80158dc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10015a68:	e0bffb17 	ldw	r2,-20(fp)
10015a6c:	10c00817 	ldw	r3,32(r2)
10015a70:	00bfff44 	movi	r2,-3
10015a74:	1886703a 	and	r3,r3,r2
10015a78:	e0bffb17 	ldw	r2,-20(fp)
10015a7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10015a80:	e0bffb17 	ldw	r2,-20(fp)
10015a84:	10800017 	ldw	r2,0(r2)
10015a88:	10800104 	addi	r2,r2,4
10015a8c:	1007883a 	mov	r3,r2
10015a90:	e0bffb17 	ldw	r2,-20(fp)
10015a94:	10800817 	ldw	r2,32(r2)
10015a98:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10015a9c:	e0bffc17 	ldw	r2,-16(fp)
10015aa0:	10800104 	addi	r2,r2,4
10015aa4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10015aa8:	003f8c06 	br	100158dc <__alt_data_end+0xf80158dc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10015aac:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10015ab0:	0001883a 	nop
10015ab4:	e037883a 	mov	sp,fp
10015ab8:	df000017 	ldw	fp,0(sp)
10015abc:	dec00104 	addi	sp,sp,4
10015ac0:	f800283a 	ret

10015ac4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10015ac4:	defff804 	addi	sp,sp,-32
10015ac8:	df000715 	stw	fp,28(sp)
10015acc:	df000704 	addi	fp,sp,28
10015ad0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10015ad4:	e0bffb17 	ldw	r2,-20(fp)
10015ad8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10015adc:	e0bff917 	ldw	r2,-28(fp)
10015ae0:	10800017 	ldw	r2,0(r2)
10015ae4:	10800104 	addi	r2,r2,4
10015ae8:	10800037 	ldwio	r2,0(r2)
10015aec:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10015af0:	e0bffa17 	ldw	r2,-24(fp)
10015af4:	1081000c 	andi	r2,r2,1024
10015af8:	10000b26 	beq	r2,zero,10015b28 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10015afc:	e0bff917 	ldw	r2,-28(fp)
10015b00:	10800017 	ldw	r2,0(r2)
10015b04:	10800104 	addi	r2,r2,4
10015b08:	1007883a 	mov	r3,r2
10015b0c:	e0bff917 	ldw	r2,-28(fp)
10015b10:	10800817 	ldw	r2,32(r2)
10015b14:	10810014 	ori	r2,r2,1024
10015b18:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10015b1c:	e0bff917 	ldw	r2,-28(fp)
10015b20:	10000915 	stw	zero,36(r2)
10015b24:	00000a06 	br	10015b50 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10015b28:	e0bff917 	ldw	r2,-28(fp)
10015b2c:	10c00917 	ldw	r3,36(r2)
10015b30:	00a00034 	movhi	r2,32768
10015b34:	10bfff04 	addi	r2,r2,-4
10015b38:	10c00536 	bltu	r2,r3,10015b50 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10015b3c:	e0bff917 	ldw	r2,-28(fp)
10015b40:	10800917 	ldw	r2,36(r2)
10015b44:	10c00044 	addi	r3,r2,1
10015b48:	e0bff917 	ldw	r2,-28(fp)
10015b4c:	10c00915 	stw	r3,36(r2)
10015b50:	d0a76917 	ldw	r2,-25180(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10015b54:	e037883a 	mov	sp,fp
10015b58:	df000017 	ldw	fp,0(sp)
10015b5c:	dec00104 	addi	sp,sp,4
10015b60:	f800283a 	ret

10015b64 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10015b64:	defffd04 	addi	sp,sp,-12
10015b68:	df000215 	stw	fp,8(sp)
10015b6c:	df000204 	addi	fp,sp,8
10015b70:	e13ffe15 	stw	r4,-8(fp)
10015b74:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10015b78:	00000506 	br	10015b90 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10015b7c:	e0bfff17 	ldw	r2,-4(fp)
10015b80:	1090000c 	andi	r2,r2,16384
10015b84:	10000226 	beq	r2,zero,10015b90 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10015b88:	00bffd44 	movi	r2,-11
10015b8c:	00000b06 	br	10015bbc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10015b90:	e0bffe17 	ldw	r2,-8(fp)
10015b94:	10c00d17 	ldw	r3,52(r2)
10015b98:	e0bffe17 	ldw	r2,-8(fp)
10015b9c:	10800c17 	ldw	r2,48(r2)
10015ba0:	18800526 	beq	r3,r2,10015bb8 <altera_avalon_jtag_uart_close+0x54>
10015ba4:	e0bffe17 	ldw	r2,-8(fp)
10015ba8:	10c00917 	ldw	r3,36(r2)
10015bac:	e0bffe17 	ldw	r2,-8(fp)
10015bb0:	10800117 	ldw	r2,4(r2)
10015bb4:	18bff136 	bltu	r3,r2,10015b7c <__alt_data_end+0xf8015b7c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10015bb8:	0005883a 	mov	r2,zero
}
10015bbc:	e037883a 	mov	sp,fp
10015bc0:	df000017 	ldw	fp,0(sp)
10015bc4:	dec00104 	addi	sp,sp,4
10015bc8:	f800283a 	ret

10015bcc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10015bcc:	defffa04 	addi	sp,sp,-24
10015bd0:	df000515 	stw	fp,20(sp)
10015bd4:	df000504 	addi	fp,sp,20
10015bd8:	e13ffd15 	stw	r4,-12(fp)
10015bdc:	e17ffe15 	stw	r5,-8(fp)
10015be0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10015be4:	00bff9c4 	movi	r2,-25
10015be8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10015bec:	e0bffe17 	ldw	r2,-8(fp)
10015bf0:	10da8060 	cmpeqi	r3,r2,27137
10015bf4:	1800031e 	bne	r3,zero,10015c04 <altera_avalon_jtag_uart_ioctl+0x38>
10015bf8:	109a80a0 	cmpeqi	r2,r2,27138
10015bfc:	1000181e 	bne	r2,zero,10015c60 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10015c00:	00002906 	br	10015ca8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10015c04:	e0bffd17 	ldw	r2,-12(fp)
10015c08:	10c00117 	ldw	r3,4(r2)
10015c0c:	00a00034 	movhi	r2,32768
10015c10:	10bfffc4 	addi	r2,r2,-1
10015c14:	18802126 	beq	r3,r2,10015c9c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10015c18:	e0bfff17 	ldw	r2,-4(fp)
10015c1c:	10800017 	ldw	r2,0(r2)
10015c20:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10015c24:	e0bffc17 	ldw	r2,-16(fp)
10015c28:	10800090 	cmplti	r2,r2,2
10015c2c:	1000061e 	bne	r2,zero,10015c48 <altera_avalon_jtag_uart_ioctl+0x7c>
10015c30:	e0fffc17 	ldw	r3,-16(fp)
10015c34:	00a00034 	movhi	r2,32768
10015c38:	10bfffc4 	addi	r2,r2,-1
10015c3c:	18800226 	beq	r3,r2,10015c48 <altera_avalon_jtag_uart_ioctl+0x7c>
10015c40:	e0bffc17 	ldw	r2,-16(fp)
10015c44:	00000206 	br	10015c50 <altera_avalon_jtag_uart_ioctl+0x84>
10015c48:	00a00034 	movhi	r2,32768
10015c4c:	10bfff84 	addi	r2,r2,-2
10015c50:	e0fffd17 	ldw	r3,-12(fp)
10015c54:	18800115 	stw	r2,4(r3)
      rc = 0;
10015c58:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10015c5c:	00000f06 	br	10015c9c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10015c60:	e0bffd17 	ldw	r2,-12(fp)
10015c64:	10c00117 	ldw	r3,4(r2)
10015c68:	00a00034 	movhi	r2,32768
10015c6c:	10bfffc4 	addi	r2,r2,-1
10015c70:	18800c26 	beq	r3,r2,10015ca4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10015c74:	e0bffd17 	ldw	r2,-12(fp)
10015c78:	10c00917 	ldw	r3,36(r2)
10015c7c:	e0bffd17 	ldw	r2,-12(fp)
10015c80:	10800117 	ldw	r2,4(r2)
10015c84:	1885803a 	cmpltu	r2,r3,r2
10015c88:	10c03fcc 	andi	r3,r2,255
10015c8c:	e0bfff17 	ldw	r2,-4(fp)
10015c90:	10c00015 	stw	r3,0(r2)
      rc = 0;
10015c94:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10015c98:	00000206 	br	10015ca4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10015c9c:	0001883a 	nop
10015ca0:	00000106 	br	10015ca8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10015ca4:	0001883a 	nop

  default:
    break;
  }

  return rc;
10015ca8:	e0bffb17 	ldw	r2,-20(fp)
}
10015cac:	e037883a 	mov	sp,fp
10015cb0:	df000017 	ldw	fp,0(sp)
10015cb4:	dec00104 	addi	sp,sp,4
10015cb8:	f800283a 	ret

10015cbc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10015cbc:	defff304 	addi	sp,sp,-52
10015cc0:	dfc00c15 	stw	ra,48(sp)
10015cc4:	df000b15 	stw	fp,44(sp)
10015cc8:	df000b04 	addi	fp,sp,44
10015ccc:	e13ffc15 	stw	r4,-16(fp)
10015cd0:	e17ffd15 	stw	r5,-12(fp)
10015cd4:	e1bffe15 	stw	r6,-8(fp)
10015cd8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10015cdc:	e0bffd17 	ldw	r2,-12(fp)
10015ce0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10015ce4:	00004706 	br	10015e04 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10015ce8:	e0bffc17 	ldw	r2,-16(fp)
10015cec:	10800a17 	ldw	r2,40(r2)
10015cf0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10015cf4:	e0bffc17 	ldw	r2,-16(fp)
10015cf8:	10800b17 	ldw	r2,44(r2)
10015cfc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10015d00:	e0fff717 	ldw	r3,-36(fp)
10015d04:	e0bff817 	ldw	r2,-32(fp)
10015d08:	18800536 	bltu	r3,r2,10015d20 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10015d0c:	e0fff717 	ldw	r3,-36(fp)
10015d10:	e0bff817 	ldw	r2,-32(fp)
10015d14:	1885c83a 	sub	r2,r3,r2
10015d18:	e0bff615 	stw	r2,-40(fp)
10015d1c:	00000406 	br	10015d30 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10015d20:	00c20004 	movi	r3,2048
10015d24:	e0bff817 	ldw	r2,-32(fp)
10015d28:	1885c83a 	sub	r2,r3,r2
10015d2c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10015d30:	e0bff617 	ldw	r2,-40(fp)
10015d34:	10001e26 	beq	r2,zero,10015db0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10015d38:	e0fffe17 	ldw	r3,-8(fp)
10015d3c:	e0bff617 	ldw	r2,-40(fp)
10015d40:	1880022e 	bgeu	r3,r2,10015d4c <altera_avalon_jtag_uart_read+0x90>
        n = space;
10015d44:	e0bffe17 	ldw	r2,-8(fp)
10015d48:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10015d4c:	e0bffc17 	ldw	r2,-16(fp)
10015d50:	10c00e04 	addi	r3,r2,56
10015d54:	e0bff817 	ldw	r2,-32(fp)
10015d58:	1885883a 	add	r2,r3,r2
10015d5c:	e1bff617 	ldw	r6,-40(fp)
10015d60:	100b883a 	mov	r5,r2
10015d64:	e13ff517 	ldw	r4,-44(fp)
10015d68:	000dac40 	call	1000dac4 <memcpy>
      ptr   += n;
10015d6c:	e0fff517 	ldw	r3,-44(fp)
10015d70:	e0bff617 	ldw	r2,-40(fp)
10015d74:	1885883a 	add	r2,r3,r2
10015d78:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10015d7c:	e0fffe17 	ldw	r3,-8(fp)
10015d80:	e0bff617 	ldw	r2,-40(fp)
10015d84:	1885c83a 	sub	r2,r3,r2
10015d88:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10015d8c:	e0fff817 	ldw	r3,-32(fp)
10015d90:	e0bff617 	ldw	r2,-40(fp)
10015d94:	1885883a 	add	r2,r3,r2
10015d98:	10c1ffcc 	andi	r3,r2,2047
10015d9c:	e0bffc17 	ldw	r2,-16(fp)
10015da0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10015da4:	e0bffe17 	ldw	r2,-8(fp)
10015da8:	00bfcf16 	blt	zero,r2,10015ce8 <__alt_data_end+0xf8015ce8>
10015dac:	00000106 	br	10015db4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10015db0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10015db4:	e0fff517 	ldw	r3,-44(fp)
10015db8:	e0bffd17 	ldw	r2,-12(fp)
10015dbc:	1880141e 	bne	r3,r2,10015e10 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10015dc0:	e0bfff17 	ldw	r2,-4(fp)
10015dc4:	1090000c 	andi	r2,r2,16384
10015dc8:	1000131e 	bne	r2,zero,10015e18 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10015dcc:	0001883a 	nop
10015dd0:	e0bffc17 	ldw	r2,-16(fp)
10015dd4:	10c00a17 	ldw	r3,40(r2)
10015dd8:	e0bff717 	ldw	r2,-36(fp)
10015ddc:	1880051e 	bne	r3,r2,10015df4 <altera_avalon_jtag_uart_read+0x138>
10015de0:	e0bffc17 	ldw	r2,-16(fp)
10015de4:	10c00917 	ldw	r3,36(r2)
10015de8:	e0bffc17 	ldw	r2,-16(fp)
10015dec:	10800117 	ldw	r2,4(r2)
10015df0:	18bff736 	bltu	r3,r2,10015dd0 <__alt_data_end+0xf8015dd0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10015df4:	e0bffc17 	ldw	r2,-16(fp)
10015df8:	10c00a17 	ldw	r3,40(r2)
10015dfc:	e0bff717 	ldw	r2,-36(fp)
10015e00:	18800726 	beq	r3,r2,10015e20 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10015e04:	e0bffe17 	ldw	r2,-8(fp)
10015e08:	00bfb716 	blt	zero,r2,10015ce8 <__alt_data_end+0xf8015ce8>
10015e0c:	00000506 	br	10015e24 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10015e10:	0001883a 	nop
10015e14:	00000306 	br	10015e24 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10015e18:	0001883a 	nop
10015e1c:	00000106 	br	10015e24 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10015e20:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10015e24:	e0fff517 	ldw	r3,-44(fp)
10015e28:	e0bffd17 	ldw	r2,-12(fp)
10015e2c:	18801826 	beq	r3,r2,10015e90 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10015e30:	0005303a 	rdctl	r2,status
10015e34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10015e38:	e0fffb17 	ldw	r3,-20(fp)
10015e3c:	00bfff84 	movi	r2,-2
10015e40:	1884703a 	and	r2,r3,r2
10015e44:	1001703a 	wrctl	status,r2
  
  return context;
10015e48:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10015e4c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10015e50:	e0bffc17 	ldw	r2,-16(fp)
10015e54:	10800817 	ldw	r2,32(r2)
10015e58:	10c00054 	ori	r3,r2,1
10015e5c:	e0bffc17 	ldw	r2,-16(fp)
10015e60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10015e64:	e0bffc17 	ldw	r2,-16(fp)
10015e68:	10800017 	ldw	r2,0(r2)
10015e6c:	10800104 	addi	r2,r2,4
10015e70:	1007883a 	mov	r3,r2
10015e74:	e0bffc17 	ldw	r2,-16(fp)
10015e78:	10800817 	ldw	r2,32(r2)
10015e7c:	18800035 	stwio	r2,0(r3)
10015e80:	e0bffa17 	ldw	r2,-24(fp)
10015e84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10015e88:	e0bff917 	ldw	r2,-28(fp)
10015e8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10015e90:	e0fff517 	ldw	r3,-44(fp)
10015e94:	e0bffd17 	ldw	r2,-12(fp)
10015e98:	18800426 	beq	r3,r2,10015eac <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10015e9c:	e0fff517 	ldw	r3,-44(fp)
10015ea0:	e0bffd17 	ldw	r2,-12(fp)
10015ea4:	1885c83a 	sub	r2,r3,r2
10015ea8:	00000606 	br	10015ec4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10015eac:	e0bfff17 	ldw	r2,-4(fp)
10015eb0:	1090000c 	andi	r2,r2,16384
10015eb4:	10000226 	beq	r2,zero,10015ec0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10015eb8:	00bffd44 	movi	r2,-11
10015ebc:	00000106 	br	10015ec4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10015ec0:	00bffec4 	movi	r2,-5
}
10015ec4:	e037883a 	mov	sp,fp
10015ec8:	dfc00117 	ldw	ra,4(sp)
10015ecc:	df000017 	ldw	fp,0(sp)
10015ed0:	dec00204 	addi	sp,sp,8
10015ed4:	f800283a 	ret

10015ed8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10015ed8:	defff304 	addi	sp,sp,-52
10015edc:	dfc00c15 	stw	ra,48(sp)
10015ee0:	df000b15 	stw	fp,44(sp)
10015ee4:	df000b04 	addi	fp,sp,44
10015ee8:	e13ffc15 	stw	r4,-16(fp)
10015eec:	e17ffd15 	stw	r5,-12(fp)
10015ef0:	e1bffe15 	stw	r6,-8(fp)
10015ef4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10015ef8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10015efc:	e0bffd17 	ldw	r2,-12(fp)
10015f00:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10015f04:	00003706 	br	10015fe4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10015f08:	e0bffc17 	ldw	r2,-16(fp)
10015f0c:	10800c17 	ldw	r2,48(r2)
10015f10:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10015f14:	e0bffc17 	ldw	r2,-16(fp)
10015f18:	10800d17 	ldw	r2,52(r2)
10015f1c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10015f20:	e0fff917 	ldw	r3,-28(fp)
10015f24:	e0bff517 	ldw	r2,-44(fp)
10015f28:	1880062e 	bgeu	r3,r2,10015f44 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10015f2c:	e0fff517 	ldw	r3,-44(fp)
10015f30:	e0bff917 	ldw	r2,-28(fp)
10015f34:	1885c83a 	sub	r2,r3,r2
10015f38:	10bfffc4 	addi	r2,r2,-1
10015f3c:	e0bff615 	stw	r2,-40(fp)
10015f40:	00000b06 	br	10015f70 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10015f44:	e0bff517 	ldw	r2,-44(fp)
10015f48:	10000526 	beq	r2,zero,10015f60 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10015f4c:	00c20004 	movi	r3,2048
10015f50:	e0bff917 	ldw	r2,-28(fp)
10015f54:	1885c83a 	sub	r2,r3,r2
10015f58:	e0bff615 	stw	r2,-40(fp)
10015f5c:	00000406 	br	10015f70 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10015f60:	00c1ffc4 	movi	r3,2047
10015f64:	e0bff917 	ldw	r2,-28(fp)
10015f68:	1885c83a 	sub	r2,r3,r2
10015f6c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10015f70:	e0bff617 	ldw	r2,-40(fp)
10015f74:	10001e26 	beq	r2,zero,10015ff0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10015f78:	e0fffe17 	ldw	r3,-8(fp)
10015f7c:	e0bff617 	ldw	r2,-40(fp)
10015f80:	1880022e 	bgeu	r3,r2,10015f8c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10015f84:	e0bffe17 	ldw	r2,-8(fp)
10015f88:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10015f8c:	e0bffc17 	ldw	r2,-16(fp)
10015f90:	10c20e04 	addi	r3,r2,2104
10015f94:	e0bff917 	ldw	r2,-28(fp)
10015f98:	1885883a 	add	r2,r3,r2
10015f9c:	e1bff617 	ldw	r6,-40(fp)
10015fa0:	e17ffd17 	ldw	r5,-12(fp)
10015fa4:	1009883a 	mov	r4,r2
10015fa8:	000dac40 	call	1000dac4 <memcpy>
      ptr   += n;
10015fac:	e0fffd17 	ldw	r3,-12(fp)
10015fb0:	e0bff617 	ldw	r2,-40(fp)
10015fb4:	1885883a 	add	r2,r3,r2
10015fb8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10015fbc:	e0fffe17 	ldw	r3,-8(fp)
10015fc0:	e0bff617 	ldw	r2,-40(fp)
10015fc4:	1885c83a 	sub	r2,r3,r2
10015fc8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10015fcc:	e0fff917 	ldw	r3,-28(fp)
10015fd0:	e0bff617 	ldw	r2,-40(fp)
10015fd4:	1885883a 	add	r2,r3,r2
10015fd8:	10c1ffcc 	andi	r3,r2,2047
10015fdc:	e0bffc17 	ldw	r2,-16(fp)
10015fe0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10015fe4:	e0bffe17 	ldw	r2,-8(fp)
10015fe8:	00bfc716 	blt	zero,r2,10015f08 <__alt_data_end+0xf8015f08>
10015fec:	00000106 	br	10015ff4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10015ff0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10015ff4:	0005303a 	rdctl	r2,status
10015ff8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10015ffc:	e0fffb17 	ldw	r3,-20(fp)
10016000:	00bfff84 	movi	r2,-2
10016004:	1884703a 	and	r2,r3,r2
10016008:	1001703a 	wrctl	status,r2
  
  return context;
1001600c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10016010:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10016014:	e0bffc17 	ldw	r2,-16(fp)
10016018:	10800817 	ldw	r2,32(r2)
1001601c:	10c00094 	ori	r3,r2,2
10016020:	e0bffc17 	ldw	r2,-16(fp)
10016024:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10016028:	e0bffc17 	ldw	r2,-16(fp)
1001602c:	10800017 	ldw	r2,0(r2)
10016030:	10800104 	addi	r2,r2,4
10016034:	1007883a 	mov	r3,r2
10016038:	e0bffc17 	ldw	r2,-16(fp)
1001603c:	10800817 	ldw	r2,32(r2)
10016040:	18800035 	stwio	r2,0(r3)
10016044:	e0bffa17 	ldw	r2,-24(fp)
10016048:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001604c:	e0bff817 	ldw	r2,-32(fp)
10016050:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10016054:	e0bffe17 	ldw	r2,-8(fp)
10016058:	0080100e 	bge	zero,r2,1001609c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1001605c:	e0bfff17 	ldw	r2,-4(fp)
10016060:	1090000c 	andi	r2,r2,16384
10016064:	1000101e 	bne	r2,zero,100160a8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10016068:	0001883a 	nop
1001606c:	e0bffc17 	ldw	r2,-16(fp)
10016070:	10c00d17 	ldw	r3,52(r2)
10016074:	e0bff517 	ldw	r2,-44(fp)
10016078:	1880051e 	bne	r3,r2,10016090 <altera_avalon_jtag_uart_write+0x1b8>
1001607c:	e0bffc17 	ldw	r2,-16(fp)
10016080:	10c00917 	ldw	r3,36(r2)
10016084:	e0bffc17 	ldw	r2,-16(fp)
10016088:	10800117 	ldw	r2,4(r2)
1001608c:	18bff736 	bltu	r3,r2,1001606c <__alt_data_end+0xf801606c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10016090:	e0bffc17 	ldw	r2,-16(fp)
10016094:	10800917 	ldw	r2,36(r2)
10016098:	1000051e 	bne	r2,zero,100160b0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1001609c:	e0bffe17 	ldw	r2,-8(fp)
100160a0:	00bfd016 	blt	zero,r2,10015fe4 <__alt_data_end+0xf8015fe4>
100160a4:	00000306 	br	100160b4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
100160a8:	0001883a 	nop
100160ac:	00000106 	br	100160b4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
100160b0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
100160b4:	e0fffd17 	ldw	r3,-12(fp)
100160b8:	e0bff717 	ldw	r2,-36(fp)
100160bc:	18800426 	beq	r3,r2,100160d0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
100160c0:	e0fffd17 	ldw	r3,-12(fp)
100160c4:	e0bff717 	ldw	r2,-36(fp)
100160c8:	1885c83a 	sub	r2,r3,r2
100160cc:	00000606 	br	100160e8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
100160d0:	e0bfff17 	ldw	r2,-4(fp)
100160d4:	1090000c 	andi	r2,r2,16384
100160d8:	10000226 	beq	r2,zero,100160e4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
100160dc:	00bffd44 	movi	r2,-11
100160e0:	00000106 	br	100160e8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100160e4:	00bffec4 	movi	r2,-5
}
100160e8:	e037883a 	mov	sp,fp
100160ec:	dfc00117 	ldw	ra,4(sp)
100160f0:	df000017 	ldw	fp,0(sp)
100160f4:	dec00204 	addi	sp,sp,8
100160f8:	f800283a 	ret

100160fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100160fc:	defff504 	addi	sp,sp,-44
10016100:	df000a15 	stw	fp,40(sp)
10016104:	df000a04 	addi	fp,sp,40
10016108:	e13ffc15 	stw	r4,-16(fp)
1001610c:	e17ffd15 	stw	r5,-12(fp)
10016110:	e1bffe15 	stw	r6,-8(fp)
10016114:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10016118:	e03ff615 	stw	zero,-40(fp)
1001611c:	d0a76917 	ldw	r2,-25180(gp)
  
  if (alt_ticks_per_second ())
10016120:	10003c26 	beq	r2,zero,10016214 <alt_alarm_start+0x118>
  {
    if (alarm)
10016124:	e0bffc17 	ldw	r2,-16(fp)
10016128:	10003826 	beq	r2,zero,1001620c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1001612c:	e0bffc17 	ldw	r2,-16(fp)
10016130:	e0fffe17 	ldw	r3,-8(fp)
10016134:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10016138:	e0bffc17 	ldw	r2,-16(fp)
1001613c:	e0ffff17 	ldw	r3,-4(fp)
10016140:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016144:	0005303a 	rdctl	r2,status
10016148:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001614c:	e0fff917 	ldw	r3,-28(fp)
10016150:	00bfff84 	movi	r2,-2
10016154:	1884703a 	and	r2,r3,r2
10016158:	1001703a 	wrctl	status,r2
  
  return context;
1001615c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10016160:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10016164:	d0a76a17 	ldw	r2,-25176(gp)
      
      current_nticks = alt_nticks();
10016168:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1001616c:	e0fffd17 	ldw	r3,-12(fp)
10016170:	e0bff617 	ldw	r2,-40(fp)
10016174:	1885883a 	add	r2,r3,r2
10016178:	10c00044 	addi	r3,r2,1
1001617c:	e0bffc17 	ldw	r2,-16(fp)
10016180:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10016184:	e0bffc17 	ldw	r2,-16(fp)
10016188:	10c00217 	ldw	r3,8(r2)
1001618c:	e0bff617 	ldw	r2,-40(fp)
10016190:	1880042e 	bgeu	r3,r2,100161a4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10016194:	e0bffc17 	ldw	r2,-16(fp)
10016198:	00c00044 	movi	r3,1
1001619c:	10c00405 	stb	r3,16(r2)
100161a0:	00000206 	br	100161ac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
100161a4:	e0bffc17 	ldw	r2,-16(fp)
100161a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100161ac:	e0bffc17 	ldw	r2,-16(fp)
100161b0:	d0e05704 	addi	r3,gp,-32420
100161b4:	e0fffa15 	stw	r3,-24(fp)
100161b8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100161bc:	e0bffb17 	ldw	r2,-20(fp)
100161c0:	e0fffa17 	ldw	r3,-24(fp)
100161c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100161c8:	e0bffa17 	ldw	r2,-24(fp)
100161cc:	10c00017 	ldw	r3,0(r2)
100161d0:	e0bffb17 	ldw	r2,-20(fp)
100161d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100161d8:	e0bffa17 	ldw	r2,-24(fp)
100161dc:	10800017 	ldw	r2,0(r2)
100161e0:	e0fffb17 	ldw	r3,-20(fp)
100161e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100161e8:	e0bffa17 	ldw	r2,-24(fp)
100161ec:	e0fffb17 	ldw	r3,-20(fp)
100161f0:	10c00015 	stw	r3,0(r2)
100161f4:	e0bff817 	ldw	r2,-32(fp)
100161f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100161fc:	e0bff717 	ldw	r2,-36(fp)
10016200:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10016204:	0005883a 	mov	r2,zero
10016208:	00000306 	br	10016218 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1001620c:	00bffa84 	movi	r2,-22
10016210:	00000106 	br	10016218 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10016214:	00bfde84 	movi	r2,-134
  }
}
10016218:	e037883a 	mov	sp,fp
1001621c:	df000017 	ldw	fp,0(sp)
10016220:	dec00104 	addi	sp,sp,4
10016224:	f800283a 	ret

10016228 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10016228:	defffa04 	addi	sp,sp,-24
1001622c:	dfc00515 	stw	ra,20(sp)
10016230:	df000415 	stw	fp,16(sp)
10016234:	df000404 	addi	fp,sp,16
10016238:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1001623c:	00800244 	movi	r2,9
10016240:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10016244:	014003f4 	movhi	r5,15
10016248:	29509004 	addi	r5,r5,16960
1001624c:	e13ffd17 	ldw	r4,-12(fp)
10016250:	0007d040 	call	10007d04 <__mulsi3>
10016254:	100b883a 	mov	r5,r2
10016258:	0100bef4 	movhi	r4,763
1001625c:	213c2004 	addi	r4,r4,-3968
10016260:	0007c480 	call	10007c48 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10016264:	100b883a 	mov	r5,r2
10016268:	01200034 	movhi	r4,32768
1001626c:	213fffc4 	addi	r4,r4,-1
10016270:	0007c480 	call	10007c48 <__udivsi3>
10016274:	100b883a 	mov	r5,r2
10016278:	e13fff17 	ldw	r4,-4(fp)
1001627c:	0007c480 	call	10007c48 <__udivsi3>
10016280:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10016284:	e0bffe17 	ldw	r2,-8(fp)
10016288:	10002a26 	beq	r2,zero,10016334 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
1001628c:	e03ffc15 	stw	zero,-16(fp)
10016290:	00001706 	br	100162f0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10016294:	00a00034 	movhi	r2,32768
10016298:	10bfffc4 	addi	r2,r2,-1
1001629c:	10bfffc4 	addi	r2,r2,-1
100162a0:	103ffe1e 	bne	r2,zero,1001629c <__alt_data_end+0xf801629c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
100162a4:	014003f4 	movhi	r5,15
100162a8:	29509004 	addi	r5,r5,16960
100162ac:	e13ffd17 	ldw	r4,-12(fp)
100162b0:	0007d040 	call	10007d04 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
100162b4:	100b883a 	mov	r5,r2
100162b8:	0100bef4 	movhi	r4,763
100162bc:	213c2004 	addi	r4,r4,-3968
100162c0:	0007c480 	call	10007c48 <__udivsi3>
100162c4:	100b883a 	mov	r5,r2
100162c8:	01200034 	movhi	r4,32768
100162cc:	213fffc4 	addi	r4,r4,-1
100162d0:	0007c480 	call	10007c48 <__udivsi3>
100162d4:	1007883a 	mov	r3,r2
100162d8:	e0bfff17 	ldw	r2,-4(fp)
100162dc:	10c5c83a 	sub	r2,r2,r3
100162e0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
100162e4:	e0bffc17 	ldw	r2,-16(fp)
100162e8:	10800044 	addi	r2,r2,1
100162ec:	e0bffc15 	stw	r2,-16(fp)
100162f0:	e0fffc17 	ldw	r3,-16(fp)
100162f4:	e0bffe17 	ldw	r2,-8(fp)
100162f8:	18bfe616 	blt	r3,r2,10016294 <__alt_data_end+0xf8016294>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100162fc:	014003f4 	movhi	r5,15
10016300:	29509004 	addi	r5,r5,16960
10016304:	e13ffd17 	ldw	r4,-12(fp)
10016308:	0007d040 	call	10007d04 <__mulsi3>
1001630c:	100b883a 	mov	r5,r2
10016310:	0100bef4 	movhi	r4,763
10016314:	213c2004 	addi	r4,r4,-3968
10016318:	0007c480 	call	10007c48 <__udivsi3>
1001631c:	e17fff17 	ldw	r5,-4(fp)
10016320:	1009883a 	mov	r4,r2
10016324:	0007d040 	call	10007d04 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10016328:	10bfffc4 	addi	r2,r2,-1
1001632c:	103ffe1e 	bne	r2,zero,10016328 <__alt_data_end+0xf8016328>
10016330:	00000d06 	br	10016368 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10016334:	014003f4 	movhi	r5,15
10016338:	29509004 	addi	r5,r5,16960
1001633c:	e13ffd17 	ldw	r4,-12(fp)
10016340:	0007d040 	call	10007d04 <__mulsi3>
10016344:	100b883a 	mov	r5,r2
10016348:	0100bef4 	movhi	r4,763
1001634c:	213c2004 	addi	r4,r4,-3968
10016350:	0007c480 	call	10007c48 <__udivsi3>
10016354:	e17fff17 	ldw	r5,-4(fp)
10016358:	1009883a 	mov	r4,r2
1001635c:	0007d040 	call	10007d04 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10016360:	10bfffc4 	addi	r2,r2,-1
10016364:	00bffe16 	blt	zero,r2,10016360 <__alt_data_end+0xf8016360>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10016368:	0005883a 	mov	r2,zero
}
1001636c:	e037883a 	mov	sp,fp
10016370:	dfc00117 	ldw	ra,4(sp)
10016374:	df000017 	ldw	fp,0(sp)
10016378:	dec00204 	addi	sp,sp,8
1001637c:	f800283a 	ret

10016380 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10016380:	deffff04 	addi	sp,sp,-4
10016384:	df000015 	stw	fp,0(sp)
10016388:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1001638c:	0001883a 	nop
10016390:	e037883a 	mov	sp,fp
10016394:	df000017 	ldw	fp,0(sp)
10016398:	dec00104 	addi	sp,sp,4
1001639c:	f800283a 	ret

100163a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100163a0:	defffe04 	addi	sp,sp,-8
100163a4:	dfc00115 	stw	ra,4(sp)
100163a8:	df000015 	stw	fp,0(sp)
100163ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100163b0:	d0a05417 	ldw	r2,-32432(gp)
100163b4:	10000326 	beq	r2,zero,100163c4 <alt_get_errno+0x24>
100163b8:	d0a05417 	ldw	r2,-32432(gp)
100163bc:	103ee83a 	callr	r2
100163c0:	00000106 	br	100163c8 <alt_get_errno+0x28>
100163c4:	d0a76404 	addi	r2,gp,-25200
}
100163c8:	e037883a 	mov	sp,fp
100163cc:	dfc00117 	ldw	ra,4(sp)
100163d0:	df000017 	ldw	fp,0(sp)
100163d4:	dec00204 	addi	sp,sp,8
100163d8:	f800283a 	ret

100163dc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100163dc:	defffa04 	addi	sp,sp,-24
100163e0:	dfc00515 	stw	ra,20(sp)
100163e4:	df000415 	stw	fp,16(sp)
100163e8:	df000404 	addi	fp,sp,16
100163ec:	e13ffe15 	stw	r4,-8(fp)
100163f0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100163f4:	e0bffe17 	ldw	r2,-8(fp)
100163f8:	10000326 	beq	r2,zero,10016408 <alt_dev_llist_insert+0x2c>
100163fc:	e0bffe17 	ldw	r2,-8(fp)
10016400:	10800217 	ldw	r2,8(r2)
10016404:	1000061e 	bne	r2,zero,10016420 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10016408:	00163a00 	call	100163a0 <alt_get_errno>
1001640c:	1007883a 	mov	r3,r2
10016410:	00800584 	movi	r2,22
10016414:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10016418:	00bffa84 	movi	r2,-22
1001641c:	00001306 	br	1001646c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10016420:	e0bffe17 	ldw	r2,-8(fp)
10016424:	e0ffff17 	ldw	r3,-4(fp)
10016428:	e0fffc15 	stw	r3,-16(fp)
1001642c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10016430:	e0bffd17 	ldw	r2,-12(fp)
10016434:	e0fffc17 	ldw	r3,-16(fp)
10016438:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001643c:	e0bffc17 	ldw	r2,-16(fp)
10016440:	10c00017 	ldw	r3,0(r2)
10016444:	e0bffd17 	ldw	r2,-12(fp)
10016448:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1001644c:	e0bffc17 	ldw	r2,-16(fp)
10016450:	10800017 	ldw	r2,0(r2)
10016454:	e0fffd17 	ldw	r3,-12(fp)
10016458:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1001645c:	e0bffc17 	ldw	r2,-16(fp)
10016460:	e0fffd17 	ldw	r3,-12(fp)
10016464:	10c00015 	stw	r3,0(r2)

  return 0;  
10016468:	0005883a 	mov	r2,zero
}
1001646c:	e037883a 	mov	sp,fp
10016470:	dfc00117 	ldw	ra,4(sp)
10016474:	df000017 	ldw	fp,0(sp)
10016478:	dec00204 	addi	sp,sp,8
1001647c:	f800283a 	ret

10016480 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10016480:	defffd04 	addi	sp,sp,-12
10016484:	dfc00215 	stw	ra,8(sp)
10016488:	df000115 	stw	fp,4(sp)
1001648c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10016490:	00840074 	movhi	r2,4097
10016494:	109d0d04 	addi	r2,r2,29748
10016498:	e0bfff15 	stw	r2,-4(fp)
1001649c:	00000606 	br	100164b8 <_do_ctors+0x38>
        (*ctor) (); 
100164a0:	e0bfff17 	ldw	r2,-4(fp)
100164a4:	10800017 	ldw	r2,0(r2)
100164a8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100164ac:	e0bfff17 	ldw	r2,-4(fp)
100164b0:	10bfff04 	addi	r2,r2,-4
100164b4:	e0bfff15 	stw	r2,-4(fp)
100164b8:	e0ffff17 	ldw	r3,-4(fp)
100164bc:	00840074 	movhi	r2,4097
100164c0:	109d0e04 	addi	r2,r2,29752
100164c4:	18bff62e 	bgeu	r3,r2,100164a0 <__alt_data_end+0xf80164a0>
        (*ctor) (); 
}
100164c8:	0001883a 	nop
100164cc:	e037883a 	mov	sp,fp
100164d0:	dfc00117 	ldw	ra,4(sp)
100164d4:	df000017 	ldw	fp,0(sp)
100164d8:	dec00204 	addi	sp,sp,8
100164dc:	f800283a 	ret

100164e0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100164e0:	defffd04 	addi	sp,sp,-12
100164e4:	dfc00215 	stw	ra,8(sp)
100164e8:	df000115 	stw	fp,4(sp)
100164ec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100164f0:	00840074 	movhi	r2,4097
100164f4:	109d0d04 	addi	r2,r2,29748
100164f8:	e0bfff15 	stw	r2,-4(fp)
100164fc:	00000606 	br	10016518 <_do_dtors+0x38>
        (*dtor) (); 
10016500:	e0bfff17 	ldw	r2,-4(fp)
10016504:	10800017 	ldw	r2,0(r2)
10016508:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1001650c:	e0bfff17 	ldw	r2,-4(fp)
10016510:	10bfff04 	addi	r2,r2,-4
10016514:	e0bfff15 	stw	r2,-4(fp)
10016518:	e0ffff17 	ldw	r3,-4(fp)
1001651c:	00840074 	movhi	r2,4097
10016520:	109d0e04 	addi	r2,r2,29752
10016524:	18bff62e 	bgeu	r3,r2,10016500 <__alt_data_end+0xf8016500>
        (*dtor) (); 
}
10016528:	0001883a 	nop
1001652c:	e037883a 	mov	sp,fp
10016530:	dfc00117 	ldw	ra,4(sp)
10016534:	df000017 	ldw	fp,0(sp)
10016538:	dec00204 	addi	sp,sp,8
1001653c:	f800283a 	ret

10016540 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10016540:	deffff04 	addi	sp,sp,-4
10016544:	df000015 	stw	fp,0(sp)
10016548:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1001654c:	0001883a 	nop
10016550:	e037883a 	mov	sp,fp
10016554:	df000017 	ldw	fp,0(sp)
10016558:	dec00104 	addi	sp,sp,4
1001655c:	f800283a 	ret

10016560 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10016560:	defff904 	addi	sp,sp,-28
10016564:	dfc00615 	stw	ra,24(sp)
10016568:	df000515 	stw	fp,20(sp)
1001656c:	df000504 	addi	fp,sp,20
10016570:	e13ffc15 	stw	r4,-16(fp)
10016574:	e17ffd15 	stw	r5,-12(fp)
10016578:	e1bffe15 	stw	r6,-8(fp)
1001657c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10016580:	e0800217 	ldw	r2,8(fp)
10016584:	d8800015 	stw	r2,0(sp)
10016588:	e1ffff17 	ldw	r7,-4(fp)
1001658c:	e1bffe17 	ldw	r6,-8(fp)
10016590:	e17ffd17 	ldw	r5,-12(fp)
10016594:	e13ffc17 	ldw	r4,-16(fp)
10016598:	00167100 	call	10016710 <alt_iic_isr_register>
}  
1001659c:	e037883a 	mov	sp,fp
100165a0:	dfc00117 	ldw	ra,4(sp)
100165a4:	df000017 	ldw	fp,0(sp)
100165a8:	dec00204 	addi	sp,sp,8
100165ac:	f800283a 	ret

100165b0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100165b0:	defff904 	addi	sp,sp,-28
100165b4:	df000615 	stw	fp,24(sp)
100165b8:	df000604 	addi	fp,sp,24
100165bc:	e13ffe15 	stw	r4,-8(fp)
100165c0:	e17fff15 	stw	r5,-4(fp)
100165c4:	e0bfff17 	ldw	r2,-4(fp)
100165c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100165cc:	0005303a 	rdctl	r2,status
100165d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100165d4:	e0fffb17 	ldw	r3,-20(fp)
100165d8:	00bfff84 	movi	r2,-2
100165dc:	1884703a 	and	r2,r3,r2
100165e0:	1001703a 	wrctl	status,r2
  
  return context;
100165e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100165e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
100165ec:	00c00044 	movi	r3,1
100165f0:	e0bffa17 	ldw	r2,-24(fp)
100165f4:	1884983a 	sll	r2,r3,r2
100165f8:	1007883a 	mov	r3,r2
100165fc:	d0a76817 	ldw	r2,-25184(gp)
10016600:	1884b03a 	or	r2,r3,r2
10016604:	d0a76815 	stw	r2,-25184(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10016608:	d0a76817 	ldw	r2,-25184(gp)
1001660c:	100170fa 	wrctl	ienable,r2
10016610:	e0bffc17 	ldw	r2,-16(fp)
10016614:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10016618:	e0bffd17 	ldw	r2,-12(fp)
1001661c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10016620:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10016624:	0001883a 	nop
}
10016628:	e037883a 	mov	sp,fp
1001662c:	df000017 	ldw	fp,0(sp)
10016630:	dec00104 	addi	sp,sp,4
10016634:	f800283a 	ret

10016638 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10016638:	defff904 	addi	sp,sp,-28
1001663c:	df000615 	stw	fp,24(sp)
10016640:	df000604 	addi	fp,sp,24
10016644:	e13ffe15 	stw	r4,-8(fp)
10016648:	e17fff15 	stw	r5,-4(fp)
1001664c:	e0bfff17 	ldw	r2,-4(fp)
10016650:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016654:	0005303a 	rdctl	r2,status
10016658:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001665c:	e0fffb17 	ldw	r3,-20(fp)
10016660:	00bfff84 	movi	r2,-2
10016664:	1884703a 	and	r2,r3,r2
10016668:	1001703a 	wrctl	status,r2
  
  return context;
1001666c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10016670:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10016674:	00c00044 	movi	r3,1
10016678:	e0bffa17 	ldw	r2,-24(fp)
1001667c:	1884983a 	sll	r2,r3,r2
10016680:	0084303a 	nor	r2,zero,r2
10016684:	1007883a 	mov	r3,r2
10016688:	d0a76817 	ldw	r2,-25184(gp)
1001668c:	1884703a 	and	r2,r3,r2
10016690:	d0a76815 	stw	r2,-25184(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10016694:	d0a76817 	ldw	r2,-25184(gp)
10016698:	100170fa 	wrctl	ienable,r2
1001669c:	e0bffc17 	ldw	r2,-16(fp)
100166a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100166a4:	e0bffd17 	ldw	r2,-12(fp)
100166a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100166ac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100166b0:	0001883a 	nop
}
100166b4:	e037883a 	mov	sp,fp
100166b8:	df000017 	ldw	fp,0(sp)
100166bc:	dec00104 	addi	sp,sp,4
100166c0:	f800283a 	ret

100166c4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100166c4:	defffc04 	addi	sp,sp,-16
100166c8:	df000315 	stw	fp,12(sp)
100166cc:	df000304 	addi	fp,sp,12
100166d0:	e13ffe15 	stw	r4,-8(fp)
100166d4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100166d8:	000530fa 	rdctl	r2,ienable
100166dc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100166e0:	00c00044 	movi	r3,1
100166e4:	e0bfff17 	ldw	r2,-4(fp)
100166e8:	1884983a 	sll	r2,r3,r2
100166ec:	1007883a 	mov	r3,r2
100166f0:	e0bffd17 	ldw	r2,-12(fp)
100166f4:	1884703a 	and	r2,r3,r2
100166f8:	1004c03a 	cmpne	r2,r2,zero
100166fc:	10803fcc 	andi	r2,r2,255
}
10016700:	e037883a 	mov	sp,fp
10016704:	df000017 	ldw	fp,0(sp)
10016708:	dec00104 	addi	sp,sp,4
1001670c:	f800283a 	ret

10016710 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10016710:	defff504 	addi	sp,sp,-44
10016714:	dfc00a15 	stw	ra,40(sp)
10016718:	df000915 	stw	fp,36(sp)
1001671c:	df000904 	addi	fp,sp,36
10016720:	e13ffc15 	stw	r4,-16(fp)
10016724:	e17ffd15 	stw	r5,-12(fp)
10016728:	e1bffe15 	stw	r6,-8(fp)
1001672c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10016730:	00bffa84 	movi	r2,-22
10016734:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10016738:	e0bffd17 	ldw	r2,-12(fp)
1001673c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10016740:	e0bff817 	ldw	r2,-32(fp)
10016744:	10800808 	cmpgei	r2,r2,32
10016748:	1000271e 	bne	r2,zero,100167e8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001674c:	0005303a 	rdctl	r2,status
10016750:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10016754:	e0fffb17 	ldw	r3,-20(fp)
10016758:	00bfff84 	movi	r2,-2
1001675c:	1884703a 	and	r2,r3,r2
10016760:	1001703a 	wrctl	status,r2
  
  return context;
10016764:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10016768:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1001676c:	008400b4 	movhi	r2,4098
10016770:	10b0c104 	addi	r2,r2,-15612
10016774:	e0fff817 	ldw	r3,-32(fp)
10016778:	180690fa 	slli	r3,r3,3
1001677c:	10c5883a 	add	r2,r2,r3
10016780:	e0fffe17 	ldw	r3,-8(fp)
10016784:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10016788:	008400b4 	movhi	r2,4098
1001678c:	10b0c104 	addi	r2,r2,-15612
10016790:	e0fff817 	ldw	r3,-32(fp)
10016794:	180690fa 	slli	r3,r3,3
10016798:	10c5883a 	add	r2,r2,r3
1001679c:	10800104 	addi	r2,r2,4
100167a0:	e0ffff17 	ldw	r3,-4(fp)
100167a4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100167a8:	e0bffe17 	ldw	r2,-8(fp)
100167ac:	10000526 	beq	r2,zero,100167c4 <alt_iic_isr_register+0xb4>
100167b0:	e0bff817 	ldw	r2,-32(fp)
100167b4:	100b883a 	mov	r5,r2
100167b8:	e13ffc17 	ldw	r4,-16(fp)
100167bc:	00165b00 	call	100165b0 <alt_ic_irq_enable>
100167c0:	00000406 	br	100167d4 <alt_iic_isr_register+0xc4>
100167c4:	e0bff817 	ldw	r2,-32(fp)
100167c8:	100b883a 	mov	r5,r2
100167cc:	e13ffc17 	ldw	r4,-16(fp)
100167d0:	00166380 	call	10016638 <alt_ic_irq_disable>
100167d4:	e0bff715 	stw	r2,-36(fp)
100167d8:	e0bffa17 	ldw	r2,-24(fp)
100167dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100167e0:	e0bff917 	ldw	r2,-28(fp)
100167e4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
100167e8:	e0bff717 	ldw	r2,-36(fp)
}
100167ec:	e037883a 	mov	sp,fp
100167f0:	dfc00117 	ldw	ra,4(sp)
100167f4:	df000017 	ldw	fp,0(sp)
100167f8:	dec00204 	addi	sp,sp,8
100167fc:	f800283a 	ret

10016800 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10016800:	defff804 	addi	sp,sp,-32
10016804:	dfc00715 	stw	ra,28(sp)
10016808:	df000615 	stw	fp,24(sp)
1001680c:	dc000515 	stw	r16,20(sp)
10016810:	df000604 	addi	fp,sp,24
10016814:	e13ffb15 	stw	r4,-20(fp)
10016818:	e17ffc15 	stw	r5,-16(fp)
1001681c:	e1bffd15 	stw	r6,-12(fp)
10016820:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10016824:	e1bffe17 	ldw	r6,-8(fp)
10016828:	e17ffd17 	ldw	r5,-12(fp)
1001682c:	e13ffc17 	ldw	r4,-16(fp)
10016830:	0016a880 	call	10016a88 <open>
10016834:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10016838:	e0bffa17 	ldw	r2,-24(fp)
1001683c:	10002216 	blt	r2,zero,100168c8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10016840:	040400b4 	movhi	r16,4098
10016844:	8424d304 	addi	r16,r16,-27828
10016848:	e0bffa17 	ldw	r2,-24(fp)
1001684c:	01400304 	movi	r5,12
10016850:	1009883a 	mov	r4,r2
10016854:	0007d040 	call	10007d04 <__mulsi3>
10016858:	8085883a 	add	r2,r16,r2
1001685c:	10c00017 	ldw	r3,0(r2)
10016860:	e0bffb17 	ldw	r2,-20(fp)
10016864:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10016868:	040400b4 	movhi	r16,4098
1001686c:	8424d304 	addi	r16,r16,-27828
10016870:	e0bffa17 	ldw	r2,-24(fp)
10016874:	01400304 	movi	r5,12
10016878:	1009883a 	mov	r4,r2
1001687c:	0007d040 	call	10007d04 <__mulsi3>
10016880:	8085883a 	add	r2,r16,r2
10016884:	10800104 	addi	r2,r2,4
10016888:	10c00017 	ldw	r3,0(r2)
1001688c:	e0bffb17 	ldw	r2,-20(fp)
10016890:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10016894:	040400b4 	movhi	r16,4098
10016898:	8424d304 	addi	r16,r16,-27828
1001689c:	e0bffa17 	ldw	r2,-24(fp)
100168a0:	01400304 	movi	r5,12
100168a4:	1009883a 	mov	r4,r2
100168a8:	0007d040 	call	10007d04 <__mulsi3>
100168ac:	8085883a 	add	r2,r16,r2
100168b0:	10800204 	addi	r2,r2,8
100168b4:	10c00017 	ldw	r3,0(r2)
100168b8:	e0bffb17 	ldw	r2,-20(fp)
100168bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100168c0:	e13ffa17 	ldw	r4,-24(fp)
100168c4:	001533c0 	call	1001533c <alt_release_fd>
  }
} 
100168c8:	0001883a 	nop
100168cc:	e6ffff04 	addi	sp,fp,-4
100168d0:	dfc00217 	ldw	ra,8(sp)
100168d4:	df000117 	ldw	fp,4(sp)
100168d8:	dc000017 	ldw	r16,0(sp)
100168dc:	dec00304 	addi	sp,sp,12
100168e0:	f800283a 	ret

100168e4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100168e4:	defffb04 	addi	sp,sp,-20
100168e8:	dfc00415 	stw	ra,16(sp)
100168ec:	df000315 	stw	fp,12(sp)
100168f0:	df000304 	addi	fp,sp,12
100168f4:	e13ffd15 	stw	r4,-12(fp)
100168f8:	e17ffe15 	stw	r5,-8(fp)
100168fc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10016900:	01c07fc4 	movi	r7,511
10016904:	01800044 	movi	r6,1
10016908:	e17ffd17 	ldw	r5,-12(fp)
1001690c:	010400b4 	movhi	r4,4098
10016910:	2124d604 	addi	r4,r4,-27816
10016914:	00168000 	call	10016800 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10016918:	01c07fc4 	movi	r7,511
1001691c:	000d883a 	mov	r6,zero
10016920:	e17ffe17 	ldw	r5,-8(fp)
10016924:	010400b4 	movhi	r4,4098
10016928:	2124d304 	addi	r4,r4,-27828
1001692c:	00168000 	call	10016800 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10016930:	01c07fc4 	movi	r7,511
10016934:	01800044 	movi	r6,1
10016938:	e17fff17 	ldw	r5,-4(fp)
1001693c:	010400b4 	movhi	r4,4098
10016940:	2124d904 	addi	r4,r4,-27804
10016944:	00168000 	call	10016800 <alt_open_fd>
}  
10016948:	0001883a 	nop
1001694c:	e037883a 	mov	sp,fp
10016950:	dfc00117 	ldw	ra,4(sp)
10016954:	df000017 	ldw	fp,0(sp)
10016958:	dec00204 	addi	sp,sp,8
1001695c:	f800283a 	ret

10016960 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10016960:	defffe04 	addi	sp,sp,-8
10016964:	dfc00115 	stw	ra,4(sp)
10016968:	df000015 	stw	fp,0(sp)
1001696c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10016970:	d0a05417 	ldw	r2,-32432(gp)
10016974:	10000326 	beq	r2,zero,10016984 <alt_get_errno+0x24>
10016978:	d0a05417 	ldw	r2,-32432(gp)
1001697c:	103ee83a 	callr	r2
10016980:	00000106 	br	10016988 <alt_get_errno+0x28>
10016984:	d0a76404 	addi	r2,gp,-25200
}
10016988:	e037883a 	mov	sp,fp
1001698c:	dfc00117 	ldw	ra,4(sp)
10016990:	df000017 	ldw	fp,0(sp)
10016994:	dec00204 	addi	sp,sp,8
10016998:	f800283a 	ret

1001699c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1001699c:	defffb04 	addi	sp,sp,-20
100169a0:	dfc00415 	stw	ra,16(sp)
100169a4:	df000315 	stw	fp,12(sp)
100169a8:	dc000215 	stw	r16,8(sp)
100169ac:	df000304 	addi	fp,sp,12
100169b0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100169b4:	e0bffe17 	ldw	r2,-8(fp)
100169b8:	10800217 	ldw	r2,8(r2)
100169bc:	10d00034 	orhi	r3,r2,16384
100169c0:	e0bffe17 	ldw	r2,-8(fp)
100169c4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100169c8:	e03ffd15 	stw	zero,-12(fp)
100169cc:	00002306 	br	10016a5c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100169d0:	040400b4 	movhi	r16,4098
100169d4:	8424d304 	addi	r16,r16,-27828
100169d8:	e0bffd17 	ldw	r2,-12(fp)
100169dc:	01400304 	movi	r5,12
100169e0:	1009883a 	mov	r4,r2
100169e4:	0007d040 	call	10007d04 <__mulsi3>
100169e8:	8085883a 	add	r2,r16,r2
100169ec:	10c00017 	ldw	r3,0(r2)
100169f0:	e0bffe17 	ldw	r2,-8(fp)
100169f4:	10800017 	ldw	r2,0(r2)
100169f8:	1880151e 	bne	r3,r2,10016a50 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100169fc:	040400b4 	movhi	r16,4098
10016a00:	8424d304 	addi	r16,r16,-27828
10016a04:	e0bffd17 	ldw	r2,-12(fp)
10016a08:	01400304 	movi	r5,12
10016a0c:	1009883a 	mov	r4,r2
10016a10:	0007d040 	call	10007d04 <__mulsi3>
10016a14:	8085883a 	add	r2,r16,r2
10016a18:	10800204 	addi	r2,r2,8
10016a1c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10016a20:	10000b0e 	bge	r2,zero,10016a50 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10016a24:	01400304 	movi	r5,12
10016a28:	e13ffd17 	ldw	r4,-12(fp)
10016a2c:	0007d040 	call	10007d04 <__mulsi3>
10016a30:	1007883a 	mov	r3,r2
10016a34:	008400b4 	movhi	r2,4098
10016a38:	10a4d304 	addi	r2,r2,-27828
10016a3c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10016a40:	e0bffe17 	ldw	r2,-8(fp)
10016a44:	18800226 	beq	r3,r2,10016a50 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10016a48:	00bffcc4 	movi	r2,-13
10016a4c:	00000806 	br	10016a70 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10016a50:	e0bffd17 	ldw	r2,-12(fp)
10016a54:	10800044 	addi	r2,r2,1
10016a58:	e0bffd15 	stw	r2,-12(fp)
10016a5c:	d0a05317 	ldw	r2,-32436(gp)
10016a60:	1007883a 	mov	r3,r2
10016a64:	e0bffd17 	ldw	r2,-12(fp)
10016a68:	18bfd92e 	bgeu	r3,r2,100169d0 <__alt_data_end+0xf80169d0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10016a6c:	0005883a 	mov	r2,zero
}
10016a70:	e6ffff04 	addi	sp,fp,-4
10016a74:	dfc00217 	ldw	ra,8(sp)
10016a78:	df000117 	ldw	fp,4(sp)
10016a7c:	dc000017 	ldw	r16,0(sp)
10016a80:	dec00304 	addi	sp,sp,12
10016a84:	f800283a 	ret

10016a88 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10016a88:	defff604 	addi	sp,sp,-40
10016a8c:	dfc00915 	stw	ra,36(sp)
10016a90:	df000815 	stw	fp,32(sp)
10016a94:	df000804 	addi	fp,sp,32
10016a98:	e13ffd15 	stw	r4,-12(fp)
10016a9c:	e17ffe15 	stw	r5,-8(fp)
10016aa0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10016aa4:	00bfffc4 	movi	r2,-1
10016aa8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10016aac:	00bffb44 	movi	r2,-19
10016ab0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10016ab4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10016ab8:	d1605104 	addi	r5,gp,-32444
10016abc:	e13ffd17 	ldw	r4,-12(fp)
10016ac0:	0016dac0 	call	10016dac <alt_find_dev>
10016ac4:	e0bff815 	stw	r2,-32(fp)
10016ac8:	e0bff817 	ldw	r2,-32(fp)
10016acc:	1000051e 	bne	r2,zero,10016ae4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10016ad0:	e13ffd17 	ldw	r4,-12(fp)
10016ad4:	0016e3c0 	call	10016e3c <alt_find_file>
10016ad8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10016adc:	00800044 	movi	r2,1
10016ae0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10016ae4:	e0bff817 	ldw	r2,-32(fp)
10016ae8:	10002b26 	beq	r2,zero,10016b98 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10016aec:	e13ff817 	ldw	r4,-32(fp)
10016af0:	0016f440 	call	10016f44 <alt_get_fd>
10016af4:	e0bff915 	stw	r2,-28(fp)
10016af8:	e0bff917 	ldw	r2,-28(fp)
10016afc:	1000030e 	bge	r2,zero,10016b0c <open+0x84>
    {
      status = index;
10016b00:	e0bff917 	ldw	r2,-28(fp)
10016b04:	e0bffa15 	stw	r2,-24(fp)
10016b08:	00002506 	br	10016ba0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10016b0c:	01400304 	movi	r5,12
10016b10:	e13ff917 	ldw	r4,-28(fp)
10016b14:	0007d040 	call	10007d04 <__mulsi3>
10016b18:	1007883a 	mov	r3,r2
10016b1c:	008400b4 	movhi	r2,4098
10016b20:	10a4d304 	addi	r2,r2,-27828
10016b24:	1885883a 	add	r2,r3,r2
10016b28:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10016b2c:	e0fffe17 	ldw	r3,-8(fp)
10016b30:	00900034 	movhi	r2,16384
10016b34:	10bfffc4 	addi	r2,r2,-1
10016b38:	1886703a 	and	r3,r3,r2
10016b3c:	e0bffc17 	ldw	r2,-16(fp)
10016b40:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10016b44:	e0bffb17 	ldw	r2,-20(fp)
10016b48:	1000051e 	bne	r2,zero,10016b60 <open+0xd8>
10016b4c:	e13ffc17 	ldw	r4,-16(fp)
10016b50:	001699c0 	call	1001699c <alt_file_locked>
10016b54:	e0bffa15 	stw	r2,-24(fp)
10016b58:	e0bffa17 	ldw	r2,-24(fp)
10016b5c:	10001016 	blt	r2,zero,10016ba0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10016b60:	e0bff817 	ldw	r2,-32(fp)
10016b64:	10800317 	ldw	r2,12(r2)
10016b68:	10000826 	beq	r2,zero,10016b8c <open+0x104>
10016b6c:	e0bff817 	ldw	r2,-32(fp)
10016b70:	10800317 	ldw	r2,12(r2)
10016b74:	e1ffff17 	ldw	r7,-4(fp)
10016b78:	e1bffe17 	ldw	r6,-8(fp)
10016b7c:	e17ffd17 	ldw	r5,-12(fp)
10016b80:	e13ffc17 	ldw	r4,-16(fp)
10016b84:	103ee83a 	callr	r2
10016b88:	00000106 	br	10016b90 <open+0x108>
10016b8c:	0005883a 	mov	r2,zero
10016b90:	e0bffa15 	stw	r2,-24(fp)
10016b94:	00000206 	br	10016ba0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10016b98:	00bffb44 	movi	r2,-19
10016b9c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10016ba0:	e0bffa17 	ldw	r2,-24(fp)
10016ba4:	1000090e 	bge	r2,zero,10016bcc <open+0x144>
  {
    alt_release_fd (index);  
10016ba8:	e13ff917 	ldw	r4,-28(fp)
10016bac:	001533c0 	call	1001533c <alt_release_fd>
    ALT_ERRNO = -status;
10016bb0:	00169600 	call	10016960 <alt_get_errno>
10016bb4:	1007883a 	mov	r3,r2
10016bb8:	e0bffa17 	ldw	r2,-24(fp)
10016bbc:	0085c83a 	sub	r2,zero,r2
10016bc0:	18800015 	stw	r2,0(r3)
    return -1;
10016bc4:	00bfffc4 	movi	r2,-1
10016bc8:	00000106 	br	10016bd0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10016bcc:	e0bff917 	ldw	r2,-28(fp)
}
10016bd0:	e037883a 	mov	sp,fp
10016bd4:	dfc00117 	ldw	ra,4(sp)
10016bd8:	df000017 	ldw	fp,0(sp)
10016bdc:	dec00204 	addi	sp,sp,8
10016be0:	f800283a 	ret

10016be4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10016be4:	defffa04 	addi	sp,sp,-24
10016be8:	df000515 	stw	fp,20(sp)
10016bec:	df000504 	addi	fp,sp,20
10016bf0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016bf4:	0005303a 	rdctl	r2,status
10016bf8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10016bfc:	e0fffc17 	ldw	r3,-16(fp)
10016c00:	00bfff84 	movi	r2,-2
10016c04:	1884703a 	and	r2,r3,r2
10016c08:	1001703a 	wrctl	status,r2
  
  return context;
10016c0c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10016c10:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10016c14:	e0bfff17 	ldw	r2,-4(fp)
10016c18:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10016c1c:	e0bffd17 	ldw	r2,-12(fp)
10016c20:	10800017 	ldw	r2,0(r2)
10016c24:	e0fffd17 	ldw	r3,-12(fp)
10016c28:	18c00117 	ldw	r3,4(r3)
10016c2c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10016c30:	e0bffd17 	ldw	r2,-12(fp)
10016c34:	10800117 	ldw	r2,4(r2)
10016c38:	e0fffd17 	ldw	r3,-12(fp)
10016c3c:	18c00017 	ldw	r3,0(r3)
10016c40:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10016c44:	e0bffd17 	ldw	r2,-12(fp)
10016c48:	e0fffd17 	ldw	r3,-12(fp)
10016c4c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10016c50:	e0bffd17 	ldw	r2,-12(fp)
10016c54:	e0fffd17 	ldw	r3,-12(fp)
10016c58:	10c00015 	stw	r3,0(r2)
10016c5c:	e0bffb17 	ldw	r2,-20(fp)
10016c60:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10016c64:	e0bffe17 	ldw	r2,-8(fp)
10016c68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10016c6c:	0001883a 	nop
10016c70:	e037883a 	mov	sp,fp
10016c74:	df000017 	ldw	fp,0(sp)
10016c78:	dec00104 	addi	sp,sp,4
10016c7c:	f800283a 	ret

10016c80 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10016c80:	defffb04 	addi	sp,sp,-20
10016c84:	dfc00415 	stw	ra,16(sp)
10016c88:	df000315 	stw	fp,12(sp)
10016c8c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10016c90:	d0a05717 	ldw	r2,-32420(gp)
10016c94:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10016c98:	d0a76a17 	ldw	r2,-25176(gp)
10016c9c:	10800044 	addi	r2,r2,1
10016ca0:	d0a76a15 	stw	r2,-25176(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10016ca4:	00002e06 	br	10016d60 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10016ca8:	e0bffd17 	ldw	r2,-12(fp)
10016cac:	10800017 	ldw	r2,0(r2)
10016cb0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10016cb4:	e0bffd17 	ldw	r2,-12(fp)
10016cb8:	10800403 	ldbu	r2,16(r2)
10016cbc:	10803fcc 	andi	r2,r2,255
10016cc0:	10000426 	beq	r2,zero,10016cd4 <alt_tick+0x54>
10016cc4:	d0a76a17 	ldw	r2,-25176(gp)
10016cc8:	1000021e 	bne	r2,zero,10016cd4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10016ccc:	e0bffd17 	ldw	r2,-12(fp)
10016cd0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10016cd4:	e0bffd17 	ldw	r2,-12(fp)
10016cd8:	10800217 	ldw	r2,8(r2)
10016cdc:	d0e76a17 	ldw	r3,-25176(gp)
10016ce0:	18801d36 	bltu	r3,r2,10016d58 <alt_tick+0xd8>
10016ce4:	e0bffd17 	ldw	r2,-12(fp)
10016ce8:	10800403 	ldbu	r2,16(r2)
10016cec:	10803fcc 	andi	r2,r2,255
10016cf0:	1000191e 	bne	r2,zero,10016d58 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10016cf4:	e0bffd17 	ldw	r2,-12(fp)
10016cf8:	10800317 	ldw	r2,12(r2)
10016cfc:	e0fffd17 	ldw	r3,-12(fp)
10016d00:	18c00517 	ldw	r3,20(r3)
10016d04:	1809883a 	mov	r4,r3
10016d08:	103ee83a 	callr	r2
10016d0c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10016d10:	e0bfff17 	ldw	r2,-4(fp)
10016d14:	1000031e 	bne	r2,zero,10016d24 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10016d18:	e13ffd17 	ldw	r4,-12(fp)
10016d1c:	0016be40 	call	10016be4 <alt_alarm_stop>
10016d20:	00000d06 	br	10016d58 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10016d24:	e0bffd17 	ldw	r2,-12(fp)
10016d28:	10c00217 	ldw	r3,8(r2)
10016d2c:	e0bfff17 	ldw	r2,-4(fp)
10016d30:	1887883a 	add	r3,r3,r2
10016d34:	e0bffd17 	ldw	r2,-12(fp)
10016d38:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10016d3c:	e0bffd17 	ldw	r2,-12(fp)
10016d40:	10c00217 	ldw	r3,8(r2)
10016d44:	d0a76a17 	ldw	r2,-25176(gp)
10016d48:	1880032e 	bgeu	r3,r2,10016d58 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10016d4c:	e0bffd17 	ldw	r2,-12(fp)
10016d50:	00c00044 	movi	r3,1
10016d54:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10016d58:	e0bffe17 	ldw	r2,-8(fp)
10016d5c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10016d60:	e0fffd17 	ldw	r3,-12(fp)
10016d64:	d0a05704 	addi	r2,gp,-32420
10016d68:	18bfcf1e 	bne	r3,r2,10016ca8 <__alt_data_end+0xf8016ca8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10016d6c:	0001883a 	nop
}
10016d70:	0001883a 	nop
10016d74:	e037883a 	mov	sp,fp
10016d78:	dfc00117 	ldw	ra,4(sp)
10016d7c:	df000017 	ldw	fp,0(sp)
10016d80:	dec00204 	addi	sp,sp,8
10016d84:	f800283a 	ret

10016d88 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10016d88:	deffff04 	addi	sp,sp,-4
10016d8c:	df000015 	stw	fp,0(sp)
10016d90:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10016d94:	000170fa 	wrctl	ienable,zero
}
10016d98:	0001883a 	nop
10016d9c:	e037883a 	mov	sp,fp
10016da0:	df000017 	ldw	fp,0(sp)
10016da4:	dec00104 	addi	sp,sp,4
10016da8:	f800283a 	ret

10016dac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10016dac:	defffa04 	addi	sp,sp,-24
10016db0:	dfc00515 	stw	ra,20(sp)
10016db4:	df000415 	stw	fp,16(sp)
10016db8:	df000404 	addi	fp,sp,16
10016dbc:	e13ffe15 	stw	r4,-8(fp)
10016dc0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10016dc4:	e0bfff17 	ldw	r2,-4(fp)
10016dc8:	10800017 	ldw	r2,0(r2)
10016dcc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10016dd0:	e13ffe17 	ldw	r4,-8(fp)
10016dd4:	00080100 	call	10008010 <strlen>
10016dd8:	10800044 	addi	r2,r2,1
10016ddc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10016de0:	00000d06 	br	10016e18 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10016de4:	e0bffc17 	ldw	r2,-16(fp)
10016de8:	10800217 	ldw	r2,8(r2)
10016dec:	e0fffd17 	ldw	r3,-12(fp)
10016df0:	180d883a 	mov	r6,r3
10016df4:	e17ffe17 	ldw	r5,-8(fp)
10016df8:	1009883a 	mov	r4,r2
10016dfc:	00170f00 	call	100170f0 <memcmp>
10016e00:	1000021e 	bne	r2,zero,10016e0c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10016e04:	e0bffc17 	ldw	r2,-16(fp)
10016e08:	00000706 	br	10016e28 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10016e0c:	e0bffc17 	ldw	r2,-16(fp)
10016e10:	10800017 	ldw	r2,0(r2)
10016e14:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10016e18:	e0fffc17 	ldw	r3,-16(fp)
10016e1c:	e0bfff17 	ldw	r2,-4(fp)
10016e20:	18bff01e 	bne	r3,r2,10016de4 <__alt_data_end+0xf8016de4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10016e24:	0005883a 	mov	r2,zero
}
10016e28:	e037883a 	mov	sp,fp
10016e2c:	dfc00117 	ldw	ra,4(sp)
10016e30:	df000017 	ldw	fp,0(sp)
10016e34:	dec00204 	addi	sp,sp,8
10016e38:	f800283a 	ret

10016e3c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10016e3c:	defffb04 	addi	sp,sp,-20
10016e40:	dfc00415 	stw	ra,16(sp)
10016e44:	df000315 	stw	fp,12(sp)
10016e48:	df000304 	addi	fp,sp,12
10016e4c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10016e50:	d0a04f17 	ldw	r2,-32452(gp)
10016e54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10016e58:	00003106 	br	10016f20 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10016e5c:	e0bffd17 	ldw	r2,-12(fp)
10016e60:	10800217 	ldw	r2,8(r2)
10016e64:	1009883a 	mov	r4,r2
10016e68:	00080100 	call	10008010 <strlen>
10016e6c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10016e70:	e0bffd17 	ldw	r2,-12(fp)
10016e74:	10c00217 	ldw	r3,8(r2)
10016e78:	e0bffe17 	ldw	r2,-8(fp)
10016e7c:	10bfffc4 	addi	r2,r2,-1
10016e80:	1885883a 	add	r2,r3,r2
10016e84:	10800003 	ldbu	r2,0(r2)
10016e88:	10803fcc 	andi	r2,r2,255
10016e8c:	1080201c 	xori	r2,r2,128
10016e90:	10bfe004 	addi	r2,r2,-128
10016e94:	10800bd8 	cmpnei	r2,r2,47
10016e98:	1000031e 	bne	r2,zero,10016ea8 <alt_find_file+0x6c>
    {
      len -= 1;
10016e9c:	e0bffe17 	ldw	r2,-8(fp)
10016ea0:	10bfffc4 	addi	r2,r2,-1
10016ea4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10016ea8:	e0bffe17 	ldw	r2,-8(fp)
10016eac:	e0ffff17 	ldw	r3,-4(fp)
10016eb0:	1885883a 	add	r2,r3,r2
10016eb4:	10800003 	ldbu	r2,0(r2)
10016eb8:	10803fcc 	andi	r2,r2,255
10016ebc:	1080201c 	xori	r2,r2,128
10016ec0:	10bfe004 	addi	r2,r2,-128
10016ec4:	10800be0 	cmpeqi	r2,r2,47
10016ec8:	1000081e 	bne	r2,zero,10016eec <alt_find_file+0xb0>
10016ecc:	e0bffe17 	ldw	r2,-8(fp)
10016ed0:	e0ffff17 	ldw	r3,-4(fp)
10016ed4:	1885883a 	add	r2,r3,r2
10016ed8:	10800003 	ldbu	r2,0(r2)
10016edc:	10803fcc 	andi	r2,r2,255
10016ee0:	1080201c 	xori	r2,r2,128
10016ee4:	10bfe004 	addi	r2,r2,-128
10016ee8:	10000a1e 	bne	r2,zero,10016f14 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10016eec:	e0bffd17 	ldw	r2,-12(fp)
10016ef0:	10800217 	ldw	r2,8(r2)
10016ef4:	e0fffe17 	ldw	r3,-8(fp)
10016ef8:	180d883a 	mov	r6,r3
10016efc:	e17fff17 	ldw	r5,-4(fp)
10016f00:	1009883a 	mov	r4,r2
10016f04:	00170f00 	call	100170f0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10016f08:	1000021e 	bne	r2,zero,10016f14 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10016f0c:	e0bffd17 	ldw	r2,-12(fp)
10016f10:	00000706 	br	10016f30 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10016f14:	e0bffd17 	ldw	r2,-12(fp)
10016f18:	10800017 	ldw	r2,0(r2)
10016f1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10016f20:	e0fffd17 	ldw	r3,-12(fp)
10016f24:	d0a04f04 	addi	r2,gp,-32452
10016f28:	18bfcc1e 	bne	r3,r2,10016e5c <__alt_data_end+0xf8016e5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10016f2c:	0005883a 	mov	r2,zero
}
10016f30:	e037883a 	mov	sp,fp
10016f34:	dfc00117 	ldw	ra,4(sp)
10016f38:	df000017 	ldw	fp,0(sp)
10016f3c:	dec00204 	addi	sp,sp,8
10016f40:	f800283a 	ret

10016f44 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10016f44:	defffa04 	addi	sp,sp,-24
10016f48:	dfc00515 	stw	ra,20(sp)
10016f4c:	df000415 	stw	fp,16(sp)
10016f50:	dc000315 	stw	r16,12(sp)
10016f54:	df000404 	addi	fp,sp,16
10016f58:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10016f5c:	00bffa04 	movi	r2,-24
10016f60:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10016f64:	e03ffc15 	stw	zero,-16(fp)
10016f68:	00001d06 	br	10016fe0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10016f6c:	040400b4 	movhi	r16,4098
10016f70:	8424d304 	addi	r16,r16,-27828
10016f74:	e0bffc17 	ldw	r2,-16(fp)
10016f78:	01400304 	movi	r5,12
10016f7c:	1009883a 	mov	r4,r2
10016f80:	0007d040 	call	10007d04 <__mulsi3>
10016f84:	8085883a 	add	r2,r16,r2
10016f88:	10800017 	ldw	r2,0(r2)
10016f8c:	1000111e 	bne	r2,zero,10016fd4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10016f90:	040400b4 	movhi	r16,4098
10016f94:	8424d304 	addi	r16,r16,-27828
10016f98:	e0bffc17 	ldw	r2,-16(fp)
10016f9c:	01400304 	movi	r5,12
10016fa0:	1009883a 	mov	r4,r2
10016fa4:	0007d040 	call	10007d04 <__mulsi3>
10016fa8:	8085883a 	add	r2,r16,r2
10016fac:	e0fffe17 	ldw	r3,-8(fp)
10016fb0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10016fb4:	d0e05317 	ldw	r3,-32436(gp)
10016fb8:	e0bffc17 	ldw	r2,-16(fp)
10016fbc:	1880020e 	bge	r3,r2,10016fc8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10016fc0:	e0bffc17 	ldw	r2,-16(fp)
10016fc4:	d0a05315 	stw	r2,-32436(gp)
      }
      rc = i;
10016fc8:	e0bffc17 	ldw	r2,-16(fp)
10016fcc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10016fd0:	00000606 	br	10016fec <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10016fd4:	e0bffc17 	ldw	r2,-16(fp)
10016fd8:	10800044 	addi	r2,r2,1
10016fdc:	e0bffc15 	stw	r2,-16(fp)
10016fe0:	e0bffc17 	ldw	r2,-16(fp)
10016fe4:	10800810 	cmplti	r2,r2,32
10016fe8:	103fe01e 	bne	r2,zero,10016f6c <__alt_data_end+0xf8016f6c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10016fec:	e0bffd17 	ldw	r2,-12(fp)
}
10016ff0:	e6ffff04 	addi	sp,fp,-4
10016ff4:	dfc00217 	ldw	ra,8(sp)
10016ff8:	df000117 	ldw	fp,4(sp)
10016ffc:	dc000017 	ldw	r16,0(sp)
10017000:	dec00304 	addi	sp,sp,12
10017004:	f800283a 	ret

10017008 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10017008:	defffe04 	addi	sp,sp,-8
1001700c:	df000115 	stw	fp,4(sp)
10017010:	df000104 	addi	fp,sp,4
10017014:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10017018:	e0bfff17 	ldw	r2,-4(fp)
1001701c:	10bffe84 	addi	r2,r2,-6
10017020:	10c00428 	cmpgeui	r3,r2,16
10017024:	18001a1e 	bne	r3,zero,10017090 <alt_exception_cause_generated_bad_addr+0x88>
10017028:	100690ba 	slli	r3,r2,2
1001702c:	00840074 	movhi	r2,4097
10017030:	109c1004 	addi	r2,r2,28736
10017034:	1885883a 	add	r2,r3,r2
10017038:	10800017 	ldw	r2,0(r2)
1001703c:	1000683a 	jmp	r2
10017040:	10017080 	call	11001708 <_gp+0xfdf1dc>
10017044:	10017080 	call	11001708 <_gp+0xfdf1dc>
10017048:	10017090 	cmplti	zero,r2,1474
1001704c:	10017090 	cmplti	zero,r2,1474
10017050:	10017090 	cmplti	zero,r2,1474
10017054:	10017080 	call	11001708 <_gp+0xfdf1dc>
10017058:	10017088 	cmpgei	zero,r2,1474
1001705c:	10017090 	cmplti	zero,r2,1474
10017060:	10017080 	call	11001708 <_gp+0xfdf1dc>
10017064:	10017080 	call	11001708 <_gp+0xfdf1dc>
10017068:	10017090 	cmplti	zero,r2,1474
1001706c:	10017080 	call	11001708 <_gp+0xfdf1dc>
10017070:	10017088 	cmpgei	zero,r2,1474
10017074:	10017090 	cmplti	zero,r2,1474
10017078:	10017090 	cmplti	zero,r2,1474
1001707c:	10017080 	call	11001708 <_gp+0xfdf1dc>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10017080:	00800044 	movi	r2,1
10017084:	00000306 	br	10017094 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10017088:	0005883a 	mov	r2,zero
1001708c:	00000106 	br	10017094 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10017090:	0005883a 	mov	r2,zero
  }
}
10017094:	e037883a 	mov	sp,fp
10017098:	df000017 	ldw	fp,0(sp)
1001709c:	dec00104 	addi	sp,sp,4
100170a0:	f800283a 	ret

100170a4 <atexit>:
100170a4:	200b883a 	mov	r5,r4
100170a8:	000f883a 	mov	r7,zero
100170ac:	000d883a 	mov	r6,zero
100170b0:	0009883a 	mov	r4,zero
100170b4:	001716c1 	jmpi	1001716c <__register_exitproc>

100170b8 <exit>:
100170b8:	defffe04 	addi	sp,sp,-8
100170bc:	000b883a 	mov	r5,zero
100170c0:	dc000015 	stw	r16,0(sp)
100170c4:	dfc00115 	stw	ra,4(sp)
100170c8:	2021883a 	mov	r16,r4
100170cc:	00172840 	call	10017284 <__call_exitprocs>
100170d0:	008400b4 	movhi	r2,4098
100170d4:	10a99404 	addi	r2,r2,-22960
100170d8:	11000017 	ldw	r4,0(r2)
100170dc:	20800f17 	ldw	r2,60(r4)
100170e0:	10000126 	beq	r2,zero,100170e8 <exit+0x30>
100170e4:	103ee83a 	callr	r2
100170e8:	8009883a 	mov	r4,r16
100170ec:	00174040 	call	10017404 <_exit>

100170f0 <memcmp>:
100170f0:	01c000c4 	movi	r7,3
100170f4:	3980192e 	bgeu	r7,r6,1001715c <memcmp+0x6c>
100170f8:	2144b03a 	or	r2,r4,r5
100170fc:	11c4703a 	and	r2,r2,r7
10017100:	10000f26 	beq	r2,zero,10017140 <memcmp+0x50>
10017104:	20800003 	ldbu	r2,0(r4)
10017108:	28c00003 	ldbu	r3,0(r5)
1001710c:	10c0151e 	bne	r2,r3,10017164 <memcmp+0x74>
10017110:	31bfff84 	addi	r6,r6,-2
10017114:	01ffffc4 	movi	r7,-1
10017118:	00000406 	br	1001712c <memcmp+0x3c>
1001711c:	20800003 	ldbu	r2,0(r4)
10017120:	28c00003 	ldbu	r3,0(r5)
10017124:	31bfffc4 	addi	r6,r6,-1
10017128:	10c00e1e 	bne	r2,r3,10017164 <memcmp+0x74>
1001712c:	21000044 	addi	r4,r4,1
10017130:	29400044 	addi	r5,r5,1
10017134:	31fff91e 	bne	r6,r7,1001711c <__alt_data_end+0xf801711c>
10017138:	0005883a 	mov	r2,zero
1001713c:	f800283a 	ret
10017140:	20c00017 	ldw	r3,0(r4)
10017144:	28800017 	ldw	r2,0(r5)
10017148:	18bfee1e 	bne	r3,r2,10017104 <__alt_data_end+0xf8017104>
1001714c:	31bfff04 	addi	r6,r6,-4
10017150:	21000104 	addi	r4,r4,4
10017154:	29400104 	addi	r5,r5,4
10017158:	39bff936 	bltu	r7,r6,10017140 <__alt_data_end+0xf8017140>
1001715c:	303fe91e 	bne	r6,zero,10017104 <__alt_data_end+0xf8017104>
10017160:	003ff506 	br	10017138 <__alt_data_end+0xf8017138>
10017164:	10c5c83a 	sub	r2,r2,r3
10017168:	f800283a 	ret

1001716c <__register_exitproc>:
1001716c:	defffa04 	addi	sp,sp,-24
10017170:	dc000315 	stw	r16,12(sp)
10017174:	040400b4 	movhi	r16,4098
10017178:	84299404 	addi	r16,r16,-22960
1001717c:	80c00017 	ldw	r3,0(r16)
10017180:	dc400415 	stw	r17,16(sp)
10017184:	dfc00515 	stw	ra,20(sp)
10017188:	18805217 	ldw	r2,328(r3)
1001718c:	2023883a 	mov	r17,r4
10017190:	10003726 	beq	r2,zero,10017270 <__register_exitproc+0x104>
10017194:	10c00117 	ldw	r3,4(r2)
10017198:	010007c4 	movi	r4,31
1001719c:	20c00e16 	blt	r4,r3,100171d8 <__register_exitproc+0x6c>
100171a0:	1a000044 	addi	r8,r3,1
100171a4:	8800221e 	bne	r17,zero,10017230 <__register_exitproc+0xc4>
100171a8:	18c00084 	addi	r3,r3,2
100171ac:	18c7883a 	add	r3,r3,r3
100171b0:	18c7883a 	add	r3,r3,r3
100171b4:	12000115 	stw	r8,4(r2)
100171b8:	10c7883a 	add	r3,r2,r3
100171bc:	19400015 	stw	r5,0(r3)
100171c0:	0005883a 	mov	r2,zero
100171c4:	dfc00517 	ldw	ra,20(sp)
100171c8:	dc400417 	ldw	r17,16(sp)
100171cc:	dc000317 	ldw	r16,12(sp)
100171d0:	dec00604 	addi	sp,sp,24
100171d4:	f800283a 	ret
100171d8:	00800034 	movhi	r2,0
100171dc:	10800004 	addi	r2,r2,0
100171e0:	10002626 	beq	r2,zero,1001727c <__register_exitproc+0x110>
100171e4:	01006404 	movi	r4,400
100171e8:	d9400015 	stw	r5,0(sp)
100171ec:	d9800115 	stw	r6,4(sp)
100171f0:	d9c00215 	stw	r7,8(sp)
100171f4:	00000000 	call	10000000 <__reset>
100171f8:	d9400017 	ldw	r5,0(sp)
100171fc:	d9800117 	ldw	r6,4(sp)
10017200:	d9c00217 	ldw	r7,8(sp)
10017204:	10001d26 	beq	r2,zero,1001727c <__register_exitproc+0x110>
10017208:	81000017 	ldw	r4,0(r16)
1001720c:	10000115 	stw	zero,4(r2)
10017210:	02000044 	movi	r8,1
10017214:	22405217 	ldw	r9,328(r4)
10017218:	0007883a 	mov	r3,zero
1001721c:	12400015 	stw	r9,0(r2)
10017220:	20805215 	stw	r2,328(r4)
10017224:	10006215 	stw	zero,392(r2)
10017228:	10006315 	stw	zero,396(r2)
1001722c:	883fde26 	beq	r17,zero,100171a8 <__alt_data_end+0xf80171a8>
10017230:	18c9883a 	add	r4,r3,r3
10017234:	2109883a 	add	r4,r4,r4
10017238:	1109883a 	add	r4,r2,r4
1001723c:	21802215 	stw	r6,136(r4)
10017240:	01800044 	movi	r6,1
10017244:	12406217 	ldw	r9,392(r2)
10017248:	30cc983a 	sll	r6,r6,r3
1001724c:	4992b03a 	or	r9,r9,r6
10017250:	12406215 	stw	r9,392(r2)
10017254:	21c04215 	stw	r7,264(r4)
10017258:	01000084 	movi	r4,2
1001725c:	893fd21e 	bne	r17,r4,100171a8 <__alt_data_end+0xf80171a8>
10017260:	11006317 	ldw	r4,396(r2)
10017264:	218cb03a 	or	r6,r4,r6
10017268:	11806315 	stw	r6,396(r2)
1001726c:	003fce06 	br	100171a8 <__alt_data_end+0xf80171a8>
10017270:	18805304 	addi	r2,r3,332
10017274:	18805215 	stw	r2,328(r3)
10017278:	003fc606 	br	10017194 <__alt_data_end+0xf8017194>
1001727c:	00bfffc4 	movi	r2,-1
10017280:	003fd006 	br	100171c4 <__alt_data_end+0xf80171c4>

10017284 <__call_exitprocs>:
10017284:	defff504 	addi	sp,sp,-44
10017288:	df000915 	stw	fp,36(sp)
1001728c:	dd400615 	stw	r21,24(sp)
10017290:	dc800315 	stw	r18,12(sp)
10017294:	dfc00a15 	stw	ra,40(sp)
10017298:	ddc00815 	stw	r23,32(sp)
1001729c:	dd800715 	stw	r22,28(sp)
100172a0:	dd000515 	stw	r20,20(sp)
100172a4:	dcc00415 	stw	r19,16(sp)
100172a8:	dc400215 	stw	r17,8(sp)
100172ac:	dc000115 	stw	r16,4(sp)
100172b0:	d9000015 	stw	r4,0(sp)
100172b4:	2839883a 	mov	fp,r5
100172b8:	04800044 	movi	r18,1
100172bc:	057fffc4 	movi	r21,-1
100172c0:	008400b4 	movhi	r2,4098
100172c4:	10a99404 	addi	r2,r2,-22960
100172c8:	12000017 	ldw	r8,0(r2)
100172cc:	45005217 	ldw	r20,328(r8)
100172d0:	44c05204 	addi	r19,r8,328
100172d4:	a0001c26 	beq	r20,zero,10017348 <__call_exitprocs+0xc4>
100172d8:	a0800117 	ldw	r2,4(r20)
100172dc:	15ffffc4 	addi	r23,r2,-1
100172e0:	b8000d16 	blt	r23,zero,10017318 <__call_exitprocs+0x94>
100172e4:	14000044 	addi	r16,r2,1
100172e8:	8421883a 	add	r16,r16,r16
100172ec:	8421883a 	add	r16,r16,r16
100172f0:	84402004 	addi	r17,r16,128
100172f4:	a463883a 	add	r17,r20,r17
100172f8:	a421883a 	add	r16,r20,r16
100172fc:	e0001e26 	beq	fp,zero,10017378 <__call_exitprocs+0xf4>
10017300:	80804017 	ldw	r2,256(r16)
10017304:	e0801c26 	beq	fp,r2,10017378 <__call_exitprocs+0xf4>
10017308:	bdffffc4 	addi	r23,r23,-1
1001730c:	843fff04 	addi	r16,r16,-4
10017310:	8c7fff04 	addi	r17,r17,-4
10017314:	bd7ff91e 	bne	r23,r21,100172fc <__alt_data_end+0xf80172fc>
10017318:	00800034 	movhi	r2,0
1001731c:	10800004 	addi	r2,r2,0
10017320:	10000926 	beq	r2,zero,10017348 <__call_exitprocs+0xc4>
10017324:	a0800117 	ldw	r2,4(r20)
10017328:	1000301e 	bne	r2,zero,100173ec <__call_exitprocs+0x168>
1001732c:	a0800017 	ldw	r2,0(r20)
10017330:	10003226 	beq	r2,zero,100173fc <__call_exitprocs+0x178>
10017334:	a009883a 	mov	r4,r20
10017338:	98800015 	stw	r2,0(r19)
1001733c:	00000000 	call	10000000 <__reset>
10017340:	9d000017 	ldw	r20,0(r19)
10017344:	a03fe41e 	bne	r20,zero,100172d8 <__alt_data_end+0xf80172d8>
10017348:	dfc00a17 	ldw	ra,40(sp)
1001734c:	df000917 	ldw	fp,36(sp)
10017350:	ddc00817 	ldw	r23,32(sp)
10017354:	dd800717 	ldw	r22,28(sp)
10017358:	dd400617 	ldw	r21,24(sp)
1001735c:	dd000517 	ldw	r20,20(sp)
10017360:	dcc00417 	ldw	r19,16(sp)
10017364:	dc800317 	ldw	r18,12(sp)
10017368:	dc400217 	ldw	r17,8(sp)
1001736c:	dc000117 	ldw	r16,4(sp)
10017370:	dec00b04 	addi	sp,sp,44
10017374:	f800283a 	ret
10017378:	a0800117 	ldw	r2,4(r20)
1001737c:	80c00017 	ldw	r3,0(r16)
10017380:	10bfffc4 	addi	r2,r2,-1
10017384:	15c01426 	beq	r2,r23,100173d8 <__call_exitprocs+0x154>
10017388:	80000015 	stw	zero,0(r16)
1001738c:	183fde26 	beq	r3,zero,10017308 <__alt_data_end+0xf8017308>
10017390:	95c8983a 	sll	r4,r18,r23
10017394:	a0806217 	ldw	r2,392(r20)
10017398:	a5800117 	ldw	r22,4(r20)
1001739c:	2084703a 	and	r2,r4,r2
100173a0:	10000b26 	beq	r2,zero,100173d0 <__call_exitprocs+0x14c>
100173a4:	a0806317 	ldw	r2,396(r20)
100173a8:	2088703a 	and	r4,r4,r2
100173ac:	20000c1e 	bne	r4,zero,100173e0 <__call_exitprocs+0x15c>
100173b0:	89400017 	ldw	r5,0(r17)
100173b4:	d9000017 	ldw	r4,0(sp)
100173b8:	183ee83a 	callr	r3
100173bc:	a0800117 	ldw	r2,4(r20)
100173c0:	15bfbf1e 	bne	r2,r22,100172c0 <__alt_data_end+0xf80172c0>
100173c4:	98800017 	ldw	r2,0(r19)
100173c8:	153fcf26 	beq	r2,r20,10017308 <__alt_data_end+0xf8017308>
100173cc:	003fbc06 	br	100172c0 <__alt_data_end+0xf80172c0>
100173d0:	183ee83a 	callr	r3
100173d4:	003ff906 	br	100173bc <__alt_data_end+0xf80173bc>
100173d8:	a5c00115 	stw	r23,4(r20)
100173dc:	003feb06 	br	1001738c <__alt_data_end+0xf801738c>
100173e0:	89000017 	ldw	r4,0(r17)
100173e4:	183ee83a 	callr	r3
100173e8:	003ff406 	br	100173bc <__alt_data_end+0xf80173bc>
100173ec:	a0800017 	ldw	r2,0(r20)
100173f0:	a027883a 	mov	r19,r20
100173f4:	1029883a 	mov	r20,r2
100173f8:	003fb606 	br	100172d4 <__alt_data_end+0xf80172d4>
100173fc:	0005883a 	mov	r2,zero
10017400:	003ffb06 	br	100173f0 <__alt_data_end+0xf80173f0>

10017404 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10017404:	defffd04 	addi	sp,sp,-12
10017408:	df000215 	stw	fp,8(sp)
1001740c:	df000204 	addi	fp,sp,8
10017410:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10017414:	0001883a 	nop
10017418:	e0bfff17 	ldw	r2,-4(fp)
1001741c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10017420:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10017424:	10000226 	beq	r2,zero,10017430 <_exit+0x2c>
    ALT_SIM_FAIL();
10017428:	002af070 	cmpltui	zero,zero,43969
1001742c:	00000106 	br	10017434 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10017430:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10017434:	003fff06 	br	10017434 <__alt_data_end+0xf8017434>
